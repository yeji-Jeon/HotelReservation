{
    "docs": [
        {
            "location": "/", 
            "text": "Guriddo jqGrid \n\n\nProject Documentation\n\n\n\n\nOverview\n\n\nGuriddo jqGrid is an Ajax-enabled JavaScript control that provides solutions for representing and manipulating tabular data on the web. Since the grid is a client-side solution loading data dynamically through Ajax callbacks, it can be integrated with any server-side technology, including PHP, ASP, Java Servlets, JSP, ColdFusion, and Perl.\n\n\nGuriddo jqGrid uses a jQuery Java Script Library and is written as plug-in for that package. For more information on jQuery, please refer to the \njQuery web site\n .\n\n\nFor styling, Guriddo jqGrid can be used with \nBootstrap\n CSS or \njQuery UI\n.\n\n\n\n\nNote\n\n\nThe grid doesn't depend on these Java Script libraries and it is not necessary to load them.\n\n\n\n\nGuriddo jqGrid's Home page can be \nfound here\n.\n\n\nWorking examples of Guriddo jqGrid, with explanations, can be \nfound here\n.\n\n\nThe last development version can be obtained from \nGitHub\n\n\nBackground\n\n\nGuriddo jqGrid was developed by Tony Tomov at Trirand Inc., a software development firm based in Sofia, Bulgaria. Trirand specializes in the development of web components, and embraces free and open standards like jQuery,  jQuery UI ThemeRoller, Bootstrap.\n\n\nThe first version of jqGrid was released August, 2007\n\n\nTony got the idea for jqGrid when he needed an easy way to represent database information in a project. The first requirement was speed and the second, independence from server-side technology and the database back end.\n\n\nTony developed jqGrid and made it available for free until December 2014. As of that date the product is commercial and have change its name to Guriddo jqGrid.\n\n\nIn addition to the Guriddo jqGrid, Trirand also develops server-side grid components for PHP (Guriddo jqGrid PHP and Guriddo Suito PHP). These components are not required for jqGrid to work, but they speed up the process of making complete grid solutions, and they save developers the effort of writing server-side code. For more information refer to the Guriddo jqGrid website\n\n\nFeatures\n\n\nBasic grid\n\n\n\n\nGuriddo jqGrid has consistently been developed with ease of use in mind. The user should feel at ease from installation to administration.\n\n\n\n\nCSS based themes. jqGrid is compatible with Bootstrap and jQuery  UI Theming. Developers can change the grid skin by defining their own using the UI CSS Framework.\n\n\nSpeed. The new rendering engine improves the loading speed in some cases up to 5-10 time faster than previous releases.\n\n\nPaging. This feature enables developer to display data page by page. Data will not be retrieved from the server until the end user comes to that page. Developers can control how many rows are displayed at a time.\n\n\nRe sizable Columns. Column width can be changed by the end user.\n\n\nSorting \n various data types. The end user can sort records by clicking on the header of a column. Developers can specify sorting for various types including string, number, boolean, link, select and percent.\n\n\nEvent handlers \n user API. Event handlers and various methods give you more flexibility without coding too much.\n\n\nAuto loading data when scrolling. This feature allows you to load data without paging and using only the vertical scrollbar.\n\n\nWorking with local data. jqGrid can work with local data defined as an array.\n\n\nSeamless integration with any server side solution such as ASP.NET, ASP.NET MVC, PHP, Perl and more.\n\n\nCross browser. Supports for most popular IE, FireFox, Safari, Opera  and Google Chrome.\n\n\nMulti language support (i18n). Currently jqGrid supports more than 30 languages.\n\n\nSupport for XML, JSON, JSONP and arrays as data sources. Another great feature is the possibility to define your own custom data type.\n\n\nSubGrids. Using a SubGrid is the easiest method for displaying data from child records.\n\n\nSubGrid as Grid. In this alternative to a subGrid, we use the subGrid functions of the main grid to create not a subGrid, but another grid, with all of the power and capacity of the main grid but appearing, as before, under the \u201cparent\u201d record with the same ability to reveal and hide it.\n\n\nFrozen columns. Dynamic creation.\n\n\nSave and load grid state\n\n\nAMD support\n\n\n\n\nBellow are some of the main features of Guriddo jqGrid\n\n\nFormatting\n\n\n\n\n\n\nFormatter\n\n\nFormatter supports advanced formatting of the contents of cells\n\n\nFormatter has predefined types like : integer, number, date, currency, links, check boxes and etc.\n\n\nThe developer can define you own custom formatter\n\n\nmulti-language configuration\n\n\n\n\n\n\nInline editing\n\n\n\n\nIn-line editing In place editing allow you in easy way to update the cell content in particular row.\n\n\n\n\nsupporting of text, text area, check box, select, image, button types\n\n\nclient side validation of the entered data\n\n\nclient side insert/update/delete\n\n\nflexible events\n\n\nmultirow posting\n\n\noptional include and support for datepickers, autocomplete, multiselect\n\n\n\n\n\n\nCell Editing\n\n\n\n\nCell editing supports editing individual cells.\n\n\n\n\nsupporting of text, text area, check box, select, image, button types\n\n\nclient side validation of the entered data\n\n\nkeyboard navigation with tab, shift tab, left, right, up and down keys\n\n\nflexible events\n\n\noptional include and support for datepickers, autocomplete, multiselect\n\n\n\n\n\n\nForm Editing\n\n\n\n\njqGrid supports creating a form, on the fly, to enter or edit grid data\n\n\n\n\nsupporting of text, text area, check box, select, image, button types\n\n\nclient side validation of the entered data\n\n\nkeyboard navigation up and down keys\n\n\nflexible events\n\n\nfull control of the form from creation to closing\n\n\nfile uploading\n\n\noptional include and support for datepickers, autocomplete, multiselect\n\n\n\n\n\n\nSearching and Filtering\n\n\n\n\nSearching The columns in the grid can be used as the basis for a search form to appear above, below, or in place of, the grid.\n\n\n\n\nsingle field searching\n\n\ntoolbar searching (placing the search fields below the headers) with many search operators\n\n\ncomplex form searching\n\n\nadvanced searching with criteria defined from user\n\n\nlocal search on all fields\n\n\n\n\n\n\nGrouping\n\n\n\n\njqGrid support grouping by data and header grouping\n\n\n\n\nmultiple level data grouping\n\n\nsupport of common operations like summery, count, avg\n\n\ncustom summaries support\n\n\neasy configuration multiple group header\n\n\ndynamic data and header grouping\n\n\ncustom criteria\n\n\n\n\n\n\nTree Grid\n\n\n\n\nTree Grid supports both the Nested Set model and the Adjacency model\n\n\n\n\nEasy configuration\n\n\nAuto loading tree nodes.\n\n\nRich client API for easy manipulation\n\n\nnested and adjacency model support\n\n\nsorting\n\n\nsearching\n\n\n\n\n\n\nPivot Grid\n\n\n\n\nPivot grid allows you to reorganize and summarize selected columns and rows of data in a spreadsheet or database table.\n\n\n\n\neasy configuration\n\n\ndifferent aggregate types - sum, count avg\n\n\ncustom aggregation\n\n\nunlimited level of grouping\n\n\n\n\n\n\nExport\n\n\n\n\nGuriddo jqGrid support native export to:\n\n\n\n\nExcel 2007\n\n\nCSV\n\n\nPDF\n\n\n\n\nGetting Started\n\n\nSystem requirements\n\n\n\n\nBefore you begin\n\n\nBefore you begin with Guriddo jqGrid plug-in you need to have a basic knowledge of JavaScript.\n\n\nYou will need to have a basic knowledge of jQuery. For more information about jQuery and basic lessons visit \njQuery site\n\n\nHaving this knowledge you are ready to begin to play with Guriddo jqGrid.\n\n\nMinimum Requirements\n\n\nIn order to use Guriddo jqGrid You'll need the following:\n\n\n\n\nAny modern web browser: Mozilla Firefox, Safari, Google Chrome, Opera, Microsoft Internet Explorer\n\n\njQuery library\n version 1.7 or later:\n\n\nYour choice of a CSS freamework  \nBootstrap\n  or \njQuery UI theme\n\n\nThe Guriddo \njqGrid plugin\n\n\n\n\nIf you want to draw grids based on local (static) data, you'll need to assemble an array, or an xml data file, or a JSON file with data.\n\n\nServer Requirements\n\n\n(optional)\n\n\nThe primary purpose of Guriddo jqGrid is to manipulate and represent dynamic data over the web. For this you will also need:\n\n\n\n\nA web server (e.g., IIS, Apache, Tomcat),\n\n\nA database backend (e.g., MySQL, PostgreSQL, Oracle, MSSQL), and\n\n\nA server-side scripting language (e.g., PHP, ASP, etc.)\n\n\n\n\nInstallation\n\n\n\n\nDownloading\n\n\nOnce you have a basic understanding of what Java Script and jQuery are and what they do, you're ready to try Guriddo jqGrid!\n\n\n\n\nDownload the Guriddo jqGrid package from \nGuriddo Site\n\n\nOptional download the latest jQuery library form \njQuery site\n\n\nOptional download the latest \nBootstrap\n package in case you want to use the Bootstrap CSS framework.\n\n\nOptional download \njQuery UI theme\n in case you want to use jQuery UI CSS framework and build your own custom theme.\n\n\n\n\nThe Guriddo jqGrid package contain all the needed packages and libraries. The optional downloading from 2. to 4. are just in case that there are new versions of the mentioned libraries.\n\n\nYou can install Guriddo jqGrid sources using:\n\n\nnpm\n\n\nnpm install jqGrid --save\n\n\nbower\n\n\nbower install jqGrid --save\n\n\nThis will install the jqGrid files in the current directory.\n\n\nInstallation of Guriddo jqGrid is just a matter of copying the files and folders to your web server or development directory. Once you've downloaded the needed packages, you can continue with the installation.\n\n\nIf you're a normal user of Guriddo jqGrid, you should complete the \nBasic Installation below\n, which installs all the files needed to use Guriddo jqGrid.\n\n\nIf you want access to the jqGrid source code to find bugs and make improvements, complete the \nBasic Installation\n first, and then perform the additional steps in the \nDevelopment Installation\n section below.\n\n\nBasic installation\n\n\nStep 1: Unpack the Guriddo jqGrid zip files to a temporary folder or use open the jqGrid folder when installed from \nnpm\n or \nbower\n\nStep 2: Create a directory on your web server to hold the jqGrid files and folders. For example:\n\n\nhttp://myserver/myproject/\n\n\nwhere \nmyproject\n is the name that you have created and \nmyserver\n is the name of your web server.\n\n\nStep 3: Open the temporary directory locate the js and css folders mark them and copy the entire folders from temporary directory to myproject directory.\n\n\nAfter these steps, you should have the following file \n folder structure:\n\n\n/myproject/css\n  /images/\n       ...\n  /trirand/\n  /addons\n    ui-multiselect.css\n   ui-jqgrid.css\n   ui-jqgrid-bootstrap.css\n   ui-jqgrid-bootstrap-ui.css\n   jquery-ui.css\n   jquery-ui-timepicker-addon.css\n/myproject/js/\n  /trirand\n    /i18n\n      grid.locale-bg.js\n      grid.locale-en.js\n                     \u2026.\n    /src\n      jquery.jqGrid.js\n   jquery.jqGrid.min.js\n   jquery.min.js\n   jquery-ui.min.js\n\n\n\n\n\nNote that the folders contain more files, than the specified. We mark here the needed files for working with jqGrid.\n\n\nUsing jQuery UI CSS Framework.\n\n\nUsing your favorite editor, create a file named myfirstgrid.html and place the following code:\n\n\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n\nmeta\n \ncontent\n=\ntext/html; charset=utf-8\n \n/\n\n\ntitle\nMy First Grid\n/\ntitle\n\n\nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\ncss/jquery-ui.css\n \n/\n\n\nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\ncss/trirand/ui.jqgrid.css\n \n/\n\n\nscript\n \nsrc\n=\njs/jquery.min.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/trirand/i18n/grid.locale-en.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/trirand/jquery.jqGrid.min.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\n/\nhead\n\n\nbody\n\n...\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\nSave this file in \nmyproject\n directory.\n\n\nCode Explanation: In the code above, the first stylesheet loads the CSS code for the jQuery UI theme selected. The second stylesheet loads the CSS settings for jqGrid itself.\n\n\nBelow the stylesheets are three javascript files: the first one is JQuery, the second is the jqGrid language localization file, (English, -en in this example), and finally the actual minimized jqGrid file.\n\n\n\n\nNote\n\n\nThere is one additional recommended adjustment: Since the jQuery UI Themes have different font sizes it is a good idea to reduce the font size to make everything uniform. This can be done by adding a style tag just below the stylesheet file references, as shown below.\n\n\n\n\nYour final code will look like this:\n\n\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n\nmeta\n \nhttp-equiv\n=\nContent-Type\n \ncontent\n=\ntext/html; charset=utf-8\n \n/\n\n\nmeta\n \nhttp-equiv\n=\nX-UA-Compatible\n \ncontent\n=\nIE=edge\n \n/\n\n\ntitle\nMy First Grid\n/\ntitle\n\n\nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\ncss/jquery-ui.css\n \n/\n\n\nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\ncss/trirand/ui.jqgrid.css\n \n/\n\n\nstyle\n\n\nhtml\n,\n \nbody\n \n{\n\n   \nmargin\n:\n \n0\n;\n\n   \npadding\n:\n \n0\n;\n\n   \nfont-size\n:\n \n75\n%\n;\n\n\n}\n\n\n/\nstyle\n\n\nscript\n \nsrc\n=\njs/jquery.min.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/trirand/i18n/grid.locale-en.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/trirand/jquery.jqGrid.min.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\n/\nhead\n\n\nbody\n\n...\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\nUsing Bootstrap v3 CSS Framework.\n\n\nAs of version 5.0 we support native Bootstrap v3 styling. To use this styling it is needed to include the appropriate files. Using your favorite editor, create a file named \njqgridbootstrap.html\n and place the following code:\n\n\n!DOCTYPE html\n\n\nhtml\n \nlang\n=\nen\n\n\nhead\n\n   \nmeta\n \ncharset\n=\nutf-8\n \n/\n\n   \n!-- A link to a Bootstrap css --\n\n   \nlink\n \nrel\n=\nstylesheet\n \nhref\n=\nhttps://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css\n\n   \n!-- The link to the CSS that the grid needs --\n\n   \nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\n../../../css/trirand/ui.jqgrid-bootstrap.css\n \n/\n\n   \n!-- The jQuery library is a prerequisite for all Guriddo products --\n\n   \nscript\n \ntype\n=\ntext/ecmascript\n \nsrc\n=\njs/jquery.min.js\n/\nscript\n\n   \n!-- We support more than 40 localizations --\n\n   \nscript\n \ntype\n=\ntext/ecmascript\n \nsrc\n=\njs/trirand/i18n/grid.locale-en.js\n/\nscript\n\n   \n!-- This is the Javascript file of jqGrid --\n  \n   \nscript\n \ntype\n=\ntext/ecmascript\n \nsrc\n=\njs/trirand/jquery.jqGrid.min.js\n/\nscript\n\n   \nscript\n\n       \n$\n.\njgrid\n.\ndefaults\n.\nstyleUI\n \n=\n \nBootstrap\n;\n\n   \n/\nscript\n\n   \nscript\n \nsrc\n=\nhttps://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js\n/\nscript\n\n   \ntitle\njqGrid with Bootstrap\n/\ntitle\n\n\n/\nhead\n\n\nbody\n\n...\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\nSave this file in \nmyproject\n directory.\n\n\nCode Explanation: In the code above, the first stylesheet loads the CSS code for Bootstrap - note that we load it from CDN. The second stylesheet loads the CSS settings for jqGrid itself for use with Bootstrap.\n\n\nBelow the stylesheets are three javascript files: the first one is JQuery, the second is the jqGrid language localization file, (English, -en in this example), and finally the actual minimized jqGrid file.\n\n\nTo use jqGrid with Bootstrap styling (the jQuery UI is default) it is necessary to change \nstyleUI\n parameter. Basically this can be done two diffrent ways.\n\n\n\n\nUsing the \n$.jgrid.defaults\n object with following code:  \n\n\n\n\nscript\n\n    \n$\n.\njgrid\n.\ndefaults\n.\nstyleUI\n \n=\n \nBootstrap\n;\n\n\n/\nscript\n\n\n\n\n\n\nThis way all the jqGrid grids in the page will use Bootstrap theme.\n\n\n\n\nIndividually using the Guriddo jqGrid option \nstyleUI\n :\n\n\n\n\n...\n\n  \n$\n(\n#grid\n).\njqGrid\n({\n\n   \n...\n\n   \nstyleUI\n \n:\n \nBootstrap\n\n  \n...\n\n  \n});\n\n\n\n\n\n\nThat's all! You are ready to use jqGrid with Bootstrap.\n\n\nUsing Bootstrap v4 CSS Framework.\n\n\nAs of version 5.3 we support native Bootstrap v4 styling. To use this styling it is needed to include the appropriate files from the jqGrid package and to download additionally the iconic set. Currently we support the following icon sets: \nGitHub Octicons\n, \nIconic\n  and \nfree Font Awesome\n.\n\n\nTo setup Bootstrap 4 it is needed to load jqgrid css bootstrap 4 file, the appropriate iconic CSS file downloaded from the links above and the the bootstrap css file. Below is a example using the Octicon icon set. Using your favorite editor, create a file named \njqgridbootstrap4.html\n and place the following code:\n\n\n!DOCTYPE html\n\n\nhtml\n \nlang\n=\nen\n\n\nhead\n\n   \nmeta\n \ncharset\n=\nutf-8\n \n/\n\n   \n!-- A link to a Bootstrap css --\n\n   \nlink\n \nrel\n=\nstylesheet\n \nhref\n=\nhttps://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\n     \n   \n!-- A link to a Octicons css --\n\n   \nlink\n \nrel\n=\nstylesheet\n \nhref\n=\nhttps://cdnjs.cloudflare.com/ajax/libs/octicons/4.4.0/font/octicons.css\n\n   \n!-- A link to a jqGrid Bootstrap 4 css --\n\n   \nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\n../../../css/trirand/ui.jqgrid-bootstrap4.css\n \n/\n\n\n   \n!-- The jQuery library is a prerequisite for all jqSuite products --\n\n   \nscript\n \ntype\n=\ntext/ecmascript\n \nsrc\n=\n../../../js/jquery.min.js\n/\nscript\n\n\n   \n!-- This is the localization file of the grid controlling messages, labels, etc.\n\n\n   \n!-- We support more than 40 localizations --\n\n   \nscript\n \ntype\n=\ntext/ecmascript\n \nsrc\n=\n../../../js/trirand/i18n/grid.locale-en.js\n/\nscript\n\n   \n!-- This is the Javascript file of jqGrid --\n   \n   \nscript\n \ntype\n=\ntext/ecmascript\n \nsrc\n=\n../../../js/trirand/jquery.jqGrid.min.js\n/\nscript\n\n   \n!-- Optional Bootstrap JavaScript files --\n\n   \nscript\n \nsrc\n=\nhttps://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\n \nintegrity\n=\nsha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\n \ncrossorigin\n=\nanonymous\n/\nscript\n\n   \nscript\n \nsrc\n=\nhttps://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\n/\nscript\n\n\n\n\nscript\n\n\n$\n.\njgrid\n.\ndefaults\n.\nstyleUI\n \n=\n \nBootstrap4\n;\n\n\n$\n.\njgrid\n.\ndefaults\n.\niconSet\n \n=\n \nOcticons\n;\n\n\n\n//$.jgrid.defaults.iconSet = \nIconic\n;      \n\n\n//$.jgrid.defaults.iconSet = \nfontAwesome\n;\n\n\n/\nscript\n\n\n/\nhead\n\n\nbody\n\n...\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\nSave this file in \nmyproject\n directory.\n\n\nCode Explanation: In the code above, the first stylesheet loads the CSS code for Bootstrap v4 - note that we load it from CDN.\n\nThe second stylesheet load the iconic icon sets.\n\nThe third stylesheet loads the CSS settings for jqGrid itself for use with Bootstrap v4.\n\n\nBelow the stylesheets are three javascript files: the first one is JQuery, the second is the jqGrid language localization file, (English, -en in this example), and finally the actual minimized jqGrid file.\n\n\nTo use jqGrid with Bootstrap 4 styling (the jQuery UI is default) it is necessary to change \nstyleUI\n parameter and the \niconSet\n parameter . Basically this can be done two different ways.\n\n\n\n\nUsing the \n$.jgrid.defaults\n object with following code:  \n\n\n\n\nscript\n\n    \n$\n.\njgrid\n.\ndefaults\n.\nstyleUI\n \n=\n \nBootstrap4\n;\n\n    \n$\n.\njgrid\n.\ndefaults\n.\niconSet\n \n=\n \nOcticons\n;\n\n\n/\nscript\n\n\n\n\n\n\nThis way all the jqGrid grids in the page will use Bootstrap theme.\n\n\n\n\nIndividually using the Guriddo jqGrid option \nstyleUI\n :\n\n\n\n\n...\n\n  \n$\n(\n#grid\n).\njqGrid\n({\n\n   \n...\n\n   \nstyleUI\n \n:\n \nBootstrap4\n,\n\n   \niconSet\n \n:\n \nOcticons\n;\n\n  \n...\n\n  \n});\n\n\n\n\n\n\nThat's all! You are ready to use jqGrid with Bootstrap.\n\n\nNow you are ready to learn \nhow it works\n.\n\n\nDevelopment Installation\n\n\nIf you choose the development installation, your version of Guriddo jqGrid will be using uncompressed source code rather than minimized production code, for easier reading.\n\n\nThis type of installation is easy. It require only to change the file name from jquery.jqGrid.min.js to jquery.jqGrid.js. Actually the jquery.jqGrid.js is one file which contain all the files in one not compressed file. The location of the file is in the \njs/trirand/src\n folder. In this case you will need to replace\n\n\n...\n\nscript\n \ntype\n=\ntext/ecmascript\n \nsrc\n=\njs/trirand/jquery.jqGrid.min.js\n/\nscript\n\n...\n\n\n\n\n\nwith\n\n\n...\n\nscript\n \ntype\n=\ntext/ecmascript\n \nsrc\n=\njs/trirand/src/jquery.jqGrid.js\n/\nscript\n\n...\n\n\n\n\n\nin the head section\n\n\nHow it Works?\n\n\n\n\nUnderstanding how jqGrid works, will help you get up to speed with the full capabilities of the plugin. The first thing to understand is that there are two aspects to working with tabular data:\n\n\n\n\nClient-side representation, and\n\n\nServer-side manipulation\n\n\n\n\nGuriddo jqGrid is a component that presents tabular data for easy manipulation in a web browser grid. It uses \nAjax\n calls to retrieve information and construct the representation (tabular data) using the jqGrid Column Model \n(colModel)\n.\n\n\nFurthermore, jqGrid helps you send any data changes or additions to the database on the server-side, a process known as server-side manipulation, or SSM.\n\n\nSSM means the server handles the actual changes to the database, and not the user's browser. SSM isn\u2019t something that is visible within a web page. Server side data changes are done using Python, PHP, ASP.NET or any other common programming language.\n\n\nA jqGrid is comprised of the following four parts:\n\n\n\n\nCaption layer\n\n\nHeader layer\n\n\nBody layer\n\n\nNavigation layer\n\n\n\n\n\n\nCaption layer\n contains common information for the represented data.\n\n\nHeader layer\n contains information about the columns: labels, width, etc.\n\n\nBody layer\n is the data requested from the server and displayed according to the settings in the column model.\n\n\nNavigation layer\n contains additional information from the requested data and actions for requesting little pieces of information \u2013 in the literature called paging. Note that the navigation layer can be placed not only at bottom of the grid, but anywhere on the page. The Navigation layer is also the place for adding buttons or links for editing, deleting, adding to and searching your grid data.\n\n\nThe minimum for the representing the data are Header layer and Body layer.\n\n\nTo allow freedom and flexibility, and often a better impression, jqGrid relies on CSS (Cascading Style Sheets) to govern its appearance.\n\n\nIn more sophisticated case the grid can have more elements as shown below:\n\n\n\n\nThe grid can not only have additional layers, but also allow more than the rows to contain the main data. jqGrid support treegrid, subgrid and grouping of data.\n\n\nIf you choose, the grid can look like a table having some advance features like sorting, resizing of columns, reordering of columns with respect of drag\ndrop and so on\n\n\nQuick Start\n\n\nAs you may have seen, there is a little bit of tweaking necessary in-order to customize jqGrid and get it set-up the way you like. The good news is, you can use that folder as a template and every time you want to make a new project with jqGrid you can just make a copy of that folder.\n\n\nLet\u2019s begin by creating the simplest grid possible; open up the myfirstgrid.html file from the newly created \nbasic installation\n, and modify the body section to look like this:\n\n\nbody\n\n       \ntable\n \nid\n=\ngrid\n/\ntable\n\n\nscript\n\n       \nvar\n \ndataArray\n \n=\n \n[\n\n         \n{\nname\n:\n \nBob\n,\n \nphone\n:\n \n232-532-6268\n},\n\n         \n{\nname\n:\n \nJeff\n,\n \nphone\n:\n \n365-267-8325\n}\n\n       \n];\n\n\n       \n$\n(\n#grid\n).\njqGrid\n({\n\n         \ndatatype\n:\n \nlocal\n,\n\n         \ndata\n:\n \ndataArray\n,\n\n         \ncolModel\n:\n \n[\n\n            \n{\nname\n:\n \nname\n,\n \nlabel\n \n:\n \nName\n},\n\n            \n{\nname\n:\n \nphone\n,\n \nlabel\n \n:\n \nPhone Number\n}\n\n          \n]\n\n      \n});\n\n\n/\nscript\n\n\n/\nbody\n\n\n\n\n\n\nThe first element in the body tags is a standard table element; this is what will be converted into our grid, and it's literally all the HTML needed to make one.\n\n\nThe first 4 (four) lines are just defining some data, I didn't want to get into AJAX or opening other files, so we decided to just create a simple JavaScript array with two entries. The next line is where the magic happens, this single command is being used to create and populate a grid using the provided information.\n\n\nWe select the table element with jQuery and call the jqGrid function passing it all the properties needed to make a grid. The first two options set the data along with its type, in our case the data is the array we made and the type is local which is in contrast to some of the other data types which use AJAX to retrieve remote data.\n\n\nThe last property is the column models, which basically provide the interface between the data and the grid.\n\n\nThe way this works is, we start by specifying the column labels, so jqGrid knows we want two columns, one named Name and the other named Phone Number, but it still has know idea how to populate the rows using the info from data.\n\n\nNow there are tons of options for colModel, which we will get to later, numerous settings for customizing and manipulating the data for the cell grids. But for this simple example we are just specifying the name and  label properties , which tells jqGrid that this column's values (name, phone) are held in the data array under the given key.\n\n\nNow open myfirstgrid.html up in your browser and you should see something like this:\n\n\n\n\nNot particularly pretty, but you can see that with just a few short lines, we have created a grid, and populated it with sortable data.\n\n\nBut we can do better, first off we are only using two of the four standard layers we talked about, we are using the header layer and the body layer. Let's add a caption layer to provide little context, and let\u2019s adjust the size of the grid to fit our data.\n\n\nSo modify the call to jqGrid with the following:\n\n\nscript\n\n       \nvar\n \ndataArray\n \n=\n \n[\n\n         \n{\nname\n:\n \nBob\n,\n \nphone\n:\n \n232-532-6268\n},\n\n         \n{\nname\n:\n \nJeff\n,\n \nphone\n:\n \n365-267-8325\n}\n\n       \n];\n\n\n       \n$\n(\n#grid\n).\njqGrid\n({\n\n         \ndatatype\n:\n \nlocal\n,\n\n         \ndata\n:\n \ndataArray\n,\n\n         \ncolModel\n:\n \n[\n\n            \n{\nname\n:\n \nname\n,\n \nlabel\n \n:\n \nName\n},\n\n            \n{\nname\n:\n \nphone\n,\n \nlabel\n \n:\n \nPhone Number\n}\n\n          \n],\n\n          \ncaption\n \n:\n \nUsers Grid\n,\n\n          \nheight\n:\n \nauto\n\n      \n});\n\n\n/script\n\n\n\n\n\n\nAnd refresh your browser; your grid should now look like the following:\n\n\n\n\nThat's looking much better. Now, you may be wondering; we only set the height property to auto, so how come the width seems to have snapped to the content? And this is due to the fact that the right margin we saw earlier is actually a column for the scrollbar. By default jqGrid sets your grid's height to 150 pixels, this means, regardless of whether you have only one row, or a thousand rows, the height will remain the same, so that there is gap to hold the scrollbar in an event when you have more rows than that would fit in the given space. When we set the height to auto, it will stretch the grid vertically to contain all the items, making the scrollbar irrelevant and therefore it knows not to place it.\n\n\nNow this is a pretty good quick-start example, but to finish things off, let's take a look at the a navigation layer, just so we can say we did.\n\n\nFor this next part though we are going to need more data, we can't really show pagination with just two entries, luckily there is a site called \nhttp://www.json-generator.com/\n created by Vazha Omanashvili, for doing exactly this.\n\n\nThe way it works is, you specify the format and number of rows you want and it generates it with random data. We are going to keep the format we have been using, of name and phone number, so in the box on the left enter the following code:\n\n\n[\n\n \n{{repeat(50)}}\n,\n\n \n{\n\n   \nname\n \n:\n \n{{firstName()}} {{surname()}}\n,\n\n   \nphone\n:\n \n{{phone()}}\n\n \n}\n\n\n]\n\n\n\n\n\n\nAs you can see, the actual rows are under a property named result so we will need to change the data key in the call to jqGrid from just \u2018dataArray\u2019 to \u2018dataArray.result\u2019. Refreshing the page now you will see the first 20 rows being displayed (that is the default limit). But how can we get to the rest? Well jqGrid provides a special navigation layer named a pager, which contains a pagination control. To display it we will need to create an HTML element for it. So, right underneath the table element add a div like:\n\n\ntable\n \nid\n=\ngrid\n/\ntable\n\n\ndiv\n \nid\n=\npager\n/\ndiv\n\n\n\n\n\n\nand then we just need to add a key to the jqGrid method for the pager and row limit:\n\n\nscript\n\n       \nvar\n \ndataArray\n \n=\n \n[\n\n         \n{\nname\n:\n \nBob\n,\n \nphone\n:\n \n232-532-6268\n},\n\n         \n{\nname\n:\n \nJeff\n,\n \nphone\n:\n \n365-267-8325\n}\n\n       \n];\n\n\n       \n$\n(\n#grid\n).\njqGrid\n({\n\n         \ndatatype\n:\n \nlocal\n,\n\n         \ndata\n:\n \ndataArray\n,\n\n         \ncolModel\n:\n \n[\n\n            \n{\nname\n:\n \nname\n,\n \nlabel\n \n:\n \nName\n},\n\n            \n{\nname\n:\n \nphone\n,\n \nlabel\n \n:\n \nPhone Number\n}\n\n          \n],\n\n          \ncaption\n \n:\n \nUsers Grid\n,\n\n          \nheight\n:\n \nauto\n,\n\n          \nrowNum\n:\n \n5\n,\n\n          \npager\n:\n \n#pager\n\n      \n});\n\n\n/script\n\n\n\n\n\n\nAnd that's all there is to it, you can adjust the rowNum property to display more or less entries at once and the pages will automatically be calculated for you.", 
            "title": "Home"
        }, 
        {
            "location": "/#guriddo-jqgrid", 
            "text": "Project Documentation", 
            "title": "Guriddo jqGrid "
        }, 
        {
            "location": "/#overview", 
            "text": "Guriddo jqGrid is an Ajax-enabled JavaScript control that provides solutions for representing and manipulating tabular data on the web. Since the grid is a client-side solution loading data dynamically through Ajax callbacks, it can be integrated with any server-side technology, including PHP, ASP, Java Servlets, JSP, ColdFusion, and Perl.  Guriddo jqGrid uses a jQuery Java Script Library and is written as plug-in for that package. For more information on jQuery, please refer to the  jQuery web site  .  For styling, Guriddo jqGrid can be used with  Bootstrap  CSS or  jQuery UI .   Note  The grid doesn't depend on these Java Script libraries and it is not necessary to load them.   Guriddo jqGrid's Home page can be  found here .  Working examples of Guriddo jqGrid, with explanations, can be  found here .  The last development version can be obtained from  GitHub", 
            "title": "Overview"
        }, 
        {
            "location": "/#background", 
            "text": "Guriddo jqGrid was developed by Tony Tomov at Trirand Inc., a software development firm based in Sofia, Bulgaria. Trirand specializes in the development of web components, and embraces free and open standards like jQuery,  jQuery UI ThemeRoller, Bootstrap.  The first version of jqGrid was released August, 2007  Tony got the idea for jqGrid when he needed an easy way to represent database information in a project. The first requirement was speed and the second, independence from server-side technology and the database back end.  Tony developed jqGrid and made it available for free until December 2014. As of that date the product is commercial and have change its name to Guriddo jqGrid.  In addition to the Guriddo jqGrid, Trirand also develops server-side grid components for PHP (Guriddo jqGrid PHP and Guriddo Suito PHP). These components are not required for jqGrid to work, but they speed up the process of making complete grid solutions, and they save developers the effort of writing server-side code. For more information refer to the Guriddo jqGrid website", 
            "title": "Background"
        }, 
        {
            "location": "/#features", 
            "text": "", 
            "title": "Features"
        }, 
        {
            "location": "/#basic-grid", 
            "text": "Guriddo jqGrid has consistently been developed with ease of use in mind. The user should feel at ease from installation to administration.   CSS based themes. jqGrid is compatible with Bootstrap and jQuery  UI Theming. Developers can change the grid skin by defining their own using the UI CSS Framework.  Speed. The new rendering engine improves the loading speed in some cases up to 5-10 time faster than previous releases.  Paging. This feature enables developer to display data page by page. Data will not be retrieved from the server until the end user comes to that page. Developers can control how many rows are displayed at a time.  Re sizable Columns. Column width can be changed by the end user.  Sorting   various data types. The end user can sort records by clicking on the header of a column. Developers can specify sorting for various types including string, number, boolean, link, select and percent.  Event handlers   user API. Event handlers and various methods give you more flexibility without coding too much.  Auto loading data when scrolling. This feature allows you to load data without paging and using only the vertical scrollbar.  Working with local data. jqGrid can work with local data defined as an array.  Seamless integration with any server side solution such as ASP.NET, ASP.NET MVC, PHP, Perl and more.  Cross browser. Supports for most popular IE, FireFox, Safari, Opera  and Google Chrome.  Multi language support (i18n). Currently jqGrid supports more than 30 languages.  Support for XML, JSON, JSONP and arrays as data sources. Another great feature is the possibility to define your own custom data type.  SubGrids. Using a SubGrid is the easiest method for displaying data from child records.  SubGrid as Grid. In this alternative to a subGrid, we use the subGrid functions of the main grid to create not a subGrid, but another grid, with all of the power and capacity of the main grid but appearing, as before, under the \u201cparent\u201d record with the same ability to reveal and hide it.  Frozen columns. Dynamic creation.  Save and load grid state  AMD support   Bellow are some of the main features of Guriddo jqGrid", 
            "title": "Basic grid"
        }, 
        {
            "location": "/#formatting", 
            "text": "Formatter  Formatter supports advanced formatting of the contents of cells  Formatter has predefined types like : integer, number, date, currency, links, check boxes and etc.  The developer can define you own custom formatter  multi-language configuration", 
            "title": "Formatting"
        }, 
        {
            "location": "/#inline-editing", 
            "text": "In-line editing In place editing allow you in easy way to update the cell content in particular row.   supporting of text, text area, check box, select, image, button types  client side validation of the entered data  client side insert/update/delete  flexible events  multirow posting  optional include and support for datepickers, autocomplete, multiselect", 
            "title": "Inline editing"
        }, 
        {
            "location": "/#cell-editing", 
            "text": "Cell editing supports editing individual cells.   supporting of text, text area, check box, select, image, button types  client side validation of the entered data  keyboard navigation with tab, shift tab, left, right, up and down keys  flexible events  optional include and support for datepickers, autocomplete, multiselect", 
            "title": "Cell Editing"
        }, 
        {
            "location": "/#form-editing", 
            "text": "jqGrid supports creating a form, on the fly, to enter or edit grid data   supporting of text, text area, check box, select, image, button types  client side validation of the entered data  keyboard navigation up and down keys  flexible events  full control of the form from creation to closing  file uploading  optional include and support for datepickers, autocomplete, multiselect", 
            "title": "Form Editing"
        }, 
        {
            "location": "/#searching-and-filtering", 
            "text": "Searching The columns in the grid can be used as the basis for a search form to appear above, below, or in place of, the grid.   single field searching  toolbar searching (placing the search fields below the headers) with many search operators  complex form searching  advanced searching with criteria defined from user  local search on all fields", 
            "title": "Searching and Filtering"
        }, 
        {
            "location": "/#grouping", 
            "text": "jqGrid support grouping by data and header grouping   multiple level data grouping  support of common operations like summery, count, avg  custom summaries support  easy configuration multiple group header  dynamic data and header grouping  custom criteria", 
            "title": "Grouping"
        }, 
        {
            "location": "/#tree-grid", 
            "text": "Tree Grid supports both the Nested Set model and the Adjacency model   Easy configuration  Auto loading tree nodes.  Rich client API for easy manipulation  nested and adjacency model support  sorting  searching", 
            "title": "Tree Grid"
        }, 
        {
            "location": "/#pivot-grid", 
            "text": "Pivot grid allows you to reorganize and summarize selected columns and rows of data in a spreadsheet or database table.   easy configuration  different aggregate types - sum, count avg  custom aggregation  unlimited level of grouping", 
            "title": "Pivot Grid"
        }, 
        {
            "location": "/#export", 
            "text": "Guriddo jqGrid support native export to:   Excel 2007  CSV  PDF", 
            "title": "Export"
        }, 
        {
            "location": "/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#system-requirements", 
            "text": "", 
            "title": "System requirements"
        }, 
        {
            "location": "/#before-you-begin", 
            "text": "Before you begin with Guriddo jqGrid plug-in you need to have a basic knowledge of JavaScript.  You will need to have a basic knowledge of jQuery. For more information about jQuery and basic lessons visit  jQuery site  Having this knowledge you are ready to begin to play with Guriddo jqGrid.", 
            "title": "Before you begin"
        }, 
        {
            "location": "/#minimum-requirements", 
            "text": "In order to use Guriddo jqGrid You'll need the following:   Any modern web browser: Mozilla Firefox, Safari, Google Chrome, Opera, Microsoft Internet Explorer  jQuery library  version 1.7 or later:  Your choice of a CSS freamework   Bootstrap   or  jQuery UI theme  The Guriddo  jqGrid plugin   If you want to draw grids based on local (static) data, you'll need to assemble an array, or an xml data file, or a JSON file with data.", 
            "title": "Minimum Requirements"
        }, 
        {
            "location": "/#server-requirements", 
            "text": "(optional)  The primary purpose of Guriddo jqGrid is to manipulate and represent dynamic data over the web. For this you will also need:   A web server (e.g., IIS, Apache, Tomcat),  A database backend (e.g., MySQL, PostgreSQL, Oracle, MSSQL), and  A server-side scripting language (e.g., PHP, ASP, etc.)", 
            "title": "Server Requirements"
        }, 
        {
            "location": "/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/#downloading", 
            "text": "Once you have a basic understanding of what Java Script and jQuery are and what they do, you're ready to try Guriddo jqGrid!   Download the Guriddo jqGrid package from  Guriddo Site  Optional download the latest jQuery library form  jQuery site  Optional download the latest  Bootstrap  package in case you want to use the Bootstrap CSS framework.  Optional download  jQuery UI theme  in case you want to use jQuery UI CSS framework and build your own custom theme.   The Guriddo jqGrid package contain all the needed packages and libraries. The optional downloading from 2. to 4. are just in case that there are new versions of the mentioned libraries.  You can install Guriddo jqGrid sources using:  npm  npm install jqGrid --save  bower  bower install jqGrid --save  This will install the jqGrid files in the current directory.  Installation of Guriddo jqGrid is just a matter of copying the files and folders to your web server or development directory. Once you've downloaded the needed packages, you can continue with the installation.  If you're a normal user of Guriddo jqGrid, you should complete the  Basic Installation below , which installs all the files needed to use Guriddo jqGrid.  If you want access to the jqGrid source code to find bugs and make improvements, complete the  Basic Installation  first, and then perform the additional steps in the  Development Installation  section below.", 
            "title": "Downloading"
        }, 
        {
            "location": "/#basic-installation", 
            "text": "Step 1: Unpack the Guriddo jqGrid zip files to a temporary folder or use open the jqGrid folder when installed from  npm  or  bower \nStep 2: Create a directory on your web server to hold the jqGrid files and folders. For example:  http://myserver/myproject/  where  myproject  is the name that you have created and  myserver  is the name of your web server.  Step 3: Open the temporary directory locate the js and css folders mark them and copy the entire folders from temporary directory to myproject directory.  After these steps, you should have the following file   folder structure:  /myproject/css\n  /images/\n       ...\n  /trirand/\n  /addons\n    ui-multiselect.css\n   ui-jqgrid.css\n   ui-jqgrid-bootstrap.css\n   ui-jqgrid-bootstrap-ui.css\n   jquery-ui.css\n   jquery-ui-timepicker-addon.css\n/myproject/js/\n  /trirand\n    /i18n\n      grid.locale-bg.js\n      grid.locale-en.js\n                     \u2026.\n    /src\n      jquery.jqGrid.js\n   jquery.jqGrid.min.js\n   jquery.min.js\n   jquery-ui.min.js  Note that the folders contain more files, than the specified. We mark here the needed files for working with jqGrid.", 
            "title": "Basic installation"
        }, 
        {
            "location": "/#using-jquery-ui-css-framework", 
            "text": "Using your favorite editor, create a file named myfirstgrid.html and place the following code:  !DOCTYPE html  html  head  meta   content = text/html; charset=utf-8   /  title My First Grid / title  link   rel = stylesheet   type = text/css   media = screen   href = css/jquery-ui.css   /  link   rel = stylesheet   type = text/css   media = screen   href = css/trirand/ui.jqgrid.css   /  script   src = js/jquery.min.js   type = text/javascript / script  script   src = js/trirand/i18n/grid.locale-en.js   type = text/javascript / script  script   src = js/trirand/jquery.jqGrid.min.js   type = text/javascript / script  / head  body \n... / body  / html   Save this file in  myproject  directory.  Code Explanation: In the code above, the first stylesheet loads the CSS code for the jQuery UI theme selected. The second stylesheet loads the CSS settings for jqGrid itself.  Below the stylesheets are three javascript files: the first one is JQuery, the second is the jqGrid language localization file, (English, -en in this example), and finally the actual minimized jqGrid file.   Note  There is one additional recommended adjustment: Since the jQuery UI Themes have different font sizes it is a good idea to reduce the font size to make everything uniform. This can be done by adding a style tag just below the stylesheet file references, as shown below.   Your final code will look like this:  !DOCTYPE html  html  head  meta   http-equiv = Content-Type   content = text/html; charset=utf-8   /  meta   http-equiv = X-UA-Compatible   content = IE=edge   /  title My First Grid / title  link   rel = stylesheet   type = text/css   media = screen   href = css/jquery-ui.css   /  link   rel = stylesheet   type = text/css   media = screen   href = css/trirand/ui.jqgrid.css   /  style  html ,   body   { \n    margin :   0 ; \n    padding :   0 ; \n    font-size :   75 % ;  }  / style  script   src = js/jquery.min.js   type = text/javascript / script  script   src = js/trirand/i18n/grid.locale-en.js   type = text/javascript / script  script   src = js/trirand/jquery.jqGrid.min.js   type = text/javascript / script  / head  body \n... / body  / html", 
            "title": "Using jQuery UI CSS Framework."
        }, 
        {
            "location": "/#using-bootstrap-v3-css-framework", 
            "text": "As of version 5.0 we support native Bootstrap v3 styling. To use this styling it is needed to include the appropriate files. Using your favorite editor, create a file named  jqgridbootstrap.html  and place the following code:  !DOCTYPE html  html   lang = en  head \n    meta   charset = utf-8   / \n    !-- A link to a Bootstrap css -- \n    link   rel = stylesheet   href = https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css \n    !-- The link to the CSS that the grid needs -- \n    link   rel = stylesheet   type = text/css   media = screen   href = ../../../css/trirand/ui.jqgrid-bootstrap.css   / \n    !-- The jQuery library is a prerequisite for all Guriddo products -- \n    script   type = text/ecmascript   src = js/jquery.min.js / script \n    !-- We support more than 40 localizations -- \n    script   type = text/ecmascript   src = js/trirand/i18n/grid.locale-en.js / script \n    !-- This is the Javascript file of jqGrid --   \n    script   type = text/ecmascript   src = js/trirand/jquery.jqGrid.min.js / script \n    script \n        $ . jgrid . defaults . styleUI   =   Bootstrap ; \n    / script \n    script   src = https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js / script \n    title jqGrid with Bootstrap / title  / head  body \n... / body  / html   Save this file in  myproject  directory.  Code Explanation: In the code above, the first stylesheet loads the CSS code for Bootstrap - note that we load it from CDN. The second stylesheet loads the CSS settings for jqGrid itself for use with Bootstrap.  Below the stylesheets are three javascript files: the first one is JQuery, the second is the jqGrid language localization file, (English, -en in this example), and finally the actual minimized jqGrid file.  To use jqGrid with Bootstrap styling (the jQuery UI is default) it is necessary to change  styleUI  parameter. Basically this can be done two diffrent ways.   Using the  $.jgrid.defaults  object with following code:     script \n     $ . jgrid . defaults . styleUI   =   Bootstrap ;  / script   This way all the jqGrid grids in the page will use Bootstrap theme.   Individually using the Guriddo jqGrid option  styleUI  :   ... \n   $ ( #grid ). jqGrid ({ \n    ... \n    styleUI   :   Bootstrap \n   ... \n   });   That's all! You are ready to use jqGrid with Bootstrap.", 
            "title": "Using Bootstrap v3 CSS Framework."
        }, 
        {
            "location": "/#using-bootstrap-v4-css-framework", 
            "text": "As of version 5.3 we support native Bootstrap v4 styling. To use this styling it is needed to include the appropriate files from the jqGrid package and to download additionally the iconic set. Currently we support the following icon sets:  GitHub Octicons ,  Iconic   and  free Font Awesome .  To setup Bootstrap 4 it is needed to load jqgrid css bootstrap 4 file, the appropriate iconic CSS file downloaded from the links above and the the bootstrap css file. Below is a example using the Octicon icon set. Using your favorite editor, create a file named  jqgridbootstrap4.html  and place the following code:  !DOCTYPE html  html   lang = en  head \n    meta   charset = utf-8   / \n    !-- A link to a Bootstrap css -- \n    link   rel = stylesheet   href = https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css      \n    !-- A link to a Octicons css -- \n    link   rel = stylesheet   href = https://cdnjs.cloudflare.com/ajax/libs/octicons/4.4.0/font/octicons.css \n    !-- A link to a jqGrid Bootstrap 4 css -- \n    link   rel = stylesheet   type = text/css   media = screen   href = ../../../css/trirand/ui.jqgrid-bootstrap4.css   / \n\n    !-- The jQuery library is a prerequisite for all jqSuite products -- \n    script   type = text/ecmascript   src = ../../../js/jquery.min.js / script \n\n    !-- This is the localization file of the grid controlling messages, labels, etc.      !-- We support more than 40 localizations -- \n    script   type = text/ecmascript   src = ../../../js/trirand/i18n/grid.locale-en.js / script \n    !-- This is the Javascript file of jqGrid --    \n    script   type = text/ecmascript   src = ../../../js/trirand/jquery.jqGrid.min.js / script \n    !-- Optional Bootstrap JavaScript files -- \n    script   src = https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js   integrity = sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh   crossorigin = anonymous / script \n    script   src = https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js / script  script  $ . jgrid . defaults . styleUI   =   Bootstrap4 ;  $ . jgrid . defaults . iconSet   =   Octicons ;  //$.jgrid.defaults.iconSet =  Iconic ;        //$.jgrid.defaults.iconSet =  fontAwesome ;  / script  / head  body \n... / body  / html   Save this file in  myproject  directory.  Code Explanation: In the code above, the first stylesheet loads the CSS code for Bootstrap v4 - note that we load it from CDN. \nThe second stylesheet load the iconic icon sets. \nThe third stylesheet loads the CSS settings for jqGrid itself for use with Bootstrap v4.  Below the stylesheets are three javascript files: the first one is JQuery, the second is the jqGrid language localization file, (English, -en in this example), and finally the actual minimized jqGrid file.  To use jqGrid with Bootstrap 4 styling (the jQuery UI is default) it is necessary to change  styleUI  parameter and the  iconSet  parameter . Basically this can be done two different ways.   Using the  $.jgrid.defaults  object with following code:     script \n     $ . jgrid . defaults . styleUI   =   Bootstrap4 ; \n     $ . jgrid . defaults . iconSet   =   Octicons ;  / script   This way all the jqGrid grids in the page will use Bootstrap theme.   Individually using the Guriddo jqGrid option  styleUI  :   ... \n   $ ( #grid ). jqGrid ({ \n    ... \n    styleUI   :   Bootstrap4 , \n    iconSet   :   Octicons ; \n   ... \n   });   That's all! You are ready to use jqGrid with Bootstrap.  Now you are ready to learn  how it works .", 
            "title": "Using Bootstrap v4 CSS Framework."
        }, 
        {
            "location": "/#development-installation", 
            "text": "If you choose the development installation, your version of Guriddo jqGrid will be using uncompressed source code rather than minimized production code, for easier reading.  This type of installation is easy. It require only to change the file name from jquery.jqGrid.min.js to jquery.jqGrid.js. Actually the jquery.jqGrid.js is one file which contain all the files in one not compressed file. The location of the file is in the  js/trirand/src  folder. In this case you will need to replace  ... script   type = text/ecmascript   src = js/trirand/jquery.jqGrid.min.js / script \n...  with  ... script   type = text/ecmascript   src = js/trirand/src/jquery.jqGrid.js / script \n...  in the head section", 
            "title": "Development Installation"
        }, 
        {
            "location": "/#how-it-works", 
            "text": "Understanding how jqGrid works, will help you get up to speed with the full capabilities of the plugin. The first thing to understand is that there are two aspects to working with tabular data:   Client-side representation, and  Server-side manipulation   Guriddo jqGrid is a component that presents tabular data for easy manipulation in a web browser grid. It uses  Ajax  calls to retrieve information and construct the representation (tabular data) using the jqGrid Column Model  (colModel) .  Furthermore, jqGrid helps you send any data changes or additions to the database on the server-side, a process known as server-side manipulation, or SSM.  SSM means the server handles the actual changes to the database, and not the user's browser. SSM isn\u2019t something that is visible within a web page. Server side data changes are done using Python, PHP, ASP.NET or any other common programming language.  A jqGrid is comprised of the following four parts:   Caption layer  Header layer  Body layer  Navigation layer    Caption layer  contains common information for the represented data.  Header layer  contains information about the columns: labels, width, etc.  Body layer  is the data requested from the server and displayed according to the settings in the column model.  Navigation layer  contains additional information from the requested data and actions for requesting little pieces of information \u2013 in the literature called paging. Note that the navigation layer can be placed not only at bottom of the grid, but anywhere on the page. The Navigation layer is also the place for adding buttons or links for editing, deleting, adding to and searching your grid data.  The minimum for the representing the data are Header layer and Body layer.  To allow freedom and flexibility, and often a better impression, jqGrid relies on CSS (Cascading Style Sheets) to govern its appearance.  In more sophisticated case the grid can have more elements as shown below:   The grid can not only have additional layers, but also allow more than the rows to contain the main data. jqGrid support treegrid, subgrid and grouping of data.  If you choose, the grid can look like a table having some advance features like sorting, resizing of columns, reordering of columns with respect of drag drop and so on", 
            "title": "How it Works?"
        }, 
        {
            "location": "/#quick-start", 
            "text": "As you may have seen, there is a little bit of tweaking necessary in-order to customize jqGrid and get it set-up the way you like. The good news is, you can use that folder as a template and every time you want to make a new project with jqGrid you can just make a copy of that folder.  Let\u2019s begin by creating the simplest grid possible; open up the myfirstgrid.html file from the newly created  basic installation , and modify the body section to look like this:  body \n        table   id = grid / table  script \n        var   dataArray   =   [ \n          { name :   Bob ,   phone :   232-532-6268 }, \n          { name :   Jeff ,   phone :   365-267-8325 } \n        ]; \n\n        $ ( #grid ). jqGrid ({ \n          datatype :   local , \n          data :   dataArray , \n          colModel :   [ \n             { name :   name ,   label   :   Name }, \n             { name :   phone ,   label   :   Phone Number } \n           ] \n       });  / script  / body   The first element in the body tags is a standard table element; this is what will be converted into our grid, and it's literally all the HTML needed to make one.  The first 4 (four) lines are just defining some data, I didn't want to get into AJAX or opening other files, so we decided to just create a simple JavaScript array with two entries. The next line is where the magic happens, this single command is being used to create and populate a grid using the provided information.  We select the table element with jQuery and call the jqGrid function passing it all the properties needed to make a grid. The first two options set the data along with its type, in our case the data is the array we made and the type is local which is in contrast to some of the other data types which use AJAX to retrieve remote data.  The last property is the column models, which basically provide the interface between the data and the grid.  The way this works is, we start by specifying the column labels, so jqGrid knows we want two columns, one named Name and the other named Phone Number, but it still has know idea how to populate the rows using the info from data.  Now there are tons of options for colModel, which we will get to later, numerous settings for customizing and manipulating the data for the cell grids. But for this simple example we are just specifying the name and  label properties , which tells jqGrid that this column's values (name, phone) are held in the data array under the given key.  Now open myfirstgrid.html up in your browser and you should see something like this:   Not particularly pretty, but you can see that with just a few short lines, we have created a grid, and populated it with sortable data.  But we can do better, first off we are only using two of the four standard layers we talked about, we are using the header layer and the body layer. Let's add a caption layer to provide little context, and let\u2019s adjust the size of the grid to fit our data.  So modify the call to jqGrid with the following:  script \n        var   dataArray   =   [ \n          { name :   Bob ,   phone :   232-532-6268 }, \n          { name :   Jeff ,   phone :   365-267-8325 } \n        ]; \n\n        $ ( #grid ). jqGrid ({ \n          datatype :   local , \n          data :   dataArray , \n          colModel :   [ \n             { name :   name ,   label   :   Name }, \n             { name :   phone ,   label   :   Phone Number } \n           ], \n           caption   :   Users Grid , \n           height :   auto \n       });  /script   And refresh your browser; your grid should now look like the following:   That's looking much better. Now, you may be wondering; we only set the height property to auto, so how come the width seems to have snapped to the content? And this is due to the fact that the right margin we saw earlier is actually a column for the scrollbar. By default jqGrid sets your grid's height to 150 pixels, this means, regardless of whether you have only one row, or a thousand rows, the height will remain the same, so that there is gap to hold the scrollbar in an event when you have more rows than that would fit in the given space. When we set the height to auto, it will stretch the grid vertically to contain all the items, making the scrollbar irrelevant and therefore it knows not to place it.  Now this is a pretty good quick-start example, but to finish things off, let's take a look at the a navigation layer, just so we can say we did.  For this next part though we are going to need more data, we can't really show pagination with just two entries, luckily there is a site called  http://www.json-generator.com/  created by Vazha Omanashvili, for doing exactly this.  The way it works is, you specify the format and number of rows you want and it generates it with random data. We are going to keep the format we have been using, of name and phone number, so in the box on the left enter the following code:  [ \n  {{repeat(50)}} , \n  { \n    name   :   {{firstName()}} {{surname()}} , \n    phone :   {{phone()}} \n  }  ]   As you can see, the actual rows are under a property named result so we will need to change the data key in the call to jqGrid from just \u2018dataArray\u2019 to \u2018dataArray.result\u2019. Refreshing the page now you will see the first 20 rows being displayed (that is the default limit). But how can we get to the rest? Well jqGrid provides a special navigation layer named a pager, which contains a pagination control. To display it we will need to create an HTML element for it. So, right underneath the table element add a div like:  table   id = grid / table  div   id = pager / div   and then we just need to add a key to the jqGrid method for the pager and row limit:  script \n        var   dataArray   =   [ \n          { name :   Bob ,   phone :   232-532-6268 }, \n          { name :   Jeff ,   phone :   365-267-8325 } \n        ]; \n\n        $ ( #grid ). jqGrid ({ \n          datatype :   local , \n          data :   dataArray , \n          colModel :   [ \n             { name :   name ,   label   :   Name }, \n             { name :   phone ,   label   :   Phone Number } \n           ], \n           caption   :   Users Grid , \n           height :   auto , \n           rowNum :   5 , \n           pager :   #pager \n       });  /script   And that's all there is to it, you can adjust the rowNum property to display more or less entries at once and the pages will automatically be calculated for you.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/user-guide/basic-grid/", 
            "text": "Basic Grid\n\n\n\n\nConventions\n\n\nAn instance of jqGrid is a java script object, with properties, events and methods. Properties may be strings, numbers, arrays, boolean values or even other objects.\n\n\nCalling Convention:\n\n\nJava Script code\n\n\n...\n\n\n$\n(\n#grid_id\n).\njqGrid\n(\noptions\n);\n\n\n...\n\n\n\n\n\n\nHTML\n\n\n!DOCTYPE html\n\n\nhead\n\n...\n\n/\nhead\n\n\nbody\n\n...\n  \ntable\n \nid\n=\ngrid_id\n/\ntable\n\n...        \n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\nWhere:\n\n\n\n\ngrid_id\n is the id of the \ntable\n element defined separately in your html and used as the name of your grid.\n\n\noptions\n is an object of settings in \"name: value\" pair format. Some of these settings are values, some are functions to be performed on their associated events. Some of these settings are optional while others are mandatory for jqGrid to work\n\n\n\n\nOn creation of a grid you normally will set all relevant options directly, but it is possible also, to modify them later on: see \nOptions\n\n\nEvents raised by the grid, which offer opportunities to perform additional actions, are described in \nEvents\n.\n\n\nThe grid also offers several methods for getting or setting properties or data: see \nMethods\n\n\nA key property of the grid is the column model (colModel) that defines the contents of the grid: \ncolModel Options\n\n\nAdditional properties, events and methods of the basic grid, not described in this section, are used to create and manage the special types of grids: multiselect grids, subGrids, treeGrids, pivotGrid and more. Please refer to these topics for more details.\n\n\nCSS Framework Guide\n\n\nAs of version 5 Guriddo jqGrid changes the way the styling of the grid is made. This mean that we have parametrize with classes every component of the grid. This allow us with little additions to make grid adoptable to any CSS framework.\n\n\nCurrently we have definitions for jQuery UI CSS Framework, Bootstrap v3 and  Bootstrap v4 CSS Framework\n\n\nBelow we will describe the construction of the styling and the way it works.\n\n\nFor using Guriddo jqGrid qith jQuery UI CSS and Bootstrap CSS see \ninstallation\n\n\nCSS definition\n\n\nGuriddo jqGrid stores the definition of the classes in the common \n$.jgrid\n object in the base module. The property which holds all the classes definitions is named \nstyleUI\n. This property can be considered as main object describing the classes.\n\n\nThe next property in the hierarchy is the name which we give when defining the classes definitions. Currently we have two definitions - \nBootstrap\n and \njQueryUI\n. By example if we want to have Foundation CSS definition we can do this like this:\n\n\n$\n.\nextend\n(\n$\n.\njgrid\n,{\n\n\n...\n\n\nstyleUI\n \n:\n \n{\n\n  \njQueryUI\n \n:\n \n{\n\n    \n...\n\n  \n},\n\n  \nBootstrap\n \n:\n \n{\n\n    \n...\n\n  \n},\n\n  \nFoundation\n \n:\n \n{\n\n    \n...\n\n  \n}\n\n\n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nThis name should be used in case we want to use this CSS framework for a particular grid\n\n\n...\n\n  \n$\n(\n#grid\n).\njqGrid\n({\n\n   \n...\n\n   \nstyleUI\n \n:\n \nFoundation\n\n  \n...\n\n  \n});\n\n\n\n\n\n\nWe name this property CSS Framework Definition Name (FDN)\n\n\nEvery CSS FDN has properties which describes the classes in certain Guriddo jqGrid modules. Gurrido jqGrid module is a file which holds the definitions, methods events and etc for a certain property of the grid. By example grid.base.js is the base module, while grid.treegrid.js holds the actions and definition for the treegrid. We have following CSS FDN properties:\n\n\n\n\ncommon\n here we store the common classes which are available everywhere in the grid\n\n\nbase\n here we have a classes which are used in the jqGrid base module\n\n\nmodal\n describes the classes in the modal windows\n\n\ncelledit\n classes for cell editing module\n\n\ninlinedit\n classes for inline editing module\n\n\nformedit\n classes for form editing module\n\n\nnavigator\n classes for the navigator\n\n\ngrouping\n classes used in grouping\n\n\nfilter\n classes used in filter functions\n\n\nsubgrid\n classes in subgrid module\n\n\ntreegrid\n classes used in treegrid module\n\n\nfmatter\n classes used in formatter\n\n\ncollmenu\n classes used in column menu\n\n\n\n\nBellow are the classes definitions for jQueryUI. The class properties are the same for Bootstrap. Note that if a new CSS definition will be made the same class properties should be used instead that some of them does not contain any definition.\n\n\nstyleUI\n \n:\n \n{\n\n  \njQueryUI\n \n:\n \n{\n\n    \ncommon\n \n:\n \n{\n\n      \ndisabled\n:\n \nui-state-disabled\n,\n\n      \nhighlight\n \n:\n \nui-state-highlight\n,\n\n      \nhover\n \n:\n \nui-state-hover\n,\n\n      \ncornerall\n:\n \nui-corner-all\n,\n\n      \ncornertop\n:\n \nui-corner-top\n,\n\n      \ncornerbottom\n \n:\n \nui-corner-bottom\n,\n\n      \nhidden\n \n:\n \nui-helper-hidden\n,\n\n      \nicon_base\n \n:\n \nui-icon\n,\n\n      \noverlay\n \n:\n \nui-widget-overlay\n,\n\n      \nactive\n \n:\n \nui-state-active\n,\n\n      \nerror\n \n:\n \nui-state-error\n,\n\n      \nbutton\n \n:\n \nui-state-default ui-corner-all\n,\n\n      \ncontent\n \n:\n \nui-widget-content\n\n    \n},\n\n    \nbase\n \n:\n \n{\n\n      \nentrieBox\n \n:\n \nui-widget ui-widget-content ui-corner-all\n,\n \n// entrie div  incl everthing\n\n      \nviewBox\n \n:\n \n,\n \n// view diw\n\n      \nheaderTable\n \n:\n \n,\n\n      \nheaderBox\n \n:\n \nui-state-default\n,\n\n      \nrowTable\n \n:\n \n,\n\n      \nrowBox\n \n:\n \nui-widget-content\n,\n\n      \nstripedTable\n \n:\n \nui-jqgrid-table-striped\n,\n\n      \nfooterTable\n \n:\n \n,\n\n      \nfooterBox\n \n:\n \nui-widget-content\n,\n\n      \nheaderDiv\n \n:\n \nui-state-default\n,\n\n      \ngridtitleBox\n \n:\n \nui-widget-header ui-corner-top ui-helper-clearfix\n,\n\n      \ncustomtoolbarBox\n \n:\n \nui-state-default\n,\n\n      \n//overlayBox: \nui-widget-overlay\n,\n\n      \nloadingBox\n \n:\n \nui-state-default ui-state-active\n,\n\n      \nrownumBox\n \n:\n  \nui-state-default\n,\n\n      \nscrollBox\n \n:\n \nui-widget-content\n,\n\n      \nmultiBox\n \n:\n \n,\n\n      \npagerBox\n \n:\n \nui-state-default ui-corner-bottom\n,\n\n      \npagerTable\n \n:\n \n,\n\n      \ntoppagerBox\n \n:\n \nui-state-default\n,\n\n      \npgInput\n \n:\n \nui-corner-all\n,\n\n      \npgSelectBox\n \n:\n \nui-widget-content ui-corner-all\n,\n\n      \npgButtonBox\n \n:\n \nui-corner-all\n,\n\n      \nicon_first\n \n:\n \nui-icon-seek-first\n,\n\n      \nicon_prev\n \n:\n \nui-icon-seek-prev\n,\n\n      \nicon_next\n:\n \nui-icon-seek-next\n,\n\n      \nicon_end\n:\n \nui-icon-seek-end\n,\n\n      \nicon_asc\n \n:\n \nui-icon-triangle-1-n\n,\n\n      \nicon_desc\n \n:\n \nui-icon-triangle-1-s\n,\n\n      \nicon_caption_open\n \n:\n \nui-icon-circle-triangle-n\n,\n\n      \nicon_caption_close\n \n:\n \nui-icon-circle-triangle-s\n\n    \n},\n\n    \nmodal\n \n:\n \n{\n\n      \nmodal\n \n:\n \nui-widget ui-widget-content ui-corner-all ui-dialog\n,\n\n      \nheader\n \n:\n \nui-widget-header ui-corner-all ui-helper-clearfix\n,\n\n      \ncontent\n \n:\nui-widget-content\n,\n\n      \nresizable\n \n:\n \nui-resizable-handle ui-resizable-se\n,\n\n      \nicon_close\n \n:\n \nui-icon-closethick\n,\n\n      \nicon_resizable\n \n:\n \nui-icon-gripsmall-diagonal-se\n\n    \n},\n\n    \ncelledit\n \n:\n \n{\n\n      \ninputClass\n \n:\n \nui-widget-content ui-corner-all\n\n    \n},\n\n    \ninlinedit\n \n:\n \n{\n\n      \ninputClass\n \n:\n \nui-widget-content ui-corner-all\n,\n\n      \nicon_edit_nav\n \n:\n \nui-icon-pencil\n,\n\n      \nicon_add_nav\n \n:\n \nui-icon-plus\n,\n\n      \nicon_save_nav\n \n:\n \nui-icon-disk\n,\n\n      \nicon_cancel_nav\n \n:\n \nui-icon-cancel\n\n    \n},\n\n    \nformedit\n \n:\n \n{\n\n      \ninputClass\n \n:\n \nui-widget-content ui-corner-all\n,\n\n      \nicon_prev\n \n:\n \nui-icon-triangle-1-w\n,\n\n      \nicon_next\n \n:\n \nui-icon-triangle-1-e\n,\n\n      \nicon_save\n \n:\n \nui-icon-disk\n,\n\n      \nicon_close\n \n:\n \nui-icon-close\n,\n\n      \nicon_del\n \n:\n \nui-icon-scissors\n,\n\n      \nicon_cancel\n \n:\n \nui-icon-cancel\n\n    \n},\n\n    \nnavigator\n \n:\n \n{\n\n      \nicon_edit_nav\n \n:\n \nui-icon-pencil\n,\n\n      \nicon_add_nav\n \n:\n \nui-icon-plus\n,\n\n      \nicon_del_nav\n \n:\n \nui-icon-trash\n,\n\n      \nicon_search_nav\n \n:\n \nui-icon-search\n,\n\n      \nicon_refresh_nav\n \n:\n \nui-icon-refresh\n,\n\n      \nicon_view_nav\n \n:\n \nui-icon-document\n,\n\n      \nicon_newbutton_nav\n \n:\n \nui-icon-newwin\n\n    \n},\n\n    \ngrouping\n \n:\n \n{\n\n      \nicon_plus\n \n:\n \nui-icon-circlesmall-plus\n,\n\n      \nicon_minus\n \n:\n \nui-icon-circlesmall-minus\n\n    \n},\n\n    \nfilter\n \n:\n \n{\n\n      \ntable_widget\n \n:\n \nui-widget ui-widget-content\n,\n\n      \nsrSelect\n \n:\n \nui-widget-content ui-corner-all\n,\n\n      \nsrInput\n \n:\n \nui-widget-content ui-corner-all\n,\n\n      \nmenu_widget\n \n:\n \nui-widget ui-widget-content ui-corner-all\n,\n\n      \nicon_search\n \n:\n \nui-icon-search\n,\n\n      \nicon_reset\n \n:\n \nui-icon-arrowreturnthick-1-w\n,\n\n      \nicon_query\n \n:\nui-icon-comment\n\n    \n},\n\n    \nsubgrid\n \n:\n \n{\n\n      \nicon_plus\n \n:\n \nui-icon-plus\n,\n\n      \nicon_minus\n \n:\n \nui-icon-minus\n,\n\n      \nicon_open\n \n:\n \nui-icon-carat-1-sw\n\n    \n},\n\n    \ntreegrid\n \n:\n \n{\n\n      \nicon_plus\n \n:\n \nui-icon-triangle-1-\n,\n\n      \nicon_minus\n \n:\n \nui-icon-triangle-1-s\n,\n\n      \nicon_leaf\n \n:\n \nui-icon-radio-off\n\n    \n},\n\n    \nfmatter\n \n:\n \n{\n\n      \nicon_edit\n \n:\n \nui-icon-pencil\n,\n\n      \nicon_add\n \n:\n \nui-icon-plus\n,\n\n      \nicon_save\n \n:\n \nui-icon-disk\n,\n\n      \nicon_cancel\n \n:\n \nui-icon-cancel\n,\n\n      \nicon_del\n \n:\n \nui-icon-trash\n\n    \n},\n\n    \ncolmenu\n \n:\n \n{\n\n      \nmenu_widget\n \n:\n \nui-widget ui-widget-content ui-corner-all\n,\n\n      \ninput_checkbox\n \n:\n \nui-widget ui-widget-content\n,\n\n      \nfilter_select\n:\n \nui-widget-content ui-corner-all\n,\n\n      \nfilter_input\n \n:\n \nui-widget-content ui-corner-all\n,\n\n      \nicon_menu\n \n:\n \nui-icon-comment\n,\n\n      \nicon_sort_asc\n \n:\n \nui-icon-arrow-1-n\n,\n\n      \nicon_sort_desc\n \n:\n \nui-icon-arrow-1-s\n,\n\n      \nicon_columns\n \n:\n \nui-icon-extlink\n,\n\n      \nicon_filter\n \n:\n \nui-icon-calculator\n,\n\n      \nicon_group\n \n:\n \nui-icon-grip-solid-horizontal\n,\n\n      \nicon_freeze\n \n:\n \nui-icon-grip-solid-vertical\n,\n\n      \nicon_move\n:\n \nui-icon-arrow-4\n\n    \n}\n\n  \n},\n\n  \n...\n\n\n}\n\n\n\n\n\n\nCSS rules\n\n\n\n\nWe can set unlimited number of classes for class item separeted with space\n\n\nClass Item can contain empty string.\n\n\nThe definition of the icon is a combination of the \nicon_base\n defined in \ncommon\n property plus the class of the icon.\n\n\nEvery icon begin with \n'icon\n'_\n plus short description of the icon\n\n\n\n\nGetting CSS classes\n\n\nTo get the classes for jQueryUI you can;\n\n\n...\n\n\nvar\n \njQueryUICSS\n \n=\n \n$\n.\njgrid\n.\nstyleUI\n.\njQueryUI\n;\n\n\nconsole\n.\nlog\n(\njQueryUICSS\n);\n\n\n...\n\n\n\n\n\n\nafter the jqGrid JavaScript file is loaded. To get the common icon_base class:\n\n\n...\n\n\nvar\n \njQueryUICSS\n \n=\n \n$\n.\njgrid\n.\nstyleUI\n.\njQueryUI\n;\n\n\nconsole\n.\nlog\n(\njQueryUICSS\n.\ncommon\n.\nicon_base\n);\n\n\n...\n\n\n\n\n\n\nSetting CSS classes.\n\n\nTo set a particular item class it is a simple. Let suppose that we want to change the icon move in colmenu for jQueryUI style.\n\n\n...\n\n\n$\n.\njgrid\n.\nstyleUI\n.\njQueryUI\n.\ncolmenu\n.\nicon_move\n \n=\n \nui-icon-arrow-1\n;\n\n\n...\n\n\n\n\n\n\nOf course if we want to change not only one CSS item from a group, but two or more we can use jQuery extend to do this\n\n\nvar\n \nmy_col_definition\n  \n=\n \n{\n\n  \nicon_move\n \n:\n \nui-icon-arrow-1\n,\n\n  \nicon_menu\n \n:\n \nui-icon-pencil\n\n\n}\n\n\n$\n.\nextend\n(\n \n$\n.\njgrid\n.\nstyleUI\n.\njQueryUI\n.\ncolmenu\n \n,\n \nmy_col_definition\n \n);\n\n\n\n\n\n\nLanguage Guide\n\n\nGuriddo jqGrid JS comes with a large number of predefined language packs and settings for almost all popular languages. They are located in the installation package, in the \n/js/trirand/i18n\n folder. Language packs are in the form of javascript files, containing definitions for all strings in the grid that can be localized - this includes messages, captions, paging information, search/add/delete dialog labels, etc.\n\n\nThe name of language file has the following structure:\n\n\ngrid.locale-XX.js\n\n\nwhere XX is \nISO 639-1 code\n  which identifies the language.\n\n\nThe language javascript files can be loaded before or after jqGrid library. Historically the language file should be loaded before the jqGrid library, so we will continue with this.\n\n\nGuriddo jqGrid can support different languages on one page. This means that you can load two or more language files and use it for a particular grid.\n\n\nAnother feature is that the language set of Guriddo jqGrid can be loaded dynamically without to reload the page - this is in case when appropriate language files are loaded.\n\n\nGuriddo jqGrid can't work properly if the language file is not loaded. Be a sure that this file is loaded when working with the grid and setup correctly.\n\n\nBelow we will demonstrate two examples. The first example will load two grids in the page where each grid will be loaded with different language and the second example will change the language of the grid dynamically.\n\n\nThe appropriate settings and methods for this purpose are the grid option \nregional\n and the grid method \nsetRegional\n\n\nThe regional option is a two letter string which corresponds to the ISO 639-1 code and the last two letter in grid language file definition.\n\n\nThe default value of this option is \nen\n.\n\n\nIt is important to note that using language file does not change the grid headers captions.\n\nIn order to change the caption grid cells use the grid method \nsetLabel\n See \nGrid Methods\n\n\nUsing two grids on page with different language.\n\n\nLet suppose that we need to use two grids in one page, where the one grid should use English texts, while the other should use Japanese. To resolve this situation we need to load these two language files and set on each grid the appropriate two letter code.\n\n\nThe javascript fragment can look like this:\n\n\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n\nmeta\n \nhttp-equiv\n=\nContent-Type\n \ncontent\n=\ntext/html; charset=utf-8\n \n/\n\n\ntitle\nMulti Lingual Grids\n/\ntitle\n\n\nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\ncss/jquery-ui.css\n \n/\n\n\nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\ncss/trirand/ui.jqgrid.css\n \n/\n\n\n\nscript\n \nsrc\n=\njs/jquery.min.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/trirand/i18n/grid.locale-en.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/trirand/i18n/grid.locale-jp.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/trirand/jquery.jqGrid.min.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\n/\nhead\n\n\nbody\n\n\n\ntable\n \nid\n=\ngriden\n/\ntable\n\n\ntable\n \nid\n=\ngridjp\n/\ntable\n\n\n\nscript\n\n       \nvar\n \nArray\n \n=\n \n[\n\n         \n{\nname\n:\n \nBob\n,\n \nphone\n:\n \n232-532-6268\n},\n\n         \n{\nname\n:\n \nJeff\n,\n \nphone\n:\n \n365-267-8325\n}\n\n       \n];\n\n\n       \n$\n(\n#griden\n).\njqGrid\n({\n\n         \ndatatype\n:\n \nlocal\n,\n\n         \nregional\n:\n \nen\n,\n \n// this is default\n\n         \ndata\n:\n \ndataArray\n,\n\n         \ncolModel\n:\n \n[\n\n            \n{\nname\n:\n \nname\n,\n \nlabel\n \n:\n \nName\n},\n\n            \n{\nname\n:\n \nphone\n,\n \nlabel\n \n:\n \nPhone Number\n}\n\n          \n]\n\n      \n});\n\n      \n$\n(\n#gridjp\n).\njqGrid\n({\n\n        \ndatatype\n:\n \nlocal\n,\n\n        \nregional\n:\n \njp\n,\n\n        \ndata\n:\n \ndataArray\n,\n\n        \ncolModel\n:\n \n[\n\n           \n{\nname\n:\n \nname\n,\n \nlabel\n \n:\n \n\u540d\n},\n\n           \n{\nname\n:\n \nphone\n,\n \nlabel\n \n:\n \n\u96fb\u8a71\u756a\u53f7\n}\n\n         \n]\n\n     \n});\n\n\n/\nscript\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\n\n\nChange language dynamically.\n\n\nChanging language dynamically is possible with the common jqGrid function \nsetReginal\n. To call it use the following code:\n\n\n$\n.\njgrid\n.\nsetReginal\n(\ngrid_id\n,\n \n{\nregional\n \n:\n \nbg\n});\n\n\n\n\n\n\nLet suppose that there is a requirement to change the language of the grid from English to Japanese when a button is a clicked. Using the header section from our previous example the code can look like this:\n\n\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n\nmeta\n \nhttp-equiv\n=\nContent-Type\n \ncontent\n=\ntext/html; charset=utf-8\n \n/\n\n\ntitle\nMulti Lingual Grids\n/\ntitle\n\n\nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\ncss/jquery-ui.css\n \n/\n\n\nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\ncss/trirand/ui.jqgrid.css\n \n/\n\n\n\nscript\n \nsrc\n=\njs/jquery.min.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/trirand/i18n/grid.locale-en.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/trirand/i18n/grid.locale-jp.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/trirand/jquery.jqGrid.min.js\n \ntype\n=\ntext/javascript\nparametrize\n\n\nbody\n\n\n\ntable\n \nid\n=\ngrid\n/table\n\n\nbutton\n \nid\n=\nchnlng\nChange\n \nTo\n \nJapones\n/button\n\n\n\nscript\n\n       \nvar\n \ndataArray\n \n=\n \n[\n\n         \n{\nname\n:\n \nBob\n,\n \nphone\n:\n \n232-532-6268\n},\n\n         \n{\nname\n:\n \nJeff\n,\n \nphone\n:\n \n365-267-8325\n}\n\n       \n];\n\n\n       \n$\n(\n#grid\n).\njqGrid\n({\n\n         \ndatatype\n:\n \nlocal\n,\n\n         \nregional\n:\n \nen\n,\n \n// this is default\n\n         \ndata\n:\n \ndataArray\n,\n\n         \ncolModel\n:\n \n[\n\n            \n{\nname\n:\n \nname\n,\n \nlabel\n \n:\n \nName\n},\n\n            \n{\nname\n:\n \nphone\n,\n \nlabel\n \n:\n \nPhone Number\n}\n\n          \n]\n\n      \n});\n\n      \n$\n(\n#chnlng\n).\non\n(\nclick\n,\n \nfunction\n(){\n\n        \n// change the language\n\n        \n$\n.\njgrid\n.\nsetRegional\n(\ngrid\n,{\nregional\n:\n \njp\n});\n\n        \n// change the labels\n\n        \n$\n(\n#grid\n).\njqGrid\n(\nsetLabel\n,\nname\n,\n\u540d\n);\n\n        \n$\n(\n#grid\n).\njqGrid\n(\nsetLabel\n,\nphone\n,\n\u96fb\u8a71\u756a\u53f7\n);\n\n      \n});\n\n\n\n/\nscript\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\nThe first parameter in setRegional is the id of the grid and the second is a object containing property \nregional\n which should corresponded to the appropriate language file.\n\n\nLanguage file structure.\n\n\nThe structure and properties of the language files are changed recently. To the time of writing this documentation the default English language file has the following structure and texts.\n\n\n(\nfunction\n(\n \nfactory\n \n)\n \n{\n\n    \nuse strict\n;\n\n    \nif\n \n(\n \ntypeof\n \ndefine\n \n===\n \nfunction\n \n \ndefine\n.\namd\n \n)\n \n{\n\n        \n// AMD. Register as an anonymous module.\n\n        \ndefine\n([\n\n            \njquery\n,\n\n            \n../grid.base\n\n        \n],\n \nfactory\n \n);\n\n    \n}\n \nelse\n \n{\n\n        \n// Browser globals\n\n        \nfactory\n(\n \njQuery\n \n);\n\n    \n}\n\n\n}(\nfunction\n(\n \n$\n \n)\n \n{\n\n\n\n$\n.\njgrid\n \n=\n \n$\n.\njgrid\n \n||\n \n{};\n\n\nif\n(\n!\n$\n.\njgrid\n.\nhasOwnProperty\n(\nregional\n))\n \n{\n\n    \n$\n.\njgrid\n.\nregional\n \n=\n \n[];\n\n\n}\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n    \ndefaults\n \n:\n \n{\n\n        \nrecordtext\n:\n \nView {0} - {1} of {2}\n,\n\n        \nemptyrecords\n:\n \nNo records to view\n,\n\n        \nloadtext\n:\n \nLoading...\n,\n\n        \nsavetext\n:\n \nSaving...\n,\n\n        \npgtext\n \n:\n \nPage {0} of {1}\n,\n\n        \npgfirst\n \n:\n \nFirst Page\n,\n\n        \npglast\n \n:\n \nLast Page\n,\n\n        \npgnext\n \n:\n \nNext Page\n,\n\n        \npgprev\n \n:\n \nPrevious Page\n,\n\n        \npgrecs\n \n:\n \nRecords per Page\n,\n\n        \nshowhide\n:\n \nToggle Expand Collapse Grid\n,\n\n        \n// mobile\n\n        \npagerCaption\n \n:\n \nGrid::Page Settings\n,\n\n        \npageText\n \n:\n \nPage:\n,\n\n        \nrecordPage\n \n:\n \nRecords per Page\n,\n\n        \nnomorerecs\n \n:\n \nNo more records...\n,\n\n        \nscrollPullup\n:\n \nPull up to load more...\n,\n\n        \nscrollPulldown\n \n:\n \nPull down to refresh...\n,\n\n        \nscrollRefresh\n \n:\n \nRelease to refresh...\n\n    \n},\n\n    \nsearch\n \n:\n \n{\n\n        \ncaption\n:\n \nSearch...\n,\n\n        \nFind\n:\n \nFind\n,\n\n        \nReset\n:\n \nReset\n,\n\n        \nodata\n:\n \n[{\n \noper\n:\neq\n,\n \ntext\n:\nequal\n},{\n \noper\n:\nne\n,\n \ntext\n:\nnot equal\n},{\n \noper\n:\nlt\n,\n \ntext\n:\nless\n},{\n \noper\n:\nle\n,\n \ntext\n:\nless or equal\n},{\n \noper\n:\ngt\n,\n \ntext\n:\ngreater\n},{\n \noper\n:\nge\n,\n \ntext\n:\ngreater or equal\n},{\n \noper\n:\nbw\n,\n \ntext\n:\nbegins with\n},{\n \noper\n:\nbn\n,\n \ntext\n:\ndoes not begin with\n},{\n \noper\n:\nin\n,\n \ntext\n:\nis in\n},{\n \noper\n:\nni\n,\n \ntext\n:\nis not in\n},{\n \noper\n:\new\n,\n \ntext\n:\nends with\n},{\n \noper\n:\nen\n,\n \ntext\n:\ndoes not end with\n},{\n \noper\n:\ncn\n,\n \ntext\n:\ncontains\n},{\n \noper\n:\nnc\n,\n \ntext\n:\ndoes not contain\n},{\n \noper\n:\nnu\n,\n \ntext\n:\nis null\n},{\n \noper\n:\nnn\n,\n \ntext\n:\nis not null\n},\n \n{\noper\n:\nbt\n,\n \ntext\n:\nbetween\n}],\n\n        \ngroupOps\n:\n \n[{\n \nop\n:\n \nAND\n,\n \ntext\n:\n \nall\n \n},{\n \nop\n:\n \nOR\n,\n  \ntext\n:\n \nany\n \n}],\n\n        \noperandTitle\n \n:\n \nClick to select search operation.\n,\n\n        \nresetTitle\n \n:\n \nReset Search Value\n,\n\n        \naddsubgrup\n \n:\n \nAdd subgroup\n,\n\n        \naddrule\n \n:\n \nAdd rule\n,\n\n        \ndelgroup\n \n:\n \nDelete group\n,\n\n        \ndelrule\n \n:\n \nDelete rule\n\n    \n},\n\n    \nedit\n \n:\n \n{\n\n        \naddCaption\n:\n \nAdd Record\n,\n\n        \neditCaption\n:\n \nEdit Record\n,\n\n        \nbSubmit\n:\n \nSubmit\n,\n\n        \nbCancel\n:\n \nCancel\n,\n\n        \nbClose\n:\n \nClose\n,\n\n        \nsaveData\n:\n \nData has been changed! Save changes?\n,\n\n        \nbYes\n \n:\n \nYes\n,\n\n        \nbNo\n \n:\n \nNo\n,\n\n        \nbExit\n \n:\n \nCancel\n,\n\n        \nmsg\n:\n \n{\n\n            \nrequired\n:\nField is required\n,\n\n            \nnumber\n:\nPlease, enter valid number\n,\n\n            \nminValue\n:\nvalue must be greater than or equal to \n,\n\n            \nmaxValue\n:\nvalue must be less than or equal to\n,\n\n            \nemail\n:\n \nis not a valid e-mail\n,\n\n            \ninteger\n:\n \nPlease, enter valid integer value\n,\n\n            \ndate\n:\n \nPlease, enter valid date value\n,\n\n            \nurl\n:\n \nis not a valid URL. Prefix required (\nhttp://\n or \nhttps://\n)\n,\n\n            \nnodefined\n \n:\n \n is not defined!\n,\n\n            \nnovalue\n \n:\n \n return value is required!\n,\n\n            \ncustomarray\n \n:\n \nCustom function should return array!\n,\n\n            \ncustomfcheck\n \n:\n \nCustom function should be present in case of custom checking!\n\n\n        \n}\n\n    \n},\n\n    \nview\n \n:\n \n{\n\n        \ncaption\n:\n \nView Record\n,\n\n        \nbClose\n:\n \nClose\n\n    \n},\n\n    \ndel\n \n:\n \n{\n\n        \ncaption\n:\n \nDelete\n,\n\n        \nmsg\n:\n \nDelete selected record(s)?\n,\n\n        \nbSubmit\n:\n \nDelete\n,\n\n        \nbCancel\n:\n \nCancel\n\n    \n},\n\n    \nnav\n \n:\n \n{\n\n        \nedittext\n:\n \n,\n\n        \nedittitle\n:\n \nEdit selected row\n,\n\n        \naddtext\n:\n,\n\n        \naddtitle\n:\n \nAdd new row\n,\n\n        \ndeltext\n:\n \n,\n\n        \ndeltitle\n:\n \nDelete selected row\n,\n\n        \nsearchtext\n:\n \n,\n\n        \nsearchtitle\n:\n \nFind records\n,\n\n        \nrefreshtext\n:\n \n,\n\n        \nrefreshtitle\n:\n \nReload Grid\n,\n\n        \nalertcap\n:\n \nWarning\n,\n\n        \nalerttext\n:\n \nPlease, select row\n,\n\n        \nviewtext\n:\n \n,\n\n        \nviewtitle\n:\n \nView selected row\n,\n\n        \nsavetext\n:\n \n,\n\n        \nsavetitle\n:\n \nSave row\n,\n\n        \ncanceltext\n:\n \n,\n\n        \ncanceltitle\n \n:\n \nCancel row editing\n,\n\n        \nselectcaption\n \n:\n \nActions...\n\n    \n},\n\n    \ncol\n \n:\n \n{\n\n        \ncaption\n:\n \nSelect columns\n,\n\n        \nbSubmit\n:\n \nOk\n,\n\n        \nbCancel\n:\n \nCancel\n\n    \n},\n\n    \nerrors\n \n:\n \n{\n\n        \nerrcap\n \n:\n \nError\n,\n\n        \nnourl\n \n:\n \nNo url is set\n,\n\n        \nnorecords\n:\n \nNo records to process\n,\n\n        \nmodel\n \n:\n \nLength of colNames \n colModel!\n\n    \n},\n\n    \nformatter\n \n:\n \n{\n\n        \ninteger\n \n:\n \n{\nthousandsSeparator\n:\n \n,\n,\n \ndefaultValue\n:\n \n0\n},\n\n        \nnumber\n \n:\n \n{\ndecimalSeparator\n:\n.\n,\n \nthousandsSeparator\n:\n \n,\n,\n \ndecimalPlaces\n:\n \n2\n,\n \ndefaultValue\n:\n \n0.00\n},\n\n        \ncurrency\n \n:\n \n{\ndecimalSeparator\n:\n.\n,\n \nthousandsSeparator\n:\n \n,\n,\n \ndecimalPlaces\n:\n \n2\n,\n \nprefix\n:\n \n,\n \nsuffix\n:\n,\n \ndefaultValue\n:\n \n0.00\n},\n\n        \ndate\n \n:\n \n{\n\n            \ndayNames\n:\n   \n[\n\n                \nSun\n,\n \nMon\n,\n \nTue\n,\n \nWed\n,\n \nThr\n,\n \nFri\n,\n \nSat\n,\n\n                \nSunday\n,\n \nMonday\n,\n \nTuesday\n,\n \nWednesday\n,\n \nThursday\n,\n \nFriday\n,\n \nSaturday\n\n            \n],\n\n            \nmonthNames\n:\n \n[\n\n                \nJan\n,\n \nFeb\n,\n \nMar\n,\n \nApr\n,\n \nMay\n,\n \nJun\n,\n \nJul\n,\n \nAug\n,\n \nSep\n,\n \nOct\n,\n \nNov\n,\n \nDec\n,\n\n                \nJanuary\n,\n \nFebruary\n,\n \nMarch\n,\n \nApril\n,\n \nMay\n,\n \nJune\n,\n \nJuly\n,\n \nAugust\n,\n \nSeptember\n,\n \nOctober\n,\n \nNovember\n,\n \nDecember\n\n            \n],\n\n            \nAmPm\n \n:\n \n[\nam\n,\npm\n,\nAM\n,\nPM\n],\n\n            \nS\n:\n \nfunction\n \n(\nj\n)\n \n{\nreturn\n \nj\n \n \n11\n \n||\n \nj\n \n \n13\n \n?\n \n[\nst\n,\n \nnd\n,\n \nrd\n,\n \nth\n][\nMath\n.\nmin\n((\nj\n \n-\n \n1\n)\n \n%\n \n10\n,\n \n3\n)]\n \n:\n \nth\n;},\n\n            \nsrcformat\n:\n \nY-m-d\n,\n\n            \nnewformat\n:\n \nn/j/Y\n,\n\n            \nparseRe\n \n:\n \n/[#%\\\\\\/:_;.,\\t\\s-]/\n,\n\n            \nmasks\n \n:\n \n{\n\n                \n// see http://php.net/manual/en/function.date.php for PHP format used in jqGrid\n\n                \n// and see http://docs.jquery.com/UI/Datepicker/formatDate\n\n                \n// and https://github.com/jquery/globalize#dates for alternative formats used frequently\n\n                \n// one can find on https://github.com/jquery/globalize/tree/master/lib/cultures many\n\n                \n// information about date, time, numbers and currency formats used in different countries\n\n                \n// one should just convert the information in PHP format\n\n                \nISO8601Long\n:\nY-m-d H:i:s\n,\n\n                \nISO8601Short\n:\nY-m-d\n,\n\n                \n// short date:\n\n                \n//    n - Numeric representation of a month, without leading zeros\n\n                \n//    j - Day of the month without leading zeros\n\n                \n//    Y - A full numeric representation of a year, 4 digits\n\n                \n// example: 3/1/2012 which means 1 March 2012\n\n                \nShortDate\n:\n \nn/j/Y\n,\n \n// in jQuery UI Datepicker: \nM/d/yyyy\n\n                \n// long date:\n\n                \n//    l - A full textual representation of the day of the week\n\n                \n//    F - A full textual representation of a month\n\n                \n//    d - Day of the month, 2 digits with leading zeros\n\n                \n//    Y - A full numeric representation of a year, 4 digits\n\n                \nLongDate\n:\n \nl, F d, Y\n,\n \n// in jQuery UI Datepicker: \ndddd, MMMM dd, yyyy\n\n                \n// long date with long time:\n\n                \n//    l - A full textual representation of the day of the week\n\n                \n//    F - A full textual representation of a month\n\n                \n//    d - Day of the month, 2 digits with leading zeros\n\n                \n//    Y - A full numeric representation of a year, 4 digits\n\n                \n//    g - 12-hour format of an hour without leading zeros\n\n                \n//    i - Minutes with leading zeros\n\n                \n//    s - Seconds, with leading zeros\n\n                \n//    A - Uppercase Ante meridiem and Post meridiem (AM or PM)\n\n                \nFullDateTime\n:\n \nl, F d, Y g:i:s A\n,\n \n// in jQuery UI Datepicker: \ndddd, MMMM dd, yyyy h:mm:ss tt\n\n                \n// month day:\n\n                \n//    F - A full textual representation of a month\n\n                \n//    d - Day of the month, 2 digits with leading zeros\n\n                \nMonthDay\n:\n \nF d\n,\n \n// in jQuery UI Datepicker: \nMMMM dd\n\n                \n// short time (without seconds)\n\n                \n//    g - 12-hour format of an hour without leading zeros\n\n                \n//    i - Minutes with leading zeros\n\n                \n//    A - Uppercase Ante meridiem and Post meridiem (AM or PM)\n\n                \nShortTime\n:\n \ng:i A\n,\n \n// in jQuery UI Datepicker: \nh:mm tt\n\n                \n// long time (with seconds)\n\n                \n//    g - 12-hour format of an hour without leading zeros\n\n                \n//    i - Minutes with leading zeros\n\n                \n//    s - Seconds, with leading zeros\n\n                \n//    A - Uppercase Ante meridiem and Post meridiem (AM or PM)\n\n                \nLongTime\n:\n \ng:i:s A\n,\n \n// in jQuery UI Datepicker: \nh:mm:ss tt\n\n                \nSortableDateTime\n:\n \nY-m-d\\\\TH:i:s\n,\n\n                \nUniversalSortableDateTime\n:\n \nY-m-d H:i:sO\n,\n\n                \n// month with year\n\n                \n//    Y - A full numeric representation of a year, 4 digits\n\n                \n//    F - A full textual representation of a month\n\n                \nYearMonth\n:\n \nF, Y\n \n// in jQuery UI Datepicker: \nMMMM, yyyy\n\n            \n},\n\n            \nreformatAfterEdit\n \n:\n \nfalse\n,\n\n            \nuserLocalTime\n \n:\n \nfalse\n\n        \n},\n\n        \nbaseLinkUrl\n:\n \n*\n,\n\n        \nshowAction\n:\n \n*\n,\n\n        \ntarget\n:\n \n*\n,\n\n        \ncheckbox\n \n:\n \n{\ndisabled\n:\ntrue\n},\n\n        \nidName\n \n:\n \nid\n\n    \n},\n\n    \ncolmenu\n \n:\n \n{\n\n        \nsortasc\n \n:\n \nSort Ascending\n,\n\n        \nsortdesc\n \n:\n \nSort Descending\n,\n\n        \ncolumns\n \n:\n \nColumns\n,\n\n        \nfilter\n \n:\n \nFilter\n,\n\n        \ngrouping\n \n:\n \nGroup By\n,\n\n        \nungrouping\n \n:\n \nUngroup\n,\n\n        \nsearchTitle\n \n:\n \nGet items with value that:\n,\n\n        \nfreeze\n \n:\n \nFreeze\n,\n\n        \nunfreeze\n \n:\n \nUnfreeze\n,\n\n        \nreorder\n \n:\n \nMove to reorder\n\n    \n}\n\n\n};\n\n\n}));\n\n\n\n\n\n\nOptions\n\n\nThe setup and configuration of Guriddo jqGrid are controlled by setting options for the grid. Examples of configuration settings include the height and width of the grid, type of data that should be in each column, and other similar settings.\n\n\nThese options are set in the grid options object, and many of the options are set in name: value pairs, separated by commas. The object is given as an argument to the declaration of the jqGrid object.\n\n\nThe properties and options available are listed below in alphabetic order. Some have more details described in other pages of this documentation and a link to those pages is provided in those circumstances.\n\n\nSome properties cannot be changed after the grid is created; the last column of the table labeled \nCan be changed?\n mentions if that particular property can or cannot have effect when changed after the grid is created.\n\n\nAll the grid options can be obtained with the method \ngetGridParam\n, where the first parameter (string) is the name of the option. By example to get the selected row in grid with id 'grid' we can use:\n\n\n...\n\n\nvar\n \nselected\n \n=\n \n$\n(\n#grid\n).\njqGrid\n(\ngetGridParam\n,\nselrow\n);\n\n\nif\n(\nselected\n \n!=\n \nnull\n)\n \n{\n\n  \n...\n\n\n}\n \nelse\n \n{\n\n  \n...\n\n\n}\n\n\n\n\n\n\nWe can set any option in a grid with the method \nsetGridParam\n. The first parameter of this method is a object in \nname:value\n pair which contain the option(s) that we want to change. Note that if the value in column \ncan not be changed\n (see below) is 'No', the new value will not have efect instead that it is changed in the grid options. To add additional parameter \nmyparam =  20\n to the data posted to the server do:\n\n\n...\n\n\n$\n(\n#grid\n).\njqGrid\n(\nsetGridParam\n,{\n \npostData\n:\n \n{\n \nmyparam\n:\n20\n \n}\n \n});\n\n\n...\n\n\n\n\n\n\nGuriddo jqGrid has a its global object with name \njQuery.jgrid\n or in short \n$.jgrid\n. This object contain variables and functions which are used everywhere in the grid. See \nCommon functions and variables\n for a list of all available variables and functions.\n\n\nThe property \n$.jgrid.defaults\n can be used to set common options which are different from the default. See \nSetting Options Globaly\n.\n\n\nWhen the grid is initialized it loads default text values from language file. These values are stored in \n$.grid.regional[XX].defaults\n property, where XX is a two code language letter. Below  are the English values of this property:\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n    \ndefaults\n \n:\n \n{\n\n        \nrecordtext\n:\n \nView {0} - {1} of {2}\n,\n\n        \nemptyrecords\n:\n \nNo records to view\n,\n\n        \nloadtext\n:\n \nLoading...\n,\n\n        \nsavetext\n:\n \nSaving...\n,\n\n        \npgtext\n \n:\n \nPage {0} of {1}\n,\n\n        \npgfirst\n \n:\n \nFirst Page\n,\n\n        \npglast\n \n:\n \nLast Page\n,\n\n        \npgnext\n \n:\n \nNext Page\n,\n\n        \npgprev\n \n:\n \nPrevious Page\n,\n\n        \npgrecs\n \n:\n \nRecords per Page\n,\n\n        \nshowhide\n:\n \nToggle Expand Collapse Grid\n\n    \n},\n\n\n...\n\n\n}\n\n\n\n\n\n\nThese and all the grid options value are described below:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\nCan be Changed?\n\n\n\n\n\n\n\n\n\n\naddOptions\n\n\nobject\n\n\nThe parameter stores the add options (parameters) in navigator \nsee navigator\n if the option \nstoreNavOptions\n is set to true and \nnavGrid\n method is called\n\n\nempty\n\n\nNo\n\n\n\n\n\n\najaxCellOptions\n\n\nobject\n\n\nWhen defined this option can overwrite the ajax options when cell editing is enabled and the cell submitting is defined via url. All the ajax options for cell submit can be overwriten. See \nCell editing\n\n\nempty object\n\n\nYes\n\n\n\n\n\n\najaxGridOptions\n\n\nobject\n\n\nThis option allows to set global ajax settings for the grid when requesting data. With this option it is possible to overwrite all current ajax settings in the grid including the \nerror\n, \nsuccess\n and \nbeforeSend\n events.\n\n\nempty object\n\n\nYes\n\n\n\n\n\n\najaxRowOptions\n\n\nobject\n\n\nThis option allow to set global ajax settings for the \nInline editiing\n when we save the data to the server. Note that with this option is possible to overwrite all current ajax setting in the save request including the complete event.\n\n\nempty\n\n\nYes\n\n\n\n\n\n\najaxSelectOptions\n\n\nobject\n\n\nThis option allows to set global ajax settings for the created select element (in all editing and search modules) when the select is obtained via \ndataUrl\n option in \neditoptions\n or \nsearchoptions\n objects See \nediting\n and \nsearching\n\n\nempty object\n\n\nYes\n\n\n\n\n\n\najaxSubgridOptions\n\n\nobject\n\n\nWhen defined this option can overwrite the ajax options in subgrid when the subgrid make a ajax call to obtain the data. See \nSubgrid\n\n\nempty\n\n\nYes\n\n\n\n\n\n\naltclass\n\n\nstring\n\n\nThis options is deprecated as of version 5.2\n\n\n\n\n\n\n\n\n\n\naltRows\n\n\nboolean\n\n\nSet a zebra-striped grid (alternate rows have different styles). When this option is set to true we add a class described in styleUI object. The name of the class is \nstripedTable\n in the common styleUI object\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nautoencode\n\n\nboolean\n\n\nWhen set to true encodes the incoming data from server or array and encodes the posted data (from editing modules). For example \n will be converted to \nlt;\n. See the \ncommon functions\n for htmlEncode\n\n\nfalse\n\n\nYes\n\n\n\n\n\n\nautowidth\n\n\nboolean\n\n\nWhen set to true, the grid width is recalculated automatically to the width of the parent element. This is done only initially when the grid is created. In order to re-size the grid when the parent element or window changes width please use the option \nresponsive\n - see below\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\ncaption\n\n\nstring\n\n\nDefines the caption for the grid. This caption appears in the caption layer, which is above the header layer see \nHow It Works\n. If the string is empty the caption does not appear. To change the caption dynamically use the method \nsetCaption\n\n\nempty string\n\n\nNo\n\n\n\n\n\n\ncellLayout\n\n\ninteger\n\n\nThis option determines the padding + border width of the cell. Usually this should not be changed, but if custom changes to the \ntd\n element are made in the grid css file, this will need to be changed. The initial value of 5 means paddingLef(2) + paddingRight (2) + borderLeft (1) = 5\n\n\n5\n\n\nNo\n\n\n\n\n\n\ncellEdit\n\n\nboolean\n\n\nEnables (disables) cell editing. See \nCell Editing\n for more details.\n\n\nfalse\n\n\nYes\n\n\n\n\n\n\ncellsubmit\n\n\nstring\n\n\nDetermines where the contents of the cell should be saved. Possible values are \nremote\n in this case the data is saved via ajax and \nclientArray\n in case the data is saved in the local data array. See \nCell Editing\n for more details.\n\n\nremote\n\n\nYes\n\n\n\n\n\n\ncellurl\n\n\nstring\n\n\nThe url where the cell is to be saved using ajax. Valid only if \ncelsubmit\n is set to \nremote\n. See \nCell Editing\n for more details\n\n\nnull\n\n\nYes\n\n\n\n\n\n\ncmTemplate\n\n\nobject\n\n\nDefines a set of properties which override the default values in \ncolModel\n for all columns. For example if you want to make all columns not sort-able, then only one property here can be specified instead of specifying it in all columns in \ncolModel\n \n{sortable:false}\n\n\nnull\n\n\nNo\n\n\n\n\n\n\ncolFilters\n\n\nobject\n\n\nIf set the object defines the initial search rules for a field defined in colModel. The option is valid if \ncolMenu\n option is set to true. For more information see \nColumn menu\n.\n\n\nempty\n\n\nNo\n\n\n\n\n\n\ncolMenu\n\n\nboolean\n\n\nEnables column menu for a column with a set of predefined actions. The menu creates a button on the header of each or certain grid cell which when clicked activate a form with a actions.For more information see \nColumn menu\n.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\ncolModel\n\n\narray\n\n\nArray which describes the parameters of the columns. This is the most important part of the grid. For a full description of all valid values see \ncolModel API\n.\n\n\nempty array\n\n\nNo\n\n\n\n\n\n\ncolNames\n\n\narray\n\n\nAn array in which we place the names of the columns. This is the text that appears in the head of the grid (header layer). The names are separated with commas. Note that the number of elements in this array should be equal of the number elements in the \ncolModel\n array. This option will be deprecated. To set the text in header use the \nlabel\n property in \ncolModel\n\n\nempty\n\n\nNo\n\n\n\n\n\n\ndata\n\n\narray\n\n\nAn array that stores the local data passed to the grid. You can directly point to this variable in case you want to load an array data.  See \narray data\n. It can replace the \naddRowData\n method which is slow on relative big data\n\n\nempty array\n\n\nYes\n\n\n\n\n\n\ndatastr\n\n\nstring\n\n\nThe string of data when datatype parameter is set to \nxmlstring\n or \njsonstring\n.\n\n\nnull\n\n\nYes\n\n\n\n\n\n\ndatatype\n\n\nstring\n\n\nDefines in what format to expect the data that fills the grid. Valid options are \nxml\n (we expect data in xml format), \nxmlstring\n (we expect xml data as string), \njson\n (we expect data in JSON format), \njsonstring\n  (we expect JSON data as a string), \nlocal\n or \nclientSide\n (we expect data defined at client side (array data) a \ndata\n option can be used), \nscript\n (we expect data as javascript), \nfunction\n (custom defined function for retrieving data), \nJSONP\n (we expect a data from a remoute server ). See \nRetrieving Data\n. It is important to note that if this option is a function you should define how to retrieve a data - i.e grid expect from this function to fill the grid (you can use by example addJSONData)\n\n\nxml\n\n\nYes\n\n\n\n\n\n\ndeepempty\n\n\nboolean\n\n\nThis option should be set to \ntrue\n if an event or a plugin is attached to the table cell. The option uses jQuery empty for the row and all its children elements. This of course has speed overhead, but prevents memory leaks. This option should be set to \ntrue\n if a sortable rows and/or columns are activated.\n\n\nfalse\n\n\nYes\n\n\n\n\n\n\ndelOptions\n\n\nobject\n\n\nThe parameter stores the delete options (parameters) in navigator \nsee navigator\n if the option \nstoreNavOptions\n is set to true and \nnavGrid\n method is called\n\n\nempty\n\n\nNo\n\n\n\n\n\n\ndeselectAfterSort\n\n\nboolean\n\n\nApplicable only when \ndatatype : local\n is used. Deselects currently selected row(s) when a sort is applied. If set to false the selected rows remain instead of sorting.\n\n\ntrue\n\n\nYes\n\n\n\n\n\n\ndirection\n\n\nstring\n\n\nDetermines the direction of text in the grid. The default is \nltr\n (Left To Right). When set to \nrtl\n  (Right To Left) the grid automatically changes the direction of the text. It is important to note that in one page we can have two (or more) grids where the one can have direction \nltr\n while the other can have direction \nrtl\n. Not all browsers support fully \nrtl\n. If a problem is encountered,  please notify Guriddo support\n\n\nltr\n\n\nNo\n\n\n\n\n\n\neditOptions\n\n\nobject\n\n\nThe parameter stores the edit options (parameters) in navigator \nsee navigator\n if the option \nstoreNavOptions\n is set to true and \nnavGrid\n method is called\n\n\nempty\n\n\nNo\n\n\n\n\n\n\nediturl\n\n\nstring\n\n\nDefines the url for inline and form editing. May be set to \nclientArray\n to manually post data to server, see \nEditing\n.\n\n\nnull\n\n\nYes\n\n\n\n\n\n\nemptyrecords\n\n\nstring\n\n\nThe string to display when the returned (or the current) number of records in the grid is zero. This option is valid only if \nviewrecords\n option is set to \ntrue\n. The default value depend from the language used in the current grid.\n\n\n\n\nYes\n\n\n\n\n\n\nExpandColClick\n\n\nboolean\n\n\nWhen \ntrue\n, the \ntree grid\n  is expanded and/or collapsed when we click anywhere on the text in the expanded column. In this case it is not necessary to click exactly on the expand/collapse icon.\n\n\ntrue\n\n\nNo\n\n\n\n\n\n\nExpandColumn\n\n\nstring\n\n\nIndicates which column (\nname\n property from \ncolModel\n) should be used to expand the tree grid. If not set the first one is used. Valid only when the \ntreeGrid\n option is set to \ntrue\n.\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nfooterrow\n\n\nboolean\n\n\nIf set to \ntrue\n this will place a footer table with one row below the gird records and above the pager. The number of columns equal those specified in \ncolModel\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nforceFit\n\n\nboolean\n\n\nIf set to \ntrue\n, and a column's width is changed, the adjacent column (to the right) will resize so that the overall grid width is maintained (e.g., reducing the width of column 2 by 30px will increase the size of column 3 by 30px). In this case there is no horizontal scroll bar. \nNote:\n This option is not compatible with \nshrinkToFit\n option - i.e if \nshrinkToFit\n is set to false, \nforceFit\n is ignored.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nfrozenColumns\n\n\nboolean\n\n\nRead-only parameter. If this parameter is true it means that the frozen columns method is applied to the grid.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\ngridstate\n\n\nstring\n\n\nDetermines the current state of the grid (i.e. when used with \nhiddengrid\n, \nhidegrid\n and \ncaption\n options). Can have either of two states: \nvisible\n or \nhidden\n. This is only readonly option.\n\n\nvisible\n\n\nNo\n\n\n\n\n\n\ngridview\n\n\nboolean\n\n\nIn the previous versions of jqGrid (\n= 3.4.X), reading a relatively large data set (number of rows \n= 100 ) caused speed problems. The reason for this was that as every cell was inserted into the grid we applied about 5 to 6 jQuery calls to it. Now this problem is resolved; we now insert the entry row at once with a jQuery append. The result is impressive - about 3 to 5 times faster. What will be the result if we insert all the data at once? Yes, this can be done with a help of \ngridview\n option. The result is a grid that is 5 to 10 times faster compared to versions \n= 3.4.X. This option have some limitations - we can not use aterInsertRow event. To use this event set the gridview option to false.\n\n\ntrue\n\n\nYes\n\n\n\n\n\n\ngroupHeader\n\n\nobject\n\n\nRead-only parameter which contain information about \nHeader grouping\n\n\nempty\n\n\nNo\n\n\n\n\n\n\ngrouping\n\n\nboolean\n\n\nEnables grouping in grid. Please refer to the \nGrouping\n.\n\n\nfalse\n\n\nYes\n\n\n\n\n\n\ngroupingView\n\n\nobject\n\n\nHolds the definitions for grouping See \nGrouping\n.\n\n\n\n\nYes\n\n\n\n\n\n\nheadertitles\n\n\nboolean\n\n\nIf the option is set to \ntrue\n the title attribute with text from the label property of colModel is added to the column headers - i.e if pointed with the mouse on the column header the header text display as title.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nheight\n\n\nmixed\n\n\nThe height of the grid. Can be set as number ( pixels) or as percentage (only 100% is acceped) or value of \nauto\n is acceptable. In the last two cases (100% or auto) the vertical scrollbar does not appear. To change the height dynamically use the method \nsetGridHeight\n\n\n150\n\n\nNo.\n\n\n\n\n\n\nhiddengrid\n\n\nboolean\n\n\nIf set to \ntrue\n the grid is initially is hidden. The data is not loaded (no request is sent) and only the caption layer is shown. When the show/hide button is clicked for the first time to show grid, the request is sent to the server, the data is loaded, and grid is shown. From this point we have a regular grid. This option has effect only if the \ncaption\n property is not empty and the \nhidegrid\n property (see below) is set to \ntrue\n.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nhidegrid\n\n\nboolean\n\n\nEnables or disables the show/hide grid button, which appears on the right side of the caption layer. Takes effect only if the \ncaption\n property is not an empty string.\n\n\ntrue\n\n\nNo\n\n\n\n\n\n\nhoverrows\n\n\nboolean\n\n\nWhen set to \nfalse\n the effect of mouse hovering over the grid data rows is disabled.\n\n\ntrue\n\n\nYes\n\n\n\n\n\n\niconSet\n\n\nstring\n\n\nDetermines the iconic set used when Bootstrap4 is used. The option is valid only id \nstyleUI\n option is set to Bootstrap4. Currently it can have 3 possible options - \nfontAwesome, Octicons, Iconic\n. To have this efect the appropriate CSS file fron one of these icon sets should be loaded. For more information refer to \nCSS Framework Guide\n\n\nempty\n\n\n\n\n\n\n\n\nidPrefix\n\n\nstring\n\n\nWhen set, this string is added as prefix to the id of every grid row when it is built. This option is usefull if a two or more grids are available and there is a possibility to have equal id and equal grid names.\n\n\nempty\n\n\nYes\n\n\n\n\n\n\nignoreCase\n\n\nboolean\n\n\nBy default the local searching is case-sensitive. To make the local search and sorting not case-insensitive set this options to \ntrue\n\n\nfalse\n\n\nYes\n\n\n\n\n\n\ninlineData\n\n\nempty object\n\n\nobject used to add additional content (again with the edited row) to the data posted to the server when we are in inline editing. See \nInline editing\n. This is a user defined object when there is a need to post additional data to the server.\n\n\n{}\n\n\nYes\n\n\n\n\n\n\ninlineNav\n\n\nboolean\n\n\nRead-only parameter - determines if the inline navigator (inlineNav method) is called for this grid instance - true or not - false\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\njsonReader\n\n\narray\n\n\nAn object which describes the structure of the expected json data. For a full description and default setting, see \nRetrieving Data JSON Data\n\n\n\n\nNo\n\n\n\n\n\n\nkeyName\n\n\nstring\n\n\nContain the name which is supposed to be used as index (unique id in grid row) when read the data and build the grid rows. The name is get from the \nkey\n property in colModel. If the key property is not set this option is false.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nlastpage\n\n\ninteger\n\n\nGives the total number of pages returned from the request. If you use a function as datatype, \njqGrid('setGridParam',{lastpage: your_number});\n can be used to specify the max pages in the pager.\n\n\n0\n\n\nNo\n\n\n\n\n\n\nlastsort\n\n\ninteger\n\n\nRead-only property. Gives the index of last sorted column beginning from 0.\n\n\n0\n\n\nNo\n\n\n\n\n\n\nloadonce\n\n\nboolean\n\n\nIf this flag is set to \ntrue\n, the grid loads the data from the server only once (using the appropriate datatype). After the first request, the datatype parameter is automatically changed to \nlocal\n and all further manipulations are done on the client side. The data parameter is filled with the response data from the server.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nloadtext\n\n\nstring\n\n\nThe text which appears in progress indicator (when enabled) when requesting and sorting data. This parameter is located in language file. See the default property of the regional array.\n\n\n\n\nNo\n\n\n\n\n\n\nloadui\n\n\nstring\n\n\nThis option controls what to do when an ajax operation is in progress. \ndisable\n - disables the jqGrid progress indicator. This way you can use your own indicator. \nenable\n (default) - shows the text set in the \nloadtext\n property in the center of the grid. \nblock\n - displays the text set in the loadtext property and blocks all actions in the grid until the ajax request completes. Note that this disables paging, sorting and all actions on toolbar, if any.\n The method \nprogressBar\n controll this behaviour.\n\n\nenable\n\n\nYes\n\n\n\n\n\n\nmenubar\n\n\nboolean\n\n\nPlace a icon on left (or right) to add a user defined actions. To add or delete actions from the menubar use \nmenubarAdd\n and \nmenubarDelete\n methods\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nmtype\n\n\nstring\n\n\nDefines the type of ajax request to make ('POST' or 'GET')\n\n\nGET\n\n\nYes\n\n\n\n\n\n\nminColWidth\n\n\ninteger\n\n\nDefines the minimal width of all grid columns when re-sizing.\n\n\n33\n\n\nYes\n\n\n\n\n\n\nmultiboxonly\n\n\nboolean\n\n\nThis option works only when the \nmultiselect\n option is set to \ntrue\n (see below). When \nmultiselect\n is set to \ntrue\n, clicking anywhere on a row selects that row; when \nmultiboxonly\n is also set to \ntrue\n, the multiselection is done only when the checkbox is clicked. Clicking in any other row (suppose the checkbox is not clicked) deselects all rows and selects the current row. See \nMultiselection\n\n\nfalse\n\n\nYes\n\n\n\n\n\n\nmultikey\n\n\nstring\n\n\nThis parameter makes sense only when the \nmultiselect\n option (see below) is set to \ntrue\n. Defines the key which should be pressed when we make multiselection. The possible values are: \nshiftKey\n - the user should press Shift Key, \naltKey\n - the user should press Alt Key, and \nctrlKey\n - the user should press Ctrl Key. See \nMultiselection\n\n\nempty\n\n\nYes\n\n\n\n\n\n\nmultimail\n\n\nboolean\n\n\nIf this options is set to true and the multiselect is on, the selection is like Yahoo and Google mail. Multiselection is done so that the multiboxonly parameter is set to true with additional properties. See \nMultiselection\n\n\nfalse\n\n\nYes\n\n\n\n\n\n\nmultiselect\n\n\nboolean\n\n\nIf this flag is set to \ntrue\n a multi selection of rows is enabled. A new column at left side containing checkboxes is added. Can be used with any datatype option. See options \nselarrrow\n which contain the selected rows. See \nMultiselection\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nmultiselectWidth\n\n\ninteger\n\n\nDetermines the width of the checkbox column created when the \nmultiselect\n option is enabled.\n\n\n30\n\n\nNo\n\n\n\n\n\n\nmultiSort\n\n\nboolean\n\n\nIf set to true enables the multisorting -  sort on more than one field. The options work if the datatype is local too. In case when the data is obtained from the server the \nsidx\n parameter contain the order clause. It is a comma separated string in format field1 asc, field2 desc ..., fieldN. Note that the last field does not have asc or desc. It should be obtained from \nsord\n parameter. When the option is true the behavior is as follow. The first click of the header field sort the field depending on the firstsortoption parameter in colModel or sortorder grid parameter. The next click sort it in reverse order. The third click removes the sorting from this field.\n\n\nfalse\n\n\nYes\n\n\n\n\n\n\nnavButtons\n\n\narray\n\n\nThe parameter stores all the custom buttons created in navigator \nsee navigator\n if the option \nstoreNavOptions\n is set to true and \nnavButtonAdd\n method is called\n\n\nempty\n\n\nNo\n\n\n\n\n\n\nnavGrid\n\n\nboolean\n\n\nReadonly parameter. determines if the navGrid method is called for this grid instance - true or not - false\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nnavOptions\n\n\nobject\n\n\nThe parameter stores the navigator options in navigator if the option \nstoreNavOptions\n is set to true and \nnavGrid\n method is called\n\n\nempty\n\n\nNo\n\n\n\n\n\n\npage\n\n\ninteger\n\n\nSet the initial page number when we make the request.This parameter is passed to the url for use by the server routine retrieving the data. It also works when the datatype is local.\n\n\n1\n\n\nYes\n\n\n\n\n\n\npager\n\n\nhtml id\n\n\nDefines the pager bar to navigate through the records. This must be a valid HTML element; in our example we gave the div the id of \"pager\", but any name is acceptable. Note that the navigation layer (the \"pager\" div) can be positioned anywhere you want, determined by your HTML; in our example we specified that the pager will appear after the  body layer. The valid settings can be (in the context of our example) \npager, #pager, jQuery('#pager')\n. We recommend to use the second one - \n#pager\n. See \nPager\n for more details and explanations. If the pager is empty string (default value) it will not appear.\n\n\n' '\n\n\nNo\n\n\n\n\n\n\npagerpos\n\n\nstring\n\n\nDetermines the position of the pager  navigation buttons and records select box in the grid. By default the pager element when created is divided in 3 parts (one part for pager navigator buttons, one part for navigator buttons and one part for record information - see \nrecordpos\n). Possible values are left, center, right. Note that when changing the position of this parameter it is necessary to change the position of the other elements. See \nNavigator options\n and the parameter \nrecordpos\n below.\n\n\ncenter\n\n\nNo\n\n\n\n\n\n\npgbuttons\n\n\nboolean\n\n\nDetermines if the Pager buttons should be shown if pager is available. Also valid only if \npager\n is set correctly. The buttons are placed in the pager bar.\n\n\ntrue\n\n\nNo\n\n\n\n\n\n\npginput\n\n\nboolean\n\n\nDetermines if the input box, where the user can change the number of the requested page, should be available. The input box appears in the pager bar between the pager buttons.\n\n\ntrue\n\n\nNo\n\n\n\n\n\n\npgtext\n\n\nstring\n\n\nShow information about current page status. We use for this purpose a template string. The default English string is: \nPage {0} of {1}\n. The first value '{0}' is the current loaded page. The second value '{1}' is the total number of pages. Default depend from the used language file\n\n\nlang file\n\n\nYes\n\n\n\n\n\n\nprmNames\n\n\narray\n\n\nThe default value of this property is:\n{page:\"page\",rows:\"rows\", sort:\"sidx\", order:\"sord\", search:\"_search\", nd:\"nd\", id:\"id\", oper:\"oper\", editoper:\"edit\", addoper:\"add\", deloper:\"del\", subgridid:\"id\", npage:null, totalrows:\"totalrows\"}\n.\nThis customizes names of the fields sent to the server on a POST/GET request. All of the values correspond to some options of the grid. For example, with this setting, you can change the sort order element from \nsidx\n to \nmysort\n by setting \nprmNames: {sort: \"mysort\"}\n. The string that will be posted to the server will then be \nmyurl.php?page=1\nrows=10\nmysort=myindex\nsord=asc\n, rather than \nmyurl.php?page=1\nrows=10\nsidx=myindex\nsord=asc\n. So the value of the column on which to sort upon can be obtained by looking at \n$POST['mysort']\n in PHP by example. When some parameter is set to null, it will be not sent to the server. For example if we set \nprmNames: {nd:null}\n the \nnd\n parameter will not be sent to the server.  For \nnpage\n option see the \nscroll\n option. These options have the following meaning and default values:\n \npage\n: the requested page (default value \npage\n), \nrows\n: the number of rows requested (default value \nrows\n), \nsort\n: the sorting column (default value \nsidx\n), \norder\n: the sort order (default value \nsord\n), \nsearch\n: the search indicator (default value \n_search\n), \nnd\n: the time passed to the request (for IE browsers not to cache the request) (default value \nnd\n), \nid\n: the name of the id when posting data in editing modules (default value \nid\n), \noper\n: the operation parameter passed to the server (default value \noper\n), \neditoper\n: the name of operation when the data is posted in edit mode (default value \nedit\n), \naddoper\n: the name of operation when the data is posted in add mode (default value \nadd\n), \ndeloper\n: the name of operation when the data is posted in delete mode (default value \ndel\n), \ntotalrows\n: the number of the total rows to be obtained from server - see \nrowTotal\n (default value \ntotalrows\n), \nsubgridid\n: the name passed when we click to load data in the subgrid (default value \nid\n).\n\n\n\n\nYes\n\n\n\n\n\n\npostData\n\n\nobject\n\n\nThis array is appended directly to the url. This is an object and can be used this way: \n{name1:value1...}\n. This is a user defined object which extends the object passed to the data parameter in ajax request. See API methods for manipulation.\n\n\nempty\n\n\nYes\n\n\n\n\n\n\nreccount\n\n\ninteger\n\n\nRead-only property. Determines the exact number of rows in the grid. Do not confuse this with \nrecords\n parameter. Although in many cases they may be equal, there are cases where they are not. For example, if you define \nrowNum\n (requested records per page) to be 15, but the request to the server returns 20 records, the \nrecords\n parameter will be 20, but the \nreccount\n parameter will be 15 (the grid you will have 15 records and not 20).\n\n\n0\n\n\nNo\n\n\n\n\n\n\nrecordpos\n\n\nstring\n\n\nDetermines the position of the record information in the pager ( See recordtext option). Can be \nleft\n, \ncenter\n, \nright\n. If the default value is changed, be a sure that the other placement in 3 part pager are set in appropriate way.\n\n\nright\n\n\nNo\n\n\n\n\n\n\nrecords\n\n\ninteger\n\n\nReadonly property. Gives the number of records returned as a result of a query to the server.\n\n\nnone\n\n\nNo\n\n\n\n\n\n\nrecordtext\n\n\nstring\n\n\nText that can be shown in the pager. This option is valid if \nviewrecords\n option is set to \ntrue\n. This text appears only if the total number of records is greater then zero. The default string in case of english langauage is as following: \nView {0} - {1} of {2}\n. {0} is the start position of the records depending on page number and number of requested records, {1} is the end position and {2} - total records returned from the server.\n\n\nlang file\n\n\nYes\n\n\n\n\n\n\nregional\n\n\nstring\n\n\nTwo letter code which correspond to the code in grid.locale-xx.js. To load a language file different from English (default) in the grid change this parameter with the appropriate code. Note that the language file should be loaded. See \nsetRegional\n method and \nLanguage Guide\n.\n\n\nen\n\n\nYes\n\n\n\n\n\n\nremapColumns\n\n\narray\n\n\nArray which contain the order of the columns as they apper in the grid. Initially the first position correspond to the first column and etc. - by example [0,1,2,3] in case we have 4 columns defined in colModel. After reordering of columns ( see \nColumn reorder\n ) the array can look like this:  [1,0,3,2]. This mean the the first column(0) is moved to the second position(1) and the third column(2) is moved to four position(3). Using the method \nremapColumns\n we can dynamically remap the initial order of the columns in the grid. After this remapping the array \nremapColumns\n is set to the those in the method.\n\n\nempty\n\n\nYes\n\n\n\n\n\n\nresizeclass\n\n\nstring\n\n\nAssigns a class to columns that are re-sizable so that we can show a re-size handle only for ones that are resizable.\n\n\nempty\n\n\nNo\n\n\n\n\n\n\nresponsive\n\n\nboolean\n\n\nIf set to \ntrue\n the grid is re sized automatically to its parent container when the device is rotated or when the windows width is changed. Another useful feature is auto calculating the the space of the navGrid buttons \u2013 if the space does not fit the grid width drop down menu button is created, where all actions are inserted.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nrestoreCellonFail\n\n\nboolean\n\n\nDetermine if the cell should be set or restored to its initial state on fail. Use this option if validation module is performed. The option is valid only in cell editing module. For More information see \nCell editing\n.\n\n\ntrue\n\n\nYes\n\n\n\n\n\n\nrowList\n\n\narray\n\n\nAn array to construct a select box element in the pager in which we can change the number of the visible rows. When changed during the execution, the values of this parameter replaces the \nrowNum\n parameter that is passed to the url. If the array is empty, this element does not appear in the pager. Typically you can set this like \n[10,20,30]\n. If the \nrowNum\n parameter is set to 30 then the selected value in the select box is 30. The rowList parameter can have display value as string too. The select list can be configured with a name value pair where the value and display text will be separated with colon \":\". By example the following [\"10:10\", \"20:20\", \"30:30\", \"-1:All\"] will provide display items in select list 10,20,30,All and when All is selected the value of -1 will be posted.\n\n\nempty\n\n\nNo\n\n\n\n\n\n\nrownumbers\n\n\nboolean\n\n\nIf this option is set to \ntrue\n, a new column at left of the grid is added. The purpose of this column is to count the number of available rows, beginning from 1. In this case \ncolModel\n is extended automatically with new element with the name \nrn\n. \nNote:\n It is not recommend to use the name \nrn\n in the \ncolModel\n.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nrowNum\n\n\ninteger\n\n\nSets how many records we want to view in the grid. This parameter is passed to the url (and in local data too) for use by the server routine retrieving the data. Note that if you set this parameter to 10 (i.e. retrieve 10 records) and your server return 15 then only 10 records will be loaded.\n\n\n20\n\n\nYes\n\n\n\n\n\n\nrowTotal\n\n\ninteger\n\n\nWhen set this parameter can instruct the server to load the total number of rows needed to work on. Note that \nrowNum\n determines the total records displayed in the grid, while \nrowTotal\n determines the total number of rows on which we can operate. When this parameter is set, we send an additional parameter to the server named \ntotalrows\n (See prmNames option). You can check for this parameter, and if it is available you can replace the \nrows\n parameter with this one. Mostly this parameter can be combined with \nloadonce\n parameter set to \ntrue\n.\n\n\nnull\n\n\nYes\n\n\n\n\n\n\nrownumWidth\n\n\ninteger\n\n\nDetermines the width of the row number column if \nrownumbers\n option is set to \ntrue\n.\n\n\n35\n\n\nNo\n\n\n\n\n\n\nsavedRow\n\n\narray\n\n\nThis is a readonly property and is used in inline and cell editing modules to store the data, before editing the row or cell. See \nCell Editing\n and \nInline Editing\n. This array stores the original values before editing the cell or row and is used in case the user press Esc to restore the original values of the edited row or cell.\n\n\nempty\n\n\nNo\n\n\n\n\n\n\nsearch\n\n\nboolean\n\n\nRead-only parameter which identify if we perform a search. The parameter is set to true if we use one of the search modules and activate the search (server side or local). The parameter is set to false when the search is reset.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nsearchOptions\n\n\nobject\n\n\nThe parameter stores the search options (parameters) in navigator \nsee navigator\n if the option \nstoreNavOptions\n is set to true and \nnavGrid\n method is called\n\n\nempty\n\n\nNo\n\n\n\n\n\n\nscroll\n\n\nmixed\n\n\nCreates dynamic (virtual) scrolling grids. When enabled, the pager buttons and select box are disabled and we can use the vertical scrollbar to load data. When set to \ntrue\n the grid will always hold all the items from the start through to the latest point ever visited. When \nscroll\n is set to an integer value (Mostly by example 1), the grid will just hold the visible lines. This allow us to load the data in portions without caring about memory leaks. In addition to this we have an optional extension to the server protocol: \nnpage\n (see \nprmNames\n array). If you set the \nnpage\n option in \nprmNames\n, then the grid will sometimes request more than one page at a time; if not, it will just perform multiple GET requests.Note that this option is not compatible when a grid parameter \nheight\n if set to \nauto\n or \n100%\n.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nscrollMaxBuffer\n\n\ninteger\n\n\nThis parameter set the maximum rows the grid can load when a scroll option is set to 1. This allow to control  the buffer of the loaded rows. This parameter is recommended to be used when  a scroll is set to 1 and the datatype is local. The recommended setting is a value greater than the rowNum parameter. If the value is little then this parameter it is set automatically to be equal to rowNum parameter.\n\n\n0\n\n\nYes\n\n\n\n\n\n\nscrollLeftOffset\n\n\npercent\n\n\nDetermines the left offset of the box which appear when virtual scroll is enabled  and scrollPopUp parameter is set to true. The information does appear when we use the mouse to scroll through the pages. The value of 0% set the box to appear at upper left corner of the grid. See scrollPopUp and scrollTopOffset parameters.\n\n\n100%\n\n\nYes\n\n\n\n\n\n\nscrollOffset\n\n\ninteger\n\n\nDetermines the width of the vertical scrollbar. Since different browsers interpret this width differently (and it is difficult to calculate it in all browsers) this can be changed.\n\n\n18\n\n\nNo\n\n\n\n\n\n\nscrollTopOffset\n\n\ninteger\n\n\nDefines the top offset from the upper position of the scroll element.\n\n\n0\n\n\nYes\n\n\n\n\n\n\nscrollPopUp\n\n\nboolean\n\n\nEnables/disables popup with page information when virtual scrolling is on. When this is enabled  the information box change its position relative to the position of the scroll element.\n\n\nfalse\n\n\nYes\n\n\n\n\n\n\nscrollTimeout\n\n\ninteger\n\n\nThis controls the timeout handler when \nscroll\n is set to 1. The value is set in milliseconds.\n\n\n40\n\n\nYes\n\n\n\n\n\n\nscrollrows\n\n\nboolean\n\n\nWhen enabled, selecting a row with \nsetSelection\n scrolls the grid so that the selected row is visible. This is especially useful when we have a verticall scrolling grid and we use form editing with navigation buttons (next or previous row). On navigating to a hidden row, the grid scrolls so that the selected row becomes visible.\n\n\nfalse\n\n\nYes\n\n\n\n\n\n\nselarrrow\n\n\narray\n\n\nThis options is readonly. Gives the currently selected rows when \nmultiselect\n is set to \ntrue\n. This is a one-dimensional array and the values in the array correspond to the selected id's in the grid.\n\n\nempty\n\n\nNo\n\n\n\n\n\n\nselrow\n\n\nstring\n\n\nThis option is read-only. It contains the id of the last selected row. If sorting or paging is performed, this options is set to null.\n\n\nnull\n\n\nNo\n\n\n\n\n\n\nshrinkToFit\n\n\nboolean\n\n\nThis option, if set, defines how the the width of the columns of the grid should be re-calculated, taking into consideration the width of the grid. If this value is \ntrue\n, and the width of the columns is also set, then every column is scaled in proportion to its width. For example, if we define two columns with widths 80 and 120 pixels, but want the grid to have a width of 300 pixels, then the columns will stretch to fit the entire grid, and the extra width assigned to them will depend on the width of the columns themselves and the extra width available. The re-calculation is done as follows: the first column gets the width (300(new width)/200(sum of all widths))\n80(first column width) = 120 pixels, and the second column gets the width (300(new width)/200(sum of all widths))\n120(second column width) = 180 pixels. Now the widths of the columns sum up to 300 pixels, which is the width of the grid. If the value is false and the value in \nwidth\n option is set, then no re-sizing happens whatsoever. So in this example, if \nshrinkToFit\n is set to false, column one will have a width of 80 pixels, column two will have a width of 120 pixels and the grid will retain the width of 300 pixels.\n\n\ntrue\n\n\nNo\n\n\n\n\n\n\nsortable\n\n\nmixed\n\n\nWhen set to \ntrue\n, this option allows reordering columns by dragging and dropping them with the mouse. Since this option uses the jQuery UI sortable widget, be sure to load this widget and its related files in the HTML head tag of the page. \nNote:\n The \ncolModel\n object also has a property called \nsortable\n, which specifies if the grid data can be sorted on a particular column or not. This option works when Bootstrap CSS is used. In this case the jQuery UI sortable widged should be loaded. The sortable option can be a object in which we can add (or overwrite) parameters that are available in the jQuery UI method. To do this a option property should be set. By example to change the jQuery UI sortable pareneter \nforcePlaceholderSize\n we should do:\n \n$(\"#jqGrid\").jqGrid({ ..., sortable: { options: {forcePlaceholderSize  : true } },...});\n.\n Actually when this option is on we call the build in method \nsortabColumns\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nsortname\n\n\nstring\n\n\nThe column according to which the data is to be sorted when it is initially loaded from the server or local array. This parameter is appended to the url. If this value is set and the index (name) matches the name from colModel, then an icon indicating that the grid is sorted according to this column is added to the column header. This icon also indicates the sorting order - descending or ascending (see the parameter \nsortorder\n). Also see \nprmNames\n.\n\n\nempty\n\n\nYes\n\n\n\n\n\n\nsortorder\n\n\nstring\n\n\nThe initial sorting order (ascending or descending) when we fetch data from the server or client array. This parameter is appended to the url - see \nprnNames\n. The two allowed values are - \nasc\n or \ndesc\n.\n\n\nasc\n\n\nYes\n\n\n\n\n\n\nstoreNavOptions\n\n\nboolean\n\n\nStore the navigator options in the grid options. The parameter is used in navGrid  method (common navigator options) and if true the options are saved as grid parameters. This parameter is usefull if we want to know some parameter in the navigator, but the primary use of this parameter is when a loadState and restoreState methods are used. In this case it is recommend to set this option to true since restoring of navigator actions depend from grid option.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nstyleUI\n\n\nstring\n\n\nDefines the CSS framework used for the internal representation of the grid. For more information refer to \nCSS Framework Guide\n.\n\n\njQueryUI\n\n\nNo\n\n\n\n\n\n\nsubGrid\n\n\nboolean\n\n\nIf set to \ntrue\n this enables using a sub-grid. If the \nsubGrid\n option is enabled, an additional column at left side is added to the basic grid. This column contains expanded/collapsed icon (see subgrid property in StyleUI) which indicates that the user can click on it to expand the row. By default all rows are collapsed. See \nSubgrid\n for details\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nsubGridOptions\n\n\nobject\n\n\nA set of additional options for the subgrid. For more information and default values see \nSubgrid\n.\n\n\n\n\nYes\n\n\n\n\n\n\nsubGridModel\n\n\narray\n\n\nThis property, which describes the model of the subgrid, has an effect only if the subGrid property is set to \ntrue\n. It is an array in which we describe the column model for the subgrid data. For more information see \nSubgrid\n.\n\n\nempty\n\n\nNo\n\n\n\n\n\n\nsubgridtype\n\n\nmixed\n\n\nSet the dataType of the ajax call to the server when make the subgrid request. Can be \nxml\n or \njson\n. Can be a function. If not set, get the datatype defined in the grid option \ndatatype\n.\n\n\nnull\n\n\nYes\n\n\n\n\n\n\nsubGridUrl\n\n\nstring\n\n\nThis option has effect only if the \nsubGrid\n option is set to \ntrue\n. This option points to the url from which we get the data for the subgrid. jqGrid adds the id of the row to this url as parameter. If there is a need to pass additional parameters, use the \nparams\n option in \nsubGridModel\n. See \nSubgrid\n\n\nempty string\n\n\nYes\n\n\n\n\n\n\nsubGridWidth\n\n\ninteger\n\n\nDefines the width of the sub-grid column if \nsubGrid\n is enabled.\n\n\n20\n\n\nNo\n\n\n\n\n\n\ntoolbar\n\n\narray\n\n\nThis option defines the toolbar of the grid. This is an array with two elements in which the first element's value enables the toolbar and the second defines the position relative to the body layer (table data). Possible values are \ntop\n, \nbottom\n, and \nboth\n. When we set it like \ntoolbar: [true,\"both\"]\n two toolbar s are created -- one on the top of table data and the other at the bottom of the table data. When we have two toolbar s, then we create two elements (div). The id of the top bar is constructed by concatenating the string \"t_\" and the id of the grid, like \n\"t_\" + id_of_the_grid\n and the id of the bottom toolbar is constructed by concatenating the string \"tb_\" and the id of the grid, like \n\"tb_\" + id_of_the grid\n. In the case where only one toolbar is created, we have the id as \n\"t_\" + id_of_the_grid\n, independent of where this toolbar is located (top or bottom)\n\n\n[false,'']\n\n\nNo\n\n\n\n\n\n\ntoppager\n\n\nboolean\n\n\nWhen enabled this option places a pager element at top of the grid, below the caption (if available). If another pager is defined, both can coexist and are kept in sync (except adding custom buttons in navigator). The id of the newly created pager is the combination \ngrid_id + \"_toppager\"\n. All the buttons which are connected to the 'bottom' pager are valid for the top pager. This means that if by example pginput is true it will display on the toppager too.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\ntotaltime\n\n\ninteger\n\n\nReadonly parameter. It gives the loading time of the records - currently available only when we load xml,json or jsonp data. The measurement begins when the request is complete and ends when the last row is added.\n\n\n0\n\n\nNo\n\n\n\n\n\n\ntreedatatype\n\n\nmixed\n\n\nGives the initial datatype when tree grid is enabled (see \ndatatype\n option). Usually this should not be changed. During the reading process this option is equal to the datatype option.\n\n\nnull\n\n\nNo\n\n\n\n\n\n\ntreeGrid\n\n\nboolean\n\n\nEnables (disables) the tree grid format. For more details see \nTree Grid\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\ntreeGrid_bigData\n\n\nboolean\n\n\nEnables ( if set to true) the tree grid pagging with root nodes as described \nhere\n\n\nfalse\n\n\nYes\n\n\n\n\n\n\ntreeGridModel\n\n\nstring\n\n\nMethod used for the \ntreeGrid\n. The value can be either \nnested\n or \nadjacency\n. See \nTree Grid\n\n\nnested\n\n\nNo\n\n\n\n\n\n\ntreeIcons\n\n\narray\n\n\nThis array sets the icons used in the tree grid.The default values are set from styleUI property treegrid of the used \nCSS framework\n.\n\n\n\n\nNo\n\n\n\n\n\n\ntreeReader\n\n\nobject\n\n\nExtends the \ncolModel\n defined in the basic grid when treeGrid is set to true. The fields described here are appended to end of the \ncolModel\n array and are hidden. This means that the data returned from the server should have values for these fields. For a full description of all valid values see \nTree Grid\n.\n\n\n\n\nNo\n\n\n\n\n\n\ntree_root_level\n\n\nnumeric\n\n\nDefines the level from where the root element begins when treeGrid is enabled.\n\n\n0\n\n\nNo\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nThe url of the file that returns the data needed to populate the grid.  May be set to \nclientArray\n to manually post data to server; see \nEditing\n.\n\n\nnull\n\n\nYes\n\n\n\n\n\n\nuserData\n\n\nobject\n\n\nThis object contains custom information from the request. Can be used at any time. See \nRetrieving Data\n.\n\n\nempty\n\n\nNo\n\n\n\n\n\n\nuserDataOnFooter\n\n\nboolean\n\n\nWhen set to \ntrue\n we directly place the user data array \nuserData\n in the footer if the \nfooterrow\n parameter is set to \ntrue\n. The rules are as follows: If the \nuserData\n array contains a name which matches any name defined in \ncolModel\n, then the value is placed in that column. If there are no such values nothing is placed. Note that if this option is used we use the current formatter options (if available) for that column. See \nfooterData\n method\n\n\nfalse\n\n\nYes\n\n\n\n\n\n\nuseNameForSearch\n\n\nboolean\n\n\nWhen set to true forces jqGrid to perform the search by name and not by index (if set) in colModel when datatype is local\n\n\nfalse\n\n\nYes\n\n\n\n\n\n\nviewOptions\n\n\nobject\n\n\nThe parameter stores the view options (parameters) in navigator \nsee navigator\n if the option \nstoreNavOptions\n is set to true and \nnavGrid\n method is called\n\n\nempty\n\n\nNo\n\n\n\n\n\n\nviewrecords\n\n\nboolean\n\n\nIf \ntrue\n, jqGrid displays the beginning and ending record number in the grid, out of the total number of records in the query.  This information is shown in the pager bar (bottom right by default)in this format: \"View X to Y out of Z\".  If this value is \ntrue\n, there are other parameters that can be adjusted, including \nemptyrecords\n and \nrecordtext\n.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nviewsortcols\n\n\narray\n\n\nThe purpose of this parameter is to define a different look and behavior for the sorting icons (up/down arrows) that appear in the column headers. This parameter is an array with the following default options \nviewsortcols : [false,'vertical',true]\n. The first parameter determines if sorting icons should be visible on all the columns that have the sortable property set to \ntrue\n. Setting this value to \ntrue\n could be useful if you want to indicate to the user that (s)he can sort on that particular column. The default of false sets the icon to be visible only on the column on which that data has been last sorted. Setting this parameter to \ntrue\n causes all icons in all sortable columns to be visible. The second parameter determines how icons should be placed - \nvertical\n means that the sorting arrows are one under the other. 'horizontal' means that the arrows should be next to one another. The third parameter determines the click functionality. If set to \ntrue\n the data is sorted if the user clicks anywhere in the column's header, not only the icons. If set to false the data is sorted only when the sorting icons in the headers are clicked. \nImportant:\n If you are setting the third element to false, make sure that you set the first element to \ntrue\n; if you don't, the icons will not be visible and the user will not know where to click to be able to sort, since clicking just anywhere in the header will not guarantee a sort.\n\n\n\n\nNo\n\n\n\n\n\n\nwidth\n\n\nnumber\n\n\nIf this option is not set, the width of the grid is the sum of the widths of the columns defined in the colModel (in pixels). If this option is set, the initial width of each column is set according to the value of the \nshrinkToFit\n option. To change the grid width use \nsetGridWidth\n method.\n\n\nnone\n\n\nNo\n\n\n\n\n\n\nxmlReader\n\n\nobject\n\n\nAn object which describes the structure of the expected xml data. For a full description refer to \nRetrieving Data in XML Format\n.\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nSetting Options globaly\n\n\n\n\nThere are cases where you want to have some particular options to be changed (change the default value) and that this option should be a common for all your grids. This can be done using extend function of jQuery.\n\n\nLet us suppose that you want to have a zebra like grid (alternate rows have different colors) and want that all you grids have this options set to true. If you do not want this code to be written every time when you create a grid, here is a way to do it :\n\n\n...\n\n\nscript\n \nsrc\n=\njs/jquery.jqGrid.min.js\n \ntype\n=\ntext/javascript\n/script\n\n\nscript\n \ntype\n=\ntext/javascript\n\n\n...\n\n\n// Here we set the altRows option globally\n\n\njQuery\n.\nextend\n(\njQuery\n.\njgrid\n.\ndefaults\n,\n \n{\n \naltRows\n:\ntrue\n \n});\n\n\n...\n\n\n/script\n\n\n\n\n\n\nThis code should be placed after loading jqGrid JavaScript file.\n\n\nYou can add as many valid jqGrid options as you want here.\n\n\nOverwrite options\n\n\n\n\nIn the previous example, we learn how to set common options for all grids in your application. However, you might encounter situations where you would like to overwrite the global and or default options for a particular grid.\n\n\nTo do this, you will need to change the option in the desired grid. For example, let's say we set a global option for all rows to have alternating colors (the zebra grid). If we don't want alternating colors for a certain grid, just set altRows to false and the global option will be overwritten.\n\n\nThe code for this scenario can be found here:\n\n\n...\n\n\nscript\n \nsrc\n=\njs/jquery.jqGrid.min.js\n \ntype\n=\ntext/javascript\n/script\n\n\nscript\n \ntype\n=\ntext/javascript\n\n\n...\n\n\n// Here we set the altRows option globally\n\n\njQuery\n.\nextend\n(\njQuery\n.\njgrid\n.\ndefaults\n,\n \n{\n \naltRows\n:\ntrue\n \n});\n\n\n...\n\n\n/script\n\n\n...\n\n\nscript\n \ntype\n=\ntext/javascript\n\n\njQuery\n(\ndocument\n).\nready\n(\nfunction\n(){\n\n  \njQuery\n(\n#list\n).\njqGrid\n({\n\n    \nurl\n:\nexample.php\n,\n\n    \n// here we do not want zebra for this grid\n\n    \naltRows\n:\n \nfalse\n,\n\n    \n...\n\n  \n});\n\n  \n...\n\n\n});\n\n\n\n\n\n\ncolModel options\n\n\n\n\nThe colModel property defines the individual grid columns as an object of properties. This is the most important part of the jqGrid. Syntax of setting colModel is:\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n:\n \n[\n\n     \n{\nname\n:\nname1\n,\n \nindex\n:\nindex1\n...},\n\n     \n{...},\n\n     \n...\n\n   \n],\n\n\n...\n\n\n});\n\n\n\n\n\n\nThe minimal required property is \nname\n.\n\n\nThe colModel options can be get or set using \ngetColProp\n and \nsetColProp\n methods. See \nMethods\n.\n\n\nTo get a properties of column with name \nname1\n do:\n\n\n...\n\n\nvar\n \nmyprop\n \n=\n \njQuery\n(\n#gridid\n).\njqGrid\n(\ngetColProp\n,\n \nname1\n);\n\n\n...\n\n\n\n\n\n\nThe method has only one parameter - column name. If the column name does not exists the method return empty object.\n\n\nTo set a property(s) of column with name with \nname1\n do:\n\n\n...\n\n\njQuery\n(\n#gridid\n).\njqGrid\n(\nsetColProp\n,\n \nname1\n,\n \n{\nindex\n:\nnewindex\n,...});\n\n\n...\n\n\n\n\n\n\nIn this case the index property of column with name name1 will be changed from index1 to newindex.\n\nParameters passed to the method are column name and a object of type name:value.\n\n\nTo get the entire colModel array use \ngetGridParam\n method.\n\n\n...\n\n\nvar\n \ncolmodel\n \n=\n \njQuery\n(\n#gridid\n).\njqGrid\n(\ngetGridParam\n,\n \ncolModel\n);\n\n\n...\n\n\n\n\n\n\nThe available colModel properties are listed here, in alphabetic order. Some propties contain other objects. These properties will be described in the appropriate chapter - link will be provided.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nalign\n\n\nstring\n\n\nDefines the alignment of the cell in the Body layer, not in header cell. Possible values: left, center, right.\n\n\nleft\n\n\n\n\n\n\ncellattr\n\n\nfunction\n\n\nThis function add attributes to the cell during the creation of the data - i.e dynamically. By example all valid attributes for the table cell can be used or a style attribute with different properties. The function should return string. Parameters passed to this function are:  \n \nrowId\n  - the id of the row \n \nval\n  - the value which will be added in the cell \n \nrawObject\n - the raw object of the data row - i.e if datatype is json - array, if datatype is xml xml node. \n \ncm\n - all the properties of this column listed in the colModel \n \nrdata\n - the data row which will be inserted in the row. This parameter is array of type name:value, where name is the name in colModel\n\n\nnull\n\n\n\n\n\n\nclasses\n\n\nstring\n\n\nThis option allow to add classes to the column. If more than one class will be used a space should be set. By example classes:'class1 class2' will set a class1 and class2 to every cell on that column. In the grid css there is a predefined class \nui-ellipsis\n which allow to attach ellipsis to a particular row. Also this will work in FireFox too.\n\n\nempty string\n\n\n\n\n\n\ncolmenu\n\n\nboolean\n\n\nEnables/disables column menu to appear at particular grid header. This option is valid only if the grid option colMenu is set to true. See \nColumn menu\n\n\ntrue\n\n\n\n\n\n\ncoloptions\n\n\nobject\n\n\nDefines a various options for colum menu if it is enabled.For more information see \nColumn menu\n.\n\n\nempty\n\n\n\n\n\n\ndatefmt\n\n\nstring\n\n\nGoverns format of sorttype:date (when datetype becomes local) or/and editrules {date:true} fields. Determines the expected date format for that column - i.e the format set here should correspond to the value which will be inserted into the grid. Uses a PHP-like date formatting. Currently \"/\", \"-\", and \".\" are supported as date separators. Valid formats are: \n y,Y,yyyy for four digits year \n YY, yy for two digits year \n m,mm for months \n d,dd for days. \n The values is used to sort the date correct and validate it in case of editing with validation (editrules)  See \nArray Data\n\n\nY-m-d\n\n\n\n\n\n\neditable\n\n\nboolean\n\n\nDefines if the field is editable. This option is used in cell-, inline- and form-editing modules. By default this option is false, which means that in inline and cell editing the field is not allowed to be edit. In form editing the field does not appear into the edit form. See \nEditing\n\n\nfalse\n\n\n\n\n\n\neditoptions\n\n\nobject\n\n\nObject of allowed options (properties) for the editable column. The option is valid if editable option is set to true. See \nEdit options\n\n\nempty\n\n\n\n\n\n\neditrules\n\n\nobject\n\n\nObject sets additional rules for the editable field. Mostly used for validation. See \nEdit rules\n\n\nempty\n\n\n\n\n\n\nedittype\n\n\nstring\n\n\nDefines the edit type for editing modules. Possible values: text, textarea, select, checkbox, password, button, image and file and etc. See also \nEdit type\n\n\ntext\n\n\n\n\n\n\nexportcol\n\n\nboolean\n\n\nDetermines if the column should be exported when using exportToCsv, exportToExcel and exportToPdf methods. If set to false the column is not exported. See \nExporting\n\n\ntrue\n\n\n\n\n\n\nfirstsortorder\n\n\nstring\n\n\nCan be set to asc or desc, the column will be sorted in that direction on first sort. Subsequent sorts of the column will toggle as usual\n\n\nasc\n\n\n\n\n\n\nfixed\n\n\nboolean\n\n\nIf set to true this option does not allow recalculation of the width of the column if shrinkToFit option is set to true. Also the width does not change if a setGridWidth method is used to change the grid width.\n\n\nfalse\n\n\n\n\n\n\nformoptions\n\n\nobject\n\n\nDefines various options for form editing. See \nForm options\n\n\nempty\n\n\n\n\n\n\nformatoptions\n\n\nobject\n\n\nFormat options can be defined for particular columns, overwriting the defaults from the language file. See \nFormatter\n for more details.\n\n\nnone\n\n\n\n\n\n\nformatter\n\n\nmixed\n\n\nSet predefined types (string) or custom function name that controls the format of this field. See \nFormatter\n for more details.\n\n\nnone\n\n\n\n\n\n\nfrozen\n\n\nboolean\n\n\nIf set to true determines that this column will be frozen after calling the setFrozenColumns method. See \nFrozen Columns\n\n\nfalse\n\n\n\n\n\n\nhidedlg\n\n\nboolean\n\n\nIf set to true this column will not appear in the dialog where users can choose which columns to show, hide or reorder using the columnChooser method \njQuery UI Integrations\n or colMenu \nColumn action\n.\n\n\nfalse\n\n\n\n\n\n\nhidden\n\n\nboolean\n\n\nDefines if this column is hidden at initialization. The column is not editable and will not show in Form editing. Instead tha the column is hidden the data is presented in the grid. See methods hideCol and showCol. See \neditrules\n to edit a column in form edit when hidden.\n\n\nfalse\n\n\n\n\n\n\nindex\n\n\nstring\n\n\nSet the index name when sorting. Passed as sidx parameter. If set this field is used in serching - i.e the field is send to the server for serching or used in local searching.\n\n\nempty\n\n\n\n\n\n\njsonmap\n\n\nmixed\n\n\nDefines the json mapping for the column in the incoming json request/string. Can be used as function with parameter the row data. See \nRetrieving JSON Data\n\n\nnone\n\n\n\n\n\n\nkey\n\n\nboolean\n\n\nOverwrite the id (defined in readers) from server or array data. Can be set as id for the unique row id. Only one column can have this property. This option have higher priority as those from the readers. If there are more than one key set the grid finds the first one and the second is ignored. When set this option is equal to the grid option \nkeyName\n.\n\n\nfalse\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nWhen colNames array is empty, defines the header caption for this column. If both the colNames array and this setting are empty, the heading for this column is values of name property.\n\n\nnone\n\n\n\n\n\n\nminResizeWidth\n\n\ninteger\n\n\ndefines minimal re-sizing width per column. When set - i.e \n 0 this option have higher priority of grid option  minColWidth\n\n\n0\n\n\n\n\n\n\nname\n\n\nstring\n\n\nSet the unique name in the grid for the column. This property is required. As well as other words used as property/event names, the reserved words (which cannot be used for names) include \nsubgrid, cb and rn\n.\n\n\nRequired\n\n\n\n\n\n\nresizable\n\n\nboolean\n\n\nDefines if the column can be re sized with the mouse or resizeColumn method.\n\n\ntrue\n\n\n\n\n\n\nsearch\n\n\nboolean\n\n\nWhen used in search modules, disables or enables searching on that column. \nSearch Configuration\n\n\ntrue\n\n\n\n\n\n\nsearchoptions\n\n\nobject\n\n\nDefines search options used in searching. \nSearch Configuration\n\n\nempty\n\n\n\n\n\n\nsortable\n\n\nboolean\n\n\nDefines if the field can be sorted. If false click with the mouse on that column does not provide any action.\n\n\ntrue\n\n\n\n\n\n\nsortfunc\n\n\nfunction\n\n\nCustom function to make custom sorting when datatype is local. Three parameters a, b and direction are passed. The \na\n and \nb\n parameters are values to be compared, \ndirection\n is numeric 1 and -1 for ascending and descending order. The function should return the same values as the build in JavaScript function sort - ie: 1, -1 or 0.\n\n\nnull\n\n\n\n\n\n\nsorttype\n\n\nmixed\n\n\nUsed when datatype is local. Defines the type of the column for appropriate sorting and searching. Possible values: \nint/integer - for sorting integer \nfloat/number/currency\n - for sorting decimal numbers \ndate\n - for sorting date (see datefmt parameter) \n \ntext\n - for text sorting \nfunction* - defines a custom function for sorting type. To this function we pass the value to be sorted and it should return a value. \nSee \nArray Data\n\n\ntext\n\n\n\n\n\n\nstype\n\n\nstring\n\n\nDetermines the input type of the element when searching - the possible values are \ntext\n for creating input field and \nselect\n for select element. See \nSearch Configuration\n\n\ntext\n\n\n\n\n\n\nsurl\n\n\nstring\n\n\nThis option is deprecated. Use \nsearchoptions : {dataUrl:'...'}\n instead. See \nSearching\n.\n\n\nempty\n\n\n\n\n\n\ntemplate\n\n\nobject\n\n\nSet of valid properties for the colModel. This option can be used if you want to overwrite a lot of default values in the column model with easy. By example you can define a common object with valid colModel options and set it here to overwrite default one. See also \ncmTemplate\n in grid options\n\n\nnull\n\n\n\n\n\n\ntitle\n\n\nboolean\n\n\nIf this option is false the title is not displayed in that column when we hover a cell with the mouse\n\n\ntrue\n\n\n\n\n\n\nwidth\n\n\nnumber\n\n\nSet the initial width of the column, in pixels. This value accept only number and the measure is in pixels.\n\n\n150\n\n\n\n\n\n\nwidthOrg\n\n\nnumber\n\n\nThis width is equal to the initial set width and does not change during resizing of the grid.\n\n\n150\n\n\n\n\n\n\nxmlmap\n\n\nstring\n\n\nDefines the xml mapping for the column in the incoming xml file. A CSS specification for this can be defined.  Can be used as function with parameter the xmlrow data. See \nRetrieving Data\n\n\nnone\n\n\n\n\n\n\nunformat\n\n\nfunction\n\n\nCustom function to \"unformat\" a value (to bring it in its original state) of the cell when used in editing and user defined formatter is used. See \nCustom Formatter\n and \nEditing\n. (Unformat is also called during sort operations. The value returned by unformat is the value compared during the sort.)\n\n\nnull\n\n\n\n\n\n\nviewable\n\n\nboolean\n\n\nThis option is valid only when \nviewGridRow\n method is activated. When the option is set to false the column does not appear in view Form.\n\n\ntrue\n\n\n\n\n\n\n\n\n\n\nData - retrieving, mapping, configuration\n\n\n\n\nThis is the most important part of Guriddo jqGrid. Understanding this will make the rest of using Guriddo jqGrid very easy.\n\n\nGuriddo jqGrid support obtaining data from the following basic format types: JSON, XML and Array data, which can be considered as subpart of JSON.\n\n\nThe data is obtained via Ajax or/and locally with the appropriate JSON String, XML String and Array data.\n\n\nThe following items are related with the data:\n\n\nData related items\n\n\nBasic Guriddo \njqGrid options\n\n\n\n\ndatatype\n\n\njsonReader\n\n\nxmlReader\n\n\nlocalReader\n\n\ndata\n\n\nurl\n\n\ndatastr\n\n\nloadonce\n\n\n\n\nBasic Guriddo \njqGrid events\n\n\n\n\nserializeGridData\n\n\nbeforeProcessing\n\n\nloadComplete\n\n\ngridComplete\n\n\nloadError\n\n\nloadBeforeSend\n\n\n\n\nBasic Guriddo \njqGrid functions\n\n\n\n\naddJSONData\n\n\naddXmlData\n\n\naddLocalData\n\n\n\n\nBasic \ncolModel options\n\n\nHere are options valid for every object (jqGrid column) described in colModel array.\n\n\n\n\nxmlmap\n\n\njsonmap\n\n\nkey\n\n\n\n\nBasic Guriddo \njqGrid methods\n\n\n\n\naddRowData\n\n\ndelRowData\n\n\nsetRowData\n\n\ngetRowData\n\n\nsetCell\n\n\ngetCell\n\n\ngetCol\n\n\ngetLocalRow\n\n\n\n\nJSON Data\n\n\n\n\nJSON is the most important exchange format today. Guriddo jqGrid maps the external JSON data from ajax (or other sources) to grid using the main parameter \njsonReader\n.\n\n\nTe default setting of jsonReader is:\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \njsonReader\n \n:\n \n{\n\n      \nroot\n:\n \nrows\n,\n\n      \npage\n:\n \npage\n,\n\n      \ntotal\n:\n \ntotal\n,\n\n      \nrecords\n:\n \nrecords\n,\n\n      \nrepeatitems\n:\n \ntrue\n,\n\n      \ncell\n:\n \ncell\n,\n\n      \nid\n:\n \nid\n,\n\n      \nuserdata\n:\n \nuserdata\n,\n\n      \nsubgrid\n:\n \n{\n\n         \nroot\n:\nrows\n,\n\n         \nrepeatitems\n:\n \ntrue\n,\n\n         \ncell\n:\ncell\n\n      \n}\n\n   \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nTo allow this to happen the grid option datatype should be set to \njson, jsonp\n (in case of \njsonstring\n datastr option should be set with the json string input data).\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n  \ndatatype\n:\n \njson\n,\n\n  \nurl\n \n:\n \ndata.json\n\n\n...\n\n\n});\n\n\n\n\n\n\nUsing our \nQuick Start\n example let suppose that we have the following grid.\n\n\n$\n(\n#grid\n).\njqGrid\n({\n\n  \ndatatype\n:\n \njson\n,\n\n  \nurl\n \n:\n \ndata.json\n\n  \ncolModel\n:\n \n[\n\n     \n{\nname\n:\n \nname\n,\n \nlabel\n \n:\n \nName\n},\n\n     \n{\nname\n:\n \nphone\n,\n \nlabel\n \n:\n \nPhone Number\n}\n\n   \n]\n\n\n});\n\n\n\n\n\n\nIn this case using the default jsonReader we can accept two JSON data formats. The first one should be:\n\n\n{\n\n  \ntotal\n:\n \n1\n,\n\n  \npage\n:\n \n1\n,\n\n  \nrecords\n:\n \n2\n,\n\n  \nrows\n \n:\n \n[\n\n    \n{\nid\n \n:\n1\n,\n \ncell\n \n:[\nBob\n,\n \n232-532-6268\n]},\n\n    \n{\nid\n \n:\n2\n,\n \ncell\n:\n \n[\nJeff\n,\n \n365-267-8325\n]}\n\n  \n]\n\n\n}\n\n\n\n\n\n\nand the second one should be:\n\n\n{\n\n  \ntotal\n:\n \n1\n,\n\n  \npage\n:\n \n1\n,\n\n  \nrecords\n:\n \n2\n,\n\n  \nrows\n \n:\n \n[\n\n    \n{\nid\n \n:\n1\n,\n \nname\n:\n \nBob\n,\n \nphone\n:\n \n232-532-6268\n,\n \naddres\n:\naddress 1\n},\n\n    \n{\nid\n \n:\n2\n,\n \nname\n:\n \nJeff\n,\n \nphone\n:\n \n365-267-8325\n,\n \naddres\n:\naddress 2\n}\n  \n  \n]\n\n\n}\n\n\n\n\n\n\nNote the differences in \nrow\n property. This means that Guriddo jqGrid can auto detect the input JSON format to put the data into the grid.\n\n\nNote:\n When using the input format as set in the first example the length of the cell array should be equal to the length of \ncolModel\n. In case of difference no data will be present to the grid.\n\n\nThe properties used in \njsonReader\n mean the following:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntotal\n\n\ntotal pages for the query\n\n\n\n\n\n\npage\n\n\ncurrent page of the query\n\n\n\n\n\n\nrecords\n\n\ntotal number of records for the query\n\n\n\n\n\n\nrows\n\n\nan array that contains the actual data\n\n\n\n\n\n\nid\n\n\nthe unique id of the row\n\n\n\n\n\n\ncell\n\n\nan array that contains the data for a row\n\n\n\n\n\n\nrepeatitems\n\n\ntells jqGrid that the information for the data in the row is repeatable - i.e. the elements have the same tag cell described in cell array element. Setting this option to false instructs jqGrid to search elements in the json data by name. This is the name from colModel or the name described with the jsonmap option in colModel\n\n\n\n\n\n\nuserdata\n\n\nholds additional data from serevr to be presented in grid. See \nuserdata\n below\n\n\n\n\n\n\nsubgrid\n\n\nDefinition for subgrid. See \nSubgrid\n\n\n\n\n\n\n\n\nLet's begin our walk through the jsonReader.\n\n\nThe first element is a\n\n\n\n\nroot\n\n\n\n\nThis element describes where our row data begins. In other words, this points to the array that contains the data. If we set :\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n  \n...\n\n  \njsonReader\n \n:\n \n{\nroot\n:\nclientdata\n},\n\n  \n...\n\n\n});\n\n\n\n\n\n\nthen the returned string should be\n\n\n{\n\n  \ntotal\n:\n \n1\n,\n\n  \npage\n:\n \n1\n,\n\n  \nrecords\n:\n \n2\n,\n\n  \nclientdata\n \n:\n \n[\n\n    \n{\nid\n \n:\n1\n,\n \ncell\n \n:[\nBob\n,\n \n232-532-6268\n]},\n\n    \n{\nid\n \n:\n2\n,\n \ncell\n:\n \n[\nJeff\n,\n \n365-267-8325\n]}\n\n  \n]\n\n\n}\n\n\n\n\n\n\nThe\n\n\n\n\npage\n\n\ntotal\n\n\nrecords\n\n\n\n\nelements describe the information needed for the pager. For example, if the jsonReader is set as follows:\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \njsonReader\n \n:\n \n{\n\n      \nroot\n:\nclientdata\n,\n\n      \npage\n:\n \ncurrpage\n,\n\n      \ntotal\n:\n \ntotalpages\n,\n\n      \nrecords\n:\n \ntotalrecords\n\n   \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nthen the data should be :\n\n\n{\n\n  \ntotalpages\n:\n \n1\n,\n\n  \ncurrpage\n:\n \n1\n,\n\n  \ntotalrecords\n:\n \n2\n,\n\n  \nclientdata\n \n:\n \n[\n\n    \n{\nid\n \n:\n1\n,\n \ncell\n \n:[\nBob\n,\n \n232-532-6268\n]},\n\n    \n{\nid\n \n:\n2\n,\n \ncell\n:\n \n[\nJeff\n,\n \n365-267-8325\n]}\n\n  \n]\n\n\n}\n\n\n\n\n\n\nThe\n\n\n\n\ncell\n\n\n\n\nelement describes the array which contains the data for the row.\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \njsonReader\n \n:\n \n{\n\n      \nroot\n:\nclientdata\n,\n\n      \npage\n:\n \ncurrpage\n,\n\n      \ntotal\n:\n \ntotalpages\n,\n\n      \nrecords\n:\n \ntotalrecords\n,\n\n      \ncell\n:\n \nclrow\n\n   \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nThe data to match this description would be\n\n\n \n{\n\n   \ntotalpages\n:\n \n1\n,\n\n   \ncurrpage\n:\n \n1\n,\n\n   \ntotalrecords\n:\n \n2\n,\n\n   \nclientdata\n \n:\n \n[\n\n     \n{\nid\n \n:\n1\n,\n \nclrow\n \n:[\nBob\n,\n \n232-532-6268\n]},\n\n     \n{\nid\n \n:\n2\n,\n \nclrow\n:\n \n[\nJeff\n,\n \n365-267-8325\n]}\n\n   \n]\n\n \n}\n\n\n\n\n\n\nThe\n\n- id\n\n\nelement describes the unique id for the row. This id is set as id in the jqGrid table row element. It is very important to note that the id should be unique for every row.\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \njsonReader\n \n:\n \n{\n\n      \nroot\n:\nclientdata\n,\n\n      \npage\n:\n \ncurrpage\n,\n\n      \ntotal\n:\n \ntotalpages\n,\n\n      \nrecords\n:\n \ntotalrecords\n,\n\n      \ncell\n:\n \nclrow\n,\n\n      \nid\n \n:\n \nclid\n\n   \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nThe data for this description is:\n\n\n{\n\n  \ntotalpages\n:\n \n1\n,\n\n  \ncurrpage\n:\n \n1\n,\n\n  \ntotalrecords\n:\n \n2\n,\n\n  \nclientdata\n \n:\n \n[\n\n    \n{\nclid\n \n:\n1\n,\n \nclrow\n \n:[\nBob\n,\n \n232-532-6268\n]},\n\n    \n{\nclid\n \n:\n2\n,\n \nclrow\n:\n \n[\nJeff\n,\n \n365-267-8325\n]}\n\n  \n]\n\n\n}\n\n\n\n\n\n\nIt is possible to set the cell element to an empty string. And, it is possible to set the id as number. Here is an example of these possibilities:\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \njsonReader\n \n:\n \n{\n\n      \nroot\n:\nclientdata\n,\n\n      \npage\n:\n \ncurrpage\n,\n\n      \ntotal\n:\n \ntotalpages\n,\n\n      \nrecords\n:\n \ntotalrecords\n,\n\n      \ncell\n:\n \n,\n\n      \nid\n \n:\n \n0\n\n   \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nIn this case the id is the first element from the row data\n\n\n{\n\n  \ntotalpages\n:\n \n1\n,\n\n  \ncurrpage\n:\n \n1\n,\n\n  \ntotalrecords\n:\n \n2\n,\n\n  \nclientdata\n \n:\n \n[\n\n    \n[\n1\n,\nBob\n,\n \n232-532-6268\n],\n\n    \n[\n2\n,\n \nJeff\n,\n \n365-267-8325\n]\n\n  \n]\n\n\n}\n\n\n\n\n\n\nThe\n\n\n\n\nrepeatitems\n\n\n\n\nelement tells Guriddo jqGrid that the information for the data in the row is repeatable - i.e. the elements have the same tag cell described in cell element. Setting this option to false instructs jqGrid to search elements in the json data by name. This is the name from colModel or the name described with the jsonmap option in colModel.\n\n\nHere is an example:\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \njsonReader\n \n:\n \n{\n\n      \nroot\n:\nclientdata\n,\n\n      \npage\n:\n \ncurrpage\n,\n\n      \ntotal\n:\n \ntotalpages\n,\n\n      \nrecords\n:\n \ntotalrecords\n,\n\n      \nrepeatitems\n:\n \nfalse\n,\n\n      \nid\n \n:\n \n0\n\n   \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nThe resulting data in our example should be:\n\n\n{\n\n  \ntotalpages\n:\n \n1\n,\n\n  \ncurrpage\n:\n \n1\n,\n\n  \ntotalrecords\n:\n \n2\n,\n\n  \nclientdata\n \n:\n \n[\n\n    \n{\nclid\n \n:\n1\n,\n \nname\n:\nBob\n,\n \nphone\n:\n \n232-532-6268\n},\n\n    \n{\nclid\n \n:\n2\n,\n \nname\n:\n \nJeff\n,\n \nphone\n:\n \n365-267-8325\n}\n\n  \n]\n\n\n}\n\n\n\n\n\n\nThe id element in this case is 'clid'. The same result will be if we set id to clid in the above example.\n\n\nA very useful feature here (repeatitems:false) is that there is no need to include all the data that is represented in colModel. Since we make a search by name, the order does not need to match the order in colModel. Hence the following JSON data will be correctly interpreted in jqGrid.\n\n\n{\n\n  \ntotalpages\n:\n \n1\n,\n\n  \ncurrpage\n:\n \n1\n,\n\n  \ntotalrecords\n:\n \n2\n,\n\n  \nclientdata\n \n:\n \n[\n\n    \n{\nclid\n \n:\n1\n,\n \nphone\n:\n \n232-532-6268\n},\n\n    \n{\nclid\n \n:\n2\n,\n \nname\n:\n \nJeff\n}\n\n  \n]\n\n\n}\n\n\n\n\n\n\nJSON String\n\n\nThe jsonstring option has the same features as json. The only difference is that the data is passed as string. In this case we need to have a valid JSON data string. The string should be passed in  \ndatastr\n grid option.\n\n\nJSON dot notation\n\n\nWhen using JSON data with named values (i.e the repeatitems option is false) we can use named dot notation and index notation.\n\n\nFor example, our colModel definition might be as follows:\n\n\n$\n(\n#grid\n).\njqGrid\n({\n\n  \ndatatype\n:\n \njson\n,\n\n  \nurl\n \n:\n \ndata.json\n\n  \ncolModel\n:\n \n[\n\n     \n{\nname\n:\n \nclient.name\n,\n \nlabel\n \n:\n \nName\n},\n\n     \n{\nname\n:\n \nclient.phone\n,\n \nlabel\n \n:\n \nPhone Number\n}\n\n   \n]\n\n\n});\n\n\n\n\n\n\nNote the elements defined as name:'client.name' and name:'client.phone'\n\n\nThen our data:\n\n\n{\n\n  \ntotal\n:\n \n1\n,\n\n  \npage\n:\n \n1\n,\n\n  \nrecords\n:\n \n2\n,\n\n  \nrows\n \n:\n \n[\n\n    \n{\nid\n \n:\n1\n,\n \nclient\n \n:\n \n{\n \nname\n:\n \nBob\n,\n \nphone\n:\n \n232-532-6268\n \n},\n \naddres\n:\naddress 1\n},\n\n    \n{\nid\n \n:\n2\n,\n \nclient\n \n:\n \n{\n \nname\n:\n \nJeff\n,\n \nphone\n:\n \n365-267-8325\n},\n \naddres\n:\naddress 2\n}\n  \n  \n]\n\n\n}\n\n\n\n\n\n\njsonReader as Function\n\n\nIn certain situation data can be obtained from a web service. In this case it is not possible to configure all the properties of the response so that the grid will work properly. As of version 3.6.4 it is possible to define the elements of the jsonReader as function. Below is a example on how this can be used:\n\n\njsonReader\n:\n \n{\n\n    \nrepeatitems\n:\n \nfalse\n,\n\n    \nid\n:\n \nId\n,\n\n    \nroot\n:\n \nfunction\n \n(\nobj\n)\n \n{\n \nreturn\n \nobj\n.\nrows\n;\n \n},\n\n    \npage\n:\n \nfunction\n \n(\nobj\n)\n \n{\n \nreturn\n \nobj\n.\npage\n;\n \n},\n\n    \ntotal\n:\n \nfunction\n \n(\nobj\n)\n \n{\n \nreturn\n \nobj\n.\nrecords\n;\n \n},\n\n    \nrecords\n:\n \nfunction\n \n(\nobj\n)\n \n{\n \nreturn\n \nobj\n.\nrows\n.\nlength\n;\n \n}\n\n\n}\n\n\n\n\n\n\nWhere obj is the response from the service/server\n\n\nArray Data\n\n\nDespite the fact that the primary goal of jqGrid is to represent dynamic data returned from a database, jqGrid includes a wide range of methods to manipulate data at client side and we named it Array data.\n\n\nSee related items in \nData related items\n\n\nAs of version 3.7 we introduce two additional parameters \ndata\n and \nlocalReader\n. The data parameter is described in grid options. The localReader has the same sense as jsonReader described above, but applied to array data that is stored locally.\n\n\nThe initial configuration of the localReader is the same as those from jsonReader\n\n\nlocalReader\n \n=\n \n{\n\n   \nroot\n:\n \nrows\n,\n\n   \npage\n:\n \npage\n,\n\n   \ntotal\n:\n \ntotal\n,\n\n   \nrecords\n:\n \nrecords\n,\n\n   \nrepeatitems\n:\n \nfalse\n,\n\n   \ncell\n:\n \ncell\n,\n\n   \nid\n:\n \nid\n,\n\n   \nuserdata\n:\n \nuserdata\n,\n\n   \nsubgrid\n:\n \n{\nroot\n:\nrows\n,\n \nrepeatitems\n:\n \ntrue\n,\n \ncell\n:\ncell\n}\n\n\n}\n\n\n\n\n\n\nAll operations that are valid for jsonReader can be applied to localReader.\n\n\nTo use array data we should set the option \ndatatype\n to local.\n\n\nvar\n \ndataArray\n \n=\n \n[\n\n  \n{\nname\n:\n \nBob\n,\n \nphone\n:\n \n232-532-6268\n},\n\n  \n{\nname\n:\n \nJeff\n,\n \nphone\n:\n \n365-267-8325\n}\n\n\n];\n\n\n\n$\n(\n#grid\n).\njqGrid\n({\n\n  \ndatatype\n:\n \nlocal\n,\n\n  \ndata\n:\n \ndataArray\n,\n\n  \ncolModel\n:\n \n[\n\n     \n{\nname\n:\n \nname\n,\n \nlabel\n \n:\n \nName\n},\n\n     \n{\nname\n:\n \nphone\n,\n \nlabel\n \n:\n \nPhone Number\n}\n\n   \n]\n\n\n});\n\n\n\n\n\n\nWhen using array data it is a good idea to set the sorttypes for the columns - this way the local sorting will be performed correct. If the sorttype is not set the default sorttype is 'text'. Let's consider our exyended example in terms of array data.\n\n\nvar\n \ndataArray\n \n=\n \n[\n\n  \n{\nclid\n:\n \n1\n,\n \nname\n:\n \nBob\n,\n \nphone\n:\n \n232-532-6268\n,\n \nbirthday\n:\n \n01/01/1971\n,\n \nsalary\n:\n \n1234.00\n},\n\n  \n{\nclid\n:\n \n2\n,\n \nname\n:\n \nJeff\n,\n \nphone\n:\n \n365-267-8325\n,\n \nbirthday\n:\n \n02/02/1972\n,\n \nsalary\n \n2345.00\n}\n\n\n];\n\n\n\n$\n(\n#grid\n).\njqGrid\n({\n\n  \ndatatype\n:\n \nlocal\n,\n\n  \ndata\n:\n \ndataArray\n,\n\n  \ncolModel\n:\n \n[\n\n    \n{\nname\n:\n \nclid\n,\n \nlabel\n \n:\n \nId\n,\n \nsorttype\n:\n \nint\n},\n\n    \n{\nname\n:\n \nname\n,\n \nlabel\n \n:\n \nName\n},\n\n    \n{\nname\n:\n \nphone\n,\n \nlabel\n \n:\n \nPhone Number\n},\n\n    \n{\nname\n:\n \nbirthday\n,\n \nlabel\n \n:\n \nBirth day\n,\n \nsorttype\n:\n \ndate\n,\n \ndatefmt\n:\nd/m/Y\n},\n\n    \n{\nname\n:\n \nsalary\n,\n \nlabel\n \n:\n \nSalary\n,\n \nsorttype\n:\n \nfloat\n},\n\n  \n]\n\n\n});\n\n\n\n\n\n\nIn the example - additionally for the sorttype date we must known the format of the data that will be present in the grid. The default format is a ISO format 'Y-m-d'.\n\n\nFor local data manipulation see \nData related items\n\n\nXML Data\n\n\nExtensible Markup Language (XML) is used to describe data. The XML standard is a flexible way to create information formats and electronically share structured data via the public Internet, as well as via corporate networks. More information what XML is can be found \nhere\n\n\nThe rules of accessing the element from XML are the same as those used in jQuery library, i.e. CSS patterns. For more information \nrefer here\n.\n\n\nGuriddo jqGrid can read any attribute from the XML response. Moreover the tags can be set as function. See below.\n\n\nThe default setting for xmlReader is:\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \nxmlReader\n \n:\n \n{\n\n      \nroot\n:\n \nrows\n,\n\n      \nrow\n:\n \nrow\n,\n\n      \npage\n:\n \nrows\npage\n,\n\n      \ntotal\n:\n \nrows\ntotal\n,\n\n      \nrecords\n \n:\n \nrows\nrecords\n,\n\n      \nrepeatitems\n:\n \ntrue\n,\n\n      \ncell\n:\n \ncell\n,\n\n      \nid\n:\n \n[id]\n,\n\n      \nuserdata\n:\n \nuserdata\n,\n\n      \nsubgrid\n:\n \n{\n\n         \nroot\n:\nrows\n,\n\n         \nrow\n:\n \nrow\n,\n\n         \nrepeatitems\n:\n \ntrue\n,\n\n         \ncell\n:\ncell\n\n      \n}\n\n   \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nAll the elements in the XML reader will be explained as examples rather than as strong description.\n\n\n\n\nroot element\n\n\n\n\nThe first setting here defines the root element. This describes where our data begins and all other loops begin from this element. For example,\n\n\ninvoices\n\n   \nrequest\ntrue\n/request\n\n   ...\n   \nresult\n\n      \nrow\n\n         \ncell\ndata1\n/cell\n\n         \ncell\ndata2\n/cell\n\n         \ncell\ndata3\n/cell\n\n         \ncell\ndata4\n/cell\n\n         \ncell\ndata5\n/cell\n\n         \ncell\ndata6\n/cell\n\n      \n/row\n\n      ...\n   \n/result\n\n\n/invoices\n\n\n\n\n\n\nIf we set the root element to \nresult\n all data will be processed from there. In this case, because our rows are tagged \n and our cells tagged \n, all that is needed is to set.\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n  \nxmlReader\n:\n \n{\n \nroot\n:\nresult\n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nThe next element is the\n\n\n\n\nrow element.\n\n\n\n\nThis describes the information for particular row. Note that row must be a child of the root element. Here, if the XML looks like this:\n\n\n...\n\ninvoices\n\n   \nrequest\ntrue\n/request\n\n   ...\n   \nresult\n\n      \ninvoice\n\n         \ncell\ndata1\n/cell\n\n         \ncell\ndata2\n/cell\n\n         \ncell\ndata3\n/cell\n\n         \ncell\ndata4\n/cell\n\n         \ncell\ndata5\n/cell\n\n         \ncell\ndata6\n/cell\n\n      \n/invoice\n\n      ...\n   \n/result\n\n\n/invoices\n\n\n\n\n\n\nthe setting to properly interpret this data would be\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \nxmlReader\n:\n \n{\n \nroot\n:\nresult\n,\n \nrow\n:\ninvoice\n  \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nThe\n\n\n\n\npage\n\n\ntotal and\n\n\nrecords\n\n\n\n\nelements describe the information needed for the pager. These elements can be, but do not have to be, a child of the root element. For example, to interpret this data,\n\n\n...\n\ninvoices\n\n  \nrequest\ntrue\n/request\n\n  ...\n  \ncurrentpage\n1\n/currentpage\n\n  \ntotalpages\n10\n/totalpages\n\n  \ntotalrecords\n20\n/totalrecords\n\n  \nresult\n\n     \ninvoice\n\n        \ncell\ndata1\n/cell\n\n        \ncell\ndata2\n/cell\n\n        \ncell\ndata3\n/cell\n\n        \ncell\ndata4\n/cell\n\n        \ncell\ndata5\n/cell\n\n        \ncell\ndata6\n/cell\n\n     \n/invoice\n\n     ...\n  \n/result\n\n\n/invoices\n\n\n\n\n\n\nthe xmlReader will have to look like this:\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n  \nxmlReader\n:\n \n{\n\n     \nroot\n:\nresult\n,\n\n     \nrow\n:\ninvoice\n,\n\n     \npage\n:\ninvoices\ncurrentpage\n,\n\n     \ntotal\n:\ninvoices\ntotalpages\n,\n\n     \nrecords\n:\ninvoices\ntotalrecords\n\n \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nThe \nrepeatitems\n and \ncell\n elements tells jqGrid that the information for the data in the row is repeatable - i.e. the elements have the same tag cell described in cell element. For this example,\n\n\n...\n\ninvoices\n\n   \nrequest\ntrue\n/request\n\n   ...\n   \ncurrentpage\n1\n/currentpage\n\n   \ntotalpages\n10\n/totalpages\n\n   \ntotalrecords\n20\n/totalrecords\n\n   \nresult\n\n      \ninvoice\n\n         \ninvcell\ndata1\n/invcell\n\n         \ninvcell\ndata2\n/invcell\n\n         \ninvcell\ndata3\n/invcell\n\n         \ninvcell\ndata4\n/invcell\n\n         \ninvcell\ndata5\n/invcell\n\n         \ninvcell\ndata6\n/invcell\n\n      \n/invoice\n\n      ...\n   \n/result\n\n\n/invoices\n\n\n\n\n\n\nthe xmlReader will look like this:\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \nxmlReader\n:\n \n{\n\n      \nroot\n:\nresult\n,\n\n      \nrow\n:\ninvoice\n,\n\n      \npage\n:\ninvoices\ncurrentpage\n,\n\n      \ntotal\n:\ninvoices\ntotalpages\n,\n\n      \nrecords\n:\ninvoices\ntotalrecords\n,\n\n      \nrepeatitems\n:\ntrue\n,\n\n      \ncell\n:\ninvcell\n\n  \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nNext is the\n\n\n\n\nid\n\n\n\n\nelement. If repeatitems is set to true and key option in colModel is set to false the id, if present in XML data, must be a attribute of the row element. Lets look at the example:\n\n\n...\n\ninvoices\n\n  \nrequest\ntrue\n/request\n\n  ...\n  \ncurrentpage\n1\n/currentpage\n\n  \ntotalpages\n10\n/totalpages\n\n  \ntotalrecords\n20\n/totalrecords\n\n  \nresult\n\n     \ninvoice\n \nasin=\n12345\n\n        \ninvcell\ndata1\n/invcell\n\n        \ninvcell\ndata2\n/invcell\n\n        \ninvcell\ndata3\n/invcell\n\n        \ninvcell\ndata4\n/invcell\n\n        \ninvcell\ndata5\n/invcell\n\n        \ninvcell\ndata6\n/invcell\n\n     \n/invoice\n\n     ...\n  \n/result\n\n\n/invoices\n\n\n\n\n\n\nIn this case the xmlReader is:\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n  \nxmlReader\n:\n \n{\n\n     \nroot\n:\nresult\n,\n\n     \nrow\n:\ninvoice\n,\n\n     \npage\n:\ninvoices\ncurrentpage\n,\n\n     \ntotal\n:\ninvoices\ntotalpages\n,\n\n     \nrecords\n:\ninvoices\ntotalrecords\n,\n\n     \nrepeatitems\n:\ntrue\n,\n\n     \ncell\n:\ninvcell\n,\n\n     \nid\n \n:\n \n[asin]\n\n \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nLet's suppose that the structure of the XML document returned from the server has the following format:\n\n\n...\n\ninvoices\n\n  \nrequest\ntrue\n/request\n\n  ...\n  \ncurrentpage\n1\n/currentpage\n\n  \ntotalpages\n10\n/totalpages\n\n  \ntotalrecords\n20\n/totalrecords\n\n  \nresult\n\n     \ninvoice\n\n        \nasin\n12345\n/asin\n\n        \ninvoiceno\ndata1\n/invoiceno\n\n        \ninvoicedate\ndata2\n/invoicedate\n\n        \ninvoiceamount\ndata3\n/invoiceamount\n\n        \ninvoicetax\ndata4\n/invoicetax\n\n        \ninvoicetotal\ndata5\n/invoicetotal\n\n        \nnotes\ndata6\n/notes\n\n     \n/invoice\n\n     ...\n  \n/result\n\n\n/invoices\n\n\n\n\n\n\nwhere the \nasin\n tag describes the unique id and this should be set as the row id in the grid and not displayed in the grid. Following the rules we can construct the following:\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \nxmlReader\n:\n \n{\n\n      \nroot\n:\nresult\n,\n\n      \nrow\n:\ninvoice\n,\n\n      \npage\n:\ninvoices\ncurrentpage\n,\n\n      \ntotal\n:\ninvoices\ntotalpages\n,\n\n      \nrecords\n:\ninvoices\ntotalrecords\n,\n\n      \nrepeatitems\n:\nfalse\n,\n\n      \nid\n \n:\n \nasin\n\n  \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nand our colModel from the example should look like this (Note the xmlmap property):\n\n\ncode\n \njavascript\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n \n:\n[\n\n      \n{\nname\n:\ninvid\n,\n \nindex\n:\ninvid\n,\n \nwidth\n:\n55\n,\n \nxmlmap\n:\ninvoiceno\n},\n\n      \n{\nname\n:\ninvdate\n,\n \nindex\n:\ninvdate\n,\n \nwidth\n:\n90\n,\n \nxmlmap\n:\ninvoicedate\n},\n\n      \n{\nname\n:\namount\n,\n \nindex\n:\namount\n,\n \nwidth\n:\n80\n,\n \nalign\n:\nright\n,\n \nxmlmap\n:\ninvoiceamount\n},\n\n      \n{\nname\n:\ntax\n,\n \nindex\n:\ntax\n,\n \nwidth\n:\n80\n,\n \nalign\n:\nright\n,\n \nxmlmap\n:\ninvoicetax\n},\n\n      \n{\nname\n:\ntotal\n,\n \nindex\n:\ntotal\n,\n \nwidth\n:\n80\n,\n \nalign\n:\nright\n,\n \nxmlmap\n:\ninvoicetotal\n},\n\n      \n{\nname\n:\nnote\n,\n \nindex\n:\nnote\n,\n \nwidth\n:\n150\n,\n \nsortable\n:\nfalse\n,\n \nxmlmap\n:\nnotes\n}\n\n   \n],\n\n   \nxmlReader\n:\n \n{\n\n      \nroot\n:\nresult\n,\n\n      \nrow\n:\ninvoice\n,\n\n      \npage\n:\ninvoices\ncurrentpage\n,\n\n      \ntotal\n:\ninvoices\ntotalpages\n,\n\n      \nrecords\n:\ninvoices\ntotalrecords\n,\n\n      \nrepeatitems\n:\nfalse\n,\n\n      \nid\n \n:\n \nasin\n\n  \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nThe above data can be represented in colModel another way. If the names in colModel are not important for you, you can do the following.\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n \n:\n[\n\n      \n{\nname\n:\ninvoiceno\n,\n \nindex\n:\ninvid\n,\n \nwidth\n:\n55\n},\n\n      \n{\nname\n:\ninvoicedate\n,\n \nindex\n:\ninvdate\n,\n \nwidth\n:\n90\n},\n\n      \n{\nname\n:\ninvoiceamount\n,\n \nindex\n:\namount\n,\n \nwidth\n:\n80\n,\n \nalign\n:\nright\n},\n\n      \n{\nname\n:\ninvoicetax\n,\n \nindex\n:\ntax\n,\n \nwidth\n:\n80\n,\n \nalign\n:\nright\n},\n\n      \n{\nname\n:\ninvoicetotal\n,\n \nindex\n:\ntotal\n,\n \nwidth\n:\n80\n,\n \nalign\n:\nright\n},\n\n      \n{\nname\n:\nnotes\n,\n \nindex\n:\nnote\n,\n \nwidth\n:\n150\n,\n \nsortable\n:\nfalse\n}\n\n   \n],\n\n   \nxmlReader\n:\n \n{\n\n      \nroot\n:\nresult\n,\n\n      \nrow\n:\ninvoice\n,\n\n      \npage\n:\ninvoices\ncurrentpage\n,\n\n      \ntotal\n:\ninvoices\ntotalpages\n,\n\n      \nrecords\n:\ninvoices\ntotalrecords\n,\n\n      \nrepeatitems\n:\nfalse\n,\n\n      \nid\n \n:\n \nasin\n\n  \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nIn other words, jqGrid first looks to see if there is an xmlmap option available; if this option is not available the name is used as the xmlmap. But all of this is true only if the repeatitems element in xmlReader is set to false.\n\n\nThe subgrid option is included in several of the xmlReader examples above. The principles in constructing the rules for this data are the same as those described above. More details about subgrids can be found in the section on \nSubgrids\n.\n\n\nXML String\n\n\nThe xmlstring option has similar features to the XML option (See above). The only difference is that the data is passed as string. In this case is needed to have a valid XML data string. To do that a datastr option should be used.\n\n\nIf you use an XML string to obtain the data - after the data is retrieved the datatype option automatically is set to local.\n\n\nThe example from our tutorial can look like this.\n\n\nscript\n\nvar mystr =\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\ninvoices\n\n    \nrows\n\n        \nrow\n\n          \nclid\n1\n/clid\n\n          \nname\nBob\n/name\n\n          \nphone\n232-532-6268\n/phone\n\n          \nbirthday\n01/01/1971\n/birthday\n\n          \nsalary\n1234.00\n/salary\n\n        \n/row\n\n        \nrow\n\n          \nclid\n2\n/clid\n\n          \nname\nJeff\n/name\n\n          \nphone\n232-532-6268\n/phone\n\n          \nbirthday\n02/02/1972\n/birthday\n\n          \nsalary\n2345.00\n/salary\n\n        \n/row\n\n    \n/rows\n\n\n/invoices\n;\n\n$(\n#grid\n).jqGrid({\n  datatype: \nxmlstring\n,\n  datastr: mystr,\n  xmlReader : {\n    repeatitems : false\n  },\n  colModel: [\n    {name: \nclid\n, label : \nId\n, sorttype: \nint\n},\n    {name: \nname\n, label : \nName\n},\n    {name: \nphone\n, label : \nPhone Number\n},\n    {name: \nbirthday\n, label : \nBirth day\n, sorttype: \ndata\n, datefmt:\nd/m/Y\n},\n    {name: \nsalary\n, label : \nSalary\n, sorttype: \nfloat\n},\n  ]\n});\n...\n\n/script\n\n\n\n\n\n\nAs can be seen, this example introduces another option in colModel: sorttype. This option describes how a particular column is to be sorted, because when using xmlstring as the source for the grid, jqGrid uses client-side sorting.\n\n\nDatatype as function\n\n\nThis option does not really define the datatype at all, but rather how to handle the data that is provided by the server (which would still come as either xml or json data). The functions defined as a Datatype should (or can) call addXMLData, addJSONData or addRowData once the data has been received. If you use a pager, it is useful to call your_grid.setGridParam({lastpage: your_number}) to specify the number of pages.\n\n\nCalling Convention:\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n  \ndatatype\n \n:\n \nfunction\n(\npostdata\n)\n \n{\n\n    \n// do something here\n\n  \n}\n\n\n...\n\n\n});\n\n\n\n\n\n\nDatatype functions are supplied with a object containing the request information (parameter postdata), which normally would have been transformed into GET or POST arguments. This object is compatible with the \ndata\n option supplied to the jQuery $.ajax function.\n\n\nConsider our example here is how this will work with datatype function:\n\n\nscript\n \ntype\n=\ntext/javascript\n\n\n...\n\n\njQuery\n(\ndocument\n).\nready\n(\nfunction\n(){\n\n  \njQuery\n(\n#list\n).\njqGrid\n({\n\n    \ndatatype\n:\n \nfunction\n(\npostdata\n)\n \n{\n\n        \nvar\n \nthegrid\n \n=\n \nthis\n;\n\n        \njQuery\n.\najax\n({\n\n           \nurl\n:\n \nexample.php\n,\n\n           \ndata\n:\npostdata\n,\n\n           \ndataType\n:\nxml\n,\n\n           \ncomplete\n:\n \nfunction\n(\nxmldata\n,\nstat\n){\n\n              \nif\n(\nstat\n==\nsuccess\n)\n \n{\n\n                 \n//var thegrid = jQuery(\n#list\n)[0];\n\n                 \nthegrid\n.\naddXmlData\n(\nxmldata\n.\nresponseXML\n);\n\n              \n}\n\n           \n}\n\n        \n});\n\n    \n},\n\n    \n...\n\n  \n});\n\n\n});\n\n\n...\n\n\n/script\n\n\n\n\n\n\nUserdata\n\n\nIn some cases we need to have custom data returned from the request that is not automatically displayed by jqGrid, that we use either in a later process or to display additional information somewhere in the HTML page or associated with the grid. To do that a userdata tag can be used.\n\n\nIn xmlReader this is defined as:\n\n\nxmlReader\n:\n \n{\n\n  \n...\n\n  \nuserdata\n:\n \nuserdata\n,\n\n  \n...\n\n\n}\n\n\n\n\n\n\nThis describes the tag where our custom data is. The important part here is that the XML tag should have a attribute name in order to associate data. In the data received from the server, this could be structured as follows:\n\n\ninvoices\n  \n    \nrequest\ntrue\n/request\n  \n    \nuserdata\n \nname=\ntotalinvoice\n 240.00 \n/userdata\n  \n    \nuserdata\n \nname=\ntax\n 40.00\n/userdata\n\n    ...\n    \nresult\n  \n      \nrow\n  \n        \ncell\ndata1\n/cell\n\n        \ncell\ndata2\n/cell\n\n        \ncell\ndata3\n/cell\n\n        \ncell\ndata4\n/cell\n\n        \ncell\ndata5\n/cell\n\n        \ncell\ndata6\n/cell\n\n      \n/row\n\n      ...\n    \n/result\n\n\n/invoices\n\n\n\n\n\n\nIf using JSON data, the definition might look like this:\n\n\njsonReader\n:\n \n{\n\n  \n...\n\n  \nuserdata\n:\n \nuserdata\n,\n\n  \n...\n\n\n}\n\n\n\n\n\n\nand the data received, like this:\n\n\n{\n\n \ntotal\n:\n \nxxx\n,\n\n \npage\n:\n \nyyy\n,\n\n \nrecords\n:\n \nzzz\n,\n\n \nuserdata\n:\n \n{\ntotalinvoice\n:\n240.00\n,\n \ntax\n:\n40.00\n},\n\n \nrows\n \n:\n \n[\n\n   \n{\nid\n:\n1\n,\n \ncell\n:\n[\ncell11\n,\n \ncell12\n,\n \ncell13\n]},\n\n   \n{\nid\n:\n2\n,\n \ncell\n:\n[\ncell21\n,\n \ncell22\n,\n \ncell23\n]},\n\n   \n...\n\n \n]\n\n\n}\n\n\n\n\n\n\nWhen this data has been received, this information is stored in the userData array of the options array. Whichever format the data comes in, in this case we would have:\n\n\nuserData = {totalinvoice:240.00, tax:40.00}\n\n\n\n\n\nThe data can be accessed using a getGridParam method. To do that we need to request this data:\n\n\njQuery\n(\ngridid\n).\njqGrid\n(\ngetGridParam\n,\n \nuserData\n)\n\n\n\n\n\n\nThe userdata can be used as function. To this function we pass the response from the server. In case of JSON this is:\n\n\njsonReader\n:\n \n{\n\n  \n...\n\n  \nuserdata\n:\n \nfunction\n(\n \njsondata\n \n)\n \n{\n\n    \n// do something here\n\n  \n},\n\n  \n...\n\n\n}\n\n\n\n\n\n\nTo get or set the userData on the footer row in the grid (if preset) a \nfooterData\n method can be used. See \nMethods\n.\n\n\nEvents\n\n\n\n\nThe action to take on an event is set as a property of the grid, e.g.\n\n\nvar\n \nlastSel\n;\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \nonSelectRow\n:\n \nfunction\n(\nid\n,\n \norgEvent\n){\n\n      \nif\n(\nid\n \n \nid\n!==\nlastSel\n){\n\n         \njQuery\n(\n#gridid\n).\njqGrid\n(\nrestoreRow\n,\nlastSel\n);\n\n         \nlastSel\n=\nid\n;\n\n      \n}\n\n      \njQuery\n(\n#gridid\n).\njqGrid\n(\neditRow\n,\nid\n,\n \ntrue\n);\n\n   \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nThe above example specifies the action to take when a row is selected. The events that you can use to perform some additional action are listed here, in alphabetic order and are related only to the basic jqGrid. Other events related to editing subgrids and etc are described in the appropriate chapters.\n\n\nTo every event is passed the reference (this) to the grid. This means that inside every event you can use $(this) which refers to the current used grid. Using the above example both are equivalent.\n\n\nvar\n \nlastSel\n;\n\n\njQuery\n(\n#gridid\n).\njqGrid\n({\n\n\n...\n\n   \nonSelectRow\n:\n \nfunction\n(\nid\n,\n \norgEvent\n){\n\n      \nif\n(\nid\n \n \nid\n!==\nlastSel\n){\n\n         \njQuery\n(\nthis\n).\njqGrid\n(\nrestoreRow\n,\nlastSel\n);\n\n         \nlastSel\n=\nid\n;\n\n      \n}\n\n      \njQuery\n(\nthis\n).\njqGrid\n(\neditRow\n,\nid\n,\n \ntrue\n);\n\n   \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nThe event can be changed dynamically using the \nsetGridParam\n method.\n\n\nTriggered events\n\n\nAlternatively jqGrid support the so named triggered events. These events are equivalent to the events defined in the grid properties. They are defined using jQuery \n.triggerHandler()\n.\n\n\nTo define a such event use jQuery \non\n. The code below is equvalent of the code above:\n\n\nvar\n \nlastSel\n;\n\n\njQuery\n(\n#gridid\n).\non\n(\njqGridSelectRow\n,\n \nfunction\n(\nevent\n,\n \nid\n,\n \norgEvent\n)\n \n{\n\n  \nif\n(\nid\n \n \nid\n!==\nlastSel\n){\n\n    \njQuery\n(\nthis\n).\njqGrid\n(\nrestoreRow\n,\nlastSel\n);\n\n    \nlastSel\n=\nid\n;\n\n  \n}\n\n  \njQuery\n(\nthis\n).\njqGrid\n(\neditRow\n,\nid\n,\n \ntrue\n);\n\n\n});\n\n\n\n\n\n\nWhat are the diffrences between these two definitions.\n\n\n\n\nThe trigered event is called outside jqGrid.\n\n\nWhen using triggered events we can register multiple event handlers - i.e bind different code to the same event depending a condition.\n\n\nThe first parameter of the triggered event is a event and then follow the order of parameter(s) as defined in the \"options\" jqgrid events\n\n\nTo unbind the triggered event use jQuery \noff\n, to unbind the options event use setGridParam with event name and value to null.\n\n\n\n\nTo define a multiple event handlers use dot \".\" after the event and appropriate description.  Bellow is a example:\n\n\nWhen we define foren columns in the grid with method \nsetFrozenColumns\n we need to use ResizeStop event to properly resize the frozen div element. Using triggered event approach save us a lot of additional code. Somewhere in the  method we have the following definition:\n\n\n$\n(\ngrid\n).\non\n(\njqGridResizeStop.setFrozenColumns\n,\n \nfunction\n \n(\ne\n,\n \nw\n,\n \nindex\n)\n \n{\n\n  \n// here our code\n\n\n});\n\n\n\n\n\n\nWhen the developer defines his own ResizeStop event - they both will be executed. The recommended way to do this is to define it like this:\n\n\n$\n(\ngrid\n).\non\n(\njqGridResizeStop.develoerResize\n,\n \nfunction\n \n(\ne\n,\n \nw\n,\n \nindex\n)\n \n{\n\n  \n// here developer code.\n\n\n});\n\n\n\n\n\n\nList of events\n\n\nBelow is the list of \"option\" and triggered events. The name of every triggered event begin with \njqGrid\n and is set below the option event.\n\n\n\n\nNote\n\n\nThe first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)\n\n\n\n\n\n\nNote\n\n\nThere are additional events, which are set in the grid methods - some as parameter and some not as parameter. The list of these events is into the description of the method.\n\n\n\n\n\n\nafterInsertRow\n\n\njqGridAfterInsertRow\n\n\nThis event fires after every inserted row. This event does not fire if gridview option is set to true\n\n\nparameters\n\n\n\n\nstring rowid - is the id of the inserted row\n\n\narray rowdata - is an array of the data to be inserted into the row. This is array of type name: value, where the name is a name from colModel.\n\n\nmixed rowelem is the element from the response. If the data is xml this is the xml element of the row; if the data is json this is array containing all the data for the row.\n\n\n\n\n\n\nbeforeProcessing\n\n\njqGridBeforeProcessing\n\n\nThis event fire before processing the data from the server. If the event return \nfalse\n no data will be inserted into the grid and the old status remain as before the new request. This event fire only if ajax request is made - on paging on sorting and reloading and initially when the data is loaded. Note that the data is formatted depended on the value of the datatype parameter - i.e if the datatype is \nJSON\n for example the data is JavaScript object\n\n\nparameters\n\n\n\n\nmixed data - The data returned from the server, formatted according to the \ndatatype\n\n\nstring status - a string describing the status\n\n\nobject xhr - object, which is a super set of the XMLHTTPRequest object.\n\n\n\n\n\n\nbeforeRequest\n\n\njqGridBeforeRequest\n\n\nThis event fire before requesting any data. Also does not fire if datatype is function. If the event return false the request is not made to the server\n\n\nparameters\n\n\nnone\n\n\n\n\nbeforeSelectRow\n\n\njqGridBeforeSelectRow\n\n\nThis event fire when the user click on the row, but before select them. This event should return boolean true or false. If the event return true the selection is done. If the event return false the row is not selected and any other action if defined does not occur.\n\n\nparameters\n\n\n\n\nstring rowid - is the id of the row.\n\n\nevent e - is the event object (original event)\n\n\n\n\n\n\ncolMenuColumnDone\n\n\njqGridColMenuColumnDone\n\n\nThe event executes on reordering of the \nColumns\n from column menu as defined with option colMenu. The event fire when a check-box is selected to show or hide the column.   - the event is similar to in columnChooser.\n\n\nparameters\n\n- array cols - permutation array with the positions of the coumns\n\n- string colname -column name on which we click. The name is not available when we drag\n\n- boolean checked - state of the check-box\n\n\n\n\ngridComplete\n\n\njqGridGridComplete\n\n\nThis fires after all the data is loaded into the grid and all other processes are complete. Also the event fires independent from the datatype parameter and after sorting paging and etc. Does not fire if datatype is a defined as function.\n\n\nparameters\n\n\nnone\n\n\n\n\nloadBeforeSend\n\n\njqGridLoadBeforeSend\n\n\nA pre-callback to modify the XMLHttpRequest object (xhr) before it is sent. Use this to set custom headers etc. Returning \nfalse or stop\n will cancel the request. This event is used in jQuery beforeSend event which is predefined in jqGrid.\n\n\nparameters\n\n\n\n\nobject xhr - object, which is a superset of the XMLHTTPRequest object.\n\n\nobject settings - ajax settings object\n\n\n\n\n\n\nloadComplete\n\n\njqGridLoadComplete\n\n\nThis event is executed immediately after every server request. The data can be or can not be loaded into the grid.\n\n\nparameters\n\n\n\n\nmixed data - data from the response depending on datatype grid parameter\n\n\n\n\n\n\nloadError\n\n\njqGridLoadError\n\n\nA function to be called if the request fails. This event is predefined in jQuery error event.\n\n\nparameters\n\n\n\n\nobject xhr - The XMLHttpRequest object\n\n\nstring status - a string describing the type of error (status) that occurred\n\n\nobject error - an optional exception object (error), if one occurred.\n\n\n\n\n\n\nonCellSelect\n\n\njqGridCellSelect\n\n\nFires when we click on particular cell in the grid. This event does not fire when cell editing is used on editable cell. (grid options \ncellEdit : true\n). It fire on non editable cell only independent of \ncellEdit\n flag.\n\n\nparameters\n\n\n\n\nstring rowid - is the id of the row\n\n\nint iCol - is the index of the column starting from 0\n\n\nstring cellcontent - is the content of the cell,\n\n\nobject e - is the event object element where we click.\n\n\n\n\n\n\nondblClickRow\n\n\njqGridDblClickRow\n\n\nRaised immediately after row was double clicked.\n\n\nparameters\n\n\n\n\nstring rowid - is the id of the row\n\n\nint iRow - is the index of the row (do not mix this with the rowid)\n\n\nint iCol - is the index of the column starting from 0\n\n\nobject e - is the event object element where we click.\n\n\n\n\n\n\nonHeaderClick\n\n\njqGridHeaderClick\n\n\nFire after clicking the button on the caption to hide or show grid. Caption and hidegrid:true grid parameters should be set in order to use this event.\n\n\nparameters\n\n\n\n\nstring gridstate - is the state of the grid - can have two values - visible or hidden\n\n\nobject e - event object when click the button.\n\n\n\n\n\n\nonInitGrid\n\n\njqGridInitGrid\n\n\nThe event fire when the grid is constructed and before loading the data into the grid. This event executes only once and is first in the order of all other grid events.\n\n\nparameters\n\n\nnone\n\n\n\n\nonPaging\n\n\njqGridPaging\n\n\nThis event fires after click on [page button] and before populating the data. Also works when the user enters a new page number in the page input box (and presses [Enter]) and when the number of requested records is changed via the select box. If this event return 'stop' the processing is stopped and you can define your own custom paging.\n\n\nparameters\n\n\n\n\nstring pgButton - depending on the button clicked or inputing a number the parameter can be \nfirst,prev,next,last, records and user\n\n\nobject elem - html element object which corresponding to the button clicked.\n\n\n\n\n\n\nonRightClickRow\n\n\njqGridRightClickRow\n\n\nRaised immediately after row was right clicked. Usefull for context defined menus. Works on browsers which supports oncontextmenu event.\n\n\nparameters\n\n\n\n\nstring rowid - is the id of the row\n\n\nint iRow - is the index of the row (do not mix this with the rowid)\n\n\nint iCol - is the index of the column starting from 0\n\n\nobject e - is the event object element where we click.\n\n\n\n\n\n\nonSelectAll\n\n\njqGridSelectAll\n\n\nThis event fires when multiselect option is true and you click on the header checkbox to select/deselect current grid rows.\n\n\nparameters\n\n\n\n\narray aRowids - array of the selected rows (rowid's). This parameter contain the id of the rows in case there is selection and is empty array when nothing is selected.\n\n\nboolean status - variable determining the status of the header check box - true if checked, false if not unchecked.\n\n\n\n\n\n\nonSelectRow\n\n\njqGridSelectRow\n\n\nRaised immediately after row was clicked.\n\n\nparameters\n\n\n\n\nstring rowid - is the id of the row,\n\n\nboolean status - is the status of the selection. Can be used when multiselect is set to true. true if the row is selected, false if the row is deselected.\n\n\nobject e - is the event object when clicked.\n\n\n\n\n\n\nonSortCol\n\n\njqGridSortCol\n\n\nRaised immediately after sortable column was clicked and before sorting the data. If this event return 'stop' the processing is stopped and you can define your own custom sorting using the methods \nsetGridParam and .trigger('reloadGrid')\n\n\nparameters\n\n\n\n\nstring sortname - is the index or name from colModel which sort is aplied,\n\n\nint iCol - is the index of column start from 0,\n\n\nstring sortorder - is the new sorting order - can be 'asc' or 'desc'.\n\n\n\n\n\n\nrowattr\n\n\njqGridRowAttr\n\n\nThis event is called when the new grid row is inserted. It can be used to set additional style and class attributes of the row dynamically. The event should return a object something like this \n{\"style\" : \"somestyle\", \"class\": \"someclass\"}\n. Note that you can set any attribute to the row. It is important to note that the event does fire only when a new row is inserted - this mean that it can not be used with methods which updated the row like setRowData.\n\n\nparameters\n\n\n\n\narray rowData - is array with the cell data.\n\n\nmixed currObj - is the current row represented in the source like json or xml depending on the datatype parameter. - string rowId - is the id of the row.\n\n\n\n\n\n\nresizeStart\n\n\njqGridResizeStart\n\n\nEvent which is called when we start resize a column.\n\n\nparameters\n\n\n\n\nobject event - is the event object,\n\n\nint index - is the index of the column in colModel stating from 0\n\n\n\n\n\n\nresizeStop\n\n\njqGridResizeStop\n\n\nEvent which is called after the column is resized.\n\n\nparameters\n\n\n\n\nstring newwidth - is the is the new width of the column,\n\n\nint index - is the index of the column in colModel starting from 0\n\n\n\n\n\n\nserializeGridData\n\n\nNo triggered event available\n\n\nIf set this event can serialize the data passed to the ajax request. The function should return the serialized data. This event can be used when a custom data should be passed to the server - e.g - JSON string, XML string and etc. The event actually is used in ajax data parameter.\n\n\nparameters\n\n\n\n\nobject postData - object with parameters passed to the server.\n\n\n\n\n\n\nMethods\n\n\n\n\nThis chapter describes the basic methods of jqGrid. Other methods related to TreeGrid, Subgrid, Editing modules and etc. are described into the appropriate chapters.\n\n\nAs of version 3.6 jqGrid uses new API which is compatible with jQuery UI library. This is a preferd API to use.\n\n\nCalling Convetions\n\n\n\n\nNew API\n\n\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nmethod\n,\n \nparameter1\n,...\nparameterN\n \n);\n\n\n...\n\n\n/script\n\n\n\n\n\n\nWhere:\n\n\n\n\ngrid_id is the id of the already constructed grid.\n\n\njqGrid is a jqGrid instance.\n\n\nmethod is jqGrid existing method. Note that the method should be enclosed in ''\n\n\nparameter1,\u2026parameterN - a list of parameters\n\n\n\n\nWhere a method is not designed to return a requested value, then what is returned is the jqGrid object and a set of such methods can be chained, e.g.,\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nsetGridParam\n,{...}).\njqGrid\n(\nhideCol\n,\nsomecol\n).\ntrigger\n(\nreloadGrid\n);\n\n\n...\n\n\n/script\n\n\n\n\n\n\n\n\nOld API\n\n\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGridMethod\n(\n \nparameter1\n,...\nparameterN\n \n);\n\n\n...\n\n\n/script\n\n\n\n\n\n\nWhere:\n\n\n\n\ngrid_id is the id of the already constructed jqGrid.\n\n\njqGridMethod is a method applied to this jqGrid.\n\n\nparameter1,\u2026parameterN - a list of parameters\n\n\n\n\n\n\nNote\n\n\nThe old and new APIs are enabled by default so that existing users do not have to change their code. You are free to use both conventions. The reason for creating this API is to overcome and name-space conflicts with other plugins and make using jqGrid more natural in the code. In order to use only this new API see the configuration below.\n\n\n\n\nConfigure Guriddo jqGrid to use the new API\n\n\nTo use only the new API (see below) set the \njQuery.jgrid.no_legacy_api\n variable to true like this:\n\n\n...\n\n\nscript\n \nsrc\n=\njs/jquery.min.js\n \ntype\n=\ntext/javascript\n/script\n\n\nscript\n \nsrc\n=\njs/trirand/i18n/grid.locale-en.js\n \ntype\n=\ntext/javascript\n/script\n\n\nscript\n \nsrc\n=\njs/trirand/jquery.jqGrid.min.js\n \ntype\n=\ntext/javascript\n/script\n\n\nscript\n \ntype\n=\ntext/javascript\n\n    \njQuery\n.\njgrid\n.\nno_legacy_api\n \n=\n \ntrue\n;\n\n\n/script\n\n\n...\n\n\n\n\n\n\nMethod list\n\n\n\n\nNote\n\n\nParameters set without [] are required. Parameters enclosed in [] have default values and are not requiered.\n\nIn case the first or other parameter should be omitted set \nundefined\n or just look at the default value and set it.\n\n\n\n\n\n\naddJSONData(array data)\n1\n\nPopulates a grid with the passed data (an array) at once clearing the old one if available.\n\n\nparameters\n\n\n\n\narray data - array of object that contain data to be inserted into the grid.\n\n\n\n\nreturn\n\nnone\n\n- - -\n\n\naddLocalData( [boolean returnAll])\n1\n\nReturn a object containing grid data depending on search sorting, paging  and etc. parameters, when the datatype is set to 'local'.\n\n\nparameters\n\n\n\n\nboolean returnAll - when set to true all the data is returned, otherwise returned rows depend on the \nrowNum\n paramer set.\n\n\n\n\nreturn\n\nobject with data\n\n\n\n\naddRowData(string rowid, mixed data, [string position], [string srcrowid])\n\nInserts a new row with id = rowid containing the data in data (an object) at the position specified (first in the table, last in the table or before or after the row specified in srcrowid). The syntax of the data object is: {name1:value1,name2: value2\u2026} where name is the name of the column as described in the colModel and the value is the value.\n\nThis method can insert multiple rows at once. In this case the data parameter should be array defined as\n\n[{name1:value1,name2: value2\u2026}, {name1:value1,name2: value2\u2026} ] and the first option rowid should contain the name from data object which should act as id of the row. It is not necessary that the name of the rowid in this case should be a part from colModel.\n\n\nparameters\n\n\n\n\nstring rowid - the id for the new inserted row\n\n\nmixed data - array or object with the data\n\n\nstring position - where to insert the row ('first', 'last') in the grid or 'before' 'after' a \nsrcrowid\n. Default is last\n\n\nstring srcrowid - set the id of the row from where to insert the new one (after, before)\n\n\n\n\nreturn\n\ntrue on success, false otherwise\n\n\n\n\naddXmlData(xml data)\n1\n\nPopulates a grid with the passed XML data.\n\n\nparameters\n\n\n\n\nxml node data - data to be inserted into the grid.\n\n\n\n\nreturn\n\nnone\n\n- - -\n\n\nbindKeys([object settings])\n\nAdd scrolling functionality with arrows keys making it possible to scroll through the rows, there the current row is selected.\n\n\nparameters\n\n\n\n\nobject settings - list of options with following properties and default values:\n\n\n\n\nsettings = {\n  onEnter: null,\n  onSpace: null,\n  onLeftKey: null,\n  onRightKey: null,\n  onUpkey : null,\n  onDownKey : null,\n  scrollingRows : true\n}\n\n\n\n\n\nonEnter\n - event which occur when a Enter key is pressed of the current selected row\n\n\nonSpace\n  - event which occur when a Space is pressed of the current selected row\n\n\nonLeftKey\n - event which occur when a Left key is pressed of the current selected row\n\n\nonRightKey\n - event which occur when a Right key is pressed of the current selected row\n\n\nonUpKey\n - event which occur when a Up key is pressed of the current selected row\n\n\nonDownKey\n - event which occur when a Down key is pressed of the current selected row\n\n\nscrollingRows\n boolean which determine if the grid should scroll when a row is in invisible due to the height limitation.\n\n\nTo the events the row id and event is passed as parameter - i.e onEnter : function( rowid, event)\n\n\n\n\nNote\n\n\nThe events onUpKey and onDownKey has 3 parameters as follow : rowid, previousid, event\n\n\n\n\nThe above events can be overwriten with \ntrigered events\n which names are:\n\n\njqGridKeyEnter, jqGridKeySpace, jqGridKeyLeft, jqGridKeyRight\n\n\nreturn\n\njqGrid object\n\n\n\n\nclearGridData([boolean clearfooter])\n\nClears the currently loaded data from grid. If the \nclearfooter\n parameter is set to true, the method clears the data placed on the footer row.\n\n\nparameters\n\n\n\n\nboolean clearfooter - if set to true clears the footer data of the grid too. Default false.\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\ncolMenuAdd( string colname, object options)\n\nAdd a custom column menu into the list of predefined column menu. See \ncolMenu\n option in \ngrid options\n\n\nparameters\n\n\n\n\nstring colname - the column name as set in colModel array. If the string has a value \n'all'\n the item will be added to all columns\n\n\nobject options - t with following properties and default values:\n\n\n\n\noptions = {\n  title: \nItem\n,\n  icon : styles.icon_new_item,\n  funcname: null,\n  position : \nlast\n,\n  closeOnRun : true,\n  exclude : \n,\n  id : null\n}\n\n\n\n\n\ntitle\n - the text that will appear in column menu\n\n\nicon\n - the icon associated with this menu. This should correspond to the used CSS framework name\n\n\nfuncname\n - function to be executed when the menu is selected. To this function is passed the name of the column\n\n\nposition\n - the position of the item added. Can be  \"last\" or \"first\"\n\n\ncloseOnRun\n - closes the menu after selecting the item\n\n\nexclude\n - list of columns which should be excluded. The string is a list of comma separated column names\n\n\nid\n - the id of the item when inserted into the menu. If this parameter is not set jqGrid creates internally it using the jqGrid rand functin - \n$.jgrid.randId()\n\n\n\n\ncolMenuDelete( string id)\n\nDelete custom column menu from the list of predefined column menu added with colMenuAdd method. See \ncolMenu\n option in \ngrid options\n\n\nparameters\n\n\nid\n the id which should be deleted\n\n\n\n\ndelRowData(string rowid)\n\nDeletes the row with the id = rowid. This operation does not delete data from the server.\n\n\nparameters\n\n- string rowid - id of the row to be deleted.\n\n\nreturn\n\ntrue on success, false otherwise\n\n\n\n\nfooterData([string action], [object data], [boolean format])\n\nThis method gets or sets data on the grid footer row. When set data in the footer row, the data is formatted according to the formatter (if defined) in coModel. The method can be used if \nfooterrow\n option is set to true.\n\n\nparameters\n\n\n\n\nstring action - can be 'get' or 'set'. The default is get. 'get' returns an object of type name:value, where the name is a name from colModel. This will return data from the footer. The other two options have no effect in this case. 'set' takes a data object and places the values in the footer The value is formatted according to the definition of the formatter in colModel - see next parameter. The object should be in name:value pair, where the name is the name from colModel\n\n\nobject data - data to be set in the footer\n\n\nboolean format - default is true. This instruct the method to use the formatter (if set in colModel) when new values are set. A value of false will disable the using of formatter\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\ndestroyFrozenColumns()\n\nDestroys the frozen column functionality set with \nsetFrozenColums\n. For more information see \nFrozen columns\n\n\nparameters\n\nnone\n\n\nreturn\n\njqGrid object\n\n\n\n\ngetCell( string rowid, mixed iCol, [boolean returnobject])\n\nReturns the content of the cell specified by id = rowid and column = iCol. iCol can be either the column index or the name specified in colModel.\n\n\n\n\nAttention\n\n\nDo not use this method when you are editing the row or cell. This will return the cell content and not the actuall value of the input element\n\n\n\n\nparameters\n\n\n\n\nstring rowid - row id of the grid where to edit a cell\n\n\nmixed iCol - can be either the column index (integer - start from 0) or name specified in colModel.\n\n\nboolean returnobject -  if set to true the content is returned as jQuery object\n\n\n\n\nreturn\n\nstring - html content of the cell.\n\n\n\n\ngetCol(mixed colname, [boolean rerurntype], [string mathoperation])\n\nThis method returns an array with the values of the grid column or a scalar value of operation set in mathoperation parameter.\n\n\nparameters\n\n\n\n\nmixed colname - can be either a number that represents the index of the column or a name from colModel.\n\n\nboolean returntype determines the type of the returned array. When set to false (default) the array contain only the values. When set to true the array contain a set of objects. The object is defined as {id:rowid, value:cellvalue} where the rowid is the id of the row and cellvalue is the value of the cell. For example, such output can be [{id:1,value:1},{id:2,value:2}\u2026]\n\n\nstring mathoperation - valid option for this parameter can be \nsum, avg, count, min, max\n . If this parameter is set and is valid, the returned value is a scalar representing the operation applied to the all values in the column. If the parameter is not valid the returned value is empty array\n\n\n\n\nreturn\n\narray or value depending mathoperation.\n\n\n\n\ngetColProp( string colname)\n\nReturn an array of the properties of the given column name from colModel\n\n\nparameters\n\n\n\n\nstring colname - name of the column from colModel\n\n\n\n\nreturn\n\nobject with column properties, if not found empty opbect\n\n\n\n\ngetDataIDs()\n\nReturn an array of the id's in the current grid view. It returns an empty array if no data is available.\n\n\nparameters\n\n\nnone\n\n\nreturn\n\narray\n\n\n\n\ngetGridParam([string name], [string module])\n\nReturns the value of the requested parameter from the grid options and other grid methods. If the name is not set, the entry grid options are returned.\n\n\nparameters\n\n\n\n\nstring name - the name from the options array.\n\n\nstring module - module from which we ask the values of parameters. Default is jqGrid. The possible values are: \njqGrid\n for jqGrid options, \nfilterToolbar\n for filter toolbar search options, \nformProp\n certain options from \neditGridRow\n method, \nviewProp\n certain options from \nviewGridRow\n method, \nnavGrid\n - all the options from navGrid method, \ninlineNav\n - all the options from inlineNav method,\n\n\n\n\nreturn\n\nobject or scalar value\n\n\n\n\ngetGridRowById( string rowid)\n\nReturn the row with id = rowid as document object\n\n\nparameters\n\n\n\n\nstring rowid - id of the grid row\n\n\n\n\nreturn\n\nrow as document object\n\n\n\n\ngetInd(string rowid, [boolean rowcontent])\n\n\nReturns the index of the row in the grid table specified by grid id row - rowid. If rowcontent is set to true it returns the row document object\n\n\nparameters\n\n\n\n\nstring rowid - the id of the grid row.\n\n\nboolean rowcontent - if set to true the method return document row object. Default is false.\n\n\n\n\nreturn\n\nmixed - index of the row or document row object.\n\n\n\n\ngetLocalRow( string rowid)\n\nReturn the row data object from the local array stored in \ndata\n parameter when the \ndatatype\n is local.\n\n\nparameters\n\n\n\n\nstring rowid - the id of the grid row.\n\n\n\n\nreturn\n\nmixed - object if found, false is not found\n\n\n\n\ngetRowData( [string rowid], [boolean usedata] )\n\nReturns an object or array (see below) with data of the requested id = rowid. The returned object is of type name:value, where the name is a name from colModel and the value from the associated column in that row. It returns an empty object if the rowid can not be found. If the rowid is not set the method return all the data from the grid view as array which elements are objects.\n\n\nparameters\n\n\n\n\nstring rowid - the id of the grid row.\n\n\nboolean usedata - if set to true the data is get from the local grid parameter \ndata\n and not from the grid view. Default is false.\n\n\n\n\n\n\nAttention\n\n\nDo not use this method when you are editing the row or cell. This will return the cell html content and not the actual value of the input element.\n\n\n\n\n\n\nhideCol( mixed colname(s) )\n\nGiven a single colname, it hides the column with that name. Given an array of colnames ['name1','name2'], it hides the columns with those names, 'name1' and 'name2', in the example. The names in colname or colnames must all be valid names from the colModel.\n\n\nparameters\n\n\n\n\nmixed colname - can be either name form colModel or a array with column names from colModel.\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nmenubarAdd( array items )\n\nAdd custom defined menus with actions on the menu bar defied with grid option \nmenubar\n set to true.\n\n\nparameters\n\n\n\n\narray items -  array where every element is a object which describes the particular menu item in the bar. The following options are defaults\n\n\n\n\nelement\n \n=\n \n{\n\n  \nid\n \n:\n \n$\n.\njgrid\n.\nrandId\n(),\n\n  \nicon\n \n:\n \n,\n\n  \nposition\n \n:\n \nlast\n,\n\n  \ncloasoncall\n \n:\n \ntrue\n,\n\n  \ndivider\n \n:\n \nfalse\n,\n\n  \ntitle\n \n:\n \n,\n\n  \nclick\n \n:\n \nnull\n\n\n}\n\n\n\n\n\n\ntitle\n - the text that will appear in the bar menu\n\n\nicon\n - the icon associated with this menu. This should correspond to the used CSS framework name\n\n\nclick\n - function to be executed when the menu is selected. To this function is passed the event\n\n\nposition\n - the position of the item added. Can be  \"last\" or \"first\"\n\n\ncloseoncall\n - closes the menu after selecting the item\n\n\ndivider\n - adds a divider in the menu. The click event and title do not have effect in this case\n\n\nid\n - the id of the item when inserted into the menu. If this parameter is not set jqGrid creates internally it using the jqGrid rand functin - \n$.jgrid.randId()\n\n\n\n\nmenubarDelete (string id)\n\nDeletes a menu item from menu bar added with menubarAdd method\n\n\nparameters\n\n- string id - the id to be deleted from the menu bar\n\n\n\n\nprogressBar( [object settings] )\n\nShow/hide the loading box with message which indicates a processing. The method is used internally in jqGrid when a request begin (show the box) and end (hide the box)\n\n\nparameters\n\n\n\n\nobject settings - object containing following properties with default values:\n\n\n\n\nsettings\n \n=\n \n{\n\n  \nhtmlcontent\n \n:\n \n,\n\n  \nmethod\n \n:\n \nhide\n,\n\n  \nloadtype\n \n:\n \ndisable\n\n\n}\n\n\n\n\n\n\nhtmlcontent\n  - the string which will be displayed when box shows\n\n\nmethod\n - 'show' or 'hide'\n\n\nloadtype\n - have the same values and behavior as \nloadui\n grid parameter - 'disable', 'enable', 'block'\n\n\nreturn\n\njqGrid object\n\n\n\n\nremapColumns(array permutation, [boolean updateCells] , [boolean keepHeader])\n\nReorder the grid columns based on the \npermutation\n array. The indexes of the permutation array are the current order, the values are the new order. By example if the array has values [1,0,2] after calling this method the first column will be reordered as second. updateCells if set to true will reorder the cell data. keepHeader if set to true will reorder the data above the header cells.\n\n\nparameters\n\n\n\n\narray permutation - array with the new column order\n\n\nboolean updateCells - if set to true updates the data cels . Default false\n\n\n\n\nreturn\n\nnone\n\n\n\n\nresetSelection()\n\nResets (unselects) the selected row(s). Works in multiselect mode. When called this method set the grid parameters \nselrow\n to null and \nselarrrow\n  to empty array.\n\n\nparameters\n\n\nnone\n\n\nreturn\n\njqGrid object\n\n\n\n\nresizeColumn (mixed column, string newWidth, boolean forceresize)\n\nResize column dynamically to the newWidth simulating re-sizing with the mouse.\n\n\nparameters\n\n\n\n\nmixed colname - if string it should equal to the name of colModel. Can be number representing the index in colModel.\n\n\nstring newWidth - the new width in pixels to which the column will be re-sized.\n\n\nboolean forceresize - when set to true the column is resized independed form the colModel option resizable - i.e the column is resied in all cases\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nresizeGrid( [integer timeout] )\n\nResize the grid width of the parent container width. The method is useful to be used when the window width changes dynamically.\n\n\nparameters\n\n\n\n\ninteger timeout - timeout in milliseconds in setTimeout function which is called when the grid is re-sized. Default is 500\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nsetCaption(string caption)\n\nSets a new caption of the grid \nCaption layer\n. If the Caption layer was hidden, it is shown.\n\n\nparameters\n\n- string caption - new caption to be setCaption\n\n\nreturn\n\njqGrid object\n\n\n\n\nsetCell(string rowid, string colname, [string data], [mixed class] ,[object properties],[boolean forceup])\n\nChange the content of particular cell and can set class or style properties.\n\n\nparameters\n\n\n\n\nstring rowid - the is of the grid row\n\n\nstring colname - column name as defined in colModel or index staring from 0\n\n\nstring data - the new data that will be set. If empty string the content will not be changed\n\n\nmixed class - if the class is a string we set it as class. If the class is object we set the properties with the css jQuery method\n\n\nobject properties - attribute properties to be set\n\n\nboolean forceup - if the parameter is set to true we perform update of the cell instead that the data parameter is empty.\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nsetColProp( string colname, object properties)\n\nSets new properties in colModel. This method can dynamically change properties of the column. Note that some properties can not be changed - like width.\n\n\nparameters\n\n\n\n\nstring colname - the name of the column from  colModel name property.\n\n\nobject properties - new column properties to be set.\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nsetFrozenColumns()\n\nEnables frozen columns in grid. See \nfrozen columns\n. Also see method  \ndestroyFrozenColumns\n\n\nparameters\n\n\nnone\n\n\nreturn\n\njqGrid object\n\n\n\n\nsetGridHeight(string newheight)\n\nSets the new height of the grid dynamically. The height is set only to the grid cells and not to the entrie grid.\n\n\nparameters\n\n\n\n\nstring newheight - the new height which can be pixels (no px at end), percentage or 'auto'\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nsetGridParam( object newparams, [boolean overwrite])\n\nSets a particular parameter. For some parameters to take effect a trigger(\"reloadGrid\") should be executed. Note that with this method events can be overwriten. The name (in the name:value pair) is the name from options array.\n\n\nparameters\n\n\n\n\nobject newparams - the object that contain the new value(s) of parameters.\n\n\nboolean overwrite - if set to true the grid parameters are overwriten and are set with \n$.extend({}, gridparams, newparams);\n. The default is false where the parameters are extended with \n$.extend(true, gridparams ,newparams);\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nsetGridState( string state)\n\nShow or hide the grid depending and \nstate\n parameter. When the state is set to 'visible' the grid will be shown. When the parameter is set to 'hidden' the grid will be hidden. Note that the method does not call onHeaderClick event and the caption of the grid is allway visible.\n\n\nparameters\n\n\n\n\nstring state - 'visible' or 'hidden'\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nsetGridWidth(string newwidth, [boolen shrink])\n\nSets a new width to the grid dynamically\n\n\nparameters\n\n\n\n\nstring newwidth - the new width in pixels\n\n\nboolean shrink - has the same behavior as \nshrinkToFit\n - \nsee options\n. If this parameter is not set  the value of shrinkToFit is get.\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nsetLabel(string colname, [string label], [mixed class], [object properties])\n\nSets a new label in the header for the specified column; can also set attributes and classes\n\n\nparameters\n\n- string colname - the name of the column from colModel. The parameter can be a number (the index of the column) beginning from 0\n\n- string label - the content that can be put into the label. If empty string the content will not be changed\n\n- mixed class - if class is string then the class to the label is added  via addClass; if class is an object the new css properties are set via css jQuery method.\n\n- object properties - sets the attribute properies of the label.\n\n\nreturn\n\njqGrid object\n\n\n\n\nsetRowData(string rowid, [object data], [mixed cssprop])\n\nUpdates the values (using the data object) in the row with id = rowid.\n\n\nparameters\n\n\n\n\nstring rowid - the id of the row to be updated\n\n\nobject data - The syntax of data object is: {name1:value1,name2: value2\u2026} where the name is the name of the column as described in the colModel and the value is the new value.\n\n\nmixed cssprop - If the cssprop parameter is string addClass is used to add classes to the row. If the parameter is object jQuery css method is used to add css properties. Properties and classes can be set without data, in this case data should be set to false.\n\n\n\n\nreturn\n\nboolen true on success, false otherwise.\n\n\n\n\nsetSelection(string rowid, [boolean onselectrow])\n\nToggles a selection of the row with id = rowid; If selected the selrow grid parameter is set to the rowid - in multiselect mode to selarrrow array is added the rowid. The revers if the row is deselected.\n\n\nparameters\n\n- string rowid - the id of the row\n\n- boolean onselectrow - if onselectrow is true (default) then the event onSelectRow and/or triggered event jqGridSelectRow are launched, otherwise not.\n\n\nreturn\n\njqGrid object\n\n\n\n\nsetSortIcon(mixed column, [string position])\n\nThe method changes the position of the sort icon at left or right depending on the position parameter.\n\n\nparameters\n\n\n\n\nstring column - the column name or the position of the column in colModel starting from zero.\n\n\nstring position - left or right. default right.\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nshowCol( mixed colname )\n\nShows a column with a given colname. If the colname is a string we show only the specified column. If colname is array of type [\"name1\",\"name2\"] then the columns with names 'name1' and 'name2' will be shown at the same time The names in colname must be valid names from colModel. The width does not change.\n\n\nparameters\n\n\n\n\nmixed colname -  string or array of names from colModel\n\n\n\n\nreturn \n\njqGrid object\n\n\n\n\nsortGrid( [string colname], [boolean reload], [string sortorder])\n\nSort the the grid by the given colname and shows the appropriate sort icon.\n\n\nparameters\n\n\n\n\nstring colname the name of the column from index property of colModel. If not found the name property is searched. If the parameter is set as false or undefined the colname equal to the current value of sortname parameter from grid options.\n\n\nboolean reload - If the reload is set to true, the grid reloads with the current page and sortorder settings. Default is false.\n\n\nstring sortorder - set the sortorder for the sorting can be asc or desc.\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\ntrigger(\"reloadGrid\")\n\nReloads the grid with the current settings. This means that a new request is send to the server if datatype is xml or json. This method should be applied to an already-constructed grid. Pay attention that this method does not change HEADER information, that means that any changes to colModel would not be affected.\n\n\nparameters\n\n\nnone\n\n\nreturn\n\nnone\n\n\n\n\nunbindKeys()\n\nUnbind the events defined in bindKeys method.\n\n\nparameters\n\nnone\n\n\nreturn\n\njqGrid object\n\n\n\n\n\n\n\n\n\n\nThese methods require special calling. The new API can't be used. To use the methods get the grid instance as variable this way: \nvar mygrid = jQuery(\"#grid_id\")[0];\nvar mydata = JSON.parse( some_response );\nmygrid.addJSONData(mydata);", 
            "title": "Basic Grid"
        }, 
        {
            "location": "/user-guide/basic-grid/#basic-grid", 
            "text": "", 
            "title": "Basic Grid"
        }, 
        {
            "location": "/user-guide/basic-grid/#conventions", 
            "text": "An instance of jqGrid is a java script object, with properties, events and methods. Properties may be strings, numbers, arrays, boolean values or even other objects.  Calling Convention:  Java Script code  ...  $ ( #grid_id ). jqGrid ( options );  ...   HTML  !DOCTYPE html  head \n... / head  body \n...\n   table   id = grid_id / table \n...         / body  / html   Where:   grid_id  is the id of the  table  element defined separately in your html and used as the name of your grid.  options  is an object of settings in \"name: value\" pair format. Some of these settings are values, some are functions to be performed on their associated events. Some of these settings are optional while others are mandatory for jqGrid to work   On creation of a grid you normally will set all relevant options directly, but it is possible also, to modify them later on: see  Options  Events raised by the grid, which offer opportunities to perform additional actions, are described in  Events .  The grid also offers several methods for getting or setting properties or data: see  Methods  A key property of the grid is the column model (colModel) that defines the contents of the grid:  colModel Options  Additional properties, events and methods of the basic grid, not described in this section, are used to create and manage the special types of grids: multiselect grids, subGrids, treeGrids, pivotGrid and more. Please refer to these topics for more details.", 
            "title": "Conventions"
        }, 
        {
            "location": "/user-guide/basic-grid/#css-framework-guide", 
            "text": "As of version 5 Guriddo jqGrid changes the way the styling of the grid is made. This mean that we have parametrize with classes every component of the grid. This allow us with little additions to make grid adoptable to any CSS framework.  Currently we have definitions for jQuery UI CSS Framework, Bootstrap v3 and  Bootstrap v4 CSS Framework  Below we will describe the construction of the styling and the way it works.  For using Guriddo jqGrid qith jQuery UI CSS and Bootstrap CSS see  installation", 
            "title": "CSS Framework Guide"
        }, 
        {
            "location": "/user-guide/basic-grid/#css-definition", 
            "text": "Guriddo jqGrid stores the definition of the classes in the common  $.jgrid  object in the base module. The property which holds all the classes definitions is named  styleUI . This property can be considered as main object describing the classes.  The next property in the hierarchy is the name which we give when defining the classes definitions. Currently we have two definitions -  Bootstrap  and  jQueryUI . By example if we want to have Foundation CSS definition we can do this like this:  $ . extend ( $ . jgrid ,{  ...  styleUI   :   { \n   jQueryUI   :   { \n     ... \n   }, \n   Bootstrap   :   { \n     ... \n   }, \n   Foundation   :   { \n     ... \n   }  },  ...  });   This name should be used in case we want to use this CSS framework for a particular grid  ... \n   $ ( #grid ). jqGrid ({ \n    ... \n    styleUI   :   Foundation \n   ... \n   });   We name this property CSS Framework Definition Name (FDN)  Every CSS FDN has properties which describes the classes in certain Guriddo jqGrid modules. Gurrido jqGrid module is a file which holds the definitions, methods events and etc for a certain property of the grid. By example grid.base.js is the base module, while grid.treegrid.js holds the actions and definition for the treegrid. We have following CSS FDN properties:   common  here we store the common classes which are available everywhere in the grid  base  here we have a classes which are used in the jqGrid base module  modal  describes the classes in the modal windows  celledit  classes for cell editing module  inlinedit  classes for inline editing module  formedit  classes for form editing module  navigator  classes for the navigator  grouping  classes used in grouping  filter  classes used in filter functions  subgrid  classes in subgrid module  treegrid  classes used in treegrid module  fmatter  classes used in formatter  collmenu  classes used in column menu   Bellow are the classes definitions for jQueryUI. The class properties are the same for Bootstrap. Note that if a new CSS definition will be made the same class properties should be used instead that some of them does not contain any definition.  styleUI   :   { \n   jQueryUI   :   { \n     common   :   { \n       disabled :   ui-state-disabled , \n       highlight   :   ui-state-highlight , \n       hover   :   ui-state-hover , \n       cornerall :   ui-corner-all , \n       cornertop :   ui-corner-top , \n       cornerbottom   :   ui-corner-bottom , \n       hidden   :   ui-helper-hidden , \n       icon_base   :   ui-icon , \n       overlay   :   ui-widget-overlay , \n       active   :   ui-state-active , \n       error   :   ui-state-error , \n       button   :   ui-state-default ui-corner-all , \n       content   :   ui-widget-content \n     }, \n     base   :   { \n       entrieBox   :   ui-widget ui-widget-content ui-corner-all ,   // entrie div  incl everthing \n       viewBox   :   ,   // view diw \n       headerTable   :   , \n       headerBox   :   ui-state-default , \n       rowTable   :   , \n       rowBox   :   ui-widget-content , \n       stripedTable   :   ui-jqgrid-table-striped , \n       footerTable   :   , \n       footerBox   :   ui-widget-content , \n       headerDiv   :   ui-state-default , \n       gridtitleBox   :   ui-widget-header ui-corner-top ui-helper-clearfix , \n       customtoolbarBox   :   ui-state-default , \n       //overlayBox:  ui-widget-overlay , \n       loadingBox   :   ui-state-default ui-state-active , \n       rownumBox   :    ui-state-default , \n       scrollBox   :   ui-widget-content , \n       multiBox   :   , \n       pagerBox   :   ui-state-default ui-corner-bottom , \n       pagerTable   :   , \n       toppagerBox   :   ui-state-default , \n       pgInput   :   ui-corner-all , \n       pgSelectBox   :   ui-widget-content ui-corner-all , \n       pgButtonBox   :   ui-corner-all , \n       icon_first   :   ui-icon-seek-first , \n       icon_prev   :   ui-icon-seek-prev , \n       icon_next :   ui-icon-seek-next , \n       icon_end :   ui-icon-seek-end , \n       icon_asc   :   ui-icon-triangle-1-n , \n       icon_desc   :   ui-icon-triangle-1-s , \n       icon_caption_open   :   ui-icon-circle-triangle-n , \n       icon_caption_close   :   ui-icon-circle-triangle-s \n     }, \n     modal   :   { \n       modal   :   ui-widget ui-widget-content ui-corner-all ui-dialog , \n       header   :   ui-widget-header ui-corner-all ui-helper-clearfix , \n       content   : ui-widget-content , \n       resizable   :   ui-resizable-handle ui-resizable-se , \n       icon_close   :   ui-icon-closethick , \n       icon_resizable   :   ui-icon-gripsmall-diagonal-se \n     }, \n     celledit   :   { \n       inputClass   :   ui-widget-content ui-corner-all \n     }, \n     inlinedit   :   { \n       inputClass   :   ui-widget-content ui-corner-all , \n       icon_edit_nav   :   ui-icon-pencil , \n       icon_add_nav   :   ui-icon-plus , \n       icon_save_nav   :   ui-icon-disk , \n       icon_cancel_nav   :   ui-icon-cancel \n     }, \n     formedit   :   { \n       inputClass   :   ui-widget-content ui-corner-all , \n       icon_prev   :   ui-icon-triangle-1-w , \n       icon_next   :   ui-icon-triangle-1-e , \n       icon_save   :   ui-icon-disk , \n       icon_close   :   ui-icon-close , \n       icon_del   :   ui-icon-scissors , \n       icon_cancel   :   ui-icon-cancel \n     }, \n     navigator   :   { \n       icon_edit_nav   :   ui-icon-pencil , \n       icon_add_nav   :   ui-icon-plus , \n       icon_del_nav   :   ui-icon-trash , \n       icon_search_nav   :   ui-icon-search , \n       icon_refresh_nav   :   ui-icon-refresh , \n       icon_view_nav   :   ui-icon-document , \n       icon_newbutton_nav   :   ui-icon-newwin \n     }, \n     grouping   :   { \n       icon_plus   :   ui-icon-circlesmall-plus , \n       icon_minus   :   ui-icon-circlesmall-minus \n     }, \n     filter   :   { \n       table_widget   :   ui-widget ui-widget-content , \n       srSelect   :   ui-widget-content ui-corner-all , \n       srInput   :   ui-widget-content ui-corner-all , \n       menu_widget   :   ui-widget ui-widget-content ui-corner-all , \n       icon_search   :   ui-icon-search , \n       icon_reset   :   ui-icon-arrowreturnthick-1-w , \n       icon_query   : ui-icon-comment \n     }, \n     subgrid   :   { \n       icon_plus   :   ui-icon-plus , \n       icon_minus   :   ui-icon-minus , \n       icon_open   :   ui-icon-carat-1-sw \n     }, \n     treegrid   :   { \n       icon_plus   :   ui-icon-triangle-1- , \n       icon_minus   :   ui-icon-triangle-1-s , \n       icon_leaf   :   ui-icon-radio-off \n     }, \n     fmatter   :   { \n       icon_edit   :   ui-icon-pencil , \n       icon_add   :   ui-icon-plus , \n       icon_save   :   ui-icon-disk , \n       icon_cancel   :   ui-icon-cancel , \n       icon_del   :   ui-icon-trash \n     }, \n     colmenu   :   { \n       menu_widget   :   ui-widget ui-widget-content ui-corner-all , \n       input_checkbox   :   ui-widget ui-widget-content , \n       filter_select :   ui-widget-content ui-corner-all , \n       filter_input   :   ui-widget-content ui-corner-all , \n       icon_menu   :   ui-icon-comment , \n       icon_sort_asc   :   ui-icon-arrow-1-n , \n       icon_sort_desc   :   ui-icon-arrow-1-s , \n       icon_columns   :   ui-icon-extlink , \n       icon_filter   :   ui-icon-calculator , \n       icon_group   :   ui-icon-grip-solid-horizontal , \n       icon_freeze   :   ui-icon-grip-solid-vertical , \n       icon_move :   ui-icon-arrow-4 \n     } \n   }, \n   ...  }", 
            "title": "CSS definition"
        }, 
        {
            "location": "/user-guide/basic-grid/#css-rules", 
            "text": "We can set unlimited number of classes for class item separeted with space  Class Item can contain empty string.  The definition of the icon is a combination of the  icon_base  defined in  common  property plus the class of the icon.  Every icon begin with  'icon '_  plus short description of the icon", 
            "title": "CSS rules"
        }, 
        {
            "location": "/user-guide/basic-grid/#getting-css-classes", 
            "text": "To get the classes for jQueryUI you can;  ...  var   jQueryUICSS   =   $ . jgrid . styleUI . jQueryUI ;  console . log ( jQueryUICSS );  ...   after the jqGrid JavaScript file is loaded. To get the common icon_base class:  ...  var   jQueryUICSS   =   $ . jgrid . styleUI . jQueryUI ;  console . log ( jQueryUICSS . common . icon_base );  ...", 
            "title": "Getting CSS classes"
        }, 
        {
            "location": "/user-guide/basic-grid/#setting-css-classes", 
            "text": "To set a particular item class it is a simple. Let suppose that we want to change the icon move in colmenu for jQueryUI style.  ...  $ . jgrid . styleUI . jQueryUI . colmenu . icon_move   =   ui-icon-arrow-1 ;  ...   Of course if we want to change not only one CSS item from a group, but two or more we can use jQuery extend to do this  var   my_col_definition    =   { \n   icon_move   :   ui-icon-arrow-1 , \n   icon_menu   :   ui-icon-pencil  }  $ . extend (   $ . jgrid . styleUI . jQueryUI . colmenu   ,   my_col_definition   );", 
            "title": "Setting CSS classes."
        }, 
        {
            "location": "/user-guide/basic-grid/#language-guide", 
            "text": "Guriddo jqGrid JS comes with a large number of predefined language packs and settings for almost all popular languages. They are located in the installation package, in the  /js/trirand/i18n  folder. Language packs are in the form of javascript files, containing definitions for all strings in the grid that can be localized - this includes messages, captions, paging information, search/add/delete dialog labels, etc.  The name of language file has the following structure:  grid.locale-XX.js  where XX is  ISO 639-1 code   which identifies the language.  The language javascript files can be loaded before or after jqGrid library. Historically the language file should be loaded before the jqGrid library, so we will continue with this.  Guriddo jqGrid can support different languages on one page. This means that you can load two or more language files and use it for a particular grid.  Another feature is that the language set of Guriddo jqGrid can be loaded dynamically without to reload the page - this is in case when appropriate language files are loaded.  Guriddo jqGrid can't work properly if the language file is not loaded. Be a sure that this file is loaded when working with the grid and setup correctly.  Below we will demonstrate two examples. The first example will load two grids in the page where each grid will be loaded with different language and the second example will change the language of the grid dynamically.  The appropriate settings and methods for this purpose are the grid option  regional  and the grid method  setRegional  The regional option is a two letter string which corresponds to the ISO 639-1 code and the last two letter in grid language file definition.  The default value of this option is  en .  It is important to note that using language file does not change the grid headers captions. \nIn order to change the caption grid cells use the grid method  setLabel  See  Grid Methods", 
            "title": "Language Guide"
        }, 
        {
            "location": "/user-guide/basic-grid/#using-two-grids-on-page-with-different-language", 
            "text": "Let suppose that we need to use two grids in one page, where the one grid should use English texts, while the other should use Japanese. To resolve this situation we need to load these two language files and set on each grid the appropriate two letter code.  The javascript fragment can look like this:  !DOCTYPE html  html  head  meta   http-equiv = Content-Type   content = text/html; charset=utf-8   /  title Multi Lingual Grids / title  link   rel = stylesheet   type = text/css   media = screen   href = css/jquery-ui.css   /  link   rel = stylesheet   type = text/css   media = screen   href = css/trirand/ui.jqgrid.css   /  script   src = js/jquery.min.js   type = text/javascript / script  script   src = js/trirand/i18n/grid.locale-en.js   type = text/javascript / script  script   src = js/trirand/i18n/grid.locale-jp.js   type = text/javascript / script  script   src = js/trirand/jquery.jqGrid.min.js   type = text/javascript / script  / head  body  table   id = griden / table  table   id = gridjp / table  script \n        var   Array   =   [ \n          { name :   Bob ,   phone :   232-532-6268 }, \n          { name :   Jeff ,   phone :   365-267-8325 } \n        ]; \n\n        $ ( #griden ). jqGrid ({ \n          datatype :   local , \n          regional :   en ,   // this is default \n          data :   dataArray , \n          colModel :   [ \n             { name :   name ,   label   :   Name }, \n             { name :   phone ,   label   :   Phone Number } \n           ] \n       }); \n       $ ( #gridjp ). jqGrid ({ \n         datatype :   local , \n         regional :   jp , \n         data :   dataArray , \n         colModel :   [ \n            { name :   name ,   label   :   \u540d }, \n            { name :   phone ,   label   :   \u96fb\u8a71\u756a\u53f7 } \n          ] \n      });  / script  / body  / html", 
            "title": "Using two grids on page with different language."
        }, 
        {
            "location": "/user-guide/basic-grid/#change-language-dynamically", 
            "text": "Changing language dynamically is possible with the common jqGrid function  setReginal . To call it use the following code:  $ . jgrid . setReginal ( grid_id ,   { regional   :   bg });   Let suppose that there is a requirement to change the language of the grid from English to Japanese when a button is a clicked. Using the header section from our previous example the code can look like this:  !DOCTYPE html  html  head  meta   http-equiv = Content-Type   content = text/html; charset=utf-8   /  title Multi Lingual Grids / title  link   rel = stylesheet   type = text/css   media = screen   href = css/jquery-ui.css   /  link   rel = stylesheet   type = text/css   media = screen   href = css/trirand/ui.jqgrid.css   /  script   src = js/jquery.min.js   type = text/javascript / script  script   src = js/trirand/i18n/grid.locale-en.js   type = text/javascript / script  script   src = js/trirand/i18n/grid.locale-jp.js   type = text/javascript / script  script   src = js/trirand/jquery.jqGrid.min.js   type = text/javascript parametrize  body  table   id = grid /table  button   id = chnlng Change   To   Japones /button  script \n        var   dataArray   =   [ \n          { name :   Bob ,   phone :   232-532-6268 }, \n          { name :   Jeff ,   phone :   365-267-8325 } \n        ]; \n\n        $ ( #grid ). jqGrid ({ \n          datatype :   local , \n          regional :   en ,   // this is default \n          data :   dataArray , \n          colModel :   [ \n             { name :   name ,   label   :   Name }, \n             { name :   phone ,   label   :   Phone Number } \n           ] \n       }); \n       $ ( #chnlng ). on ( click ,   function (){ \n         // change the language \n         $ . jgrid . setRegional ( grid ,{ regional :   jp }); \n         // change the labels \n         $ ( #grid ). jqGrid ( setLabel , name , \u540d ); \n         $ ( #grid ). jqGrid ( setLabel , phone , \u96fb\u8a71\u756a\u53f7 ); \n       });  / script  / body  / html   The first parameter in setRegional is the id of the grid and the second is a object containing property  regional  which should corresponded to the appropriate language file.", 
            "title": "Change language dynamically."
        }, 
        {
            "location": "/user-guide/basic-grid/#language-file-structure", 
            "text": "The structure and properties of the language files are changed recently. To the time of writing this documentation the default English language file has the following structure and texts.  ( function (   factory   )   { \n     use strict ; \n     if   (   typeof   define   ===   function     define . amd   )   { \n         // AMD. Register as an anonymous module. \n         define ([ \n             jquery , \n             ../grid.base \n         ],   factory   ); \n     }   else   { \n         // Browser globals \n         factory (   jQuery   ); \n     }  }( function (   $   )   {  $ . jgrid   =   $ . jgrid   ||   {};  if ( ! $ . jgrid . hasOwnProperty ( regional ))   { \n     $ . jgrid . regional   =   [];  }  $ . jgrid . regional [ en ]   =   { \n     defaults   :   { \n         recordtext :   View {0} - {1} of {2} , \n         emptyrecords :   No records to view , \n         loadtext :   Loading... , \n         savetext :   Saving... , \n         pgtext   :   Page {0} of {1} , \n         pgfirst   :   First Page , \n         pglast   :   Last Page , \n         pgnext   :   Next Page , \n         pgprev   :   Previous Page , \n         pgrecs   :   Records per Page , \n         showhide :   Toggle Expand Collapse Grid , \n         // mobile \n         pagerCaption   :   Grid::Page Settings , \n         pageText   :   Page: , \n         recordPage   :   Records per Page , \n         nomorerecs   :   No more records... , \n         scrollPullup :   Pull up to load more... , \n         scrollPulldown   :   Pull down to refresh... , \n         scrollRefresh   :   Release to refresh... \n     }, \n     search   :   { \n         caption :   Search... , \n         Find :   Find , \n         Reset :   Reset , \n         odata :   [{   oper : eq ,   text : equal },{   oper : ne ,   text : not equal },{   oper : lt ,   text : less },{   oper : le ,   text : less or equal },{   oper : gt ,   text : greater },{   oper : ge ,   text : greater or equal },{   oper : bw ,   text : begins with },{   oper : bn ,   text : does not begin with },{   oper : in ,   text : is in },{   oper : ni ,   text : is not in },{   oper : ew ,   text : ends with },{   oper : en ,   text : does not end with },{   oper : cn ,   text : contains },{   oper : nc ,   text : does not contain },{   oper : nu ,   text : is null },{   oper : nn ,   text : is not null },   { oper : bt ,   text : between }], \n         groupOps :   [{   op :   AND ,   text :   all   },{   op :   OR ,    text :   any   }], \n         operandTitle   :   Click to select search operation. , \n         resetTitle   :   Reset Search Value , \n         addsubgrup   :   Add subgroup , \n         addrule   :   Add rule , \n         delgroup   :   Delete group , \n         delrule   :   Delete rule \n     }, \n     edit   :   { \n         addCaption :   Add Record , \n         editCaption :   Edit Record , \n         bSubmit :   Submit , \n         bCancel :   Cancel , \n         bClose :   Close , \n         saveData :   Data has been changed! Save changes? , \n         bYes   :   Yes , \n         bNo   :   No , \n         bExit   :   Cancel , \n         msg :   { \n             required : Field is required , \n             number : Please, enter valid number , \n             minValue : value must be greater than or equal to  , \n             maxValue : value must be less than or equal to , \n             email :   is not a valid e-mail , \n             integer :   Please, enter valid integer value , \n             date :   Please, enter valid date value , \n             url :   is not a valid URL. Prefix required ( http://  or  https:// ) , \n             nodefined   :    is not defined! , \n             novalue   :    return value is required! , \n             customarray   :   Custom function should return array! , \n             customfcheck   :   Custom function should be present in case of custom checking! \n\n         } \n     }, \n     view   :   { \n         caption :   View Record , \n         bClose :   Close \n     }, \n     del   :   { \n         caption :   Delete , \n         msg :   Delete selected record(s)? , \n         bSubmit :   Delete , \n         bCancel :   Cancel \n     }, \n     nav   :   { \n         edittext :   , \n         edittitle :   Edit selected row , \n         addtext : , \n         addtitle :   Add new row , \n         deltext :   , \n         deltitle :   Delete selected row , \n         searchtext :   , \n         searchtitle :   Find records , \n         refreshtext :   , \n         refreshtitle :   Reload Grid , \n         alertcap :   Warning , \n         alerttext :   Please, select row , \n         viewtext :   , \n         viewtitle :   View selected row , \n         savetext :   , \n         savetitle :   Save row , \n         canceltext :   , \n         canceltitle   :   Cancel row editing , \n         selectcaption   :   Actions... \n     }, \n     col   :   { \n         caption :   Select columns , \n         bSubmit :   Ok , \n         bCancel :   Cancel \n     }, \n     errors   :   { \n         errcap   :   Error , \n         nourl   :   No url is set , \n         norecords :   No records to process , \n         model   :   Length of colNames   colModel! \n     }, \n     formatter   :   { \n         integer   :   { thousandsSeparator :   , ,   defaultValue :   0 }, \n         number   :   { decimalSeparator : . ,   thousandsSeparator :   , ,   decimalPlaces :   2 ,   defaultValue :   0.00 }, \n         currency   :   { decimalSeparator : . ,   thousandsSeparator :   , ,   decimalPlaces :   2 ,   prefix :   ,   suffix : ,   defaultValue :   0.00 }, \n         date   :   { \n             dayNames :     [ \n                 Sun ,   Mon ,   Tue ,   Wed ,   Thr ,   Fri ,   Sat , \n                 Sunday ,   Monday ,   Tuesday ,   Wednesday ,   Thursday ,   Friday ,   Saturday \n             ], \n             monthNames :   [ \n                 Jan ,   Feb ,   Mar ,   Apr ,   May ,   Jun ,   Jul ,   Aug ,   Sep ,   Oct ,   Nov ,   Dec , \n                 January ,   February ,   March ,   April ,   May ,   June ,   July ,   August ,   September ,   October ,   November ,   December \n             ], \n             AmPm   :   [ am , pm , AM , PM ], \n             S :   function   ( j )   { return   j     11   ||   j     13   ?   [ st ,   nd ,   rd ,   th ][ Math . min (( j   -   1 )   %   10 ,   3 )]   :   th ;}, \n             srcformat :   Y-m-d , \n             newformat :   n/j/Y , \n             parseRe   :   /[#%\\\\\\/:_;.,\\t\\s-]/ , \n             masks   :   { \n                 // see http://php.net/manual/en/function.date.php for PHP format used in jqGrid \n                 // and see http://docs.jquery.com/UI/Datepicker/formatDate \n                 // and https://github.com/jquery/globalize#dates for alternative formats used frequently \n                 // one can find on https://github.com/jquery/globalize/tree/master/lib/cultures many \n                 // information about date, time, numbers and currency formats used in different countries \n                 // one should just convert the information in PHP format \n                 ISO8601Long : Y-m-d H:i:s , \n                 ISO8601Short : Y-m-d , \n                 // short date: \n                 //    n - Numeric representation of a month, without leading zeros \n                 //    j - Day of the month without leading zeros \n                 //    Y - A full numeric representation of a year, 4 digits \n                 // example: 3/1/2012 which means 1 March 2012 \n                 ShortDate :   n/j/Y ,   // in jQuery UI Datepicker:  M/d/yyyy \n                 // long date: \n                 //    l - A full textual representation of the day of the week \n                 //    F - A full textual representation of a month \n                 //    d - Day of the month, 2 digits with leading zeros \n                 //    Y - A full numeric representation of a year, 4 digits \n                 LongDate :   l, F d, Y ,   // in jQuery UI Datepicker:  dddd, MMMM dd, yyyy \n                 // long date with long time: \n                 //    l - A full textual representation of the day of the week \n                 //    F - A full textual representation of a month \n                 //    d - Day of the month, 2 digits with leading zeros \n                 //    Y - A full numeric representation of a year, 4 digits \n                 //    g - 12-hour format of an hour without leading zeros \n                 //    i - Minutes with leading zeros \n                 //    s - Seconds, with leading zeros \n                 //    A - Uppercase Ante meridiem and Post meridiem (AM or PM) \n                 FullDateTime :   l, F d, Y g:i:s A ,   // in jQuery UI Datepicker:  dddd, MMMM dd, yyyy h:mm:ss tt \n                 // month day: \n                 //    F - A full textual representation of a month \n                 //    d - Day of the month, 2 digits with leading zeros \n                 MonthDay :   F d ,   // in jQuery UI Datepicker:  MMMM dd \n                 // short time (without seconds) \n                 //    g - 12-hour format of an hour without leading zeros \n                 //    i - Minutes with leading zeros \n                 //    A - Uppercase Ante meridiem and Post meridiem (AM or PM) \n                 ShortTime :   g:i A ,   // in jQuery UI Datepicker:  h:mm tt \n                 // long time (with seconds) \n                 //    g - 12-hour format of an hour without leading zeros \n                 //    i - Minutes with leading zeros \n                 //    s - Seconds, with leading zeros \n                 //    A - Uppercase Ante meridiem and Post meridiem (AM or PM) \n                 LongTime :   g:i:s A ,   // in jQuery UI Datepicker:  h:mm:ss tt \n                 SortableDateTime :   Y-m-d\\\\TH:i:s , \n                 UniversalSortableDateTime :   Y-m-d H:i:sO , \n                 // month with year \n                 //    Y - A full numeric representation of a year, 4 digits \n                 //    F - A full textual representation of a month \n                 YearMonth :   F, Y   // in jQuery UI Datepicker:  MMMM, yyyy \n             }, \n             reformatAfterEdit   :   false , \n             userLocalTime   :   false \n         }, \n         baseLinkUrl :   * , \n         showAction :   * , \n         target :   * , \n         checkbox   :   { disabled : true }, \n         idName   :   id \n     }, \n     colmenu   :   { \n         sortasc   :   Sort Ascending , \n         sortdesc   :   Sort Descending , \n         columns   :   Columns , \n         filter   :   Filter , \n         grouping   :   Group By , \n         ungrouping   :   Ungroup , \n         searchTitle   :   Get items with value that: , \n         freeze   :   Freeze , \n         unfreeze   :   Unfreeze , \n         reorder   :   Move to reorder \n     }  };  }));", 
            "title": "Language file structure."
        }, 
        {
            "location": "/user-guide/basic-grid/#options", 
            "text": "The setup and configuration of Guriddo jqGrid are controlled by setting options for the grid. Examples of configuration settings include the height and width of the grid, type of data that should be in each column, and other similar settings.  These options are set in the grid options object, and many of the options are set in name: value pairs, separated by commas. The object is given as an argument to the declaration of the jqGrid object.  The properties and options available are listed below in alphabetic order. Some have more details described in other pages of this documentation and a link to those pages is provided in those circumstances.  Some properties cannot be changed after the grid is created; the last column of the table labeled  Can be changed?  mentions if that particular property can or cannot have effect when changed after the grid is created.  All the grid options can be obtained with the method  getGridParam , where the first parameter (string) is the name of the option. By example to get the selected row in grid with id 'grid' we can use:  ...  var   selected   =   $ ( #grid ). jqGrid ( getGridParam , selrow );  if ( selected   !=   null )   { \n   ...  }   else   { \n   ...  }   We can set any option in a grid with the method  setGridParam . The first parameter of this method is a object in  name:value  pair which contain the option(s) that we want to change. Note that if the value in column  can not be changed  (see below) is 'No', the new value will not have efect instead that it is changed in the grid options. To add additional parameter  myparam =  20  to the data posted to the server do:  ...  $ ( #grid ). jqGrid ( setGridParam ,{   postData :   {   myparam : 20   }   });  ...   Guriddo jqGrid has a its global object with name  jQuery.jgrid  or in short  $.jgrid . This object contain variables and functions which are used everywhere in the grid. See  Common functions and variables  for a list of all available variables and functions.  The property  $.jgrid.defaults  can be used to set common options which are different from the default. See  Setting Options Globaly .  When the grid is initialized it loads default text values from language file. These values are stored in  $.grid.regional[XX].defaults  property, where XX is a two code language letter. Below  are the English values of this property:  $ . jgrid . regional [ en ]   =   { \n     defaults   :   { \n         recordtext :   View {0} - {1} of {2} , \n         emptyrecords :   No records to view , \n         loadtext :   Loading... , \n         savetext :   Saving... , \n         pgtext   :   Page {0} of {1} , \n         pgfirst   :   First Page , \n         pglast   :   Last Page , \n         pgnext   :   Next Page , \n         pgprev   :   Previous Page , \n         pgrecs   :   Records per Page , \n         showhide :   Toggle Expand Collapse Grid \n     },  ...  }   These and all the grid options value are described below:     Property  Type  Description  Default  Can be Changed?      addOptions  object  The parameter stores the add options (parameters) in navigator  see navigator  if the option  storeNavOptions  is set to true and  navGrid  method is called  empty  No    ajaxCellOptions  object  When defined this option can overwrite the ajax options when cell editing is enabled and the cell submitting is defined via url. All the ajax options for cell submit can be overwriten. See  Cell editing  empty object  Yes    ajaxGridOptions  object  This option allows to set global ajax settings for the grid when requesting data. With this option it is possible to overwrite all current ajax settings in the grid including the  error ,  success  and  beforeSend  events.  empty object  Yes    ajaxRowOptions  object  This option allow to set global ajax settings for the  Inline editiing  when we save the data to the server. Note that with this option is possible to overwrite all current ajax setting in the save request including the complete event.  empty  Yes    ajaxSelectOptions  object  This option allows to set global ajax settings for the created select element (in all editing and search modules) when the select is obtained via  dataUrl  option in  editoptions  or  searchoptions  objects See  editing  and  searching  empty object  Yes    ajaxSubgridOptions  object  When defined this option can overwrite the ajax options in subgrid when the subgrid make a ajax call to obtain the data. See  Subgrid  empty  Yes    altclass  string  This options is deprecated as of version 5.2      altRows  boolean  Set a zebra-striped grid (alternate rows have different styles). When this option is set to true we add a class described in styleUI object. The name of the class is  stripedTable  in the common styleUI object  false  No    autoencode  boolean  When set to true encodes the incoming data from server or array and encodes the posted data (from editing modules). For example   will be converted to  lt; . See the  common functions  for htmlEncode  false  Yes    autowidth  boolean  When set to true, the grid width is recalculated automatically to the width of the parent element. This is done only initially when the grid is created. In order to re-size the grid when the parent element or window changes width please use the option  responsive  - see below  false  No    caption  string  Defines the caption for the grid. This caption appears in the caption layer, which is above the header layer see  How It Works . If the string is empty the caption does not appear. To change the caption dynamically use the method  setCaption  empty string  No    cellLayout  integer  This option determines the padding + border width of the cell. Usually this should not be changed, but if custom changes to the  td  element are made in the grid css file, this will need to be changed. The initial value of 5 means paddingLef(2) + paddingRight (2) + borderLeft (1) = 5  5  No    cellEdit  boolean  Enables (disables) cell editing. See  Cell Editing  for more details.  false  Yes    cellsubmit  string  Determines where the contents of the cell should be saved. Possible values are  remote  in this case the data is saved via ajax and  clientArray  in case the data is saved in the local data array. See  Cell Editing  for more details.  remote  Yes    cellurl  string  The url where the cell is to be saved using ajax. Valid only if  celsubmit  is set to  remote . See  Cell Editing  for more details  null  Yes    cmTemplate  object  Defines a set of properties which override the default values in  colModel  for all columns. For example if you want to make all columns not sort-able, then only one property here can be specified instead of specifying it in all columns in  colModel   {sortable:false}  null  No    colFilters  object  If set the object defines the initial search rules for a field defined in colModel. The option is valid if  colMenu  option is set to true. For more information see  Column menu .  empty  No    colMenu  boolean  Enables column menu for a column with a set of predefined actions. The menu creates a button on the header of each or certain grid cell which when clicked activate a form with a actions.For more information see  Column menu .  false  No    colModel  array  Array which describes the parameters of the columns. This is the most important part of the grid. For a full description of all valid values see  colModel API .  empty array  No    colNames  array  An array in which we place the names of the columns. This is the text that appears in the head of the grid (header layer). The names are separated with commas. Note that the number of elements in this array should be equal of the number elements in the  colModel  array. This option will be deprecated. To set the text in header use the  label  property in  colModel  empty  No    data  array  An array that stores the local data passed to the grid. You can directly point to this variable in case you want to load an array data.  See  array data . It can replace the  addRowData  method which is slow on relative big data  empty array  Yes    datastr  string  The string of data when datatype parameter is set to  xmlstring  or  jsonstring .  null  Yes    datatype  string  Defines in what format to expect the data that fills the grid. Valid options are  xml  (we expect data in xml format),  xmlstring  (we expect xml data as string),  json  (we expect data in JSON format),  jsonstring   (we expect JSON data as a string),  local  or  clientSide  (we expect data defined at client side (array data) a  data  option can be used),  script  (we expect data as javascript),  function  (custom defined function for retrieving data),  JSONP  (we expect a data from a remoute server ). See  Retrieving Data . It is important to note that if this option is a function you should define how to retrieve a data - i.e grid expect from this function to fill the grid (you can use by example addJSONData)  xml  Yes    deepempty  boolean  This option should be set to  true  if an event or a plugin is attached to the table cell. The option uses jQuery empty for the row and all its children elements. This of course has speed overhead, but prevents memory leaks. This option should be set to  true  if a sortable rows and/or columns are activated.  false  Yes    delOptions  object  The parameter stores the delete options (parameters) in navigator  see navigator  if the option  storeNavOptions  is set to true and  navGrid  method is called  empty  No    deselectAfterSort  boolean  Applicable only when  datatype : local  is used. Deselects currently selected row(s) when a sort is applied. If set to false the selected rows remain instead of sorting.  true  Yes    direction  string  Determines the direction of text in the grid. The default is  ltr  (Left To Right). When set to  rtl   (Right To Left) the grid automatically changes the direction of the text. It is important to note that in one page we can have two (or more) grids where the one can have direction  ltr  while the other can have direction  rtl . Not all browsers support fully  rtl . If a problem is encountered,  please notify Guriddo support  ltr  No    editOptions  object  The parameter stores the edit options (parameters) in navigator  see navigator  if the option  storeNavOptions  is set to true and  navGrid  method is called  empty  No    editurl  string  Defines the url for inline and form editing. May be set to  clientArray  to manually post data to server, see  Editing .  null  Yes    emptyrecords  string  The string to display when the returned (or the current) number of records in the grid is zero. This option is valid only if  viewrecords  option is set to  true . The default value depend from the language used in the current grid.   Yes    ExpandColClick  boolean  When  true , the  tree grid   is expanded and/or collapsed when we click anywhere on the text in the expanded column. In this case it is not necessary to click exactly on the expand/collapse icon.  true  No    ExpandColumn  string  Indicates which column ( name  property from  colModel ) should be used to expand the tree grid. If not set the first one is used. Valid only when the  treeGrid  option is set to  true .  null  No    footerrow  boolean  If set to  true  this will place a footer table with one row below the gird records and above the pager. The number of columns equal those specified in  colModel  false  No    forceFit  boolean  If set to  true , and a column's width is changed, the adjacent column (to the right) will resize so that the overall grid width is maintained (e.g., reducing the width of column 2 by 30px will increase the size of column 3 by 30px). In this case there is no horizontal scroll bar.  Note:  This option is not compatible with  shrinkToFit  option - i.e if  shrinkToFit  is set to false,  forceFit  is ignored.  false  No    frozenColumns  boolean  Read-only parameter. If this parameter is true it means that the frozen columns method is applied to the grid.  false  No    gridstate  string  Determines the current state of the grid (i.e. when used with  hiddengrid ,  hidegrid  and  caption  options). Can have either of two states:  visible  or  hidden . This is only readonly option.  visible  No    gridview  boolean  In the previous versions of jqGrid ( = 3.4.X), reading a relatively large data set (number of rows  = 100 ) caused speed problems. The reason for this was that as every cell was inserted into the grid we applied about 5 to 6 jQuery calls to it. Now this problem is resolved; we now insert the entry row at once with a jQuery append. The result is impressive - about 3 to 5 times faster. What will be the result if we insert all the data at once? Yes, this can be done with a help of  gridview  option. The result is a grid that is 5 to 10 times faster compared to versions  = 3.4.X. This option have some limitations - we can not use aterInsertRow event. To use this event set the gridview option to false.  true  Yes    groupHeader  object  Read-only parameter which contain information about  Header grouping  empty  No    grouping  boolean  Enables grouping in grid. Please refer to the  Grouping .  false  Yes    groupingView  object  Holds the definitions for grouping See  Grouping .   Yes    headertitles  boolean  If the option is set to  true  the title attribute with text from the label property of colModel is added to the column headers - i.e if pointed with the mouse on the column header the header text display as title.  false  No    height  mixed  The height of the grid. Can be set as number ( pixels) or as percentage (only 100% is acceped) or value of  auto  is acceptable. In the last two cases (100% or auto) the vertical scrollbar does not appear. To change the height dynamically use the method  setGridHeight  150  No.    hiddengrid  boolean  If set to  true  the grid is initially is hidden. The data is not loaded (no request is sent) and only the caption layer is shown. When the show/hide button is clicked for the first time to show grid, the request is sent to the server, the data is loaded, and grid is shown. From this point we have a regular grid. This option has effect only if the  caption  property is not empty and the  hidegrid  property (see below) is set to  true .  false  No    hidegrid  boolean  Enables or disables the show/hide grid button, which appears on the right side of the caption layer. Takes effect only if the  caption  property is not an empty string.  true  No    hoverrows  boolean  When set to  false  the effect of mouse hovering over the grid data rows is disabled.  true  Yes    iconSet  string  Determines the iconic set used when Bootstrap4 is used. The option is valid only id  styleUI  option is set to Bootstrap4. Currently it can have 3 possible options -  fontAwesome, Octicons, Iconic . To have this efect the appropriate CSS file fron one of these icon sets should be loaded. For more information refer to  CSS Framework Guide  empty     idPrefix  string  When set, this string is added as prefix to the id of every grid row when it is built. This option is usefull if a two or more grids are available and there is a possibility to have equal id and equal grid names.  empty  Yes    ignoreCase  boolean  By default the local searching is case-sensitive. To make the local search and sorting not case-insensitive set this options to  true  false  Yes    inlineData  empty object  object used to add additional content (again with the edited row) to the data posted to the server when we are in inline editing. See  Inline editing . This is a user defined object when there is a need to post additional data to the server.  {}  Yes    inlineNav  boolean  Read-only parameter - determines if the inline navigator (inlineNav method) is called for this grid instance - true or not - false  false  No    jsonReader  array  An object which describes the structure of the expected json data. For a full description and default setting, see  Retrieving Data JSON Data   No    keyName  string  Contain the name which is supposed to be used as index (unique id in grid row) when read the data and build the grid rows. The name is get from the  key  property in colModel. If the key property is not set this option is false.  false  No    lastpage  integer  Gives the total number of pages returned from the request. If you use a function as datatype,  jqGrid('setGridParam',{lastpage: your_number});  can be used to specify the max pages in the pager.  0  No    lastsort  integer  Read-only property. Gives the index of last sorted column beginning from 0.  0  No    loadonce  boolean  If this flag is set to  true , the grid loads the data from the server only once (using the appropriate datatype). After the first request, the datatype parameter is automatically changed to  local  and all further manipulations are done on the client side. The data parameter is filled with the response data from the server.  false  No    loadtext  string  The text which appears in progress indicator (when enabled) when requesting and sorting data. This parameter is located in language file. See the default property of the regional array.   No    loadui  string  This option controls what to do when an ajax operation is in progress.  disable  - disables the jqGrid progress indicator. This way you can use your own indicator.  enable  (default) - shows the text set in the  loadtext  property in the center of the grid.  block  - displays the text set in the loadtext property and blocks all actions in the grid until the ajax request completes. Note that this disables paging, sorting and all actions on toolbar, if any.  The method  progressBar  controll this behaviour.  enable  Yes    menubar  boolean  Place a icon on left (or right) to add a user defined actions. To add or delete actions from the menubar use  menubarAdd  and  menubarDelete  methods  false  No    mtype  string  Defines the type of ajax request to make ('POST' or 'GET')  GET  Yes    minColWidth  integer  Defines the minimal width of all grid columns when re-sizing.  33  Yes    multiboxonly  boolean  This option works only when the  multiselect  option is set to  true  (see below). When  multiselect  is set to  true , clicking anywhere on a row selects that row; when  multiboxonly  is also set to  true , the multiselection is done only when the checkbox is clicked. Clicking in any other row (suppose the checkbox is not clicked) deselects all rows and selects the current row. See  Multiselection  false  Yes    multikey  string  This parameter makes sense only when the  multiselect  option (see below) is set to  true . Defines the key which should be pressed when we make multiselection. The possible values are:  shiftKey  - the user should press Shift Key,  altKey  - the user should press Alt Key, and  ctrlKey  - the user should press Ctrl Key. See  Multiselection  empty  Yes    multimail  boolean  If this options is set to true and the multiselect is on, the selection is like Yahoo and Google mail. Multiselection is done so that the multiboxonly parameter is set to true with additional properties. See  Multiselection  false  Yes    multiselect  boolean  If this flag is set to  true  a multi selection of rows is enabled. A new column at left side containing checkboxes is added. Can be used with any datatype option. See options  selarrrow  which contain the selected rows. See  Multiselection  false  No    multiselectWidth  integer  Determines the width of the checkbox column created when the  multiselect  option is enabled.  30  No    multiSort  boolean  If set to true enables the multisorting -  sort on more than one field. The options work if the datatype is local too. In case when the data is obtained from the server the  sidx  parameter contain the order clause. It is a comma separated string in format field1 asc, field2 desc ..., fieldN. Note that the last field does not have asc or desc. It should be obtained from  sord  parameter. When the option is true the behavior is as follow. The first click of the header field sort the field depending on the firstsortoption parameter in colModel or sortorder grid parameter. The next click sort it in reverse order. The third click removes the sorting from this field.  false  Yes    navButtons  array  The parameter stores all the custom buttons created in navigator  see navigator  if the option  storeNavOptions  is set to true and  navButtonAdd  method is called  empty  No    navGrid  boolean  Readonly parameter. determines if the navGrid method is called for this grid instance - true or not - false  false  No    navOptions  object  The parameter stores the navigator options in navigator if the option  storeNavOptions  is set to true and  navGrid  method is called  empty  No    page  integer  Set the initial page number when we make the request.This parameter is passed to the url for use by the server routine retrieving the data. It also works when the datatype is local.  1  Yes    pager  html id  Defines the pager bar to navigate through the records. This must be a valid HTML element; in our example we gave the div the id of \"pager\", but any name is acceptable. Note that the navigation layer (the \"pager\" div) can be positioned anywhere you want, determined by your HTML; in our example we specified that the pager will appear after the  body layer. The valid settings can be (in the context of our example)  pager, #pager, jQuery('#pager') . We recommend to use the second one -  #pager . See  Pager  for more details and explanations. If the pager is empty string (default value) it will not appear.  ' '  No    pagerpos  string  Determines the position of the pager  navigation buttons and records select box in the grid. By default the pager element when created is divided in 3 parts (one part for pager navigator buttons, one part for navigator buttons and one part for record information - see  recordpos ). Possible values are left, center, right. Note that when changing the position of this parameter it is necessary to change the position of the other elements. See  Navigator options  and the parameter  recordpos  below.  center  No    pgbuttons  boolean  Determines if the Pager buttons should be shown if pager is available. Also valid only if  pager  is set correctly. The buttons are placed in the pager bar.  true  No    pginput  boolean  Determines if the input box, where the user can change the number of the requested page, should be available. The input box appears in the pager bar between the pager buttons.  true  No    pgtext  string  Show information about current page status. We use for this purpose a template string. The default English string is:  Page {0} of {1} . The first value '{0}' is the current loaded page. The second value '{1}' is the total number of pages. Default depend from the used language file  lang file  Yes    prmNames  array  The default value of this property is: {page:\"page\",rows:\"rows\", sort:\"sidx\", order:\"sord\", search:\"_search\", nd:\"nd\", id:\"id\", oper:\"oper\", editoper:\"edit\", addoper:\"add\", deloper:\"del\", subgridid:\"id\", npage:null, totalrows:\"totalrows\"} . This customizes names of the fields sent to the server on a POST/GET request. All of the values correspond to some options of the grid. For example, with this setting, you can change the sort order element from  sidx  to  mysort  by setting  prmNames: {sort: \"mysort\"} . The string that will be posted to the server will then be  myurl.php?page=1 rows=10 mysort=myindex sord=asc , rather than  myurl.php?page=1 rows=10 sidx=myindex sord=asc . So the value of the column on which to sort upon can be obtained by looking at  $POST['mysort']  in PHP by example. When some parameter is set to null, it will be not sent to the server. For example if we set  prmNames: {nd:null}  the  nd  parameter will not be sent to the server.  For  npage  option see the  scroll  option. These options have the following meaning and default values:   page : the requested page (default value  page ),  rows : the number of rows requested (default value  rows ),  sort : the sorting column (default value  sidx ),  order : the sort order (default value  sord ),  search : the search indicator (default value  _search ),  nd : the time passed to the request (for IE browsers not to cache the request) (default value  nd ),  id : the name of the id when posting data in editing modules (default value  id ),  oper : the operation parameter passed to the server (default value  oper ),  editoper : the name of operation when the data is posted in edit mode (default value  edit ),  addoper : the name of operation when the data is posted in add mode (default value  add ),  deloper : the name of operation when the data is posted in delete mode (default value  del ),  totalrows : the number of the total rows to be obtained from server - see  rowTotal  (default value  totalrows ),  subgridid : the name passed when we click to load data in the subgrid (default value  id ).   Yes    postData  object  This array is appended directly to the url. This is an object and can be used this way:  {name1:value1...} . This is a user defined object which extends the object passed to the data parameter in ajax request. See API methods for manipulation.  empty  Yes    reccount  integer  Read-only property. Determines the exact number of rows in the grid. Do not confuse this with  records  parameter. Although in many cases they may be equal, there are cases where they are not. For example, if you define  rowNum  (requested records per page) to be 15, but the request to the server returns 20 records, the  records  parameter will be 20, but the  reccount  parameter will be 15 (the grid you will have 15 records and not 20).  0  No    recordpos  string  Determines the position of the record information in the pager ( See recordtext option). Can be  left ,  center ,  right . If the default value is changed, be a sure that the other placement in 3 part pager are set in appropriate way.  right  No    records  integer  Readonly property. Gives the number of records returned as a result of a query to the server.  none  No    recordtext  string  Text that can be shown in the pager. This option is valid if  viewrecords  option is set to  true . This text appears only if the total number of records is greater then zero. The default string in case of english langauage is as following:  View {0} - {1} of {2} . {0} is the start position of the records depending on page number and number of requested records, {1} is the end position and {2} - total records returned from the server.  lang file  Yes    regional  string  Two letter code which correspond to the code in grid.locale-xx.js. To load a language file different from English (default) in the grid change this parameter with the appropriate code. Note that the language file should be loaded. See  setRegional  method and  Language Guide .  en  Yes    remapColumns  array  Array which contain the order of the columns as they apper in the grid. Initially the first position correspond to the first column and etc. - by example [0,1,2,3] in case we have 4 columns defined in colModel. After reordering of columns ( see  Column reorder  ) the array can look like this:  [1,0,3,2]. This mean the the first column(0) is moved to the second position(1) and the third column(2) is moved to four position(3). Using the method  remapColumns  we can dynamically remap the initial order of the columns in the grid. After this remapping the array  remapColumns  is set to the those in the method.  empty  Yes    resizeclass  string  Assigns a class to columns that are re-sizable so that we can show a re-size handle only for ones that are resizable.  empty  No    responsive  boolean  If set to  true  the grid is re sized automatically to its parent container when the device is rotated or when the windows width is changed. Another useful feature is auto calculating the the space of the navGrid buttons \u2013 if the space does not fit the grid width drop down menu button is created, where all actions are inserted.  false  No    restoreCellonFail  boolean  Determine if the cell should be set or restored to its initial state on fail. Use this option if validation module is performed. The option is valid only in cell editing module. For More information see  Cell editing .  true  Yes    rowList  array  An array to construct a select box element in the pager in which we can change the number of the visible rows. When changed during the execution, the values of this parameter replaces the  rowNum  parameter that is passed to the url. If the array is empty, this element does not appear in the pager. Typically you can set this like  [10,20,30] . If the  rowNum  parameter is set to 30 then the selected value in the select box is 30. The rowList parameter can have display value as string too. The select list can be configured with a name value pair where the value and display text will be separated with colon \":\". By example the following [\"10:10\", \"20:20\", \"30:30\", \"-1:All\"] will provide display items in select list 10,20,30,All and when All is selected the value of -1 will be posted.  empty  No    rownumbers  boolean  If this option is set to  true , a new column at left of the grid is added. The purpose of this column is to count the number of available rows, beginning from 1. In this case  colModel  is extended automatically with new element with the name  rn .  Note:  It is not recommend to use the name  rn  in the  colModel .  false  No    rowNum  integer  Sets how many records we want to view in the grid. This parameter is passed to the url (and in local data too) for use by the server routine retrieving the data. Note that if you set this parameter to 10 (i.e. retrieve 10 records) and your server return 15 then only 10 records will be loaded.  20  Yes    rowTotal  integer  When set this parameter can instruct the server to load the total number of rows needed to work on. Note that  rowNum  determines the total records displayed in the grid, while  rowTotal  determines the total number of rows on which we can operate. When this parameter is set, we send an additional parameter to the server named  totalrows  (See prmNames option). You can check for this parameter, and if it is available you can replace the  rows  parameter with this one. Mostly this parameter can be combined with  loadonce  parameter set to  true .  null  Yes    rownumWidth  integer  Determines the width of the row number column if  rownumbers  option is set to  true .  35  No    savedRow  array  This is a readonly property and is used in inline and cell editing modules to store the data, before editing the row or cell. See  Cell Editing  and  Inline Editing . This array stores the original values before editing the cell or row and is used in case the user press Esc to restore the original values of the edited row or cell.  empty  No    search  boolean  Read-only parameter which identify if we perform a search. The parameter is set to true if we use one of the search modules and activate the search (server side or local). The parameter is set to false when the search is reset.  false  No    searchOptions  object  The parameter stores the search options (parameters) in navigator  see navigator  if the option  storeNavOptions  is set to true and  navGrid  method is called  empty  No    scroll  mixed  Creates dynamic (virtual) scrolling grids. When enabled, the pager buttons and select box are disabled and we can use the vertical scrollbar to load data. When set to  true  the grid will always hold all the items from the start through to the latest point ever visited. When  scroll  is set to an integer value (Mostly by example 1), the grid will just hold the visible lines. This allow us to load the data in portions without caring about memory leaks. In addition to this we have an optional extension to the server protocol:  npage  (see  prmNames  array). If you set the  npage  option in  prmNames , then the grid will sometimes request more than one page at a time; if not, it will just perform multiple GET requests.Note that this option is not compatible when a grid parameter  height  if set to  auto  or  100% .  false  No    scrollMaxBuffer  integer  This parameter set the maximum rows the grid can load when a scroll option is set to 1. This allow to control  the buffer of the loaded rows. This parameter is recommended to be used when  a scroll is set to 1 and the datatype is local. The recommended setting is a value greater than the rowNum parameter. If the value is little then this parameter it is set automatically to be equal to rowNum parameter.  0  Yes    scrollLeftOffset  percent  Determines the left offset of the box which appear when virtual scroll is enabled  and scrollPopUp parameter is set to true. The information does appear when we use the mouse to scroll through the pages. The value of 0% set the box to appear at upper left corner of the grid. See scrollPopUp and scrollTopOffset parameters.  100%  Yes    scrollOffset  integer  Determines the width of the vertical scrollbar. Since different browsers interpret this width differently (and it is difficult to calculate it in all browsers) this can be changed.  18  No    scrollTopOffset  integer  Defines the top offset from the upper position of the scroll element.  0  Yes    scrollPopUp  boolean  Enables/disables popup with page information when virtual scrolling is on. When this is enabled  the information box change its position relative to the position of the scroll element.  false  Yes    scrollTimeout  integer  This controls the timeout handler when  scroll  is set to 1. The value is set in milliseconds.  40  Yes    scrollrows  boolean  When enabled, selecting a row with  setSelection  scrolls the grid so that the selected row is visible. This is especially useful when we have a verticall scrolling grid and we use form editing with navigation buttons (next or previous row). On navigating to a hidden row, the grid scrolls so that the selected row becomes visible.  false  Yes    selarrrow  array  This options is readonly. Gives the currently selected rows when  multiselect  is set to  true . This is a one-dimensional array and the values in the array correspond to the selected id's in the grid.  empty  No    selrow  string  This option is read-only. It contains the id of the last selected row. If sorting or paging is performed, this options is set to null.  null  No    shrinkToFit  boolean  This option, if set, defines how the the width of the columns of the grid should be re-calculated, taking into consideration the width of the grid. If this value is  true , and the width of the columns is also set, then every column is scaled in proportion to its width. For example, if we define two columns with widths 80 and 120 pixels, but want the grid to have a width of 300 pixels, then the columns will stretch to fit the entire grid, and the extra width assigned to them will depend on the width of the columns themselves and the extra width available. The re-calculation is done as follows: the first column gets the width (300(new width)/200(sum of all widths)) 80(first column width) = 120 pixels, and the second column gets the width (300(new width)/200(sum of all widths)) 120(second column width) = 180 pixels. Now the widths of the columns sum up to 300 pixels, which is the width of the grid. If the value is false and the value in  width  option is set, then no re-sizing happens whatsoever. So in this example, if  shrinkToFit  is set to false, column one will have a width of 80 pixels, column two will have a width of 120 pixels and the grid will retain the width of 300 pixels.  true  No    sortable  mixed  When set to  true , this option allows reordering columns by dragging and dropping them with the mouse. Since this option uses the jQuery UI sortable widget, be sure to load this widget and its related files in the HTML head tag of the page.  Note:  The  colModel  object also has a property called  sortable , which specifies if the grid data can be sorted on a particular column or not. This option works when Bootstrap CSS is used. In this case the jQuery UI sortable widged should be loaded. The sortable option can be a object in which we can add (or overwrite) parameters that are available in the jQuery UI method. To do this a option property should be set. By example to change the jQuery UI sortable pareneter  forcePlaceholderSize  we should do:   $(\"#jqGrid\").jqGrid({ ..., sortable: { options: {forcePlaceholderSize  : true } },...}); .  Actually when this option is on we call the build in method  sortabColumns  false  No    sortname  string  The column according to which the data is to be sorted when it is initially loaded from the server or local array. This parameter is appended to the url. If this value is set and the index (name) matches the name from colModel, then an icon indicating that the grid is sorted according to this column is added to the column header. This icon also indicates the sorting order - descending or ascending (see the parameter  sortorder ). Also see  prmNames .  empty  Yes    sortorder  string  The initial sorting order (ascending or descending) when we fetch data from the server or client array. This parameter is appended to the url - see  prnNames . The two allowed values are -  asc  or  desc .  asc  Yes    storeNavOptions  boolean  Store the navigator options in the grid options. The parameter is used in navGrid  method (common navigator options) and if true the options are saved as grid parameters. This parameter is usefull if we want to know some parameter in the navigator, but the primary use of this parameter is when a loadState and restoreState methods are used. In this case it is recommend to set this option to true since restoring of navigator actions depend from grid option.  false  No    styleUI  string  Defines the CSS framework used for the internal representation of the grid. For more information refer to  CSS Framework Guide .  jQueryUI  No    subGrid  boolean  If set to  true  this enables using a sub-grid. If the  subGrid  option is enabled, an additional column at left side is added to the basic grid. This column contains expanded/collapsed icon (see subgrid property in StyleUI) which indicates that the user can click on it to expand the row. By default all rows are collapsed. See  Subgrid  for details  false  No    subGridOptions  object  A set of additional options for the subgrid. For more information and default values see  Subgrid .   Yes    subGridModel  array  This property, which describes the model of the subgrid, has an effect only if the subGrid property is set to  true . It is an array in which we describe the column model for the subgrid data. For more information see  Subgrid .  empty  No    subgridtype  mixed  Set the dataType of the ajax call to the server when make the subgrid request. Can be  xml  or  json . Can be a function. If not set, get the datatype defined in the grid option  datatype .  null  Yes    subGridUrl  string  This option has effect only if the  subGrid  option is set to  true . This option points to the url from which we get the data for the subgrid. jqGrid adds the id of the row to this url as parameter. If there is a need to pass additional parameters, use the  params  option in  subGridModel . See  Subgrid  empty string  Yes    subGridWidth  integer  Defines the width of the sub-grid column if  subGrid  is enabled.  20  No    toolbar  array  This option defines the toolbar of the grid. This is an array with two elements in which the first element's value enables the toolbar and the second defines the position relative to the body layer (table data). Possible values are  top ,  bottom , and  both . When we set it like  toolbar: [true,\"both\"]  two toolbar s are created -- one on the top of table data and the other at the bottom of the table data. When we have two toolbar s, then we create two elements (div). The id of the top bar is constructed by concatenating the string \"t_\" and the id of the grid, like  \"t_\" + id_of_the_grid  and the id of the bottom toolbar is constructed by concatenating the string \"tb_\" and the id of the grid, like  \"tb_\" + id_of_the grid . In the case where only one toolbar is created, we have the id as  \"t_\" + id_of_the_grid , independent of where this toolbar is located (top or bottom)  [false,'']  No    toppager  boolean  When enabled this option places a pager element at top of the grid, below the caption (if available). If another pager is defined, both can coexist and are kept in sync (except adding custom buttons in navigator). The id of the newly created pager is the combination  grid_id + \"_toppager\" . All the buttons which are connected to the 'bottom' pager are valid for the top pager. This means that if by example pginput is true it will display on the toppager too.  false  No    totaltime  integer  Readonly parameter. It gives the loading time of the records - currently available only when we load xml,json or jsonp data. The measurement begins when the request is complete and ends when the last row is added.  0  No    treedatatype  mixed  Gives the initial datatype when tree grid is enabled (see  datatype  option). Usually this should not be changed. During the reading process this option is equal to the datatype option.  null  No    treeGrid  boolean  Enables (disables) the tree grid format. For more details see  Tree Grid  false  No    treeGrid_bigData  boolean  Enables ( if set to true) the tree grid pagging with root nodes as described  here  false  Yes    treeGridModel  string  Method used for the  treeGrid . The value can be either  nested  or  adjacency . See  Tree Grid  nested  No    treeIcons  array  This array sets the icons used in the tree grid.The default values are set from styleUI property treegrid of the used  CSS framework .   No    treeReader  object  Extends the  colModel  defined in the basic grid when treeGrid is set to true. The fields described here are appended to end of the  colModel  array and are hidden. This means that the data returned from the server should have values for these fields. For a full description of all valid values see  Tree Grid .   No    tree_root_level  numeric  Defines the level from where the root element begins when treeGrid is enabled.  0  No    url  string  The url of the file that returns the data needed to populate the grid.  May be set to  clientArray  to manually post data to server; see  Editing .  null  Yes    userData  object  This object contains custom information from the request. Can be used at any time. See  Retrieving Data .  empty  No    userDataOnFooter  boolean  When set to  true  we directly place the user data array  userData  in the footer if the  footerrow  parameter is set to  true . The rules are as follows: If the  userData  array contains a name which matches any name defined in  colModel , then the value is placed in that column. If there are no such values nothing is placed. Note that if this option is used we use the current formatter options (if available) for that column. See  footerData  method  false  Yes    useNameForSearch  boolean  When set to true forces jqGrid to perform the search by name and not by index (if set) in colModel when datatype is local  false  Yes    viewOptions  object  The parameter stores the view options (parameters) in navigator  see navigator  if the option  storeNavOptions  is set to true and  navGrid  method is called  empty  No    viewrecords  boolean  If  true , jqGrid displays the beginning and ending record number in the grid, out of the total number of records in the query.  This information is shown in the pager bar (bottom right by default)in this format: \"View X to Y out of Z\".  If this value is  true , there are other parameters that can be adjusted, including  emptyrecords  and  recordtext .  false  No    viewsortcols  array  The purpose of this parameter is to define a different look and behavior for the sorting icons (up/down arrows) that appear in the column headers. This parameter is an array with the following default options  viewsortcols : [false,'vertical',true] . The first parameter determines if sorting icons should be visible on all the columns that have the sortable property set to  true . Setting this value to  true  could be useful if you want to indicate to the user that (s)he can sort on that particular column. The default of false sets the icon to be visible only on the column on which that data has been last sorted. Setting this parameter to  true  causes all icons in all sortable columns to be visible. The second parameter determines how icons should be placed -  vertical  means that the sorting arrows are one under the other. 'horizontal' means that the arrows should be next to one another. The third parameter determines the click functionality. If set to  true  the data is sorted if the user clicks anywhere in the column's header, not only the icons. If set to false the data is sorted only when the sorting icons in the headers are clicked.  Important:  If you are setting the third element to false, make sure that you set the first element to  true ; if you don't, the icons will not be visible and the user will not know where to click to be able to sort, since clicking just anywhere in the header will not guarantee a sort.   No    width  number  If this option is not set, the width of the grid is the sum of the widths of the columns defined in the colModel (in pixels). If this option is set, the initial width of each column is set according to the value of the  shrinkToFit  option. To change the grid width use  setGridWidth  method.  none  No    xmlReader  object  An object which describes the structure of the expected xml data. For a full description refer to  Retrieving Data in XML Format .   No", 
            "title": "Options"
        }, 
        {
            "location": "/user-guide/basic-grid/#setting-options-globaly", 
            "text": "There are cases where you want to have some particular options to be changed (change the default value) and that this option should be a common for all your grids. This can be done using extend function of jQuery.  Let us suppose that you want to have a zebra like grid (alternate rows have different colors) and want that all you grids have this options set to true. If you do not want this code to be written every time when you create a grid, here is a way to do it :  ...  script   src = js/jquery.jqGrid.min.js   type = text/javascript /script  script   type = text/javascript  ...  // Here we set the altRows option globally  jQuery . extend ( jQuery . jgrid . defaults ,   {   altRows : true   });  ...  /script   This code should be placed after loading jqGrid JavaScript file.  You can add as many valid jqGrid options as you want here.", 
            "title": "Setting Options globaly"
        }, 
        {
            "location": "/user-guide/basic-grid/#overwrite-options", 
            "text": "In the previous example, we learn how to set common options for all grids in your application. However, you might encounter situations where you would like to overwrite the global and or default options for a particular grid.  To do this, you will need to change the option in the desired grid. For example, let's say we set a global option for all rows to have alternating colors (the zebra grid). If we don't want alternating colors for a certain grid, just set altRows to false and the global option will be overwritten.  The code for this scenario can be found here:  ...  script   src = js/jquery.jqGrid.min.js   type = text/javascript /script  script   type = text/javascript  ...  // Here we set the altRows option globally  jQuery . extend ( jQuery . jgrid . defaults ,   {   altRows : true   });  ...  /script  ...  script   type = text/javascript  jQuery ( document ). ready ( function (){ \n   jQuery ( #list ). jqGrid ({ \n     url : example.php , \n     // here we do not want zebra for this grid \n     altRows :   false , \n     ... \n   }); \n   ...  });", 
            "title": "Overwrite options"
        }, 
        {
            "location": "/user-guide/basic-grid/#colmodel-options", 
            "text": "The colModel property defines the individual grid columns as an object of properties. This is the most important part of the jqGrid. Syntax of setting colModel is:  jQuery ( #gridid ). jqGrid ({  ... \n    colModel :   [ \n      { name : name1 ,   index : index1 ...}, \n      {...}, \n      ... \n    ],  ...  });   The minimal required property is  name .  The colModel options can be get or set using  getColProp  and  setColProp  methods. See  Methods .  To get a properties of column with name  name1  do:  ...  var   myprop   =   jQuery ( #gridid ). jqGrid ( getColProp ,   name1 );  ...   The method has only one parameter - column name. If the column name does not exists the method return empty object.  To set a property(s) of column with name with  name1  do:  ...  jQuery ( #gridid ). jqGrid ( setColProp ,   name1 ,   { index : newindex ,...});  ...   In this case the index property of column with name name1 will be changed from index1 to newindex. \nParameters passed to the method are column name and a object of type name:value.  To get the entire colModel array use  getGridParam  method.  ...  var   colmodel   =   jQuery ( #gridid ). jqGrid ( getGridParam ,   colModel );  ...   The available colModel properties are listed here, in alphabetic order. Some propties contain other objects. These properties will be described in the appropriate chapter - link will be provided.     Property  Type  Description  Default      align  string  Defines the alignment of the cell in the Body layer, not in header cell. Possible values: left, center, right.  left    cellattr  function  This function add attributes to the cell during the creation of the data - i.e dynamically. By example all valid attributes for the table cell can be used or a style attribute with different properties. The function should return string. Parameters passed to this function are:     rowId   - the id of the row    val   - the value which will be added in the cell    rawObject  - the raw object of the data row - i.e if datatype is json - array, if datatype is xml xml node.    cm  - all the properties of this column listed in the colModel    rdata  - the data row which will be inserted in the row. This parameter is array of type name:value, where name is the name in colModel  null    classes  string  This option allow to add classes to the column. If more than one class will be used a space should be set. By example classes:'class1 class2' will set a class1 and class2 to every cell on that column. In the grid css there is a predefined class  ui-ellipsis  which allow to attach ellipsis to a particular row. Also this will work in FireFox too.  empty string    colmenu  boolean  Enables/disables column menu to appear at particular grid header. This option is valid only if the grid option colMenu is set to true. See  Column menu  true    coloptions  object  Defines a various options for colum menu if it is enabled.For more information see  Column menu .  empty    datefmt  string  Governs format of sorttype:date (when datetype becomes local) or/and editrules {date:true} fields. Determines the expected date format for that column - i.e the format set here should correspond to the value which will be inserted into the grid. Uses a PHP-like date formatting. Currently \"/\", \"-\", and \".\" are supported as date separators. Valid formats are:   y,Y,yyyy for four digits year   YY, yy for two digits year   m,mm for months   d,dd for days.   The values is used to sort the date correct and validate it in case of editing with validation (editrules)  See  Array Data  Y-m-d    editable  boolean  Defines if the field is editable. This option is used in cell-, inline- and form-editing modules. By default this option is false, which means that in inline and cell editing the field is not allowed to be edit. In form editing the field does not appear into the edit form. See  Editing  false    editoptions  object  Object of allowed options (properties) for the editable column. The option is valid if editable option is set to true. See  Edit options  empty    editrules  object  Object sets additional rules for the editable field. Mostly used for validation. See  Edit rules  empty    edittype  string  Defines the edit type for editing modules. Possible values: text, textarea, select, checkbox, password, button, image and file and etc. See also  Edit type  text    exportcol  boolean  Determines if the column should be exported when using exportToCsv, exportToExcel and exportToPdf methods. If set to false the column is not exported. See  Exporting  true    firstsortorder  string  Can be set to asc or desc, the column will be sorted in that direction on first sort. Subsequent sorts of the column will toggle as usual  asc    fixed  boolean  If set to true this option does not allow recalculation of the width of the column if shrinkToFit option is set to true. Also the width does not change if a setGridWidth method is used to change the grid width.  false    formoptions  object  Defines various options for form editing. See  Form options  empty    formatoptions  object  Format options can be defined for particular columns, overwriting the defaults from the language file. See  Formatter  for more details.  none    formatter  mixed  Set predefined types (string) or custom function name that controls the format of this field. See  Formatter  for more details.  none    frozen  boolean  If set to true determines that this column will be frozen after calling the setFrozenColumns method. See  Frozen Columns  false    hidedlg  boolean  If set to true this column will not appear in the dialog where users can choose which columns to show, hide or reorder using the columnChooser method  jQuery UI Integrations  or colMenu  Column action .  false    hidden  boolean  Defines if this column is hidden at initialization. The column is not editable and will not show in Form editing. Instead tha the column is hidden the data is presented in the grid. See methods hideCol and showCol. See  editrules  to edit a column in form edit when hidden.  false    index  string  Set the index name when sorting. Passed as sidx parameter. If set this field is used in serching - i.e the field is send to the server for serching or used in local searching.  empty    jsonmap  mixed  Defines the json mapping for the column in the incoming json request/string. Can be used as function with parameter the row data. See  Retrieving JSON Data  none    key  boolean  Overwrite the id (defined in readers) from server or array data. Can be set as id for the unique row id. Only one column can have this property. This option have higher priority as those from the readers. If there are more than one key set the grid finds the first one and the second is ignored. When set this option is equal to the grid option  keyName .  false    label  string  When colNames array is empty, defines the header caption for this column. If both the colNames array and this setting are empty, the heading for this column is values of name property.  none    minResizeWidth  integer  defines minimal re-sizing width per column. When set - i.e   0 this option have higher priority of grid option  minColWidth  0    name  string  Set the unique name in the grid for the column. This property is required. As well as other words used as property/event names, the reserved words (which cannot be used for names) include  subgrid, cb and rn .  Required    resizable  boolean  Defines if the column can be re sized with the mouse or resizeColumn method.  true    search  boolean  When used in search modules, disables or enables searching on that column.  Search Configuration  true    searchoptions  object  Defines search options used in searching.  Search Configuration  empty    sortable  boolean  Defines if the field can be sorted. If false click with the mouse on that column does not provide any action.  true    sortfunc  function  Custom function to make custom sorting when datatype is local. Three parameters a, b and direction are passed. The  a  and  b  parameters are values to be compared,  direction  is numeric 1 and -1 for ascending and descending order. The function should return the same values as the build in JavaScript function sort - ie: 1, -1 or 0.  null    sorttype  mixed  Used when datatype is local. Defines the type of the column for appropriate sorting and searching. Possible values:  int/integer - for sorting integer  float/number/currency  - for sorting decimal numbers  date  - for sorting date (see datefmt parameter)    text  - for text sorting  function* - defines a custom function for sorting type. To this function we pass the value to be sorted and it should return a value.  See  Array Data  text    stype  string  Determines the input type of the element when searching - the possible values are  text  for creating input field and  select  for select element. See  Search Configuration  text    surl  string  This option is deprecated. Use  searchoptions : {dataUrl:'...'}  instead. See  Searching .  empty    template  object  Set of valid properties for the colModel. This option can be used if you want to overwrite a lot of default values in the column model with easy. By example you can define a common object with valid colModel options and set it here to overwrite default one. See also  cmTemplate  in grid options  null    title  boolean  If this option is false the title is not displayed in that column when we hover a cell with the mouse  true    width  number  Set the initial width of the column, in pixels. This value accept only number and the measure is in pixels.  150    widthOrg  number  This width is equal to the initial set width and does not change during resizing of the grid.  150    xmlmap  string  Defines the xml mapping for the column in the incoming xml file. A CSS specification for this can be defined.  Can be used as function with parameter the xmlrow data. See  Retrieving Data  none    unformat  function  Custom function to \"unformat\" a value (to bring it in its original state) of the cell when used in editing and user defined formatter is used. See  Custom Formatter  and  Editing . (Unformat is also called during sort operations. The value returned by unformat is the value compared during the sort.)  null    viewable  boolean  This option is valid only when  viewGridRow  method is activated. When the option is set to false the column does not appear in view Form.  true", 
            "title": "colModel options"
        }, 
        {
            "location": "/user-guide/basic-grid/#data-retrieving-mapping-configuration", 
            "text": "This is the most important part of Guriddo jqGrid. Understanding this will make the rest of using Guriddo jqGrid very easy.  Guriddo jqGrid support obtaining data from the following basic format types: JSON, XML and Array data, which can be considered as subpart of JSON.  The data is obtained via Ajax or/and locally with the appropriate JSON String, XML String and Array data.  The following items are related with the data:", 
            "title": "Data - retrieving, mapping, configuration"
        }, 
        {
            "location": "/user-guide/basic-grid/#data-related-items", 
            "text": "Basic Guriddo  jqGrid options   datatype  jsonReader  xmlReader  localReader  data  url  datastr  loadonce   Basic Guriddo  jqGrid events   serializeGridData  beforeProcessing  loadComplete  gridComplete  loadError  loadBeforeSend   Basic Guriddo  jqGrid functions   addJSONData  addXmlData  addLocalData   Basic  colModel options  Here are options valid for every object (jqGrid column) described in colModel array.   xmlmap  jsonmap  key   Basic Guriddo  jqGrid methods   addRowData  delRowData  setRowData  getRowData  setCell  getCell  getCol  getLocalRow", 
            "title": "Data related items"
        }, 
        {
            "location": "/user-guide/basic-grid/#json-data", 
            "text": "JSON is the most important exchange format today. Guriddo jqGrid maps the external JSON data from ajax (or other sources) to grid using the main parameter  jsonReader .  Te default setting of jsonReader is:  jQuery ( #gridid ). jqGrid ({  ... \n    jsonReader   :   { \n       root :   rows , \n       page :   page , \n       total :   total , \n       records :   records , \n       repeatitems :   true , \n       cell :   cell , \n       id :   id , \n       userdata :   userdata , \n       subgrid :   { \n          root : rows , \n          repeatitems :   true , \n          cell : cell \n       } \n    },  ...  });   To allow this to happen the grid option datatype should be set to  json, jsonp  (in case of  jsonstring  datastr option should be set with the json string input data).  jQuery ( #gridid ). jqGrid ({  ... \n   datatype :   json , \n   url   :   data.json  ...  });   Using our  Quick Start  example let suppose that we have the following grid.  $ ( #grid ). jqGrid ({ \n   datatype :   json , \n   url   :   data.json \n   colModel :   [ \n      { name :   name ,   label   :   Name }, \n      { name :   phone ,   label   :   Phone Number } \n    ]  });   In this case using the default jsonReader we can accept two JSON data formats. The first one should be:  { \n   total :   1 , \n   page :   1 , \n   records :   2 , \n   rows   :   [ \n     { id   : 1 ,   cell   :[ Bob ,   232-532-6268 ]}, \n     { id   : 2 ,   cell :   [ Jeff ,   365-267-8325 ]} \n   ]  }   and the second one should be:  { \n   total :   1 , \n   page :   1 , \n   records :   2 , \n   rows   :   [ \n     { id   : 1 ,   name :   Bob ,   phone :   232-532-6268 ,   addres : address 1 }, \n     { id   : 2 ,   name :   Jeff ,   phone :   365-267-8325 ,   addres : address 2 }   \n   ]  }   Note the differences in  row  property. This means that Guriddo jqGrid can auto detect the input JSON format to put the data into the grid.  Note:  When using the input format as set in the first example the length of the cell array should be equal to the length of  colModel . In case of difference no data will be present to the grid.  The properties used in  jsonReader  mean the following:     Property  Description      total  total pages for the query    page  current page of the query    records  total number of records for the query    rows  an array that contains the actual data    id  the unique id of the row    cell  an array that contains the data for a row    repeatitems  tells jqGrid that the information for the data in the row is repeatable - i.e. the elements have the same tag cell described in cell array element. Setting this option to false instructs jqGrid to search elements in the json data by name. This is the name from colModel or the name described with the jsonmap option in colModel    userdata  holds additional data from serevr to be presented in grid. See  userdata  below    subgrid  Definition for subgrid. See  Subgrid     Let's begin our walk through the jsonReader.  The first element is a   root   This element describes where our row data begins. In other words, this points to the array that contains the data. If we set :  jQuery ( #gridid ). jqGrid ({ \n   ... \n   jsonReader   :   { root : clientdata }, \n   ...  });   then the returned string should be  { \n   total :   1 , \n   page :   1 , \n   records :   2 , \n   clientdata   :   [ \n     { id   : 1 ,   cell   :[ Bob ,   232-532-6268 ]}, \n     { id   : 2 ,   cell :   [ Jeff ,   365-267-8325 ]} \n   ]  }   The   page  total  records   elements describe the information needed for the pager. For example, if the jsonReader is set as follows:  jQuery ( #gridid ). jqGrid ({  ... \n    jsonReader   :   { \n       root : clientdata , \n       page :   currpage , \n       total :   totalpages , \n       records :   totalrecords \n    },  ...  });   then the data should be :  { \n   totalpages :   1 , \n   currpage :   1 , \n   totalrecords :   2 , \n   clientdata   :   [ \n     { id   : 1 ,   cell   :[ Bob ,   232-532-6268 ]}, \n     { id   : 2 ,   cell :   [ Jeff ,   365-267-8325 ]} \n   ]  }   The   cell   element describes the array which contains the data for the row.  jQuery ( #gridid ). jqGrid ({  ... \n    jsonReader   :   { \n       root : clientdata , \n       page :   currpage , \n       total :   totalpages , \n       records :   totalrecords , \n       cell :   clrow \n    },  ...  });   The data to match this description would be    { \n    totalpages :   1 , \n    currpage :   1 , \n    totalrecords :   2 , \n    clientdata   :   [ \n      { id   : 1 ,   clrow   :[ Bob ,   232-532-6268 ]}, \n      { id   : 2 ,   clrow :   [ Jeff ,   365-267-8325 ]} \n    ] \n  }   The \n- id  element describes the unique id for the row. This id is set as id in the jqGrid table row element. It is very important to note that the id should be unique for every row.  jQuery ( #gridid ). jqGrid ({  ... \n    jsonReader   :   { \n       root : clientdata , \n       page :   currpage , \n       total :   totalpages , \n       records :   totalrecords , \n       cell :   clrow , \n       id   :   clid \n    },  ...  });   The data for this description is:  { \n   totalpages :   1 , \n   currpage :   1 , \n   totalrecords :   2 , \n   clientdata   :   [ \n     { clid   : 1 ,   clrow   :[ Bob ,   232-532-6268 ]}, \n     { clid   : 2 ,   clrow :   [ Jeff ,   365-267-8325 ]} \n   ]  }   It is possible to set the cell element to an empty string. And, it is possible to set the id as number. Here is an example of these possibilities:  jQuery ( #gridid ). jqGrid ({  ... \n    jsonReader   :   { \n       root : clientdata , \n       page :   currpage , \n       total :   totalpages , \n       records :   totalrecords , \n       cell :   , \n       id   :   0 \n    },  ...  });   In this case the id is the first element from the row data  { \n   totalpages :   1 , \n   currpage :   1 , \n   totalrecords :   2 , \n   clientdata   :   [ \n     [ 1 , Bob ,   232-532-6268 ], \n     [ 2 ,   Jeff ,   365-267-8325 ] \n   ]  }   The   repeatitems   element tells Guriddo jqGrid that the information for the data in the row is repeatable - i.e. the elements have the same tag cell described in cell element. Setting this option to false instructs jqGrid to search elements in the json data by name. This is the name from colModel or the name described with the jsonmap option in colModel.  Here is an example:  jQuery ( #gridid ). jqGrid ({  ... \n    jsonReader   :   { \n       root : clientdata , \n       page :   currpage , \n       total :   totalpages , \n       records :   totalrecords , \n       repeatitems :   false , \n       id   :   0 \n    },  ...  });   The resulting data in our example should be:  { \n   totalpages :   1 , \n   currpage :   1 , \n   totalrecords :   2 , \n   clientdata   :   [ \n     { clid   : 1 ,   name : Bob ,   phone :   232-532-6268 }, \n     { clid   : 2 ,   name :   Jeff ,   phone :   365-267-8325 } \n   ]  }   The id element in this case is 'clid'. The same result will be if we set id to clid in the above example.  A very useful feature here (repeatitems:false) is that there is no need to include all the data that is represented in colModel. Since we make a search by name, the order does not need to match the order in colModel. Hence the following JSON data will be correctly interpreted in jqGrid.  { \n   totalpages :   1 , \n   currpage :   1 , \n   totalrecords :   2 , \n   clientdata   :   [ \n     { clid   : 1 ,   phone :   232-532-6268 }, \n     { clid   : 2 ,   name :   Jeff } \n   ]  }", 
            "title": "JSON Data"
        }, 
        {
            "location": "/user-guide/basic-grid/#json-string", 
            "text": "The jsonstring option has the same features as json. The only difference is that the data is passed as string. In this case we need to have a valid JSON data string. The string should be passed in   datastr  grid option.", 
            "title": "JSON String"
        }, 
        {
            "location": "/user-guide/basic-grid/#json-dot-notation", 
            "text": "When using JSON data with named values (i.e the repeatitems option is false) we can use named dot notation and index notation.  For example, our colModel definition might be as follows:  $ ( #grid ). jqGrid ({ \n   datatype :   json , \n   url   :   data.json \n   colModel :   [ \n      { name :   client.name ,   label   :   Name }, \n      { name :   client.phone ,   label   :   Phone Number } \n    ]  });   Note the elements defined as name:'client.name' and name:'client.phone'  Then our data:  { \n   total :   1 , \n   page :   1 , \n   records :   2 , \n   rows   :   [ \n     { id   : 1 ,   client   :   {   name :   Bob ,   phone :   232-532-6268   },   addres : address 1 }, \n     { id   : 2 ,   client   :   {   name :   Jeff ,   phone :   365-267-8325 },   addres : address 2 }   \n   ]  }", 
            "title": "JSON dot notation"
        }, 
        {
            "location": "/user-guide/basic-grid/#jsonreader-as-function", 
            "text": "In certain situation data can be obtained from a web service. In this case it is not possible to configure all the properties of the response so that the grid will work properly. As of version 3.6.4 it is possible to define the elements of the jsonReader as function. Below is a example on how this can be used:  jsonReader :   { \n     repeatitems :   false , \n     id :   Id , \n     root :   function   ( obj )   {   return   obj . rows ;   }, \n     page :   function   ( obj )   {   return   obj . page ;   }, \n     total :   function   ( obj )   {   return   obj . records ;   }, \n     records :   function   ( obj )   {   return   obj . rows . length ;   }  }   Where obj is the response from the service/server", 
            "title": "jsonReader as Function"
        }, 
        {
            "location": "/user-guide/basic-grid/#array-data", 
            "text": "Despite the fact that the primary goal of jqGrid is to represent dynamic data returned from a database, jqGrid includes a wide range of methods to manipulate data at client side and we named it Array data.  See related items in  Data related items  As of version 3.7 we introduce two additional parameters  data  and  localReader . The data parameter is described in grid options. The localReader has the same sense as jsonReader described above, but applied to array data that is stored locally.  The initial configuration of the localReader is the same as those from jsonReader  localReader   =   { \n    root :   rows , \n    page :   page , \n    total :   total , \n    records :   records , \n    repeatitems :   false , \n    cell :   cell , \n    id :   id , \n    userdata :   userdata , \n    subgrid :   { root : rows ,   repeatitems :   true ,   cell : cell }  }   All operations that are valid for jsonReader can be applied to localReader.  To use array data we should set the option  datatype  to local.  var   dataArray   =   [ \n   { name :   Bob ,   phone :   232-532-6268 }, \n   { name :   Jeff ,   phone :   365-267-8325 }  ];  $ ( #grid ). jqGrid ({ \n   datatype :   local , \n   data :   dataArray , \n   colModel :   [ \n      { name :   name ,   label   :   Name }, \n      { name :   phone ,   label   :   Phone Number } \n    ]  });   When using array data it is a good idea to set the sorttypes for the columns - this way the local sorting will be performed correct. If the sorttype is not set the default sorttype is 'text'. Let's consider our exyended example in terms of array data.  var   dataArray   =   [ \n   { clid :   1 ,   name :   Bob ,   phone :   232-532-6268 ,   birthday :   01/01/1971 ,   salary :   1234.00 }, \n   { clid :   2 ,   name :   Jeff ,   phone :   365-267-8325 ,   birthday :   02/02/1972 ,   salary   2345.00 }  ];  $ ( #grid ). jqGrid ({ \n   datatype :   local , \n   data :   dataArray , \n   colModel :   [ \n     { name :   clid ,   label   :   Id ,   sorttype :   int }, \n     { name :   name ,   label   :   Name }, \n     { name :   phone ,   label   :   Phone Number }, \n     { name :   birthday ,   label   :   Birth day ,   sorttype :   date ,   datefmt : d/m/Y }, \n     { name :   salary ,   label   :   Salary ,   sorttype :   float }, \n   ]  });   In the example - additionally for the sorttype date we must known the format of the data that will be present in the grid. The default format is a ISO format 'Y-m-d'.  For local data manipulation see  Data related items", 
            "title": "Array Data"
        }, 
        {
            "location": "/user-guide/basic-grid/#xml-data", 
            "text": "Extensible Markup Language (XML) is used to describe data. The XML standard is a flexible way to create information formats and electronically share structured data via the public Internet, as well as via corporate networks. More information what XML is can be found  here  The rules of accessing the element from XML are the same as those used in jQuery library, i.e. CSS patterns. For more information  refer here .  Guriddo jqGrid can read any attribute from the XML response. Moreover the tags can be set as function. See below.  The default setting for xmlReader is:  jQuery ( #gridid ). jqGrid ({  ... \n    xmlReader   :   { \n       root :   rows , \n       row :   row , \n       page :   rows page , \n       total :   rows total , \n       records   :   rows records , \n       repeatitems :   true , \n       cell :   cell , \n       id :   [id] , \n       userdata :   userdata , \n       subgrid :   { \n          root : rows , \n          row :   row , \n          repeatitems :   true , \n          cell : cell \n       } \n    },  ...  });   All the elements in the XML reader will be explained as examples rather than as strong description.   root element   The first setting here defines the root element. This describes where our data begins and all other loops begin from this element. For example,  invoices \n    request true /request \n   ...\n    result \n       row \n          cell data1 /cell \n          cell data2 /cell \n          cell data3 /cell \n          cell data4 /cell \n          cell data5 /cell \n          cell data6 /cell \n       /row \n      ...\n    /result  /invoices   If we set the root element to  result  all data will be processed from there. In this case, because our rows are tagged   and our cells tagged  , all that is needed is to set.  jQuery ( #gridid ). jqGrid ({  ... \n   xmlReader :   {   root : result },  ...  });   The next element is the   row element.   This describes the information for particular row. Note that row must be a child of the root element. Here, if the XML looks like this:  ... invoices \n    request true /request \n   ...\n    result \n       invoice \n          cell data1 /cell \n          cell data2 /cell \n          cell data3 /cell \n          cell data4 /cell \n          cell data5 /cell \n          cell data6 /cell \n       /invoice \n      ...\n    /result  /invoices   the setting to properly interpret this data would be  jQuery ( #gridid ). jqGrid ({  ... \n    xmlReader :   {   root : result ,   row : invoice    },  ...  });   The   page  total and  records   elements describe the information needed for the pager. These elements can be, but do not have to be, a child of the root element. For example, to interpret this data,  ... invoices \n   request true /request \n  ...\n   currentpage 1 /currentpage \n   totalpages 10 /totalpages \n   totalrecords 20 /totalrecords \n   result \n      invoice \n         cell data1 /cell \n         cell data2 /cell \n         cell data3 /cell \n         cell data4 /cell \n         cell data5 /cell \n         cell data6 /cell \n      /invoice \n     ...\n   /result  /invoices   the xmlReader will have to look like this:  jQuery ( #gridid ). jqGrid ({  ... \n   xmlReader :   { \n      root : result , \n      row : invoice , \n      page : invoices currentpage , \n      total : invoices totalpages , \n      records : invoices totalrecords \n  },  ...  });   The  repeatitems  and  cell  elements tells jqGrid that the information for the data in the row is repeatable - i.e. the elements have the same tag cell described in cell element. For this example,  ... invoices \n    request true /request \n   ...\n    currentpage 1 /currentpage \n    totalpages 10 /totalpages \n    totalrecords 20 /totalrecords \n    result \n       invoice \n          invcell data1 /invcell \n          invcell data2 /invcell \n          invcell data3 /invcell \n          invcell data4 /invcell \n          invcell data5 /invcell \n          invcell data6 /invcell \n       /invoice \n      ...\n    /result  /invoices   the xmlReader will look like this:  jQuery ( #gridid ). jqGrid ({  ... \n    xmlReader :   { \n       root : result , \n       row : invoice , \n       page : invoices currentpage , \n       total : invoices totalpages , \n       records : invoices totalrecords , \n       repeatitems : true , \n       cell : invcell \n   },  ...  });   Next is the   id   element. If repeatitems is set to true and key option in colModel is set to false the id, if present in XML data, must be a attribute of the row element. Lets look at the example:  ... invoices \n   request true /request \n  ...\n   currentpage 1 /currentpage \n   totalpages 10 /totalpages \n   totalrecords 20 /totalrecords \n   result \n      invoice   asin= 12345 \n         invcell data1 /invcell \n         invcell data2 /invcell \n         invcell data3 /invcell \n         invcell data4 /invcell \n         invcell data5 /invcell \n         invcell data6 /invcell \n      /invoice \n     ...\n   /result  /invoices   In this case the xmlReader is:  jQuery ( #gridid ). jqGrid ({  ... \n   xmlReader :   { \n      root : result , \n      row : invoice , \n      page : invoices currentpage , \n      total : invoices totalpages , \n      records : invoices totalrecords , \n      repeatitems : true , \n      cell : invcell , \n      id   :   [asin] \n  },  ...  });   Let's suppose that the structure of the XML document returned from the server has the following format:  ... invoices \n   request true /request \n  ...\n   currentpage 1 /currentpage \n   totalpages 10 /totalpages \n   totalrecords 20 /totalrecords \n   result \n      invoice \n         asin 12345 /asin \n         invoiceno data1 /invoiceno \n         invoicedate data2 /invoicedate \n         invoiceamount data3 /invoiceamount \n         invoicetax data4 /invoicetax \n         invoicetotal data5 /invoicetotal \n         notes data6 /notes \n      /invoice \n     ...\n   /result  /invoices   where the  asin  tag describes the unique id and this should be set as the row id in the grid and not displayed in the grid. Following the rules we can construct the following:  jQuery ( #gridid ). jqGrid ({  ... \n    xmlReader :   { \n       root : result , \n       row : invoice , \n       page : invoices currentpage , \n       total : invoices totalpages , \n       records : invoices totalrecords , \n       repeatitems : false , \n       id   :   asin \n   },  ...  });   and our colModel from the example should look like this (Note the xmlmap property):  code   javascript  jQuery ( #gridid ). jqGrid ({  ... \n    colModel   : [ \n       { name : invid ,   index : invid ,   width : 55 ,   xmlmap : invoiceno }, \n       { name : invdate ,   index : invdate ,   width : 90 ,   xmlmap : invoicedate }, \n       { name : amount ,   index : amount ,   width : 80 ,   align : right ,   xmlmap : invoiceamount }, \n       { name : tax ,   index : tax ,   width : 80 ,   align : right ,   xmlmap : invoicetax }, \n       { name : total ,   index : total ,   width : 80 ,   align : right ,   xmlmap : invoicetotal }, \n       { name : note ,   index : note ,   width : 150 ,   sortable : false ,   xmlmap : notes } \n    ], \n    xmlReader :   { \n       root : result , \n       row : invoice , \n       page : invoices currentpage , \n       total : invoices totalpages , \n       records : invoices totalrecords , \n       repeatitems : false , \n       id   :   asin \n   },  ...  });   The above data can be represented in colModel another way. If the names in colModel are not important for you, you can do the following.  jQuery ( #gridid ). jqGrid ({  ... \n    colModel   : [ \n       { name : invoiceno ,   index : invid ,   width : 55 }, \n       { name : invoicedate ,   index : invdate ,   width : 90 }, \n       { name : invoiceamount ,   index : amount ,   width : 80 ,   align : right }, \n       { name : invoicetax ,   index : tax ,   width : 80 ,   align : right }, \n       { name : invoicetotal ,   index : total ,   width : 80 ,   align : right }, \n       { name : notes ,   index : note ,   width : 150 ,   sortable : false } \n    ], \n    xmlReader :   { \n       root : result , \n       row : invoice , \n       page : invoices currentpage , \n       total : invoices totalpages , \n       records : invoices totalrecords , \n       repeatitems : false , \n       id   :   asin \n   },  ...  });   In other words, jqGrid first looks to see if there is an xmlmap option available; if this option is not available the name is used as the xmlmap. But all of this is true only if the repeatitems element in xmlReader is set to false.  The subgrid option is included in several of the xmlReader examples above. The principles in constructing the rules for this data are the same as those described above. More details about subgrids can be found in the section on  Subgrids .", 
            "title": "XML Data"
        }, 
        {
            "location": "/user-guide/basic-grid/#xml-string", 
            "text": "The xmlstring option has similar features to the XML option (See above). The only difference is that the data is passed as string. In this case is needed to have a valid XML data string. To do that a datastr option should be used.  If you use an XML string to obtain the data - after the data is retrieved the datatype option automatically is set to local.  The example from our tutorial can look like this.  script \nvar mystr = ?xml version= 1.0  encoding= utf-8 ?  invoices \n     rows \n         row \n           clid 1 /clid \n           name Bob /name \n           phone 232-532-6268 /phone \n           birthday 01/01/1971 /birthday \n           salary 1234.00 /salary \n         /row \n         row \n           clid 2 /clid \n           name Jeff /name \n           phone 232-532-6268 /phone \n           birthday 02/02/1972 /birthday \n           salary 2345.00 /salary \n         /row \n     /rows  /invoices ;\n\n$( #grid ).jqGrid({\n  datatype:  xmlstring ,\n  datastr: mystr,\n  xmlReader : {\n    repeatitems : false\n  },\n  colModel: [\n    {name:  clid , label :  Id , sorttype:  int },\n    {name:  name , label :  Name },\n    {name:  phone , label :  Phone Number },\n    {name:  birthday , label :  Birth day , sorttype:  data , datefmt: d/m/Y },\n    {name:  salary , label :  Salary , sorttype:  float },\n  ]\n});\n... /script   As can be seen, this example introduces another option in colModel: sorttype. This option describes how a particular column is to be sorted, because when using xmlstring as the source for the grid, jqGrid uses client-side sorting.", 
            "title": "XML String"
        }, 
        {
            "location": "/user-guide/basic-grid/#datatype-as-function", 
            "text": "This option does not really define the datatype at all, but rather how to handle the data that is provided by the server (which would still come as either xml or json data). The functions defined as a Datatype should (or can) call addXMLData, addJSONData or addRowData once the data has been received. If you use a pager, it is useful to call your_grid.setGridParam({lastpage: your_number}) to specify the number of pages.  Calling Convention:  jQuery ( #gridid ). jqGrid ({  ... \n   datatype   :   function ( postdata )   { \n     // do something here \n   }  ...  });   Datatype functions are supplied with a object containing the request information (parameter postdata), which normally would have been transformed into GET or POST arguments. This object is compatible with the  data  option supplied to the jQuery $.ajax function.  Consider our example here is how this will work with datatype function:  script   type = text/javascript  ...  jQuery ( document ). ready ( function (){ \n   jQuery ( #list ). jqGrid ({ \n     datatype :   function ( postdata )   { \n         var   thegrid   =   this ; \n         jQuery . ajax ({ \n            url :   example.php , \n            data : postdata , \n            dataType : xml , \n            complete :   function ( xmldata , stat ){ \n               if ( stat == success )   { \n                  //var thegrid = jQuery( #list )[0]; \n                  thegrid . addXmlData ( xmldata . responseXML ); \n               } \n            } \n         }); \n     }, \n     ... \n   });  });  ...  /script", 
            "title": "Datatype as function"
        }, 
        {
            "location": "/user-guide/basic-grid/#userdata", 
            "text": "In some cases we need to have custom data returned from the request that is not automatically displayed by jqGrid, that we use either in a later process or to display additional information somewhere in the HTML page or associated with the grid. To do that a userdata tag can be used.  In xmlReader this is defined as:  xmlReader :   { \n   ... \n   userdata :   userdata , \n   ...  }   This describes the tag where our custom data is. The important part here is that the XML tag should have a attribute name in order to associate data. In the data received from the server, this could be structured as follows:  invoices   \n     request true /request   \n     userdata   name= totalinvoice  240.00  /userdata   \n     userdata   name= tax  40.00 /userdata \n    ...\n     result   \n       row   \n         cell data1 /cell \n         cell data2 /cell \n         cell data3 /cell \n         cell data4 /cell \n         cell data5 /cell \n         cell data6 /cell \n       /row \n      ...\n     /result  /invoices   If using JSON data, the definition might look like this:  jsonReader :   { \n   ... \n   userdata :   userdata , \n   ...  }   and the data received, like this:  { \n  total :   xxx , \n  page :   yyy , \n  records :   zzz , \n  userdata :   { totalinvoice : 240.00 ,   tax : 40.00 }, \n  rows   :   [ \n    { id : 1 ,   cell : [ cell11 ,   cell12 ,   cell13 ]}, \n    { id : 2 ,   cell : [ cell21 ,   cell22 ,   cell23 ]}, \n    ... \n  ]  }   When this data has been received, this information is stored in the userData array of the options array. Whichever format the data comes in, in this case we would have:  userData = {totalinvoice:240.00, tax:40.00}  The data can be accessed using a getGridParam method. To do that we need to request this data:  jQuery ( gridid ). jqGrid ( getGridParam ,   userData )   The userdata can be used as function. To this function we pass the response from the server. In case of JSON this is:  jsonReader :   { \n   ... \n   userdata :   function (   jsondata   )   { \n     // do something here \n   }, \n   ...  }   To get or set the userData on the footer row in the grid (if preset) a  footerData  method can be used. See  Methods .", 
            "title": "Userdata"
        }, 
        {
            "location": "/user-guide/basic-grid/#events", 
            "text": "The action to take on an event is set as a property of the grid, e.g.  var   lastSel ;  jQuery ( #gridid ). jqGrid ({  ... \n    onSelectRow :   function ( id ,   orgEvent ){ \n       if ( id     id !== lastSel ){ \n          jQuery ( #gridid ). jqGrid ( restoreRow , lastSel ); \n          lastSel = id ; \n       } \n       jQuery ( #gridid ). jqGrid ( editRow , id ,   true ); \n    },  ...  });   The above example specifies the action to take when a row is selected. The events that you can use to perform some additional action are listed here, in alphabetic order and are related only to the basic jqGrid. Other events related to editing subgrids and etc are described in the appropriate chapters.  To every event is passed the reference (this) to the grid. This means that inside every event you can use $(this) which refers to the current used grid. Using the above example both are equivalent.  var   lastSel ;  jQuery ( #gridid ). jqGrid ({  ... \n    onSelectRow :   function ( id ,   orgEvent ){ \n       if ( id     id !== lastSel ){ \n          jQuery ( this ). jqGrid ( restoreRow , lastSel ); \n          lastSel = id ; \n       } \n       jQuery ( this ). jqGrid ( editRow , id ,   true ); \n    },  ...  });   The event can be changed dynamically using the  setGridParam  method.", 
            "title": "Events"
        }, 
        {
            "location": "/user-guide/basic-grid/#triggered-events", 
            "text": "Alternatively jqGrid support the so named triggered events. These events are equivalent to the events defined in the grid properties. They are defined using jQuery  .triggerHandler() .  To define a such event use jQuery  on . The code below is equvalent of the code above:  var   lastSel ;  jQuery ( #gridid ). on ( jqGridSelectRow ,   function ( event ,   id ,   orgEvent )   { \n   if ( id     id !== lastSel ){ \n     jQuery ( this ). jqGrid ( restoreRow , lastSel ); \n     lastSel = id ; \n   } \n   jQuery ( this ). jqGrid ( editRow , id ,   true );  });   What are the diffrences between these two definitions.   The trigered event is called outside jqGrid.  When using triggered events we can register multiple event handlers - i.e bind different code to the same event depending a condition.  The first parameter of the triggered event is a event and then follow the order of parameter(s) as defined in the \"options\" jqgrid events  To unbind the triggered event use jQuery  off , to unbind the options event use setGridParam with event name and value to null.   To define a multiple event handlers use dot \".\" after the event and appropriate description.  Bellow is a example:  When we define foren columns in the grid with method  setFrozenColumns  we need to use ResizeStop event to properly resize the frozen div element. Using triggered event approach save us a lot of additional code. Somewhere in the  method we have the following definition:  $ ( grid ). on ( jqGridResizeStop.setFrozenColumns ,   function   ( e ,   w ,   index )   { \n   // here our code  });   When the developer defines his own ResizeStop event - they both will be executed. The recommended way to do this is to define it like this:  $ ( grid ). on ( jqGridResizeStop.develoerResize ,   function   ( e ,   w ,   index )   { \n   // here developer code.  });", 
            "title": "Triggered events"
        }, 
        {
            "location": "/user-guide/basic-grid/#list-of-events", 
            "text": "Below is the list of \"option\" and triggered events. The name of every triggered event begin with  jqGrid  and is set below the option event.   Note  The first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)    Note  There are additional events, which are set in the grid methods - some as parameter and some not as parameter. The list of these events is into the description of the method.    afterInsertRow  jqGridAfterInsertRow  This event fires after every inserted row. This event does not fire if gridview option is set to true  parameters   string rowid - is the id of the inserted row  array rowdata - is an array of the data to be inserted into the row. This is array of type name: value, where the name is a name from colModel.  mixed rowelem is the element from the response. If the data is xml this is the xml element of the row; if the data is json this is array containing all the data for the row.    beforeProcessing  jqGridBeforeProcessing  This event fire before processing the data from the server. If the event return  false  no data will be inserted into the grid and the old status remain as before the new request. This event fire only if ajax request is made - on paging on sorting and reloading and initially when the data is loaded. Note that the data is formatted depended on the value of the datatype parameter - i.e if the datatype is  JSON  for example the data is JavaScript object  parameters   mixed data - The data returned from the server, formatted according to the  datatype  string status - a string describing the status  object xhr - object, which is a super set of the XMLHTTPRequest object.    beforeRequest  jqGridBeforeRequest  This event fire before requesting any data. Also does not fire if datatype is function. If the event return false the request is not made to the server  parameters  none   beforeSelectRow  jqGridBeforeSelectRow  This event fire when the user click on the row, but before select them. This event should return boolean true or false. If the event return true the selection is done. If the event return false the row is not selected and any other action if defined does not occur.  parameters   string rowid - is the id of the row.  event e - is the event object (original event)    colMenuColumnDone  jqGridColMenuColumnDone  The event executes on reordering of the  Columns  from column menu as defined with option colMenu. The event fire when a check-box is selected to show or hide the column.   - the event is similar to in columnChooser.  parameters \n- array cols - permutation array with the positions of the coumns \n- string colname -column name on which we click. The name is not available when we drag \n- boolean checked - state of the check-box   gridComplete  jqGridGridComplete  This fires after all the data is loaded into the grid and all other processes are complete. Also the event fires independent from the datatype parameter and after sorting paging and etc. Does not fire if datatype is a defined as function.  parameters  none   loadBeforeSend  jqGridLoadBeforeSend  A pre-callback to modify the XMLHttpRequest object (xhr) before it is sent. Use this to set custom headers etc. Returning  false or stop  will cancel the request. This event is used in jQuery beforeSend event which is predefined in jqGrid.  parameters   object xhr - object, which is a superset of the XMLHTTPRequest object.  object settings - ajax settings object    loadComplete  jqGridLoadComplete  This event is executed immediately after every server request. The data can be or can not be loaded into the grid.  parameters   mixed data - data from the response depending on datatype grid parameter    loadError  jqGridLoadError  A function to be called if the request fails. This event is predefined in jQuery error event.  parameters   object xhr - The XMLHttpRequest object  string status - a string describing the type of error (status) that occurred  object error - an optional exception object (error), if one occurred.    onCellSelect  jqGridCellSelect  Fires when we click on particular cell in the grid. This event does not fire when cell editing is used on editable cell. (grid options  cellEdit : true ). It fire on non editable cell only independent of  cellEdit  flag.  parameters   string rowid - is the id of the row  int iCol - is the index of the column starting from 0  string cellcontent - is the content of the cell,  object e - is the event object element where we click.    ondblClickRow  jqGridDblClickRow  Raised immediately after row was double clicked.  parameters   string rowid - is the id of the row  int iRow - is the index of the row (do not mix this with the rowid)  int iCol - is the index of the column starting from 0  object e - is the event object element where we click.    onHeaderClick  jqGridHeaderClick  Fire after clicking the button on the caption to hide or show grid. Caption and hidegrid:true grid parameters should be set in order to use this event.  parameters   string gridstate - is the state of the grid - can have two values - visible or hidden  object e - event object when click the button.    onInitGrid  jqGridInitGrid  The event fire when the grid is constructed and before loading the data into the grid. This event executes only once and is first in the order of all other grid events.  parameters  none   onPaging  jqGridPaging  This event fires after click on [page button] and before populating the data. Also works when the user enters a new page number in the page input box (and presses [Enter]) and when the number of requested records is changed via the select box. If this event return 'stop' the processing is stopped and you can define your own custom paging.  parameters   string pgButton - depending on the button clicked or inputing a number the parameter can be  first,prev,next,last, records and user  object elem - html element object which corresponding to the button clicked.    onRightClickRow  jqGridRightClickRow  Raised immediately after row was right clicked. Usefull for context defined menus. Works on browsers which supports oncontextmenu event.  parameters   string rowid - is the id of the row  int iRow - is the index of the row (do not mix this with the rowid)  int iCol - is the index of the column starting from 0  object e - is the event object element where we click.    onSelectAll  jqGridSelectAll  This event fires when multiselect option is true and you click on the header checkbox to select/deselect current grid rows.  parameters   array aRowids - array of the selected rows (rowid's). This parameter contain the id of the rows in case there is selection and is empty array when nothing is selected.  boolean status - variable determining the status of the header check box - true if checked, false if not unchecked.    onSelectRow  jqGridSelectRow  Raised immediately after row was clicked.  parameters   string rowid - is the id of the row,  boolean status - is the status of the selection. Can be used when multiselect is set to true. true if the row is selected, false if the row is deselected.  object e - is the event object when clicked.    onSortCol  jqGridSortCol  Raised immediately after sortable column was clicked and before sorting the data. If this event return 'stop' the processing is stopped and you can define your own custom sorting using the methods  setGridParam and .trigger('reloadGrid')  parameters   string sortname - is the index or name from colModel which sort is aplied,  int iCol - is the index of column start from 0,  string sortorder - is the new sorting order - can be 'asc' or 'desc'.    rowattr  jqGridRowAttr  This event is called when the new grid row is inserted. It can be used to set additional style and class attributes of the row dynamically. The event should return a object something like this  {\"style\" : \"somestyle\", \"class\": \"someclass\"} . Note that you can set any attribute to the row. It is important to note that the event does fire only when a new row is inserted - this mean that it can not be used with methods which updated the row like setRowData.  parameters   array rowData - is array with the cell data.  mixed currObj - is the current row represented in the source like json or xml depending on the datatype parameter. - string rowId - is the id of the row.    resizeStart  jqGridResizeStart  Event which is called when we start resize a column.  parameters   object event - is the event object,  int index - is the index of the column in colModel stating from 0    resizeStop  jqGridResizeStop  Event which is called after the column is resized.  parameters   string newwidth - is the is the new width of the column,  int index - is the index of the column in colModel starting from 0    serializeGridData  No triggered event available  If set this event can serialize the data passed to the ajax request. The function should return the serialized data. This event can be used when a custom data should be passed to the server - e.g - JSON string, XML string and etc. The event actually is used in ajax data parameter.  parameters   object postData - object with parameters passed to the server.", 
            "title": "List of events"
        }, 
        {
            "location": "/user-guide/basic-grid/#methods", 
            "text": "This chapter describes the basic methods of jqGrid. Other methods related to TreeGrid, Subgrid, Editing modules and etc. are described into the appropriate chapters.  As of version 3.6 jqGrid uses new API which is compatible with jQuery UI library. This is a preferd API to use.", 
            "title": "Methods"
        }, 
        {
            "location": "/user-guide/basic-grid/#calling-convetions", 
            "text": "New API   script  ...  jQuery ( #grid_id ). jqGrid ( method ,   parameter1 ,... parameterN   );  ...  /script   Where:   grid_id is the id of the already constructed grid.  jqGrid is a jqGrid instance.  method is jqGrid existing method. Note that the method should be enclosed in ''  parameter1,\u2026parameterN - a list of parameters   Where a method is not designed to return a requested value, then what is returned is the jqGrid object and a set of such methods can be chained, e.g.,  script  ...  jQuery ( #grid_id ). jqGrid ( setGridParam ,{...}). jqGrid ( hideCol , somecol ). trigger ( reloadGrid );  ...  /script    Old API   script  ...  jQuery ( #grid_id ). jqGridMethod (   parameter1 ,... parameterN   );  ...  /script   Where:   grid_id is the id of the already constructed jqGrid.  jqGridMethod is a method applied to this jqGrid.  parameter1,\u2026parameterN - a list of parameters    Note  The old and new APIs are enabled by default so that existing users do not have to change their code. You are free to use both conventions. The reason for creating this API is to overcome and name-space conflicts with other plugins and make using jqGrid more natural in the code. In order to use only this new API see the configuration below.", 
            "title": "Calling Convetions"
        }, 
        {
            "location": "/user-guide/basic-grid/#configure-guriddo-jqgrid-to-use-the-new-api", 
            "text": "To use only the new API (see below) set the  jQuery.jgrid.no_legacy_api  variable to true like this:  ...  script   src = js/jquery.min.js   type = text/javascript /script  script   src = js/trirand/i18n/grid.locale-en.js   type = text/javascript /script  script   src = js/trirand/jquery.jqGrid.min.js   type = text/javascript /script  script   type = text/javascript \n     jQuery . jgrid . no_legacy_api   =   true ;  /script  ...", 
            "title": "Configure Guriddo jqGrid to use the new API"
        }, 
        {
            "location": "/user-guide/basic-grid/#method-list", 
            "text": "Note  Parameters set without [] are required. Parameters enclosed in [] have default values and are not requiered. \nIn case the first or other parameter should be omitted set  undefined  or just look at the default value and set it.    addJSONData(array data) 1 \nPopulates a grid with the passed data (an array) at once clearing the old one if available.  parameters   array data - array of object that contain data to be inserted into the grid.   return \nnone \n- - -  addLocalData( [boolean returnAll]) 1 \nReturn a object containing grid data depending on search sorting, paging  and etc. parameters, when the datatype is set to 'local'.  parameters   boolean returnAll - when set to true all the data is returned, otherwise returned rows depend on the  rowNum  paramer set.   return \nobject with data   addRowData(string rowid, mixed data, [string position], [string srcrowid]) \nInserts a new row with id = rowid containing the data in data (an object) at the position specified (first in the table, last in the table or before or after the row specified in srcrowid). The syntax of the data object is: {name1:value1,name2: value2\u2026} where name is the name of the column as described in the colModel and the value is the value. \nThis method can insert multiple rows at once. In this case the data parameter should be array defined as \n[{name1:value1,name2: value2\u2026}, {name1:value1,name2: value2\u2026} ] and the first option rowid should contain the name from data object which should act as id of the row. It is not necessary that the name of the rowid in this case should be a part from colModel.  parameters   string rowid - the id for the new inserted row  mixed data - array or object with the data  string position - where to insert the row ('first', 'last') in the grid or 'before' 'after' a  srcrowid . Default is last  string srcrowid - set the id of the row from where to insert the new one (after, before)   return \ntrue on success, false otherwise   addXmlData(xml data) 1 \nPopulates a grid with the passed XML data.  parameters   xml node data - data to be inserted into the grid.   return \nnone \n- - -  bindKeys([object settings]) \nAdd scrolling functionality with arrows keys making it possible to scroll through the rows, there the current row is selected.  parameters   object settings - list of options with following properties and default values:   settings = {\n  onEnter: null,\n  onSpace: null,\n  onLeftKey: null,\n  onRightKey: null,\n  onUpkey : null,\n  onDownKey : null,\n  scrollingRows : true\n}  onEnter  - event which occur when a Enter key is pressed of the current selected row  onSpace   - event which occur when a Space is pressed of the current selected row  onLeftKey  - event which occur when a Left key is pressed of the current selected row  onRightKey  - event which occur when a Right key is pressed of the current selected row  onUpKey  - event which occur when a Up key is pressed of the current selected row  onDownKey  - event which occur when a Down key is pressed of the current selected row  scrollingRows  boolean which determine if the grid should scroll when a row is in invisible due to the height limitation.  To the events the row id and event is passed as parameter - i.e onEnter : function( rowid, event)   Note  The events onUpKey and onDownKey has 3 parameters as follow : rowid, previousid, event   The above events can be overwriten with  trigered events  which names are:  jqGridKeyEnter, jqGridKeySpace, jqGridKeyLeft, jqGridKeyRight  return \njqGrid object   clearGridData([boolean clearfooter]) \nClears the currently loaded data from grid. If the  clearfooter  parameter is set to true, the method clears the data placed on the footer row.  parameters   boolean clearfooter - if set to true clears the footer data of the grid too. Default false.   return \njqGrid object   colMenuAdd( string colname, object options) \nAdd a custom column menu into the list of predefined column menu. See  colMenu  option in  grid options  parameters   string colname - the column name as set in colModel array. If the string has a value  'all'  the item will be added to all columns  object options - t with following properties and default values:   options = {\n  title:  Item ,\n  icon : styles.icon_new_item,\n  funcname: null,\n  position :  last ,\n  closeOnRun : true,\n  exclude :  ,\n  id : null\n}  title  - the text that will appear in column menu  icon  - the icon associated with this menu. This should correspond to the used CSS framework name  funcname  - function to be executed when the menu is selected. To this function is passed the name of the column  position  - the position of the item added. Can be  \"last\" or \"first\"  closeOnRun  - closes the menu after selecting the item  exclude  - list of columns which should be excluded. The string is a list of comma separated column names  id  - the id of the item when inserted into the menu. If this parameter is not set jqGrid creates internally it using the jqGrid rand functin -  $.jgrid.randId()   colMenuDelete( string id) \nDelete custom column menu from the list of predefined column menu added with colMenuAdd method. See  colMenu  option in  grid options  parameters  id  the id which should be deleted   delRowData(string rowid) \nDeletes the row with the id = rowid. This operation does not delete data from the server.  parameters \n- string rowid - id of the row to be deleted.  return \ntrue on success, false otherwise   footerData([string action], [object data], [boolean format]) \nThis method gets or sets data on the grid footer row. When set data in the footer row, the data is formatted according to the formatter (if defined) in coModel. The method can be used if  footerrow  option is set to true.  parameters   string action - can be 'get' or 'set'. The default is get. 'get' returns an object of type name:value, where the name is a name from colModel. This will return data from the footer. The other two options have no effect in this case. 'set' takes a data object and places the values in the footer The value is formatted according to the definition of the formatter in colModel - see next parameter. The object should be in name:value pair, where the name is the name from colModel  object data - data to be set in the footer  boolean format - default is true. This instruct the method to use the formatter (if set in colModel) when new values are set. A value of false will disable the using of formatter   return \njqGrid object   destroyFrozenColumns() \nDestroys the frozen column functionality set with  setFrozenColums . For more information see  Frozen columns  parameters \nnone  return \njqGrid object   getCell( string rowid, mixed iCol, [boolean returnobject]) \nReturns the content of the cell specified by id = rowid and column = iCol. iCol can be either the column index or the name specified in colModel.   Attention  Do not use this method when you are editing the row or cell. This will return the cell content and not the actuall value of the input element   parameters   string rowid - row id of the grid where to edit a cell  mixed iCol - can be either the column index (integer - start from 0) or name specified in colModel.  boolean returnobject -  if set to true the content is returned as jQuery object   return \nstring - html content of the cell.   getCol(mixed colname, [boolean rerurntype], [string mathoperation]) \nThis method returns an array with the values of the grid column or a scalar value of operation set in mathoperation parameter.  parameters   mixed colname - can be either a number that represents the index of the column or a name from colModel.  boolean returntype determines the type of the returned array. When set to false (default) the array contain only the values. When set to true the array contain a set of objects. The object is defined as {id:rowid, value:cellvalue} where the rowid is the id of the row and cellvalue is the value of the cell. For example, such output can be [{id:1,value:1},{id:2,value:2}\u2026]  string mathoperation - valid option for this parameter can be  sum, avg, count, min, max  . If this parameter is set and is valid, the returned value is a scalar representing the operation applied to the all values in the column. If the parameter is not valid the returned value is empty array   return \narray or value depending mathoperation.   getColProp( string colname) \nReturn an array of the properties of the given column name from colModel  parameters   string colname - name of the column from colModel   return \nobject with column properties, if not found empty opbect   getDataIDs() \nReturn an array of the id's in the current grid view. It returns an empty array if no data is available.  parameters  none  return \narray   getGridParam([string name], [string module]) \nReturns the value of the requested parameter from the grid options and other grid methods. If the name is not set, the entry grid options are returned.  parameters   string name - the name from the options array.  string module - module from which we ask the values of parameters. Default is jqGrid. The possible values are:  jqGrid  for jqGrid options,  filterToolbar  for filter toolbar search options,  formProp  certain options from  editGridRow  method,  viewProp  certain options from  viewGridRow  method,  navGrid  - all the options from navGrid method,  inlineNav  - all the options from inlineNav method,   return \nobject or scalar value   getGridRowById( string rowid) \nReturn the row with id = rowid as document object  parameters   string rowid - id of the grid row   return \nrow as document object   getInd(string rowid, [boolean rowcontent])  Returns the index of the row in the grid table specified by grid id row - rowid. If rowcontent is set to true it returns the row document object  parameters   string rowid - the id of the grid row.  boolean rowcontent - if set to true the method return document row object. Default is false.   return \nmixed - index of the row or document row object.   getLocalRow( string rowid) \nReturn the row data object from the local array stored in  data  parameter when the  datatype  is local.  parameters   string rowid - the id of the grid row.   return \nmixed - object if found, false is not found   getRowData( [string rowid], [boolean usedata] ) \nReturns an object or array (see below) with data of the requested id = rowid. The returned object is of type name:value, where the name is a name from colModel and the value from the associated column in that row. It returns an empty object if the rowid can not be found. If the rowid is not set the method return all the data from the grid view as array which elements are objects.  parameters   string rowid - the id of the grid row.  boolean usedata - if set to true the data is get from the local grid parameter  data  and not from the grid view. Default is false.    Attention  Do not use this method when you are editing the row or cell. This will return the cell html content and not the actual value of the input element.    hideCol( mixed colname(s) ) \nGiven a single colname, it hides the column with that name. Given an array of colnames ['name1','name2'], it hides the columns with those names, 'name1' and 'name2', in the example. The names in colname or colnames must all be valid names from the colModel.  parameters   mixed colname - can be either name form colModel or a array with column names from colModel.   return \njqGrid object   menubarAdd( array items ) \nAdd custom defined menus with actions on the menu bar defied with grid option  menubar  set to true.  parameters   array items -  array where every element is a object which describes the particular menu item in the bar. The following options are defaults   element   =   { \n   id   :   $ . jgrid . randId (), \n   icon   :   , \n   position   :   last , \n   cloasoncall   :   true , \n   divider   :   false , \n   title   :   , \n   click   :   null  }   title  - the text that will appear in the bar menu  icon  - the icon associated with this menu. This should correspond to the used CSS framework name  click  - function to be executed when the menu is selected. To this function is passed the event  position  - the position of the item added. Can be  \"last\" or \"first\"  closeoncall  - closes the menu after selecting the item  divider  - adds a divider in the menu. The click event and title do not have effect in this case  id  - the id of the item when inserted into the menu. If this parameter is not set jqGrid creates internally it using the jqGrid rand functin -  $.jgrid.randId()   menubarDelete (string id) \nDeletes a menu item from menu bar added with menubarAdd method  parameters \n- string id - the id to be deleted from the menu bar   progressBar( [object settings] ) \nShow/hide the loading box with message which indicates a processing. The method is used internally in jqGrid when a request begin (show the box) and end (hide the box)  parameters   object settings - object containing following properties with default values:   settings   =   { \n   htmlcontent   :   , \n   method   :   hide , \n   loadtype   :   disable  }   htmlcontent   - the string which will be displayed when box shows  method  - 'show' or 'hide'  loadtype  - have the same values and behavior as  loadui  grid parameter - 'disable', 'enable', 'block'  return \njqGrid object   remapColumns(array permutation, [boolean updateCells] , [boolean keepHeader]) \nReorder the grid columns based on the  permutation  array. The indexes of the permutation array are the current order, the values are the new order. By example if the array has values [1,0,2] after calling this method the first column will be reordered as second. updateCells if set to true will reorder the cell data. keepHeader if set to true will reorder the data above the header cells.  parameters   array permutation - array with the new column order  boolean updateCells - if set to true updates the data cels . Default false   return \nnone   resetSelection() \nResets (unselects) the selected row(s). Works in multiselect mode. When called this method set the grid parameters  selrow  to null and  selarrrow   to empty array.  parameters  none  return \njqGrid object   resizeColumn (mixed column, string newWidth, boolean forceresize) \nResize column dynamically to the newWidth simulating re-sizing with the mouse.  parameters   mixed colname - if string it should equal to the name of colModel. Can be number representing the index in colModel.  string newWidth - the new width in pixels to which the column will be re-sized.  boolean forceresize - when set to true the column is resized independed form the colModel option resizable - i.e the column is resied in all cases   return \njqGrid object   resizeGrid( [integer timeout] ) \nResize the grid width of the parent container width. The method is useful to be used when the window width changes dynamically.  parameters   integer timeout - timeout in milliseconds in setTimeout function which is called when the grid is re-sized. Default is 500   return \njqGrid object   setCaption(string caption) \nSets a new caption of the grid  Caption layer . If the Caption layer was hidden, it is shown.  parameters \n- string caption - new caption to be setCaption  return \njqGrid object   setCell(string rowid, string colname, [string data], [mixed class] ,[object properties],[boolean forceup]) \nChange the content of particular cell and can set class or style properties.  parameters   string rowid - the is of the grid row  string colname - column name as defined in colModel or index staring from 0  string data - the new data that will be set. If empty string the content will not be changed  mixed class - if the class is a string we set it as class. If the class is object we set the properties with the css jQuery method  object properties - attribute properties to be set  boolean forceup - if the parameter is set to true we perform update of the cell instead that the data parameter is empty.   return \njqGrid object   setColProp( string colname, object properties) \nSets new properties in colModel. This method can dynamically change properties of the column. Note that some properties can not be changed - like width.  parameters   string colname - the name of the column from  colModel name property.  object properties - new column properties to be set.   return \njqGrid object   setFrozenColumns() \nEnables frozen columns in grid. See  frozen columns . Also see method   destroyFrozenColumns  parameters  none  return \njqGrid object   setGridHeight(string newheight) \nSets the new height of the grid dynamically. The height is set only to the grid cells and not to the entrie grid.  parameters   string newheight - the new height which can be pixels (no px at end), percentage or 'auto'   return \njqGrid object   setGridParam( object newparams, [boolean overwrite]) \nSets a particular parameter. For some parameters to take effect a trigger(\"reloadGrid\") should be executed. Note that with this method events can be overwriten. The name (in the name:value pair) is the name from options array.  parameters   object newparams - the object that contain the new value(s) of parameters.  boolean overwrite - if set to true the grid parameters are overwriten and are set with  $.extend({}, gridparams, newparams); . The default is false where the parameters are extended with  $.extend(true, gridparams ,newparams);   return \njqGrid object   setGridState( string state) \nShow or hide the grid depending and  state  parameter. When the state is set to 'visible' the grid will be shown. When the parameter is set to 'hidden' the grid will be hidden. Note that the method does not call onHeaderClick event and the caption of the grid is allway visible.  parameters   string state - 'visible' or 'hidden'   return \njqGrid object   setGridWidth(string newwidth, [boolen shrink]) \nSets a new width to the grid dynamically  parameters   string newwidth - the new width in pixels  boolean shrink - has the same behavior as  shrinkToFit  -  see options . If this parameter is not set  the value of shrinkToFit is get.   return \njqGrid object   setLabel(string colname, [string label], [mixed class], [object properties]) \nSets a new label in the header for the specified column; can also set attributes and classes  parameters \n- string colname - the name of the column from colModel. The parameter can be a number (the index of the column) beginning from 0 \n- string label - the content that can be put into the label. If empty string the content will not be changed \n- mixed class - if class is string then the class to the label is added  via addClass; if class is an object the new css properties are set via css jQuery method. \n- object properties - sets the attribute properies of the label.  return \njqGrid object   setRowData(string rowid, [object data], [mixed cssprop]) \nUpdates the values (using the data object) in the row with id = rowid.  parameters   string rowid - the id of the row to be updated  object data - The syntax of data object is: {name1:value1,name2: value2\u2026} where the name is the name of the column as described in the colModel and the value is the new value.  mixed cssprop - If the cssprop parameter is string addClass is used to add classes to the row. If the parameter is object jQuery css method is used to add css properties. Properties and classes can be set without data, in this case data should be set to false.   return \nboolen true on success, false otherwise.   setSelection(string rowid, [boolean onselectrow]) \nToggles a selection of the row with id = rowid; If selected the selrow grid parameter is set to the rowid - in multiselect mode to selarrrow array is added the rowid. The revers if the row is deselected.  parameters \n- string rowid - the id of the row \n- boolean onselectrow - if onselectrow is true (default) then the event onSelectRow and/or triggered event jqGridSelectRow are launched, otherwise not.  return \njqGrid object   setSortIcon(mixed column, [string position]) \nThe method changes the position of the sort icon at left or right depending on the position parameter.  parameters   string column - the column name or the position of the column in colModel starting from zero.  string position - left or right. default right.   return \njqGrid object   showCol( mixed colname ) \nShows a column with a given colname. If the colname is a string we show only the specified column. If colname is array of type [\"name1\",\"name2\"] then the columns with names 'name1' and 'name2' will be shown at the same time The names in colname must be valid names from colModel. The width does not change.  parameters   mixed colname -  string or array of names from colModel   return  \njqGrid object   sortGrid( [string colname], [boolean reload], [string sortorder]) \nSort the the grid by the given colname and shows the appropriate sort icon.  parameters   string colname the name of the column from index property of colModel. If not found the name property is searched. If the parameter is set as false or undefined the colname equal to the current value of sortname parameter from grid options.  boolean reload - If the reload is set to true, the grid reloads with the current page and sortorder settings. Default is false.  string sortorder - set the sortorder for the sorting can be asc or desc.   return \njqGrid object   trigger(\"reloadGrid\") \nReloads the grid with the current settings. This means that a new request is send to the server if datatype is xml or json. This method should be applied to an already-constructed grid. Pay attention that this method does not change HEADER information, that means that any changes to colModel would not be affected.  parameters  none  return \nnone   unbindKeys() \nUnbind the events defined in bindKeys method.  parameters \nnone  return \njqGrid object      These methods require special calling. The new API can't be used. To use the methods get the grid instance as variable this way:  var mygrid = jQuery(\"#grid_id\")[0]; var mydata = JSON.parse( some_response ); mygrid.addJSONData(mydata);", 
            "title": "Method list"
        }, 
        {
            "location": "/user-guide/common-functions/", 
            "text": "Common functions and variables \n\n\n\n\nEvery serious application and component uses common functions and variables, which are available everywhere in the component scope. Guriddo jqGrid is not exception.\n\n\nIn order to overcome duplicate functions from other libraries we have created specific $.jgrid object. In this object we store all the common functions, variables, translation texts and other objects, which we use everywhere in our code.\n\n\nIt is very useful to overcome duplicate function names in case of using other libraries, which have their common function and variables too.\n\n\nConvetions\n\n\nAll the calls in our common functions and variables are in format\n\n\n$\n.\njgrid\n.\nname\n(...)\n\n\n\n\n\n\nwhere the \nname\n is the name of the function with parameters or variable\n\n\nExample:\n\n\nvar\n \nmsie\n \n=\n \n$\n.\njgrid\n.\nmsie\n;\n \n// return true if the used navigator is Microsoft Internet Explorer\n\n\nvar\n \nmsiever\n \n=\n \n$\n.\njgrid\n.\nmsiever\n();\n \n// return the version of Microsoft Internet Explorer if available\n\n\n\n\n\n\nMost of the functions are stored in base grid module and common module - grid.base.js and grid.common.js.\n\n\nWhen Gurrido  jqGrid library is loaded you can use these functions everywhere in your application.\n\n\nList of common objects\n\n\n\n\nNote\n\n\nParameters enclosed in [ ] are not necessary to be specified.\n\n\n\n\n\n\nversion\n\nReturn the current version of Guriddo jqGrid used. The format meet the GitHub conventions of the version. Example \"5.2.0\"\n\n\ntype\n\nvariable\n\n\nreturn\n\nstring\n\n\n\n\najaxOptions\n\nCommon ajax options that can be used to extend every ajax request made in the grid including data obtaining, editing, searching and etc.\n\n\ntype\n\nobject\n\n\nparameters\n\n\n\n\nany valid ajax settings according to \njQuery ajax docs\n\n\n\n\nreturn\n\nnone\n\n\n\n\nhtmlDecode( string value )\n\nThe function converts some predefined HTML entities to characters.\n\nHTML entities that will be decoded are:\n\n\namp; becomes \n (ampersand)\n\nquot; becomes \n (double quote)\n\nlt; becomes \n (less than)\n\ngt; becomes \n (greater than)\n\n\n\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring value - string to be decoded\n\n\n\n\nreturn\n\ndecoded string\n\n\n\n\nhtmlEncode( string value )\n\nThe function converts some predefined characters to HTML entities.\n\nThe predefined characters are:\n\n\n (ampersand) becomes \namp;\n\n (double quote) becomes \nquot;\n\n (less than) becomes \nlt;\n\n (greater than) becomes \ngt;\n\n\n\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring value  - string to be encoded\n\n\n\n\nreturn\n\nencoded string\n\n\n\n\ntemplate( string template, p1,...,pN)\n\nSimple Template engine. The function accept as first parameter a template string. The variables in this template string are enclosed in {} as numbers starting from 0. The second, third and etc parameters are the actual values which will be replaced in string, following the order.\n\nExample:\n\n\nvar my template = \nPage {0} of {1}\n;\nvar result = $.jgrid.template( mytemplate, 10, 20);\n\n\n\n\n\nResult will be: \"Page 10 of 20\".\n\n\nThe template can contain named variables. In this case the second parameter should be array of objects with nm and v properties, where the nm correspond to the variable and the v is the actual value to be replaced.\n\n\nvar\n \nmy\n \ntemplate\n \n=\n \nPage {current} of {total}\n;\n\n\nvar\n \nresult\n \n=\n \n$\n.\njgrid\n.\ntemplate\n(\n \nmytemplate\n,\n \n[\n{\nnm\n:\ncurrent\n,\n \nv\n:\n \n10\n},{\nnm\n:\ntotal\n,\n \nv\n:\n \n20\n}\n]\n);\n\n\n\n\n\n\nwill give the same result\n\n\ntype\n\nfunction\n\n\nparameters\n\n- string template - template to be parsed\n\n- mixed p1...pN  - string or array (see above)\n\n\nreturn\n\nformated string\n\n\n\n\nmsie\n\nReturn true if the current used browser is Microsoft Internet Explorer\n\n\ntype\n\nvariable\n\n\nreturn\n\nboolean\n\n\n\n\nmsiever()\n\nString representing the version of Microsoft Internet Explorer if available\n\n\ntype\n\nfunction\n\n\nparameters\n\nnone\n\n\nreturn\n\nstring\n\n\n\n\ngetCellIndex( string cellcontent)\n\nFind the closest table data or table header cell in the given cell (td) htmlcontent and return its index, starting from 0\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring cellcontent - cell content\n\n\n\n\nreturn\n\ninteger cellindex\n\n\n\n\nstripHtml( string value)\n\nStrip HTML tags from the text. It will also strip embedded JavaScript code, style information.\n\nExample:\n\n\n$.grid.stripHtml(\ndiv\nABC\n/div\n);  ===\n \nABC\n\n\n\n\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring value value to be formated\n\n\n\n\nreturn\n\nstriped string\n\n\n\n\nstripPref( string pref, string source)\n\nStrip the given prefix from the source.\n\nExample:\n\n\n$.grid.stripPref(\nmypref_\n,\nmypref_grid\n); ===\n \ngrid\n\n\n\n\n\n\ntype\n\nfunction\n\n\nparameters\n\n- string pref - prefix to be removed\n\n- string source - source string\n\n\nreturn\n\nstriped string\n\n\n\n\nparse (string jsonstring)\n\nParses a json string to object, optionally transforming the value produced by parsing. If the variable $.jgrid.useJSON is set to true a build in JSON.parse is used if available, otherwise eval is used.\n\n\ntype\n\nfunction\n\n\nparameters\n\n- string jsonstring - JSON string to be parsed\n\n\nreturn\n\nJSON object\n\n\n\n\nuseJSON\n\nVariable indicating the use of build in JSON.parse or eval() when parsing json string. Default is true.\n\n\ntype\n\nvariable\n\n\nreturn\n\nboolean\n\n\n\n\nparseDate(string format, string date, string neformat, [object options])\n\nParses a date with a given format format to a new format  newformat using the options. All the available options are available in the Guriddo jqGrid language file under the property \nformatter.date\n - See \nlanguage file\n\n\nThe format of the dates follow the \nPHP conventions\n.\n\n\ntype\n\nfunction\n\n\nparameters\n\n- string format - the actual format of the date\n\n- strind date - the date string\n\n- string newformat - the new format to conver to\n\n- object options - options taken from language file\n\n\nreturn\n\ndate string formated to new format\n\n\n\n\njqID( string id )\n\nIf the id contains characters like periods or colons the function escape those characters with backslashes.\n\nExample:\n\n\n// This does not work\n\n\n$\n(\n \n#some:id\n \n);\n\n\n\n// but this works\n\n\n$\n(\n#\n \n+\n \njqID\n(\nsome:id\n)\n \n);\n\n\n\n\n\n\ntype\n\nfunction\n\n\nparameters\n\n- string id - string to be escaped\n\n\nreturn\n\nescaped string\n\n\n\n\nuidPref\n\nThe prefix which will be added in randId function. See below. Default value is 'jqg'\n\n\ntype\n\nvariable\n\n\nreturn\n\nstring\n\n\n\n\nrandId( [string prefix] )\n\nReturn a unique string using the prefix param. If the prefix parameter is not set $.jgrid.uidPref is used.\n\n\ntype\n\nfunction\n\n\nparameters\n\n- string prefix - string to be escaped\n\n\nreturn\n\nstring\n\n\n\n\ngetAccessor(object obj, mixed expr)\n\nOn the given JSON object \nobj\n and property \nexpr\n return the value. In case the expr is a function we return the apply this function to the object - i.e expr(obj);\n\n\nExample:\n\n\nvar\n \nmyobj\n \n=\n \n{\n \na\n:\n1\n,\n \nb\n:\n2\n,\n \nc\n:\n \n{\n \nsome\n:\n \nval\n \n}\n \n}\n\n\n$\n.\njgrid\n.\ngetAccessor\n(\n \nmyobj\n,\n \nc.some\n \n);\n  \n===\n \nval\n\n\n$\n.\njgrid\n.\ngetAccessor\n(\n \nmyobj\n,\n \nc\n \n);\n  \n===\n \n{\n \nsome\n:\n \nval\n}\n\n\n\n\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nobject obj - JSON object\n\n\nmixed expr - string or function\n\n\n\n\nreturn\n\nmixed value - scalar or object\n\n\n\n\ngetXmlData(xmlobject obj, string expr, [boolean returnObj])\n\nOn the given XML object obj and property expr return the XML object or string.\n\nIf the returnObj is true a xml object is returned, else the text representation.\n\nIf the expr is function we call that function with parameter obj - expr(obj)\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nxmlobject obj - XML object\n\n\nmixed expr - string or function\n\n\nboolen returnObj - boolean. default false.\n\n\n\n\nreturn\n\nmixed value - scalar or xml object\n\n\n\n\ncellWidth()\n\nReturn true if the border and margins are included in the cell width calculation. This function is historical created for some problems in old Chrome versions.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\nnone\n\n\nreturn\n\nboolean\n\n\n\n\nisLocalStorage()\n\nReturn true if the localStorage is supported in the browser used.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\nnone\n\n\nreturn\n\nboolean\n\n\n\n\ngetRegional(object inst, string param, [mixed def_val])\n\nReturn the specified content from the loaded language file specified in param. The function uses the regional parameter from the grid. The first argument is inst - reference to jqGgrid, the second is the requested parameter. If the default value is specified and is valid the function return this values instead of other settings.\n\n\nExample:\n\nIf the language file is set to en (regional parameter in grid)- English and the grid has a reference like\n\n\nvar\n \ngrid\n \n=\n \n$\n(\n#grid_id\n);\n\n\n$\n.\njgrid\n.\ngetRegional\n(\n \ngrid\n,\n \nedit.addCaption\n);\n\n\n\n\n\n\nwill return: \"Add Record\"\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nobject inst - jqGrid instance\n\n\nstring param - string in dot notation\n\n\nmixed def_val - any value to be returned\n\n\n\n\nreturn\n\nstring\n\n\n\n\nisMobile\n\nReturn true if the grid is used on mobile device.\n\n\ntype\n\nvariable\n\n\nreturn\n\nboolean\n\n\n\n\nfrom( array source)\n\nA Hugo Bonacci \njLinq\n port to jqGrid.\n\nAllows you to work with sets of data using query style syntax to select, order and sort records.\n\n\nThe code is especially useful if you have medium sized sets of information that could be sorted or searched, but you don't want to have to use a server side call to resort your records.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\narray source - array to apply select operations\n\n\n\n\nreturn\n\narray with the requested results.\n\n\n\n\ngetMethod(string method)\n\nReturn the jqGrid method set as string in method parameter. This allow us to overcome multiple calls to a method used several time in scope.\n\n\nExample:\n\n\nvar groupingPrepare = $.jgrid.getMethod(\ngroupingPrepare\n);\n\n\n\n\n\nwill return .jqGrid('groupingPrepare') method\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring method - valid jqGrid method\n\n\n\n\nreturn\n\nmethod\n\n\n\n\nclearBeforeUnload(string grid_id)\n\nClear the grid data unbinding all events to it. The function is used in \ngridUnload\n and \ngridDestroy\n functions.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring grid_id - the id of the grid to apply the operation\n\n\n\n\nreturn\n\nno return value\n\n\n\n\ngridUnload(string grid_id)\n\nRemoves the entrie grid, data events and parameters saving only the grid_id and pager for in DOM for future using.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring grid_id - the id of the grid to apply the operation\n\n\n\n\nreturn\n\nno return value\n\n\n\n\ngridDestroy(string grid_id)\n\nRemoves the grid from the DOM.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring grid_id - the id of the grid to apply the operation\n\n\n\n\nreturn\n\nno return value\n\n\n\n\nstyleUI\n\nDefines the classes used in grid for the different CSS Frameworks. The first property is the name of the CSS framework, the second property is the grid module. For more information and setting refer to \nCSS Frameworks guide\n\n\ntype\n\nobject\n\n\nreturn\n\nobject\n\n\n\n\ninlineEdit\n\nObject which can be used to overwrite all \nInline editing\n options.\n\n\ntype\n\nobject\n\n\nreturn\n\nobject\n\n\n\n\nfindPos( string DOM element )\n\nFind the top and left position of the jQuery object. The function return array, where the first element is the left position and the second is the top position.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring DOM element - the dom element\n\n\n\n\nreturn\n\narray\n\n\n\n\ncreateModal( ... )\n\nThis function use jqModal plugin to create modal windows used in Guriddo jqGrid.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\nreturn\n\nnone\n\n\n\n\nhideModal( string selector, [object options])\n\nHide a modal dialog defined with createModal function - see above.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring selector - the id of the modal created with \ncreateModal\n\n\nobject options -  various options when hide the modal\n\n\n\n\nreturn\n\nnone\n\n\n\n\nviewModal( string selector, [object options])\n\nShow a modal dialog defined with createModal function - see above.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring selector - the id of the modal created with \ncreateModal\n\n\nobject options -  various options when show the modal\n\n\n\n\nreturn\n\nnone\n\n\n\n\ninfo_dialog( string caption, string content, [string button], [object options])\n\nCreate a modal with id = info_dialog and open it automatically.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring caption - caption of the modal\n\n\nstring content -  content of the modal.\n\n\nstring button - button is a string for the close dialog - if not present no button appear.\n\n\nobject options - various options for the dialog - see below default options.\n\n\n\n\noptions\n \n=\n \n{\n\n  \nwidth\n:\n290\n,\n\n  \nheight\n:\nauto\n,\n\n  \ndataheight\n:\n \nauto\n,\n\n  \ndrag\n:\n \ntrue\n,\n\n  \nresize\n:\n \nfalse\n,\n\n  \nleft\n:\n250\n,\n\n  \ntop\n:\n170\n,\n\n  \nzIndex\n \n:\n \n1000\n,\n\n  \nmodal\n \n:\n \nfalse\n,\n\n  \ncloseOnEscape\n \n:\n \ntrue\n,\n\n  \nalign\n:\n \ncenter\n,\n\n  \nbuttonalign\n \n:\n \ncenter\n,\n\n\n}\n\n\n\n\n\n\nreturn\n\nnone\n\n\n\n\ncreateEl( string type, object options, [string value])\n\nCreate a input element defined by \ntype\n (text, select and etc.) and options set with \noptions\n and default value set by \nvalue\n.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring type - input type to be created - select, text, textarea,...\n\n\nobject options - various options for element.\n\n\nstring value -  default value to be set when the elemt is created.\n\n\n\n\nreturn\n\nDOM element\n\n\n\n\ncheckDate( string format, string date)\n\nThe function return true if the date has the format specifies in format parameter.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring format - format of the date to be checked\n\n\nstring data -  date string value\n\n\n\n\nreturn\n\nboolean\n\n\n\n\nisEmpty( string value)\n\nReturn true if the vallue set by val is empty.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring value -  value  to be checked\n\n\n\n\nreturn\n\nboolean\n\n\n\n\ncheckTime( string value )\n\nReturn true if the value is a valid time string.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring value -  value  to be checked\n\n\n\n\nreturn\n\nboolean\n\n\n\n\ncheckValues( string value, string colname, [object custom])\n\nPerforms validation of the \nvalue\n in edit modules with rules defined in colModel editrules.\n\nWhen a custom object with editrules object is set the colModel rules are omitted.\n\nThe function perform check for the following (set as true in the object):\n\n\n\n\nrequired - check if the field is empty\n\n\nnumber\n\n\nminValue\n\n\nmaxValue\n\n\nemail\n\n\ninteger\n\n\ndate\n\n\ntime\n\n\nurl\n\n\n\n\nThe functions \ncheckTime\n and \ncheckDate\n should be present.\n\n\nThe function return array with the following 3 items:\n\n[ true if rule meet the condition, message in case the rule is false, item for internal use]\n\nand need the language file, where the '...edit.msg' object is read.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring value -  value  to be chacked\n\n\n\n\nreturn\n\nboolean\n\n\n\n\nstringify( object json )\n\nThe function extend JSON.stringify with a possibility to include functions in the object parameter\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nobject json - JSON object to stringify\n\n\n\n\nreturn\n\nstring\n\n\n\n\nparseFunc( string str )\n\nParses a JSON string and return its JSON representation. The difference from JSON.parse is that this functions can parse functions in the string.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring str - JSON string to parse\n\n\n\n\nreturn\n\nJSON object\n\n\n\n\njsonToXML( object json, [object options])\n\nConvert JSON object to XML string\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nobject json - JSON object to convert\n\n\nobject options - various options, which default values are:\n\n\n\n\n{\n\n  \nxmlDecl\n \n:\n \n?xml version=\n1.0\n encoding=\nUTF-8\n ?\n\\n\n,\n\n  \nattr_prefix\n \n:\n \n-\n,\n\n  \nencode\n \n:\n \ntrue\n\n\n}\n\n\n\n\n\n\nreturn\n\nXML string\n\n\n\n\nxmlToJSON( string root, [object options] )\n\nConvert xml string to JSON object\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nstring root - XML string to be converted\n\n\nobject options - various options, which default values are:\n\n\n\n\n{\n\n  \nforce_array\n \n:\n \n[],\n \n//[ \nrdf:li\n, \nitem\n, \n-xmlns\n ];\n\n  \nattr_prefix\n \n:\n \n-\n\n\n}\n\n\n\n\n\n\nreturn\n\nJSON object\n\n\n\n\nsaveAs( mixed data, [string file], [object options])\n\nOpens a dilog to save the \ndata\n on the local computer with file name \nfile\n.\n\n\ntype\n\nfunction\n\n\nparameters\n\n\n\n\nmixed data - data to be saved on local computer. Can be anything.\n\n\nstring file - file name which will be associated with this data. default jqGridFile.txt\n\n\nobject options - the parameter contain only one property \ntype\n which indicates the type of the filename to be saved. Use the appropriate type for the different files. Default is for text files:\n\n\n\n\n{\n\n  \ntype\n \n:\n \nplain/text;charset=utf-8\n\n\n}\n\n\n\n\n\n\nreturn\n\nnone", 
            "title": "Common Functions"
        }, 
        {
            "location": "/user-guide/common-functions/#common-functions-and-variables", 
            "text": "Every serious application and component uses common functions and variables, which are available everywhere in the component scope. Guriddo jqGrid is not exception.  In order to overcome duplicate functions from other libraries we have created specific $.jgrid object. In this object we store all the common functions, variables, translation texts and other objects, which we use everywhere in our code.  It is very useful to overcome duplicate function names in case of using other libraries, which have their common function and variables too.", 
            "title": "Common functions and variables "
        }, 
        {
            "location": "/user-guide/common-functions/#convetions", 
            "text": "All the calls in our common functions and variables are in format  $ . jgrid . name (...)   where the  name  is the name of the function with parameters or variable  Example:  var   msie   =   $ . jgrid . msie ;   // return true if the used navigator is Microsoft Internet Explorer  var   msiever   =   $ . jgrid . msiever ();   // return the version of Microsoft Internet Explorer if available   Most of the functions are stored in base grid module and common module - grid.base.js and grid.common.js.  When Gurrido  jqGrid library is loaded you can use these functions everywhere in your application.", 
            "title": "Convetions"
        }, 
        {
            "location": "/user-guide/common-functions/#list-of-common-objects", 
            "text": "Note  Parameters enclosed in [ ] are not necessary to be specified.    version \nReturn the current version of Guriddo jqGrid used. The format meet the GitHub conventions of the version. Example \"5.2.0\"  type \nvariable  return \nstring   ajaxOptions \nCommon ajax options that can be used to extend every ajax request made in the grid including data obtaining, editing, searching and etc.  type \nobject  parameters   any valid ajax settings according to  jQuery ajax docs   return \nnone   htmlDecode( string value ) \nThe function converts some predefined HTML entities to characters. \nHTML entities that will be decoded are:  amp; becomes   (ampersand) quot; becomes   (double quote) lt; becomes   (less than) gt; becomes   (greater than)  type \nfunction  parameters   string value - string to be decoded   return \ndecoded string   htmlEncode( string value ) \nThe function converts some predefined characters to HTML entities. \nThe predefined characters are:   (ampersand) becomes  amp;  (double quote) becomes  quot;  (less than) becomes  lt;  (greater than) becomes  gt;  type \nfunction  parameters   string value  - string to be encoded   return \nencoded string   template( string template, p1,...,pN) \nSimple Template engine. The function accept as first parameter a template string. The variables in this template string are enclosed in {} as numbers starting from 0. The second, third and etc parameters are the actual values which will be replaced in string, following the order. \nExample:  var my template =  Page {0} of {1} ;\nvar result = $.jgrid.template( mytemplate, 10, 20);  Result will be: \"Page 10 of 20\".  The template can contain named variables. In this case the second parameter should be array of objects with nm and v properties, where the nm correspond to the variable and the v is the actual value to be replaced.  var   my   template   =   Page {current} of {total} ;  var   result   =   $ . jgrid . template (   mytemplate ,   [ { nm : current ,   v :   10 },{ nm : total ,   v :   20 } ] );   will give the same result  type \nfunction  parameters \n- string template - template to be parsed \n- mixed p1...pN  - string or array (see above)  return \nformated string   msie \nReturn true if the current used browser is Microsoft Internet Explorer  type \nvariable  return \nboolean   msiever() \nString representing the version of Microsoft Internet Explorer if available  type \nfunction  parameters \nnone  return \nstring   getCellIndex( string cellcontent) \nFind the closest table data or table header cell in the given cell (td) htmlcontent and return its index, starting from 0  type \nfunction  parameters   string cellcontent - cell content   return \ninteger cellindex   stripHtml( string value) \nStrip HTML tags from the text. It will also strip embedded JavaScript code, style information. \nExample:  $.grid.stripHtml( div ABC /div );  ===   ABC   type \nfunction  parameters   string value value to be formated   return \nstriped string   stripPref( string pref, string source) \nStrip the given prefix from the source. \nExample:  $.grid.stripPref( mypref_ , mypref_grid ); ===   grid   type \nfunction  parameters \n- string pref - prefix to be removed \n- string source - source string  return \nstriped string   parse (string jsonstring) \nParses a json string to object, optionally transforming the value produced by parsing. If the variable $.jgrid.useJSON is set to true a build in JSON.parse is used if available, otherwise eval is used.  type \nfunction  parameters \n- string jsonstring - JSON string to be parsed  return \nJSON object   useJSON \nVariable indicating the use of build in JSON.parse or eval() when parsing json string. Default is true.  type \nvariable  return \nboolean   parseDate(string format, string date, string neformat, [object options]) \nParses a date with a given format format to a new format  newformat using the options. All the available options are available in the Guriddo jqGrid language file under the property  formatter.date  - See  language file  The format of the dates follow the  PHP conventions .  type \nfunction  parameters \n- string format - the actual format of the date \n- strind date - the date string \n- string newformat - the new format to conver to \n- object options - options taken from language file  return \ndate string formated to new format   jqID( string id ) \nIf the id contains characters like periods or colons the function escape those characters with backslashes. \nExample:  // This does not work  $ (   #some:id   );  // but this works  $ ( #   +   jqID ( some:id )   );   type \nfunction  parameters \n- string id - string to be escaped  return \nescaped string   uidPref \nThe prefix which will be added in randId function. See below. Default value is 'jqg'  type \nvariable  return \nstring   randId( [string prefix] ) \nReturn a unique string using the prefix param. If the prefix parameter is not set $.jgrid.uidPref is used.  type \nfunction  parameters \n- string prefix - string to be escaped  return \nstring   getAccessor(object obj, mixed expr) \nOn the given JSON object  obj  and property  expr  return the value. In case the expr is a function we return the apply this function to the object - i.e expr(obj);  Example:  var   myobj   =   {   a : 1 ,   b : 2 ,   c :   {   some :   val   }   }  $ . jgrid . getAccessor (   myobj ,   c.some   );    ===   val  $ . jgrid . getAccessor (   myobj ,   c   );    ===   {   some :   val }   type \nfunction  parameters   object obj - JSON object  mixed expr - string or function   return \nmixed value - scalar or object   getXmlData(xmlobject obj, string expr, [boolean returnObj]) \nOn the given XML object obj and property expr return the XML object or string. \nIf the returnObj is true a xml object is returned, else the text representation. \nIf the expr is function we call that function with parameter obj - expr(obj)  type \nfunction  parameters   xmlobject obj - XML object  mixed expr - string or function  boolen returnObj - boolean. default false.   return \nmixed value - scalar or xml object   cellWidth() \nReturn true if the border and margins are included in the cell width calculation. This function is historical created for some problems in old Chrome versions.  type \nfunction  parameters  none  return \nboolean   isLocalStorage() \nReturn true if the localStorage is supported in the browser used.  type \nfunction  parameters  none  return \nboolean   getRegional(object inst, string param, [mixed def_val]) \nReturn the specified content from the loaded language file specified in param. The function uses the regional parameter from the grid. The first argument is inst - reference to jqGgrid, the second is the requested parameter. If the default value is specified and is valid the function return this values instead of other settings.  Example: \nIf the language file is set to en (regional parameter in grid)- English and the grid has a reference like  var   grid   =   $ ( #grid_id );  $ . jgrid . getRegional (   grid ,   edit.addCaption );   will return: \"Add Record\"  type \nfunction  parameters   object inst - jqGrid instance  string param - string in dot notation  mixed def_val - any value to be returned   return \nstring   isMobile \nReturn true if the grid is used on mobile device.  type \nvariable  return \nboolean   from( array source) \nA Hugo Bonacci  jLinq  port to jqGrid. \nAllows you to work with sets of data using query style syntax to select, order and sort records.  The code is especially useful if you have medium sized sets of information that could be sorted or searched, but you don't want to have to use a server side call to resort your records.  type \nfunction  parameters   array source - array to apply select operations   return \narray with the requested results.   getMethod(string method) \nReturn the jqGrid method set as string in method parameter. This allow us to overcome multiple calls to a method used several time in scope.  Example:  var groupingPrepare = $.jgrid.getMethod( groupingPrepare );  will return .jqGrid('groupingPrepare') method  type \nfunction  parameters   string method - valid jqGrid method   return \nmethod   clearBeforeUnload(string grid_id) \nClear the grid data unbinding all events to it. The function is used in  gridUnload  and  gridDestroy  functions.  type \nfunction  parameters   string grid_id - the id of the grid to apply the operation   return \nno return value   gridUnload(string grid_id) \nRemoves the entrie grid, data events and parameters saving only the grid_id and pager for in DOM for future using.  type \nfunction  parameters   string grid_id - the id of the grid to apply the operation   return \nno return value   gridDestroy(string grid_id) \nRemoves the grid from the DOM.  type \nfunction  parameters   string grid_id - the id of the grid to apply the operation   return \nno return value   styleUI \nDefines the classes used in grid for the different CSS Frameworks. The first property is the name of the CSS framework, the second property is the grid module. For more information and setting refer to  CSS Frameworks guide  type \nobject  return \nobject   inlineEdit \nObject which can be used to overwrite all  Inline editing  options.  type \nobject  return \nobject   findPos( string DOM element ) \nFind the top and left position of the jQuery object. The function return array, where the first element is the left position and the second is the top position.  type \nfunction  parameters   string DOM element - the dom element   return \narray   createModal( ... ) \nThis function use jqModal plugin to create modal windows used in Guriddo jqGrid.  type \nfunction  parameters  return \nnone   hideModal( string selector, [object options]) \nHide a modal dialog defined with createModal function - see above.  type \nfunction  parameters   string selector - the id of the modal created with  createModal  object options -  various options when hide the modal   return \nnone   viewModal( string selector, [object options]) \nShow a modal dialog defined with createModal function - see above.  type \nfunction  parameters   string selector - the id of the modal created with  createModal  object options -  various options when show the modal   return \nnone   info_dialog( string caption, string content, [string button], [object options]) \nCreate a modal with id = info_dialog and open it automatically.  type \nfunction  parameters   string caption - caption of the modal  string content -  content of the modal.  string button - button is a string for the close dialog - if not present no button appear.  object options - various options for the dialog - see below default options.   options   =   { \n   width : 290 , \n   height : auto , \n   dataheight :   auto , \n   drag :   true , \n   resize :   false , \n   left : 250 , \n   top : 170 , \n   zIndex   :   1000 , \n   modal   :   false , \n   closeOnEscape   :   true , \n   align :   center , \n   buttonalign   :   center ,  }   return \nnone   createEl( string type, object options, [string value]) \nCreate a input element defined by  type  (text, select and etc.) and options set with  options  and default value set by  value .  type \nfunction  parameters   string type - input type to be created - select, text, textarea,...  object options - various options for element.  string value -  default value to be set when the elemt is created.   return \nDOM element   checkDate( string format, string date) \nThe function return true if the date has the format specifies in format parameter.  type \nfunction  parameters   string format - format of the date to be checked  string data -  date string value   return \nboolean   isEmpty( string value) \nReturn true if the vallue set by val is empty.  type \nfunction  parameters   string value -  value  to be checked   return \nboolean   checkTime( string value ) \nReturn true if the value is a valid time string.  type \nfunction  parameters   string value -  value  to be checked   return \nboolean   checkValues( string value, string colname, [object custom]) \nPerforms validation of the  value  in edit modules with rules defined in colModel editrules. \nWhen a custom object with editrules object is set the colModel rules are omitted. \nThe function perform check for the following (set as true in the object):   required - check if the field is empty  number  minValue  maxValue  email  integer  date  time  url   The functions  checkTime  and  checkDate  should be present.  The function return array with the following 3 items: \n[ true if rule meet the condition, message in case the rule is false, item for internal use] \nand need the language file, where the '...edit.msg' object is read.  type \nfunction  parameters   string value -  value  to be chacked   return \nboolean   stringify( object json ) \nThe function extend JSON.stringify with a possibility to include functions in the object parameter  type \nfunction  parameters   object json - JSON object to stringify   return \nstring   parseFunc( string str ) \nParses a JSON string and return its JSON representation. The difference from JSON.parse is that this functions can parse functions in the string.  type \nfunction  parameters   string str - JSON string to parse   return \nJSON object   jsonToXML( object json, [object options]) \nConvert JSON object to XML string  type \nfunction  parameters   object json - JSON object to convert  object options - various options, which default values are:   { \n   xmlDecl   :   ?xml version= 1.0  encoding= UTF-8  ? \\n , \n   attr_prefix   :   - , \n   encode   :   true  }   return \nXML string   xmlToJSON( string root, [object options] ) \nConvert xml string to JSON object  type \nfunction  parameters   string root - XML string to be converted  object options - various options, which default values are:   { \n   force_array   :   [],   //[  rdf:li ,  item ,  -xmlns  ]; \n   attr_prefix   :   -  }   return \nJSON object   saveAs( mixed data, [string file], [object options]) \nOpens a dilog to save the  data  on the local computer with file name  file .  type \nfunction  parameters   mixed data - data to be saved on local computer. Can be anything.  string file - file name which will be associated with this data. default jqGridFile.txt  object options - the parameter contain only one property  type  which indicates the type of the filename to be saved. Use the appropriate type for the different files. Default is for text files:   { \n   type   :   plain/text;charset=utf-8  }   return \nnone", 
            "title": "List of common objects"
        }, 
        {
            "location": "/user-guide/navigating/", 
            "text": "Navigationg \n\n\n\n\nPager\n\n\nIf your grid has only a few rows of data, then all the records will be viewable at the same time and you won't have to worry about navigating through pages of data.\n\n\nBut more likely, you will be dealing with large sets of data, and you'll want to display a small number of available records at a time. For this functionality, you will need the Navigation Bar.\n\n\n\n\nCaution\n\n\nPager is currently disabled for TreeGrid\n\n\n\n\n\n\nNote\n\n\nThe pager records are updated correct when addRowData/delRowData methods are used, but the paging by 10, 20 and etc rows does not update correct in case of using it. This is valid in case of \nlocal\n data. In order to update the number of records of the page correct in this case use reloading the grid after this operation trigger('reloadGrid').\n\n\n\n\nDefinition\n\n\nThe Navigation Bar, also known as the pager, is enabled by placing a \ndiv\n right after the \ntable\n definition in your HTML. Note that it is a \ndiv\n, not a \ntable\n. Then, you identify the \ndiv\n to your grid by placing the name of the div in the grid setting called \"pager\". It is necessary to have a id set for the pager div\n\n\nFirst, the HTML definition. We'll name it \njqGridPager\n:\n\n\n..\n\nbody\n\n...\n   \ntable\n \nid\n=\njqGrid\n/\ntable\n\n   \ndiv\n \nid\n=\njqGridPager\n/\ndiv\n\n...\n\n/\nbody\n\n\n\n\n\n\nNext, we'll identify \njqGridPager\n to the grid:\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \npager\n \n:\n \n#jqGridPager\n,\n\n\n...\n\n\n});\n\n\n\n\n\n\nThe definition of the pager in the grid can be done this way:\n\n\npager : \n#gridpager\n\n\n\n\n\n\nor\n\n\npager : \ngridpager\n\n\n\n\n\n\nor\n\n\npager\n \n:\n \njQuery\n(\n#gridpager\n)\n\n\n\n\n\n\nAll the three methods are valid, but it is recommend to use the first or second one, since the jQuery variant causes problems when we try to use the pager in Exporting and Importing modules.\n\n\nThe definition in jqGrid options array tell that the pager should be a part of the grid and the width of the pager will equal of the width of the grid. In this case, the pager will be placed below the body of the gird. Note that in this case the pager element can have arbitrary position in the document and it will be placed instead above the grid body.\n\n\nIf you want to have custom pager you can use your own definition and not to set the pager options in the grid.\n\n\nThe pager when defined uses variables from language file. The English variant of these properties look like this (file grid.locale-en.js):\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \ndefaults\n \n:\n \n{\n\n     \nrecordtext\n:\n \nView {0} - {1} of {2}\n,\n\n     \nemptyrecords\n:\n \nNo records to view\n,\n\n     \nloadtext\n:\n \nLoading...\n,\n\n     \nsavetext\n:\n \nSaving...\n,\n\n     \npgtext\n \n:\n \nPage {0} of {1}\n,\n\n     \npgfirst\n \n:\n \nFirst Page\n,\n\n     \npglast\n \n:\n \nLast Page\n,\n\n     \npgnext\n \n:\n \nNext Page\n,\n\n     \npgprev\n \n:\n \nPrevious Page\n,\n\n     \npgrecs\n \n:\n \nRecords per Page\n,\n\n     \nshowhide\n:\n \nToggle Expand Collapse Grid\n\n   \n...\n\n \n},\n\n \n...\n\n\n}\n\n\n\n\n\n\n\n\nYou can change these properties different ways depending on the needs.\n\n\n\n\nIf you want globally to change these - i.e these changes will take effect in all created grids - you can do:\n\n\n\n\njQuery\n.\nextend\n(\njQuery\n.\njgrid\n.\ndefaults\n,{\nemptyrecords\n:\n \nNothing to display\n,...});\n\n\n\n\n\n\nor\n\n\njQuery\n.\nextend\n(\njQuery\n.\njgrid\n.\nregional\n[\nen\n].\ndefaults\n,{\nemptyrecords\n:\n \nNothing to display\n,...});\n\n\n\n\n\n\nboth are valid.\n\n\n\n\nIf you want to change this only for a particular grid you can do:\n\n\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \npager\n \n:\n \n#gridpager\n,\n\n   \nemptyrecords\n:\n \nNothing to display\n,\n\n\n...\n\n\n});\n\n\n\n\n\n\nNormally, the pager placed so it appears at the bottom of the grid. A duplicate pager can also be enabled to appear at the top of the grid (above the header of the grid). In this case the option toppager should be set to true.\n\n\nNormally when we create the pager we divide this element on three equal parts - left, center and right part. When you try to place additional information in the pager the pager try to fit the size. In case if you plan to place a lot of elements you should accordingly set the appropriate width of the grid.\n\n\nBy default the paging elements are placed at a center and the record information at right position of the pager. You can change these positions using the options \npagerpos\n and \nrecordpos\n - see below.\n\n\nThe icons that represent the pager buttons for navigating through the records are coded in the styleUI object. To change the icons when using jQueryUI CSS use:\n\n\nstyleUI\n \n:\n \n{\n\n  \njQueryUI\n \n:\n \n{\n\n    \n...\n\n    \nbase\n \n:\n \n{\n\n      \n...\n\n      \nicon_first\n \n:\n \nui-icon-seek-first\n,\n\n      \nicon_prev\n \n:\n \nui-icon-seek-prev\n,\n\n      \nicon_next\n:\n \nui-icon-seek-next\n,\n\n      \nicon_end\n:\n \nui-icon-seek-end\n,\n\n      \n...\n\n    \n},\n\n  \n}\n\n\n}\n\n\n\n\n\n\nProperties\n\n\nThe properties that are connected with the pager element are listed below:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\nCan be Changed?\n\n\n\n\n\n\n\n\n\n\nlastpage\n\n\ninteger\n\n\nGives the total number of pages returned from the request. If you use a function as datatype, \njqGrid('setGridParam',{lastpage: your_number});\n can be used to specify the max pages in the pager.\n\n\n0\n\n\nNo\n\n\n\n\n\n\npage\n\n\ninteger\n\n\nSet the initial page number when we make the request.This parameter is passed to the url for use by the server routine retrieving the data. It also works when the datatype is local.\n\n\n1\n\n\nYes\n\n\n\n\n\n\npager\n\n\nhtml id\n\n\nDefines the pager bar to navigate through the records. This must be a valid HTML element; in our example we gave the div the id of \"pager\", but any name is acceptable. Note that the navigation layer (the \"pager\" div) can be positioned anywhere you want, determined by your HTML; in our example we specified that the pager will appear after the  body layer. The valid settings can be (in the context of our example) \npager, #pager, jQuery('#pager')\n. We recommend to use the second one - \n#pager\n. See \nPager\n for more details and explanations. If the pager is empty string (default value) it will not appear.\n\n\n' '\n\n\nNo\n\n\n\n\n\n\npagerpos\n\n\nstring\n\n\nDetermines the position of the pager  navigation buttons and records select box in the grid. By default the pager element when created is divided in 3 parts (one part for pager navigator buttons, one part for navigator buttons and one part for record information - see \nrecordpos\n). Possible values are left, center, right. Note that when changing the position of this parameter it is necessary to change the position of the other elements. See \nNavigator options\n and the parameter \nrecordpos\n below.\n\n\ncenter\n\n\nNo\n\n\n\n\n\n\npgbuttons\n\n\nboolean\n\n\nDetermines if the Pager buttons should be shown if pager is available. Also valid only if \npager\n is set correctly. The buttons are placed in the pager bar.\n\n\ntrue\n\n\nNo\n\n\n\n\n\n\npginput\n\n\nboolean\n\n\nDetermines if the input box, where the user can change the number of the requested page, should be available. The input box appears in the pager bar between the pager buttons.\n\n\ntrue\n\n\nNo\n\n\n\n\n\n\npgtext\n\n\nstring\n\n\nShow information about current page status. We use for this purpose a template string. The default english string is: \nPage {0} of {1}\n. The first value '{0}' is the current loaded page. The second value '{1}' is the total number of pages. Default depend from the used language file\n\n\nlang file\n\n\nYes\n\n\n\n\n\n\nreccount\n\n\ninteger\n\n\nReadonly property. Determines the exact number of rows in the grid. Do not confuse this with \nrecords\n parameter. Although in many cases they may be equal, there are cases where they are not. For example, if you define \nrowNum\n (requested records per page) to be 15, but the request to the server returns 20 records, the \nrecords\n parameter will be 20, but the \nreccount\n parameter will be 15 (the grid you will have 15 records and not 20).\n\n\n0\n\n\nNo\n\n\n\n\n\n\nrecordpos\n\n\nstring\n\n\nDetermines the position of the record information in the pager ( See recordtext option). Can be \nleft\n, \ncenter\n, \nright\n. If the default value is changed, be a sure that the other placement in 3 part pager are set in appropriate way.\n\n\nright\n\n\nNo\n\n\n\n\n\n\nrecords\n\n\ninteger\n\n\nRead-only property. Gives the number of records returned as a result of a query to the server.\n\n\nnone\n\n\nNo\n\n\n\n\n\n\nrecordtext\n\n\nstring\n\n\nText that can be shown in the pager. This option is valid if \nviewrecords\n option is set to \ntrue\n. This text appears only if the total number of records is greater then zero. The default string in case of english langauage is as following: \nView {0} - {1} of {2}\n. {0} is the start position of the records depending on page number and number of requested records, {1} is the end position and {2} - total records returned from the server.\n\n\nlang file\n\n\nYes\n\n\n\n\n\n\nrowList\n\n\narray\n\n\nAn array to construct a select box element in the pager in which we can change the number of the visible rows. When changed during the execution, the values of this parameter replaces the \nrowNum\n parameter that is passed to the url. If the array is empty, this element does not appear in the pager. Typically you can set this like \n[10,20,30]\n. If the \nrowNum\n parameter is set to 30 then the selected value in the select box is 30. The rowList parameter can have display value as string too. The select list can be configured with a name value pair where the value and display text will be separated with colon \":\". By example the following [\"10:10\", \"20:20\", \"30:30\", \"9999999:All\"] will provide display items in select list 10,20,30,All and when All is selected the value of 9999999 will be posted. Set this number to be higher enough so that all the records will be obtained\n\n\nempty\n\n\nNo\n\n\n\n\n\n\nrowNum\n\n\ninteger\n\n\nSets how many records we want to view in the grid. This parameter is passed to the url (and in local data too) for use by the server routine retrieving the data. Note that if you set this parameter to 10 (i.e. retrieve 10 records) and your server return 15 then only 10 records will be loaded.\n\n\n20\n\n\nYes\n\n\n\n\n\n\nrowTotal\n\n\ninteger\n\n\nWhen set this parameter can instruct the server to load the total number of rows needed to work on. Note that \nrowNum\n determines the total records displayed in the grid, while \nrowTotal\n determines the total number of rows on which we can operate. When this parameter is set, we send an additional parameter to the server named \ntotalrows\n (See prmNames option). You can check for this parameter, and if it is available you can replace the \nrows\n parameter with this one. Mostly this parameter can be combined with \nloadonce\n parameter set to \ntrue\n.\n\n\nnull\n\n\nYes\n\n\n\n\n\n\ntoppager\n\n\nboolean\n\n\nWhen enabled this option places a pager element at top of the grid, below the caption (if available). If another pager is defined, both can coexist and are kept in sync (except adding custom buttons in navigator). The id of the newly created pager is the combination \ngrid_id + \"_toppager\"\n. All the buttons which are connected to the 'bottom' pager are valid for the top pager. This means that if by example pginput is true it will display on the toppager too.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\nviewrecords\n\n\nboolean\n\n\nIf \ntrue\n, jqGrid displays the beginning and ending record number in the grid, out of the total number of records in the query.  This information is shown in the pager bar (bottom right by default)in this format: \"View X to Y out of Z\".  If this value is \ntrue\n, there are other parameters that can be adjusted, including \nemptyrecords\n and \nrecordtext\n.\n\n\nfalse\n\n\nNo\n\n\n\n\n\n\n\n\nAll the properties that can be changed in the pager after creating the jqGrid object require reloading the grid. This is done via the trigger('reloadGrid'). Here is a example which change the number of requested rows to 10.\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nsetGridParam\n,{\nrowNum\n:\n10\n}).\ntrigger\n(\nreloadGrid\n);\n\n\n...\n\n\n/script\n\n\n\n\n\n\nEvents\n\n\nOne event of the grid relates to the Pager:\n\n\n\n\nonPaging( pgButton )\n\n\nor triggered event\n\n\njqGridPaging( event, pgButtons )\n\n\nThis event fires after click on [page button] and before populating the data. Also works when the user enters a new page number in the page input box (and presses [Enter]) and when the number of requested records is changed via the select box. To this event we pass only one parameter pgButton (string) which can be - \nfirst,last,prev,next\n in case of button click, \nrecords\n in case when a number of requested rows is changed and \nuser\n when the user change the number of the requested page. If the string 'stop' is returned from the function then the paging will be stopped.\n\n\n\n\nNavigator\n\n\nThe Navigator is a user interface feature that allows easy accessibility to record actions such as Find or Edit. The user can activate a grid action by pressing the appropriate icon button in the Navigation layer.\n\n\nDevelopers can create custom actions, or they can use any of the predefined actions that come with jqGrid. jqGrid provides icon button graphics for the predefined actions.\n\n\nWe have two types of navigators - navigator with \nForm Edit\n actions, named \nnavGrid\n and navigator with \nInline Edit\n actions named inlineNav.\n\n\nForm Edit Navigator\n\n\n(navGrd)\n\n\nThis is method which places a predefined actions in the pager bar.\n\n\nDefinition\n\n\nThe full set of predefined actions in this navigator are:\n\n\n1) Add New Row, 2) Edit Selected Row, 3) View Selected Row, 4) Delete Selected Row, 5) Find Records, and 6) Reload Grid\n\n\nThe image below shows these six buttons in the bottom-left.\n\n\n\n\nThe Navigator is a jqGrid method. It's activated and configured by extending the main grid function, as shown in the code examples below. The full list of all possible configurable parameters is listed in the table below.\n\n\nThe built-in Navigator should be applied to the pager element. In other words, the pager element should be defined. The built-in Navigator actions correspond to the form editing actions. For more information and details refer to \nForm Editing\n.\n\n\nHTML definition\n\n\n...\n\nbody\n\n...\n  \ntable\n \nid\n=\nlist\n/\ntable\n\n  \ndiv\n \nid\n=\ngridpager\n/\ndiv\n\n...\n\n/\nbody\n\n\n\n\n\n\nJavaScript code\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n  \npager\n \n:\n \n#gridpager\n,\n\n\n...\n\n\n});\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nnavGrid\n,\n#gridpager\n,{\nparameters\n},\nprmEdit\n,\n \nprmAdd\n,\n \nprmDel\n,\n \nprmSearch\n,\n \nprmView\n);\n\n\n...\n\n\n/script\n\n\n\n\n\n\nor in chained mode\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n  \npager\n \n:\n \n#gridpager\n,\n\n\n...\n\n\n}).\njqGrid\n(\nnavGrid\n,\n#gridpager\n,{\nparameters\n},\n \nprmEdit\n,\n \nprmAdd\n,\n \nprmDel\n,\n \nprmSearch\n,\n \nprmView\n);\n\n\n...\n\n\n/script\n\n\n\n\n\n\nWhere:\n\n\n\n\ngrid_id - the id of the already constructed jqGrid.\n\n\ngridpager - the id of the navigation bar\n\n\nparameters - an array of settings, defined below\n\n\nprmEdit, prmAdd, prmDel, prmSearch, prmView are objects which holds the parameters and events for a particular action in Form editing\n\n\nprmEdit - these are the options for form \nediting dialog\n\n\nprmAdd - these are the options for form \naddinig dialog\n\n\nprmDel - these are the options for form \ndeleting dialog\n\n\nprmSearch - these are the options for form \nsingle searching\n  and \nadvanced serching\n dialogs\n\n\nprmView - these are the options for form \nview dialog\n\n\n\n\n\n\n\n\nAdditionally to every particular module defined with prmEdit, prmAdd, prmDel, prmSearch, prmView a id parameter can be passed in order to identify the id of the button in the Navigator. If this id is not defined we use the combination of a prefix and the grid id. See below.\n\n\nIf the id of the button is not set we use the following rule:\n\nFor the add button we use \u201cadd_\u201d + the id of the grid\n\nFor the edit button we use \u201cedit_\u201d + the id of the grid\n\nFor the delete button we use \u201cdel_\u201d + the id of the grid\n\nFor the view button we use \u201cview_\u201d + the id of the grid\n\nFor the search button we use \u201csearch_\u201d + the id of the grid\n\nFor the refresh button we use \u201crefresh_\u201d + the id of the grid\n\n\nThe code below defines a edit button with id myedit.\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n  \npager\n \n:\n \n#gridpager\n,\n\n\n...\n\n\n}).\njqGrid\n(\nnavGrid\n,\n#gridpager\n,{},\n \n{\nid\n:\nmyedit\n});\n\n\n...\n\n\n/script\n\n\n\n\n\n\nThe button and action can be disabled when a certain class is added for it. This class is defined in the common styleUI module with the name \ndisabled\n:\n\n\nstyleUI\n \n:\n \n{\n\n  \njQueryUI\n \n:\n \n{\n\n    \ncommon\n \n:\n \n{\n\n      \ndisabled\n:\n \nui-state-disabled\n,\n\n      \n...\n\n    \n}\n\n  \n}\n\n  \n...\n\n\n}\n\n\n\n\n\n\nfor Bootstrap\n\n\nBootstrap\n \n:\n \n{\n\n  \ncommon\n \n:\n \n{\n\n    \ndisabled\n:\n \nui-disabled\n,\n\n  \n}\n\n\n}\n\n\n\n\n\n\nTo make this cross CSS usable add the two classes at once. If the button has a id = myedit as of the example above use this code to disable it dynamically:\n\n\n...\n\n\n$\n(\n#myedit\n,\n \n#gridpager\n).\naddClass\n(\nui-state-disabled  ui-disabled\n);\n\n\n\n\n\n\nParameters\n\n\nWhen we use the Navigator the following options are included from the language file.\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \n...\n\n    \nsearch\n \n:\n \n{\n\n    \n...\n\n    \n},\n\n    \nedit\n \n:\n \n{\n\n    \n...\n\n    \n},\n\n    \nview\n \n:\n \n{\n\n    \n...\n\n    \n},\n\n    \ndel\n \n:\n \n{\n\n    \n...\n\n    \n},\n\n    \nnav\n \n:\n \n{\n\n        \nedittext\n:\n \n,\n\n        \nedittitle\n:\n \nEdit selected row\n,\n\n        \naddtext\n:\n,\n\n        \naddtitle\n:\n \nAdd new row\n,\n\n        \ndeltext\n:\n \n,\n\n        \ndeltitle\n:\n \nDelete selected row\n,\n\n        \nsearchtext\n:\n \n,\n\n        \nsearchtitle\n:\n \nFind records\n,\n\n        \nrefreshtext\n:\n \n,\n\n        \nrefreshtitle\n:\n \nReload Grid\n,\n\n        \nalertcap\n:\n \nWarning\n,\n\n        \nalerttext\n:\n \nPlease, select row\n,\n\n        \nviewtext\n:\n \n,\n\n        \nviewtitle\n:\n \nView selected row\n,\n\n        \nsavetext\n:\n \n,\n\n        \nsavetitle\n:\n \nSave row\n,\n\n        \ncanceltext\n:\n \n,\n\n        \ncanceltitle\n \n:\n \nCancel row editing\n,\n\n        \nselectcaption\n \n:\n \nActions...\n\n    \n},\n\n\n...\n\n\n}\n\n\n\n\n\n\nIf you want to change the text that appears when a user hovers over a button, simply replace the text in the title string in the bottom part of the code below. For example: hover text for the view button is supplied by viewtitle: \"View selected row\"\n\n\nFor the particular options regarding the editing methods refer to \nForm Editing\n\n\nThe full list of parameters is listed below.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nadd\n\n\nboolean\n\n\nEnables or disables the add action in the Navigator. When the button is clicked a editGridRow with parameter 'new' is executed\n\n\ntrue\n\n\n\n\n\n\naddicon\n\n\nstring\n\n\nSet a icon to be displayed if the add action is enabled. The default icon is get from styleUI object  - see navigator property\n\n\ncss def\n\n\n\n\n\n\naddtext\n\n\nstring\n\n\nThe text than can be set in the add button\n\n\nempty\n\n\n\n\n\n\naddtitle\n\n\nstring\n\n\nThe title that appear when we mouse over to the add button (if enabled)\n\n\nsee lang file\n\n\n\n\n\n\nafterRefresh\n\n\nfunction\n\n\nIf defined this event fire after the refresh button is clicked. No parameters\n\n\nnull\n\n\n\n\n\n\nalertcap\n\n\nstring\n\n\nThe header of the message that appear when we try to edit,delete or view  a row without to select it\n\n\nsee lang file\n\n\n\n\n\n\nalerttext\n\n\nstring\n\n\nThe message text that appear when we try to edit,delete or view  a row without to select it\n\n\nsee lang file\n\n\n\n\n\n\nalertwidth\n\n\nnumber\n\n\nThe width in pixel of the alert window\n\n\n200\n\n\n\n\n\n\nalertheight\n\n\nmixed\n\n\nThe height in pixel or % of the alert windows\n\n\nauto\n\n\n\n\n\n\nalerttop\n\n\ninteger\n\n\nTop position of aler window\n\n\nnull\n\n\n\n\n\n\nalertleft\n\n\ninteger\n\n\nLeft position of the alert window\n\n\nnull\n\n\n\n\n\n\nalertzIndex\n\n\ninteger\n\n\nzIndex of the alert window\n\n\nnull\n\n\n\n\n\n\nbeforeRefresh\n\n\nfunction\n\n\nIf defined this event fire before the refresh button is clicked\n\n\nnull\n\n\n\n\n\n\ncloneToTop\n\n\nboolean\n\n\nClones all the actions from the bottom pager to the top pager if defined. Note that the navGrid can be applied to the top pager only. The id of the top pager is a combination of grid id and \"_toppager\". This action does not clone the custom added buttons.\n\n\nfalse\n\n\n\n\n\n\ncloseOnEscape\n\n\nboolean\n\n\nDetermine if the alert dialog can be closed if the user pres ESC key\n\n\ntrue\n\n\n\n\n\n\ndel\n\n\nboolean\n\n\nEnables or disables the delete action in the Navigator. When the button is clicked a delGridRow method is executed.\n\n\ntrue\n\n\n\n\n\n\ndelicon\n\n\nstring\n\n\nSet a icon to be displayed if the delete action is enabled. The default icon is get from styleUI object  - see navigator property\n\n\ncss def\n\n\n\n\n\n\ndeltext\n\n\nstring\n\n\nThe text than can be set in the delete button\n\n\nempty\n\n\n\n\n\n\ndeltitle\n\n\nstring\n\n\nThe title that appear when we mouse over to the delete button (if enabled)\n\n\nsee lang file\n\n\n\n\n\n\ndropmenu\n\n\nboolean\n\n\nIf set to true convert the navigator buttons from the pager to popup menu with a button defined in navButtonText parameter. Use this feature in case if there is not enough space to have all the needed buttons on the pager.\n\n\nfalse\n\n\n\n\n\n\nedit\n\n\nboolean\n\n\nEnables or disables the edit action in the Navigator. When the button is clicked a editGridRow method is executed with parameter the - current selected row\n\n\ntrue\n\n\n\n\n\n\nediticon\n\n\nstring\n\n\nSet a icon to be displayed if the edit action is enabled. The default icon is get from styleUI object  - see navigator property\n\n\ncss def\n\n\n\n\n\n\nedittext\n\n\nstring\n\n\nThe text than can be set in the edit button\n\n\nempty\n\n\n\n\n\n\nedittitle\n\n\nstring\n\n\nThe title that appear when we mouse over to the edit button (if enabled)\n\n\nsee ang file\n\n\n\n\n\n\nnavButton\n\n\ntext\n\n\nThe text of the button when dropmenu is set to true. The parameter from language file is  selectcaption.\n\n\nSee lang file\n\n\n\n\n\n\nposition\n\n\nstring\n\n\nDetermines the position of the Navigator buttons in the pager. Can be left, center and right.\n\n\nleft\n\n\n\n\n\n\nrefresh\n\n\nboolean\n\n\nEnables or disables the refresh button in the pager. When the button is clicked a trigger(\"reloadGrid\") is executed and the search parameters are cleared\n\n\ntrue\n\n\n\n\n\n\nrefreshicon\n\n\nstring\n\n\nSet a icon to be displayed if the refresh action is enabled. The default icon is get from styleUI object  - see navigator property\n\n\ncss def\n\n\n\n\n\n\nrefreshtext\n\n\nstring\n\n\nThe text than can be set in the refresh button\n\n\nsee lang file\n\n\n\n\n\n\nrefreshtitle\n\n\nstring\n\n\nThe title that appear when we mouse over to the refresh button (if enabled)\n\n\nsee lang file\n\n\n\n\n\n\nrefreshstate\n\n\nstring\n\n\nDetermines how the grid should be reloaded \nfirstpage\n - the grid reload the data from the  first page. \ncurrent\n - the reloading should save the current page and current selection\n\n\nfirstpage\n\n\n\n\n\n\nsearch\n\n\nboolean\n\n\nEnables or disables the search button in the pager.When the button is clicked a searchGrid method is executed\n\n\ntrue\n\n\n\n\n\n\nsearchicon\n\n\nstring\n\n\nSet a icon to be displayed if the search action is enabled. The default icon is get from styleUI object  - see navigator property\n\n\ncss def\n\n\n\n\n\n\nsearchtext\n\n\nstring\n\n\nThe text than can be set in the search button\n\n\nempty\n\n\n\n\n\n\nsearchtitle\n\n\nstring\n\n\nThe title that appear when we mouse over to the search button (if enabled)\n\n\nsee lang file\n\n\n\n\n\n\nview\n\n\nboolean\n\n\nEnables or disables the view button in the pager. When the button is clicked a viewGridRow method is executed\n\n\nfalse\n\n\n\n\n\n\nviewicon\n\n\nstring\n\n\nSet a icon to be displayed if the search action is enabled. The default icon is get from styleUI object  - see navigator property\n\n\ncss def\n\n\n\n\n\n\nviewtext\n\n\nstring\n\n\nThe text that can be set in the view button\n\n\nempty\n\n\n\n\n\n\nviewtitle\n\n\nstring\n\n\nThe title that appear when we mouse over to the view button (if enabled)\n\n\nsee lang file\n\n\n\n\n\n\naddfunc\n\n\nfunction\n\n\nIf defined replaces the build in add function. No parameters are passed to this function\n\n\nnull\n\n\n\n\n\n\neditfunc\n\n\nfunction\n\n\nIf defined replaces the build in edit function. Parameter passed to this function is the id of the edited row\n\n\nnull\n\n\n\n\n\n\ndelfunc\n\n\nfunction\n\n\nIf defined replaces the build in del function. Parameter passed to this function is the id of the edited row\n\n\nnull\n\n\n\n\n\n\nsearchfunc\n\n\nfunction\n\n\nIf defined replaces the default search function in navigator. Parameter passed to the function is the object with the search parameter.\n\n\nnull\n\n\n\n\n\n\nviewfunc\n\n\nfunction\n\n\nIf defined replaces the build in view function. Parameter passed to this function is the id of the edited row\n\n\nnull\n\n\n\n\n\n\n\n\nMore options\n\n\nIn some cases we need to have easy access to the navigator options and parameters of the editing. To do so we have created a grid option (note that this is a grid and not navigator option) called \nstoreNavOptions\n \nsee options\n\n\nThis is a boolean option and if set to true when the navigator is created it stores the navigator, editing and search options in the following \ngrid options\n:\n\n\n\n\nnavOptions\n- object where all the navigator objects are stored as grid option.\n\n\neditOptions\n - object where all the edit parameters passed in navigator are stored as grid option.\n\n\naddOptions\n - object where all the add parameters passed in navigator are stored as grid option.\n\n\ndelOptions\n - object where all the delete parameters passed in navigator are stored as grid option.\n\n\nviewOptions\n - object where all the view parameters passed in navigator are stored as grid option.\n\n\nsearchOptions\n - object where all the search parameters passed in navigator are stored as grid option.\n\n\nnavButtons\n - array where all the custom buttons created with navButtonAdd are stored as grid option\n\n\n\n\nThe primary goal of creating this option is caused of creating the methods for saving/restoring the \ngrid state\n - \n$.jgrid.saveState\n and \n$.jgrid.loadState\n where we have access only to the grid options. We do not store these options automatically because of saving memory.\n\n\nInline Edit Navigator\n\n\n(inlineNav)\n\n\nDefinition\n\n\nThe inline navigator is similar to the \nform navigator\n except that a inline editing actions are used.\n\n\nThe full set of predefined actions in this navigator are:\n\n\n1) Add New Row, 2) Edit Selected Row, 3) Save the Selected Row 4) Cancel saving the row\n\n\nThe image below shows these four buttons in the bottom-left.\n\n\n\n\nThe inline navigator require \nnavGrid\n method to be called. If the method is not called it is called automatically from inline navigator method with all enabling options set to false.\n\n\nActually the inline edit navigator uses navButtonAdd method (see below) to define inline editing actions.\n\n\nHTML definition\n\n\n...\n\nbody\n\n...\n  \ntable\n \nid\n=\nlist\n/\ntable\n\n  \ndiv\n \nid\n=\ngridpager\n/\ndiv\n\n...\n\n/\nbody\n\n\n\n\n\n\nJavaScript code\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n  \npager\n \n:\n \n#gridpager\n,\n\n\n...\n\n\n});\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\ninlineNav\n,\n#gridpager\n,{\nparameters\n});\n\n\n...\n\n\n/script\n\n\n\n\n\n\nor in chained mode\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n  \npager\n \n:\n \n#gridpager\n,\n\n\n...\n\n\n}).\njqGrid\n(\ninlineNav\n,\n#gridpager\n,{\nparameters\n});\n\n\n...\n\n\n/script\n\n\n\n\n\n\nWhere:\n\n\n\n\ngrid_id - the id of the already constructed jqGrid.\n\n\ngridpager - the id of the navigation bar\n\n\nparameters - object containing all the definitions for the inline actions.\n\n\n\n\nAdditionally to every action button a id parameter is set. The unique id for every button is build as follow:\n\n\nFor the add button  grid id  + '_iladd'\n\nFor the edit button grid id  + '_iledit'\n\nFor the save button grid id  + '_ilsave'\n\nFor the cancel button grid id  + '_ilcancel'\n\n\nWhen the \ninlineNav\n  method is called we store the parameters of method using the jQuery \n$.data\n function. The name of the data is the same as method. So after calling inlineNav method it is possible to get all the parameters:\n\n\nvar\n \nnavparams\n \n=\n \n$\n(\n#grid_id\n).\ndata\n(\ninlineNav\n);\n\n\n\n\n\n\nThe following options from language file are used when this method is called (English version):\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \n...\n\n    \nnav\n \n:\n \n{\n\n        \nedittext\n:\n \n,\n\n        \nedittitle\n:\n \nEdit selected row\n,\n\n        \naddtext\n:\n,\n\n        \naddtitle\n:\n \nAdd new row\n,\n\n        \ndeltext\n:\n \n,\n\n        \ndeltitle\n:\n \nDelete selected row\n,\n\n        \nsearchtext\n:\n \n,\n\n        \nsearchtitle\n:\n \nFind records\n,\n\n        \nrefreshtext\n:\n \n,\n\n        \nrefreshtitle\n:\n \nReload Grid\n,\n\n        \nalertcap\n:\n \nWarning\n,\n\n        \nalerttext\n:\n \nPlease, select row\n,\n\n        \nviewtext\n:\n \n,\n\n        \nviewtitle\n:\n \nView selected row\n,\n\n        \nsavetext\n:\n \n,\n\n        \nsavetitle\n:\n \nSave row\n,\n\n        \ncanceltext\n:\n \n,\n\n        \ncanceltitle\n \n:\n \nCancel row editing\n,\n\n        \nselectcaption\n \n:\n \nActions...\n\n    \n},\n\n\n...\n\n\n}\n\n\n\n\n\n\nParameters inlineNav\n\n\nThe full list of parameters is listed below.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nadd\n\n\nboolean\n\n\nEnables or disables the add action in the Navigator. When the button is clicked a addRow method with parameters addParams is executed\n\n\ntrue\n\n\n\n\n\n\naddicon\n\n\nstring\n\n\nSet a icon to be displayed if the add action is enabled. The default icon is get from styleUI object - see navigator property\n\n\ncss def\n\n\n\n\n\n\naddtext\n\n\nstring\n\n\nThe text than can be set in the add button\n\n\nempty\n\n\n\n\n\n\naddtitle\n\n\nstring\n\n\nThe title that appear when we mouse over to the add button (if enabled)\n\n\nsee lang file\n\n\n\n\n\n\naddParams\n\n\nobject\n\n\nObject containing the parameters when a row is added. For a full list of these options refer to \nInline addRow method\n\n\nempty\n\n\n\n\n\n\ncancel\n\n\nboolean\n\n\nEnables or disables the cancel button in navigator. When button is clicked  the current edited row is restored to its initial state\n\n\ntrue\n\n\n\n\n\n\ncancelicon\n\n\nstring\n\n\nSet a icon to be displayed if the cancel action is enabled. The default icon is get from styleUI object - see navigator property\n\n\ncss def\n\n\n\n\n\n\ncanceltext\n\n\nstring\n\n\nThe text than can be set in the cancel button\n\n\nempty\n\n\n\n\n\n\ncanceltitle\n\n\nstring\n\n\nThe title that appear when we mouse over to the cancel button (if enabled)\n\n\nsee lang file\n\n\n\n\n\n\nedit\n\n\nboolean\n\n\nEnables or disables the edit action in the Navigator. When the button is clicked a editRow method is executed with parameter editParams object and the id of current selected row\n\n\ntrue\n\n\n\n\n\n\nediticon\n\n\nstring\n\n\nSet a icon to be displayed if the edit action is enabled. The default icon is get from styleUI object  - see navigator property\n\n\ncss def\n\n\n\n\n\n\nedittext\n\n\nstring\n\n\nThe text than can be set in the edit button\n\n\nempty\n\n\n\n\n\n\nedittitle\n\n\nstring\n\n\nThe title that appear when we mouse over to the edit button (if enabled)\n\n\nsee ang file\n\n\n\n\n\n\neditParams\n\n\nobject\n\n\nObject containing the parameters when a row is edited. For a full list of these options refer to \nInline editRow method\n\n\nempty\n\n\n\n\n\n\nrestoreAfterSelect\n\n\nboolean\n\n\ntrue means that when editing one row and select another the first edited row is restored to its initial state instead of changed values. See option saveAfterSelect.\n\n\ntrue\n\n\n\n\n\n\nsave\n\n\nboolean\n\n\nEnables or disables the save button in the navigator. When the button is clicked all the changes in the current edited fields are stored.\n\n\ntrue\n\n\n\n\n\n\nsaveAfterSelect\n\n\nboolean\n\n\ntrue means that when editing one row and select another the first edited row is saved with the new changes.\n\n\nfalse\n\n\n\n\n\n\nsaveicon\n\n\nstring\n\n\nSet a icon to be displayed if the save action is enabled. The default icon is get from styleUI object - see navigator property\n\n\ncss def\n\n\n\n\n\n\nsavetext\n\n\nstring\n\n\nThe text than can be set in the save button\n\n\nsee lang file\n\n\n\n\n\n\nsavetitle\n\n\nstring\n\n\nThe title that appear when we mouse over to the save button (if enabled)\n\n\nsee lang file\n\n\n\n\n\n\n\n\nCustom buttons\n\n\nCustom Buttons are a way to define your own button and action in the pager. In order to create a custom buttons a \nnavGrid\n method first needs to be called.\n\n\nDefinition\n\n\nCalling Convention:\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nnavGrid\n,\n#pager\n,...).\njqGrid\n(\nnavButtonAdd\n,\n#pager\n,{\nparameters\n});\n\n\n...\n\n\n/script\n\n\n\n\n\n\nThe default parameters are\n\n\n{\n\n  \ncaption\n:\nNewButton\n,\n\n  \nbuttonicon\n:\nui-icon-newwin\n,\n\n  \nonClickButton\n:\nnull\n,\n\n  \nposition\n:\n \nlast\n,\n\n  \ntitle\n:\n,\n\n  \nid\n \n:\n \n,\n\n  \ncursor\n:\n \npointer\n\n\n}\n\n\n\n\n\n\nwhere\n\n\n\n\ncaption: (string) the caption of the button, can be a empty string.\n\n\nbuttonicon: (string) is the ui icon name from UI theme icon set. If this option is set to \u201cnone\u201d only the text appear.\n\n\nonClickButton: (function) action to be performed when a button is clicked. Default null.\n\n\nposition: (\u201cfirst\u201d or \u201clast\u201d) the position where the button will be added (i.e., before or after the standard buttons).\n\n\ntitle: (string) a tool-tip for the button.\n\n\ncursor : string (default pointer) determines the cursor when we mouse-over the element\n\n\nid : string (optional) - if set defines the id of the button (actually the id of TD element) for future manipulation\n\n\n\n\nMultiple buttons can be added by continuing the chain.\n\n\nSeparator\n\n\nIt is possible to group some action adding separator. This can be done using the \nnavSeparatorAdd\n method\n\n\nSyntax:\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nnavGrid\n,\n#pager\n,...)\n\n\n.\njqGrid\n(\nnavButtonAdd\n,\n#pager\n,{\nparameters\n})\n\n\n.\njqGrid\n(\nnavSeparatorAdd\n,\n#pager\n,{\nseparator_parameters\n});\n\n\n...\n\n\n/script\n\n\n\n\n\n\nThe default separator_parameters are\n\n\n{\n\n  \nsepclass\n \n:\n \nui-separator\n,\n\n  \nsepcontent\n:\n \n\n\n}\n\n\n\n\n\n\nWhere:\n\n\n\n\nsepclass represent the separator class defined in ui-jqgrid. You can customize your own class\n\n\nsepcontent the content that can be put in the separator element", 
            "title": "Navigation"
        }, 
        {
            "location": "/user-guide/navigating/#navigationg", 
            "text": "", 
            "title": "Navigationg "
        }, 
        {
            "location": "/user-guide/navigating/#pager", 
            "text": "If your grid has only a few rows of data, then all the records will be viewable at the same time and you won't have to worry about navigating through pages of data.  But more likely, you will be dealing with large sets of data, and you'll want to display a small number of available records at a time. For this functionality, you will need the Navigation Bar.   Caution  Pager is currently disabled for TreeGrid    Note  The pager records are updated correct when addRowData/delRowData methods are used, but the paging by 10, 20 and etc rows does not update correct in case of using it. This is valid in case of  local  data. In order to update the number of records of the page correct in this case use reloading the grid after this operation trigger('reloadGrid').", 
            "title": "Pager"
        }, 
        {
            "location": "/user-guide/navigating/#definition", 
            "text": "The Navigation Bar, also known as the pager, is enabled by placing a  div  right after the  table  definition in your HTML. Note that it is a  div , not a  table . Then, you identify the  div  to your grid by placing the name of the div in the grid setting called \"pager\". It is necessary to have a id set for the pager div  First, the HTML definition. We'll name it  jqGridPager :  .. body \n...\n    table   id = jqGrid / table \n    div   id = jqGridPager / div \n... / body   Next, we'll identify  jqGridPager  to the grid:  jQuery ( #grid_id ). jqGrid ({  ... \n    pager   :   #jqGridPager ,  ...  });   The definition of the pager in the grid can be done this way:  pager :  #gridpager   or  pager :  gridpager   or  pager   :   jQuery ( #gridpager )   All the three methods are valid, but it is recommend to use the first or second one, since the jQuery variant causes problems when we try to use the pager in Exporting and Importing modules.  The definition in jqGrid options array tell that the pager should be a part of the grid and the width of the pager will equal of the width of the grid. In this case, the pager will be placed below the body of the gird. Note that in this case the pager element can have arbitrary position in the document and it will be placed instead above the grid body.  If you want to have custom pager you can use your own definition and not to set the pager options in the grid.  The pager when defined uses variables from language file. The English variant of these properties look like this (file grid.locale-en.js):  $ . jgrid . regional [ en ]   =   { \n   defaults   :   { \n      recordtext :   View {0} - {1} of {2} , \n      emptyrecords :   No records to view , \n      loadtext :   Loading... , \n      savetext :   Saving... , \n      pgtext   :   Page {0} of {1} , \n      pgfirst   :   First Page , \n      pglast   :   Last Page , \n      pgnext   :   Next Page , \n      pgprev   :   Previous Page , \n      pgrecs   :   Records per Page , \n      showhide :   Toggle Expand Collapse Grid \n    ... \n  }, \n  ...  }    You can change these properties different ways depending on the needs.   If you want globally to change these - i.e these changes will take effect in all created grids - you can do:   jQuery . extend ( jQuery . jgrid . defaults ,{ emptyrecords :   Nothing to display ,...});   or  jQuery . extend ( jQuery . jgrid . regional [ en ]. defaults ,{ emptyrecords :   Nothing to display ,...});   both are valid.   If you want to change this only for a particular grid you can do:   jQuery ( #grid_id ). jqGrid ({  ... \n    pager   :   #gridpager , \n    emptyrecords :   Nothing to display ,  ...  });   Normally, the pager placed so it appears at the bottom of the grid. A duplicate pager can also be enabled to appear at the top of the grid (above the header of the grid). In this case the option toppager should be set to true.  Normally when we create the pager we divide this element on three equal parts - left, center and right part. When you try to place additional information in the pager the pager try to fit the size. In case if you plan to place a lot of elements you should accordingly set the appropriate width of the grid.  By default the paging elements are placed at a center and the record information at right position of the pager. You can change these positions using the options  pagerpos  and  recordpos  - see below.  The icons that represent the pager buttons for navigating through the records are coded in the styleUI object. To change the icons when using jQueryUI CSS use:  styleUI   :   { \n   jQueryUI   :   { \n     ... \n     base   :   { \n       ... \n       icon_first   :   ui-icon-seek-first , \n       icon_prev   :   ui-icon-seek-prev , \n       icon_next :   ui-icon-seek-next , \n       icon_end :   ui-icon-seek-end , \n       ... \n     }, \n   }  }", 
            "title": "Definition"
        }, 
        {
            "location": "/user-guide/navigating/#properties", 
            "text": "The properties that are connected with the pager element are listed below:     Property  Type  Description  Default  Can be Changed?      lastpage  integer  Gives the total number of pages returned from the request. If you use a function as datatype,  jqGrid('setGridParam',{lastpage: your_number});  can be used to specify the max pages in the pager.  0  No    page  integer  Set the initial page number when we make the request.This parameter is passed to the url for use by the server routine retrieving the data. It also works when the datatype is local.  1  Yes    pager  html id  Defines the pager bar to navigate through the records. This must be a valid HTML element; in our example we gave the div the id of \"pager\", but any name is acceptable. Note that the navigation layer (the \"pager\" div) can be positioned anywhere you want, determined by your HTML; in our example we specified that the pager will appear after the  body layer. The valid settings can be (in the context of our example)  pager, #pager, jQuery('#pager') . We recommend to use the second one -  #pager . See  Pager  for more details and explanations. If the pager is empty string (default value) it will not appear.  ' '  No    pagerpos  string  Determines the position of the pager  navigation buttons and records select box in the grid. By default the pager element when created is divided in 3 parts (one part for pager navigator buttons, one part for navigator buttons and one part for record information - see  recordpos ). Possible values are left, center, right. Note that when changing the position of this parameter it is necessary to change the position of the other elements. See  Navigator options  and the parameter  recordpos  below.  center  No    pgbuttons  boolean  Determines if the Pager buttons should be shown if pager is available. Also valid only if  pager  is set correctly. The buttons are placed in the pager bar.  true  No    pginput  boolean  Determines if the input box, where the user can change the number of the requested page, should be available. The input box appears in the pager bar between the pager buttons.  true  No    pgtext  string  Show information about current page status. We use for this purpose a template string. The default english string is:  Page {0} of {1} . The first value '{0}' is the current loaded page. The second value '{1}' is the total number of pages. Default depend from the used language file  lang file  Yes    reccount  integer  Readonly property. Determines the exact number of rows in the grid. Do not confuse this with  records  parameter. Although in many cases they may be equal, there are cases where they are not. For example, if you define  rowNum  (requested records per page) to be 15, but the request to the server returns 20 records, the  records  parameter will be 20, but the  reccount  parameter will be 15 (the grid you will have 15 records and not 20).  0  No    recordpos  string  Determines the position of the record information in the pager ( See recordtext option). Can be  left ,  center ,  right . If the default value is changed, be a sure that the other placement in 3 part pager are set in appropriate way.  right  No    records  integer  Read-only property. Gives the number of records returned as a result of a query to the server.  none  No    recordtext  string  Text that can be shown in the pager. This option is valid if  viewrecords  option is set to  true . This text appears only if the total number of records is greater then zero. The default string in case of english langauage is as following:  View {0} - {1} of {2} . {0} is the start position of the records depending on page number and number of requested records, {1} is the end position and {2} - total records returned from the server.  lang file  Yes    rowList  array  An array to construct a select box element in the pager in which we can change the number of the visible rows. When changed during the execution, the values of this parameter replaces the  rowNum  parameter that is passed to the url. If the array is empty, this element does not appear in the pager. Typically you can set this like  [10,20,30] . If the  rowNum  parameter is set to 30 then the selected value in the select box is 30. The rowList parameter can have display value as string too. The select list can be configured with a name value pair where the value and display text will be separated with colon \":\". By example the following [\"10:10\", \"20:20\", \"30:30\", \"9999999:All\"] will provide display items in select list 10,20,30,All and when All is selected the value of 9999999 will be posted. Set this number to be higher enough so that all the records will be obtained  empty  No    rowNum  integer  Sets how many records we want to view in the grid. This parameter is passed to the url (and in local data too) for use by the server routine retrieving the data. Note that if you set this parameter to 10 (i.e. retrieve 10 records) and your server return 15 then only 10 records will be loaded.  20  Yes    rowTotal  integer  When set this parameter can instruct the server to load the total number of rows needed to work on. Note that  rowNum  determines the total records displayed in the grid, while  rowTotal  determines the total number of rows on which we can operate. When this parameter is set, we send an additional parameter to the server named  totalrows  (See prmNames option). You can check for this parameter, and if it is available you can replace the  rows  parameter with this one. Mostly this parameter can be combined with  loadonce  parameter set to  true .  null  Yes    toppager  boolean  When enabled this option places a pager element at top of the grid, below the caption (if available). If another pager is defined, both can coexist and are kept in sync (except adding custom buttons in navigator). The id of the newly created pager is the combination  grid_id + \"_toppager\" . All the buttons which are connected to the 'bottom' pager are valid for the top pager. This means that if by example pginput is true it will display on the toppager too.  false  No    viewrecords  boolean  If  true , jqGrid displays the beginning and ending record number in the grid, out of the total number of records in the query.  This information is shown in the pager bar (bottom right by default)in this format: \"View X to Y out of Z\".  If this value is  true , there are other parameters that can be adjusted, including  emptyrecords  and  recordtext .  false  No     All the properties that can be changed in the pager after creating the jqGrid object require reloading the grid. This is done via the trigger('reloadGrid'). Here is a example which change the number of requested rows to 10.  script  ...  jQuery ( #grid_id ). jqGrid ( setGridParam ,{ rowNum : 10 }). trigger ( reloadGrid );  ...  /script", 
            "title": "Properties"
        }, 
        {
            "location": "/user-guide/navigating/#events", 
            "text": "One event of the grid relates to the Pager:   onPaging( pgButton )  or triggered event  jqGridPaging( event, pgButtons )  This event fires after click on [page button] and before populating the data. Also works when the user enters a new page number in the page input box (and presses [Enter]) and when the number of requested records is changed via the select box. To this event we pass only one parameter pgButton (string) which can be -  first,last,prev,next  in case of button click,  records  in case when a number of requested rows is changed and  user  when the user change the number of the requested page. If the string 'stop' is returned from the function then the paging will be stopped.", 
            "title": "Events"
        }, 
        {
            "location": "/user-guide/navigating/#navigator", 
            "text": "The Navigator is a user interface feature that allows easy accessibility to record actions such as Find or Edit. The user can activate a grid action by pressing the appropriate icon button in the Navigation layer.  Developers can create custom actions, or they can use any of the predefined actions that come with jqGrid. jqGrid provides icon button graphics for the predefined actions.  We have two types of navigators - navigator with  Form Edit  actions, named  navGrid  and navigator with  Inline Edit  actions named inlineNav.", 
            "title": "Navigator"
        }, 
        {
            "location": "/user-guide/navigating/#form-edit-navigator", 
            "text": "(navGrd)  This is method which places a predefined actions in the pager bar.", 
            "title": "Form Edit Navigator"
        }, 
        {
            "location": "/user-guide/navigating/#definition_1", 
            "text": "The full set of predefined actions in this navigator are:  1) Add New Row, 2) Edit Selected Row, 3) View Selected Row, 4) Delete Selected Row, 5) Find Records, and 6) Reload Grid  The image below shows these six buttons in the bottom-left.   The Navigator is a jqGrid method. It's activated and configured by extending the main grid function, as shown in the code examples below. The full list of all possible configurable parameters is listed in the table below.  The built-in Navigator should be applied to the pager element. In other words, the pager element should be defined. The built-in Navigator actions correspond to the form editing actions. For more information and details refer to  Form Editing .  HTML definition  ... body \n...\n   table   id = list / table \n   div   id = gridpager / div \n... / body   JavaScript code  script  ...  jQuery ( #grid_id ). jqGrid ({  ... \n   pager   :   #gridpager ,  ...  });  jQuery ( #grid_id ). jqGrid ( navGrid , #gridpager ,{ parameters }, prmEdit ,   prmAdd ,   prmDel ,   prmSearch ,   prmView );  ...  /script   or in chained mode  script  ...  jQuery ( #grid_id ). jqGrid ({  ... \n   pager   :   #gridpager ,  ...  }). jqGrid ( navGrid , #gridpager ,{ parameters },   prmEdit ,   prmAdd ,   prmDel ,   prmSearch ,   prmView );  ...  /script   Where:   grid_id - the id of the already constructed jqGrid.  gridpager - the id of the navigation bar  parameters - an array of settings, defined below  prmEdit, prmAdd, prmDel, prmSearch, prmView are objects which holds the parameters and events for a particular action in Form editing  prmEdit - these are the options for form  editing dialog  prmAdd - these are the options for form  addinig dialog  prmDel - these are the options for form  deleting dialog  prmSearch - these are the options for form  single searching   and  advanced serching  dialogs  prmView - these are the options for form  view dialog     Additionally to every particular module defined with prmEdit, prmAdd, prmDel, prmSearch, prmView a id parameter can be passed in order to identify the id of the button in the Navigator. If this id is not defined we use the combination of a prefix and the grid id. See below.  If the id of the button is not set we use the following rule: \nFor the add button we use \u201cadd_\u201d + the id of the grid \nFor the edit button we use \u201cedit_\u201d + the id of the grid \nFor the delete button we use \u201cdel_\u201d + the id of the grid \nFor the view button we use \u201cview_\u201d + the id of the grid \nFor the search button we use \u201csearch_\u201d + the id of the grid \nFor the refresh button we use \u201crefresh_\u201d + the id of the grid  The code below defines a edit button with id myedit.  script  ...  jQuery ( #grid_id ). jqGrid ({  ... \n   pager   :   #gridpager ,  ...  }). jqGrid ( navGrid , #gridpager ,{},   { id : myedit });  ...  /script   The button and action can be disabled when a certain class is added for it. This class is defined in the common styleUI module with the name  disabled :  styleUI   :   { \n   jQueryUI   :   { \n     common   :   { \n       disabled :   ui-state-disabled , \n       ... \n     } \n   } \n   ...  }   for Bootstrap  Bootstrap   :   { \n   common   :   { \n     disabled :   ui-disabled , \n   }  }   To make this cross CSS usable add the two classes at once. If the button has a id = myedit as of the example above use this code to disable it dynamically:  ...  $ ( #myedit ,   #gridpager ). addClass ( ui-state-disabled  ui-disabled );", 
            "title": "Definition"
        }, 
        {
            "location": "/user-guide/navigating/#parameters", 
            "text": "When we use the Navigator the following options are included from the language file.  $ . jgrid . regional [ en ]   =   { \n   ... \n     search   :   { \n     ... \n     }, \n     edit   :   { \n     ... \n     }, \n     view   :   { \n     ... \n     }, \n     del   :   { \n     ... \n     }, \n     nav   :   { \n         edittext :   , \n         edittitle :   Edit selected row , \n         addtext : , \n         addtitle :   Add new row , \n         deltext :   , \n         deltitle :   Delete selected row , \n         searchtext :   , \n         searchtitle :   Find records , \n         refreshtext :   , \n         refreshtitle :   Reload Grid , \n         alertcap :   Warning , \n         alerttext :   Please, select row , \n         viewtext :   , \n         viewtitle :   View selected row , \n         savetext :   , \n         savetitle :   Save row , \n         canceltext :   , \n         canceltitle   :   Cancel row editing , \n         selectcaption   :   Actions... \n     },  ...  }   If you want to change the text that appears when a user hovers over a button, simply replace the text in the title string in the bottom part of the code below. For example: hover text for the view button is supplied by viewtitle: \"View selected row\"  For the particular options regarding the editing methods refer to  Form Editing  The full list of parameters is listed below.     Property  Type  Description  Default      add  boolean  Enables or disables the add action in the Navigator. When the button is clicked a editGridRow with parameter 'new' is executed  true    addicon  string  Set a icon to be displayed if the add action is enabled. The default icon is get from styleUI object  - see navigator property  css def    addtext  string  The text than can be set in the add button  empty    addtitle  string  The title that appear when we mouse over to the add button (if enabled)  see lang file    afterRefresh  function  If defined this event fire after the refresh button is clicked. No parameters  null    alertcap  string  The header of the message that appear when we try to edit,delete or view  a row without to select it  see lang file    alerttext  string  The message text that appear when we try to edit,delete or view  a row without to select it  see lang file    alertwidth  number  The width in pixel of the alert window  200    alertheight  mixed  The height in pixel or % of the alert windows  auto    alerttop  integer  Top position of aler window  null    alertleft  integer  Left position of the alert window  null    alertzIndex  integer  zIndex of the alert window  null    beforeRefresh  function  If defined this event fire before the refresh button is clicked  null    cloneToTop  boolean  Clones all the actions from the bottom pager to the top pager if defined. Note that the navGrid can be applied to the top pager only. The id of the top pager is a combination of grid id and \"_toppager\". This action does not clone the custom added buttons.  false    closeOnEscape  boolean  Determine if the alert dialog can be closed if the user pres ESC key  true    del  boolean  Enables or disables the delete action in the Navigator. When the button is clicked a delGridRow method is executed.  true    delicon  string  Set a icon to be displayed if the delete action is enabled. The default icon is get from styleUI object  - see navigator property  css def    deltext  string  The text than can be set in the delete button  empty    deltitle  string  The title that appear when we mouse over to the delete button (if enabled)  see lang file    dropmenu  boolean  If set to true convert the navigator buttons from the pager to popup menu with a button defined in navButtonText parameter. Use this feature in case if there is not enough space to have all the needed buttons on the pager.  false    edit  boolean  Enables or disables the edit action in the Navigator. When the button is clicked a editGridRow method is executed with parameter the - current selected row  true    editicon  string  Set a icon to be displayed if the edit action is enabled. The default icon is get from styleUI object  - see navigator property  css def    edittext  string  The text than can be set in the edit button  empty    edittitle  string  The title that appear when we mouse over to the edit button (if enabled)  see ang file    navButton  text  The text of the button when dropmenu is set to true. The parameter from language file is  selectcaption.  See lang file    position  string  Determines the position of the Navigator buttons in the pager. Can be left, center and right.  left    refresh  boolean  Enables or disables the refresh button in the pager. When the button is clicked a trigger(\"reloadGrid\") is executed and the search parameters are cleared  true    refreshicon  string  Set a icon to be displayed if the refresh action is enabled. The default icon is get from styleUI object  - see navigator property  css def    refreshtext  string  The text than can be set in the refresh button  see lang file    refreshtitle  string  The title that appear when we mouse over to the refresh button (if enabled)  see lang file    refreshstate  string  Determines how the grid should be reloaded  firstpage  - the grid reload the data from the  first page.  current  - the reloading should save the current page and current selection  firstpage    search  boolean  Enables or disables the search button in the pager.When the button is clicked a searchGrid method is executed  true    searchicon  string  Set a icon to be displayed if the search action is enabled. The default icon is get from styleUI object  - see navigator property  css def    searchtext  string  The text than can be set in the search button  empty    searchtitle  string  The title that appear when we mouse over to the search button (if enabled)  see lang file    view  boolean  Enables or disables the view button in the pager. When the button is clicked a viewGridRow method is executed  false    viewicon  string  Set a icon to be displayed if the search action is enabled. The default icon is get from styleUI object  - see navigator property  css def    viewtext  string  The text that can be set in the view button  empty    viewtitle  string  The title that appear when we mouse over to the view button (if enabled)  see lang file    addfunc  function  If defined replaces the build in add function. No parameters are passed to this function  null    editfunc  function  If defined replaces the build in edit function. Parameter passed to this function is the id of the edited row  null    delfunc  function  If defined replaces the build in del function. Parameter passed to this function is the id of the edited row  null    searchfunc  function  If defined replaces the default search function in navigator. Parameter passed to the function is the object with the search parameter.  null    viewfunc  function  If defined replaces the build in view function. Parameter passed to this function is the id of the edited row  null", 
            "title": "Parameters"
        }, 
        {
            "location": "/user-guide/navigating/#more-options", 
            "text": "In some cases we need to have easy access to the navigator options and parameters of the editing. To do so we have created a grid option (note that this is a grid and not navigator option) called  storeNavOptions   see options  This is a boolean option and if set to true when the navigator is created it stores the navigator, editing and search options in the following  grid options :   navOptions - object where all the navigator objects are stored as grid option.  editOptions  - object where all the edit parameters passed in navigator are stored as grid option.  addOptions  - object where all the add parameters passed in navigator are stored as grid option.  delOptions  - object where all the delete parameters passed in navigator are stored as grid option.  viewOptions  - object where all the view parameters passed in navigator are stored as grid option.  searchOptions  - object where all the search parameters passed in navigator are stored as grid option.  navButtons  - array where all the custom buttons created with navButtonAdd are stored as grid option   The primary goal of creating this option is caused of creating the methods for saving/restoring the  grid state  -  $.jgrid.saveState  and  $.jgrid.loadState  where we have access only to the grid options. We do not store these options automatically because of saving memory.", 
            "title": "More options"
        }, 
        {
            "location": "/user-guide/navigating/#inline-edit-navigator", 
            "text": "(inlineNav)", 
            "title": "Inline Edit Navigator"
        }, 
        {
            "location": "/user-guide/navigating/#definition_2", 
            "text": "The inline navigator is similar to the  form navigator  except that a inline editing actions are used.  The full set of predefined actions in this navigator are:  1) Add New Row, 2) Edit Selected Row, 3) Save the Selected Row 4) Cancel saving the row  The image below shows these four buttons in the bottom-left.   The inline navigator require  navGrid  method to be called. If the method is not called it is called automatically from inline navigator method with all enabling options set to false.  Actually the inline edit navigator uses navButtonAdd method (see below) to define inline editing actions.  HTML definition  ... body \n...\n   table   id = list / table \n   div   id = gridpager / div \n... / body   JavaScript code  script  ...  jQuery ( #grid_id ). jqGrid ({  ... \n   pager   :   #gridpager ,  ...  });  jQuery ( #grid_id ). jqGrid ( inlineNav , #gridpager ,{ parameters });  ...  /script   or in chained mode  script  ...  jQuery ( #grid_id ). jqGrid ({  ... \n   pager   :   #gridpager ,  ...  }). jqGrid ( inlineNav , #gridpager ,{ parameters });  ...  /script   Where:   grid_id - the id of the already constructed jqGrid.  gridpager - the id of the navigation bar  parameters - object containing all the definitions for the inline actions.   Additionally to every action button a id parameter is set. The unique id for every button is build as follow:  For the add button  grid id  + '_iladd' \nFor the edit button grid id  + '_iledit' \nFor the save button grid id  + '_ilsave' \nFor the cancel button grid id  + '_ilcancel'  When the  inlineNav   method is called we store the parameters of method using the jQuery  $.data  function. The name of the data is the same as method. So after calling inlineNav method it is possible to get all the parameters:  var   navparams   =   $ ( #grid_id ). data ( inlineNav );   The following options from language file are used when this method is called (English version):  $ . jgrid . regional [ en ]   =   { \n   ... \n     nav   :   { \n         edittext :   , \n         edittitle :   Edit selected row , \n         addtext : , \n         addtitle :   Add new row , \n         deltext :   , \n         deltitle :   Delete selected row , \n         searchtext :   , \n         searchtitle :   Find records , \n         refreshtext :   , \n         refreshtitle :   Reload Grid , \n         alertcap :   Warning , \n         alerttext :   Please, select row , \n         viewtext :   , \n         viewtitle :   View selected row , \n         savetext :   , \n         savetitle :   Save row , \n         canceltext :   , \n         canceltitle   :   Cancel row editing , \n         selectcaption   :   Actions... \n     },  ...  }", 
            "title": "Definition"
        }, 
        {
            "location": "/user-guide/navigating/#parameters-inlinenav", 
            "text": "The full list of parameters is listed below.     Property  Type  Description  Default      add  boolean  Enables or disables the add action in the Navigator. When the button is clicked a addRow method with parameters addParams is executed  true    addicon  string  Set a icon to be displayed if the add action is enabled. The default icon is get from styleUI object - see navigator property  css def    addtext  string  The text than can be set in the add button  empty    addtitle  string  The title that appear when we mouse over to the add button (if enabled)  see lang file    addParams  object  Object containing the parameters when a row is added. For a full list of these options refer to  Inline addRow method  empty    cancel  boolean  Enables or disables the cancel button in navigator. When button is clicked  the current edited row is restored to its initial state  true    cancelicon  string  Set a icon to be displayed if the cancel action is enabled. The default icon is get from styleUI object - see navigator property  css def    canceltext  string  The text than can be set in the cancel button  empty    canceltitle  string  The title that appear when we mouse over to the cancel button (if enabled)  see lang file    edit  boolean  Enables or disables the edit action in the Navigator. When the button is clicked a editRow method is executed with parameter editParams object and the id of current selected row  true    editicon  string  Set a icon to be displayed if the edit action is enabled. The default icon is get from styleUI object  - see navigator property  css def    edittext  string  The text than can be set in the edit button  empty    edittitle  string  The title that appear when we mouse over to the edit button (if enabled)  see ang file    editParams  object  Object containing the parameters when a row is edited. For a full list of these options refer to  Inline editRow method  empty    restoreAfterSelect  boolean  true means that when editing one row and select another the first edited row is restored to its initial state instead of changed values. See option saveAfterSelect.  true    save  boolean  Enables or disables the save button in the navigator. When the button is clicked all the changes in the current edited fields are stored.  true    saveAfterSelect  boolean  true means that when editing one row and select another the first edited row is saved with the new changes.  false    saveicon  string  Set a icon to be displayed if the save action is enabled. The default icon is get from styleUI object - see navigator property  css def    savetext  string  The text than can be set in the save button  see lang file    savetitle  string  The title that appear when we mouse over to the save button (if enabled)  see lang file", 
            "title": "Parameters inlineNav"
        }, 
        {
            "location": "/user-guide/navigating/#custom-buttons", 
            "text": "Custom Buttons are a way to define your own button and action in the pager. In order to create a custom buttons a  navGrid  method first needs to be called.", 
            "title": "Custom buttons"
        }, 
        {
            "location": "/user-guide/navigating/#definition_3", 
            "text": "Calling Convention:  script  ...  jQuery ( #grid_id ). jqGrid ( navGrid , #pager ,...). jqGrid ( navButtonAdd , #pager ,{ parameters });  ...  /script   The default parameters are  { \n   caption : NewButton , \n   buttonicon : ui-icon-newwin , \n   onClickButton : null , \n   position :   last , \n   title : , \n   id   :   , \n   cursor :   pointer  }   where   caption: (string) the caption of the button, can be a empty string.  buttonicon: (string) is the ui icon name from UI theme icon set. If this option is set to \u201cnone\u201d only the text appear.  onClickButton: (function) action to be performed when a button is clicked. Default null.  position: (\u201cfirst\u201d or \u201clast\u201d) the position where the button will be added (i.e., before or after the standard buttons).  title: (string) a tool-tip for the button.  cursor : string (default pointer) determines the cursor when we mouse-over the element  id : string (optional) - if set defines the id of the button (actually the id of TD element) for future manipulation   Multiple buttons can be added by continuing the chain.", 
            "title": "Definition"
        }, 
        {
            "location": "/user-guide/navigating/#separator", 
            "text": "It is possible to group some action adding separator. This can be done using the  navSeparatorAdd  method  Syntax:  script  ...  jQuery ( #grid_id ). jqGrid ( navGrid , #pager ,...)  . jqGrid ( navButtonAdd , #pager ,{ parameters })  . jqGrid ( navSeparatorAdd , #pager ,{ separator_parameters });  ...  /script   The default separator_parameters are  { \n   sepclass   :   ui-separator , \n   sepcontent :    }   Where:   sepclass represent the separator class defined in ui-jqgrid. You can customize your own class  sepcontent the content that can be put in the separator element", 
            "title": "Separator"
        }, 
        {
            "location": "/user-guide/formatters/", 
            "text": "Formatters\n\n\n\n\nFormatter supports advanced formatting of the contents of cells in form, in-line and cell editing.\n\nFormatter can be used in either of two ways: Predefined and Custom.\n\n\nPredefined Formatters\n\n\nThe formatter are defined in separate module named jquery.fmatter.js. The module is included in the entire \njquery.jqGrid.js\n file and can be omitted if a custom download is used.\n\n\nLanguage options\n\n\nDefault language formatting options are defined in the language files e.g., grid.locale-xx (where xx is the two character code for your preferred language).\n\n\nThat means that the formatter options are loaded when the grid javascript files are loaded.\n\n\n\n\nNote\n\n\nThe default formatter options are different for each language file.\n\n\n\n\nHere are the default formatter options for the English file:\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \n...\n\n  \nformatter\n \n:\n \n{\n\n        \ninteger\n \n:\n \n{\nthousandsSeparator\n:\n \n,\n,\n \ndefaultValue\n:\n \n0\n},\n\n        \nnumber\n \n:\n \n{\ndecimalSeparator\n:\n.\n,\n \nthousandsSeparator\n:\n \n,\n,\n \ndecimalPlaces\n:\n \n2\n,\n \ndefaultValue\n:\n \n0.00\n},\n\n        \ncurrency\n \n:\n \n{\ndecimalSeparator\n:\n.\n,\n \nthousandsSeparator\n:\n \n,\n,\n \ndecimalPlaces\n:\n \n2\n,\n \nprefix\n:\n \n,\n \nsuffix\n:\n,\n \ndefaultValue\n:\n \n0.00\n},\n\n        \ndate\n \n:\n \n{\n\n            \ndayNames\n:\n   \n[\n\n                \nSun\n,\n \nMon\n,\n \nTue\n,\n \nWed\n,\n \nThr\n,\n \nFri\n,\n \nSat\n,\n\n                \nSunday\n,\n \nMonday\n,\n \nTuesday\n,\n \nWednesday\n,\n \nThursday\n,\n \nFriday\n,\n \nSaturday\n\n            \n],\n\n            \nmonthNames\n:\n \n[\n\n                \nJan\n,\n \nFeb\n,\n \nMar\n,\n \nApr\n,\n \nMay\n,\n \nJun\n,\n \nJul\n,\n \nAug\n,\n \nSep\n,\n \nOct\n,\n \nNov\n,\n \nDec\n,\n\n                \nJanuary\n,\n \nFebruary\n,\n \nMarch\n,\n \nApril\n,\n \nMay\n,\n \nJune\n,\n \nJuly\n,\n \nAugust\n,\n \nSeptember\n,\n \nOctober\n,\n \nNovember\n,\n \nDecember\n\n            \n],\n\n            \nAmPm\n \n:\n \n[\nam\n,\npm\n,\nAM\n,\nPM\n],\n\n            \nS\n:\n \nfunction\n \n(\nj\n)\n \n{\nreturn\n \nj\n \n \n11\n \n||\n \nj\n \n \n13\n \n?\n \n[\nst\n,\n \nnd\n,\n \nrd\n,\n \nth\n][\nMath\n.\nmin\n((\nj\n \n-\n \n1\n)\n \n%\n \n10\n,\n \n3\n)]\n \n:\n \nth\n;},\n\n            \nsrcformat\n:\n \nY-m-d\n,\n\n            \nnewformat\n:\n \nn/j/Y\n,\n\n            \nparseRe\n \n:\n \n/[#%\\\\\\/:_;.,\\t\\s-]/\n,\n\n            \nmasks\n \n:\n \n{\n\n                \n// see http://php.net/manual/en/function.date.php for PHP format used in jqGrid\n\n                \n// and see http://docs.jquery.com/UI/Datepicker/formatDate\n\n                \n// and https://github.com/jquery/globalize#dates for alternative formats used frequently\n\n                \n// one can find on https://github.com/jquery/globalize/tree/master/lib/cultures many\n\n                \n// information about date, time, numbers and currency formats used in different countries\n\n                \n// one should just convert the information in PHP format\n\n                \nISO8601Long\n:\nY-m-d H:i:s\n,\n\n                \nISO8601Short\n:\nY-m-d\n,\n\n                \n// short date:\n\n                \n//    n - Numeric representation of a month, without leading zeros\n\n                \n//    j - Day of the month without leading zeros\n\n                \n//    Y - A full numeric representation of a year, 4 digits\n\n                \n// example: 3/1/2012 which means 1 March 2012\n\n                \nShortDate\n:\n \nn/j/Y\n,\n \n// in jQuery UI Datepicker: \nM/d/yyyy\n\n                \n// long date:\n\n                \n//    l - A full textual representation of the day of the week\n\n                \n//    F - A full textual representation of a month\n\n                \n//    d - Day of the month, 2 digits with leading zeros\n\n                \n//    Y - A full numeric representation of a year, 4 digits\n\n                \nLongDate\n:\n \nl, F d, Y\n,\n \n// in jQuery UI Datepicker: \ndddd, MMMM dd, yyyy\n\n                \n// long date with long time:\n\n                \n//    l - A full textual representation of the day of the week\n\n                \n//    F - A full textual representation of a month\n\n                \n//    d - Day of the month, 2 digits with leading zeros\n\n                \n//    Y - A full numeric representation of a year, 4 digits\n\n                \n//    g - 12-hour format of an hour without leading zeros\n\n                \n//    i - Minutes with leading zeros\n\n                \n//    s - Seconds, with leading zeros\n\n                \n//    A - Uppercase Ante meridiem and Post meridiem (AM or PM)\n\n                \nFullDateTime\n:\n \nl, F d, Y g:i:s A\n,\n \n// in jQuery UI Datepicker: \ndddd, MMMM dd, yyyy h:mm:ss tt\n\n                \n// month day:\n\n                \n//    F - A full textual representation of a month\n\n                \n//    d - Day of the month, 2 digits with leading zeros\n\n                \nMonthDay\n:\n \nF d\n,\n \n// in jQuery UI Datepicker: \nMMMM dd\n\n                \n// short time (without seconds)\n\n                \n//    g - 12-hour format of an hour without leading zeros\n\n                \n//    i - Minutes with leading zeros\n\n                \n//    A - Uppercase Ante meridiem and Post meridiem (AM or PM)\n\n                \nShortTime\n:\n \ng:i A\n,\n \n// in jQuery UI Datepicker: \nh:mm tt\n\n                \n// long time (with seconds)\n\n                \n//    g - 12-hour format of an hour without leading zeros\n\n                \n//    i - Minutes with leading zeros\n\n                \n//    s - Seconds, with leading zeros\n\n                \n//    A - Uppercase Ante meridiem and Post meridiem (AM or PM)\n\n                \nLongTime\n:\n \ng:i:s A\n,\n \n// in jQuery UI Datepicker: \nh:mm:ss tt\n\n                \nSortableDateTime\n:\n \nY-m-d\\\\TH:i:s\n,\n\n                \nUniversalSortableDateTime\n:\n \nY-m-d H:i:sO\n,\n\n                \n// month with year\n\n                \n//    Y - A full numeric representation of a year, 4 digits\n\n                \n//    F - A full textual representation of a month\n\n                \nYearMonth\n:\n \nF, Y\n \n// in jQuery UI Datepicker: \nMMMM, yyyy\n\n            \n},\n\n            \nreformatAfterEdit\n \n:\n \nfalse\n,\n\n            \nuserLocalTime\n \n:\n \nfalse\n\n        \n},\n\n        \nbaseLinkUrl\n:\n \n,\n\n        \nshowAction\n:\n \n,\n\n        \ntarget\n:\n \n,\n\n        \ncheckbox\n \n:\n \n{\ndisabled\n:\ntrue\n},\n\n        \nidName\n \n:\n \nid\n\n    \n},\n\n\n...\n\n\n}\n\n\n\n\n\n\nHere you will find all the settings that you may want to review or change before using the predefined formats. These settings can also be overridden for specific columns using the formatoptions parameter in the colModel.\n\n\nThe second step is to set the desired formatting in colModel. This is done using the option formatter. For example.\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n  \ncolModel\n \n:\n \n[\n\n  \n...\n\n     \n{\nname\n:\nmyname\n,\n \n...\n \nformatter\n:\nnumber\n,\n \n...},\n\n  \n...\n\n  \n],\n\n\n...\n\n\n});\n\n\n\n\n\n\nThe example above will format the contents of the 'myname' column according to the rules set for 'number' in the active language file. For example, if the source value is \"1234.1\", then the value that actually will be put in the grid will be \"1 234.10\" using the options above.\n\n\nColumn Specific Options\n\n\nFormatter options can be defined for particular columns, overwriting the defaults from the language file. This is accomplished by using the formatoptions options in colModel. For example:\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n \n:\n \n[\n\n   \n...\n\n      \n{\nname\n:\nmyname\n,\n \n...\n \nformatter\n:\ncurrency\n,\n \nformatoptions\n:\n{\ndecimalSeparator\n:\n.\n,\n \nthousandsSeparator\n:\n \n,\n,\n \ndecimalPlaces\n:\n \n2\n,\n \nprefix\n:\n \n$ \n}\n \n}\n \n,\n\n   \n...\n\n   \n],\n\n\n...\n\n\n});\n\n\n\n\n\n\nThis definition will overwrite the default one from the language file. In formatoptions should be placed values appropriate for the particular format type.\n\n\nPredefined Format Types\n\n\nBelow is a list of the predefined format types\n\n\n\n\nNote\n\n\nAll predefined types are compatible with the editing modules. This means that the numbers, links, e-mails, etc., are converted so that they can be edited correctly.\n\n\n\n\ninteger\n\n\nFormat a integer number according to the following formatoptions properties:\n\n(The default values of these are set in the language file used)\n\n\n\n\nthousandsSeparator\n - determines the separator for the thousands.\n\n\ndefaultValue\n set the default value if the source data is empty.\n\n\n\n\nExample:\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n \n:\n \n[\n\n   \n...\n\n      \n{\nname\n:\nmyname\n,\n \n...\n \nformatter\n:\ninteger\n,\n \nformatoptions\n:\n{\nthousandsSeparator\n:\n \n \n,\n \ndeaultValue\n:\n \n0\n}\n \n}\n \n,\n\n   \n...\n\n   \n],\n\n\n...\n\n\n});\n\n\n\n\n\n\nThe following code will format the number to:\n\n\n1234\n =\n \n1 234\n\n\n \n    =\n \n0\n\n\n123\n  =\n \n123\n\n\n\n\n\n\nIn case the expected number is not a integer, but number with decimal places -  \ndecimalPlaces\n property should be set to 0 in case to convert to integer, like the following code:\n\n\n...\n\n\ncolModel\n \n:\n \n[\n\n\n...\n\n   \n{\nname\n:\nmyname\n,\n \n...\n \nformatter\n:\ninteger\n,\n \nformatoptions\n:\n{\nthousandsSeparator\n:\n \n \n,\n \ndeaultValue\n:\n \n0\n,\n \ndecimalPlaces\n \n:\n \n0\n}\n \n}\n \n,\n\n\n...\n\n\n],\n\n\n...\n\n\n\n\n\n\n1234.12\n =\n \n1 234\n\n\n \n       =\n \n0\n\n\n123.65\n  =\n \n124\n\n\n\n\n\n\nnumber\n\n\nFormat a number according to the following formatoptions properties:\n\n(The default values of these are set in the language file used)\n\n\n\n\nthousandsSeparator\n - determines the separator for the thousands.\n\n\ndecimalSeparator\n determines the separator for the decimals.\n\n\ndecimalPlaces\n determine how many decimal places we should have for the number\n\n\ndefaultValue\n set the default value if the source data is empty.\n\n\n\n\nExample:\n\n\n...\n\n\ncolModel\n \n:\n \n[\n\n\n...\n\n   \n{\n \nname\n:\nmyname\n,\n \n...,\n\n    \nformatter\n:\nnumber\n,\n\n    \nformatoptions\n:\n{\n\n      \nthousandsSeparator\n:\n \n \n,\n\n      \ndecimalSeparator\n:\n \n.\n,\n\n      \ndecimalPlaces\n \n:\n \n1\n,\n\n      \ndeaultValue\n:\n \n0.0\n\n    \n}\n\n  \n}\n \n,\n\n\n...\n\n\n],\n\n\n...\n\n\n\n\n\n\n1234.12\n  =\n \n1 234.1\n\n\n \n       =\n \n0.0\n\n\n123.65\n  =\n \n124.7\n\n\n\n\n\n\ncurrency\n\n\nFormat a number to currency according to the following formatoptions properties:\n\n(The default values of these are set in the language file used)\n\n\n\n\nthousandsSeparator\n - determines the separator for the thousands.\n\n\ndecimalSeparator\n determines the separator for the decimals.\n\n\ndecimalPlaces\n determine how many decimal places we should have for the number\n\n\nprefix\n - string to be inserted before the number\n\n\nsuffix\n - string inserted at end of the number\n\n\ndefaultValue\n set the default value if the source data is empty.\n\n\n\n\nExample:\n\n\n...\n\n\ncolModel\n \n:\n \n[\n\n\n...\n\n   \n{\n \nname\n:\nmyname\n,\n \n...,\n\n    \nformatter\n:\ncurrency\n,\n\n    \nformatoptions\n:\n{\n\n      \nthousandsSeparator\n:\n \n,\n,\n\n      \ndecimalSeparator\n:\n \n.\n,\n\n      \ndecimalPlaces\n \n:\n \n2\n,\n\n      \nprefix\n \n:\n \n$ \n,\n\n      \nsuffix\n \n:\n \n\n      \ndeaultValue\n:\n \n$ 0.00\n\n    \n}\n\n  \n}\n \n,\n\n\n...\n\n\n],\n\n\n...\n\n\n\n\n\n\n1234.12\n =\n \n$ 1,234.12\n\n\n \n       =\n \n$ 0.00\n\n\n123.65\n  =\n \n$ 124.65\n\n\n\n\n\n\ndate\n\n\nFormat date with source format \nsrcformat\n to a new format defined with \nnewformat\n according to the following formatoptions properties:\n\n(The default values of these are set in the language file used)\n\n\n\n\nsrcformat\n is the source format - i.e. the format of the date that should be converted\n\n\nnewformat\n is the new output format.\n\n\nparseRe\n is a expression for parsing date strings.\n\n\nreformatAfterEdit\n (default false) determine if the date should be reformatted after edited - i.e after the user changes the date and save it to the grid. The reason for this is that the date has no unformat when used in editiong modules.\n\n\nuserLocalTime\n (default false) forces the local time offset to be calculated to the date when inserted into the grid. See more information below.\n\n\n\n\nThe local time offset in the date appear in jqGrid in the following situations.\n\n\n\n\nA Microsoft \ndata serialization is used\n and the response contain a date string with offset like:\n\n\"/Date(700000+0500)/\"\n\n\nThe srcformat is set to 'ISO8601Long' and the date value contain Z at end to indicate the UTC time zone\n\n\nThe option \nuserLocalTime\n is set to true and the time offset (in previous calculations) is = 0.\n\n\n\n\nThe definition of the date format uses the \nPHP date formatting\n\nIt is possible to use a set of predefined date format - see the mask options in the default date formatting set. In this case it is not needed to set a mask as option - it is needed to input the correct string defined in this property. See examples below\n\n\nExamples:\n\n\n...\n\n\ncolModel\n \n:\n \n[\n\n\n...\n\n   \n{\n \nname\n:\nmyname\n,\n \n...,\n\n    \nformatter\n:\ndate\n,\n\n    \nformatoptions\n:\n{\n\n      \nsrcformat\n:\n \nY-m-d\n,\n\n      \nnewformat\n:\n \nShortDate\n \n// we use here option mask which is = n/j/Y\n\n    \n}\n\n  \n}\n \n,\n\n\n...\n\n\n],\n\n\n...\n\n\n\n\n\n\nThe result from this is :\n\n\n2017-03-01\n = \n 3/1/2012\n\n\n\n\n\n...\n\n\ncolModel\n \n:\n \n[\n\n\n...\n\n   \n{\n \nname\n:\nmyname\n,\n \n...,\n\n    \nformatter\n:\ndate\n,\n\n    \nformatoptions\n:\n{\n\n      \nsrcformat\n:\n \nISO8601Long\n,\n\n      \nnewformat\n:\n \nm/d/Y H:i\n\n    \n}\n\n  \n}\n \n,\n\n\n...\n\n\n],\n\n\n...\n\n\n\n\n\n\nIf the current time is + 2 GMT, the result from this is :\n\n\n2017-03-01 11:19:22Z\n = \n 03/01/2012 13:19\n\n\n\n\n\nThe below example is equivalent to:\n\n\n...\n\n\ncolModel\n \n:\n \n[\n\n\n...\n\n   \n{\n \nname\n:\nmyname\n,\n \n...,\n\n    \nformatter\n:\ndate\n,\n\n    \nformatoptions\n:\n{\n\n      \nsrcformat\n:\n \nY-m-d H:i:s\n,\n\n      \nnewformat\n:\n \nm/d/Y H:i\n,\n\n      \nuserLocalTime\n \n:\n \ntrue\n\n    \n}\n\n  \n}\n \n,\n\n\n...\n\n\n],\n\n\n...\n\n\n\n\n\n\n2017-03-01 11:19:22\n = \n 03/01/2012 13:19\n\n\n\n\n\nemail\n\n\nWhen used directly is added a href with  mailto: before the  e-mail\n\n\nThe formatter does not have formatoptions properties:\n\n\nExample:\n\n\n...\n\n\ncolModel\n \n:\n \n[\n\n\n...\n\n   \n{\n \nname\n:\nmyname\n,\n \n...,\n \nformatter\n:\nemail\n\n  \n}\n \n,\n\n\n...\n\n\n],\n\n\n...\n\n\n\n\n\n\njohn.smith@yahoo.com =\n \na\n \nhref=\nmailto:john.smith@yahoo.com\njohn.smith@yahoo.com\n/a\n\n\n\n\n\n\nlink\n\n\nConvert a url to a href tag with the following formatoptions:\n\n\n\n\ntarget\n - The target attribute specifies where to open the linked document. The default value of the target options is empty. When this options is set, we construct a link with the target property set and the cell value put in the href tag.\n\n\n\n\nThe possible values of the target attribute can be:\n\n\n\n\n_blank   Opens the linked document in a new window or tab\n\n\n_self    Opens the linked document in the same frame as it was clicked (this is default)\n\n\n_parent  Opens the linked document in the parent frame\n\n\n_top     Opens the linked document in the full body of the window\n\n\nframename     Opens the linked document in a named frame\n\n\n\n\nExample:\n\n\n...\n\n\ncolModel\n \n:\n \n[\n\n\n...\n\n   \n{\n \nname\n:\nmyname\n,\n \n...,\n\n   \nformatter\n:\nlink\n,\n\n   \nformatoptions\n \n:\n \n{\n\n     \ntarget\n \n:\n \n_blank\n\n   \n}\n\n  \n}\n \n,\n\n\n...\n\n\n],\n\n\n...\n\n\n\n\n\n\nhttp://www.guriddo.net =\n \na\n \nhref=\nhttp://www.guriddo.net\n \ntarget=\n_blank\nhttp://www.guriddo.net\n/a\n\n\n\n\n\n\nshowLink\n\n\nThis formatter is the same as the link one, with possibility to add additinal parameters to the link. The following formatoptions properties can be used:\n\n\n\n\nbaseLinkUrl is the link used\n\n\nshowAction is an additional value which is added after the baseLinkUrl.\n\n\naddParam is an additional parameter that can be added after the idName property.\n\n\ntarget - specifies where to open the linked document\n\n\nidName is the first parameter that is added after the showAction. By default, this is id\n\n\n\n\nExample:\n\n\n...\n\n\ncolModel\n \n:\n \n[\n\n\n...\n\n   \n{\n \nname\n:\nmyname\n,\n \n...,\n\n   \nformatter\n:\nshowLink\n,\n\n   \nformatoptions\n \n:\n \n{\n\n     \nbaseLinkUrl\n \n:\n \nhttp://myserver.com/\n\n     \nshowaction\n:\n \neditrecord.php\n\n     \naddParam\n \n:\n \naction=edit\n,\n\n     \nidName\n \n:\n \nid\n,\n \n// this is default\n\n     \ntarget\n \n:\n \n_blank\n\n   \n}\n\n  \n}\n \n,\n\n\n...\n\n\n],\n\n\n...\n\n\n\n\n\n\nif the cell content is Edit Record and the row id = 10, then\n\n\nEdit Record =\n \na\n \nhref=\nhttp://myserver.com/editrecord.php?id=10\naction=edit\n \ntarget=\n_blank\nEdit Record\n/a\n\n\n\n\n\n\ncheckbox\n\n\nCreates a checkbox element. The checkbox is not checked if the source cell value is one of the following: false, f, 0, no, n, off, undefined.\n\nOnly one format option is available:\n\n\n\n\ndisabled - The default value for the disabled is true. This option determines if the checkbox can be changed. If set to false, the values in checkbox can be changed.\n\n\n\n\nExample:\n\n\n...\n\n\ncolModel\n \n:\n \n[\n\n\n...\n\n   \n{\n \nname\n:\nmyname\n,\n \n...,\n\n   \nformatter\n:\ncheckbox\n,\n\n   \nformatoptions\n \n:\n \n{\n\n     \ndisabled\n \n:\n \nfalse\n\n   \n}\n\n  \n}\n \n,\n\n\n...\n\n\n],\n\n\n...\n\n\n\n\n\n\ntrue =\n \ninput checked=\nchecked\n value=\ntrue\n offval=\nno\n type=\ncheckbox\n\n\n\n\n\n\nSpecial formatters\n\n\nWe have two special formatters type which perform useful transformations. The first one is:\n\n\nFormatter select\n\n\nThe select type is not real select. This is used when we use some editing module and have edittype:'select'. The formatter is useful if the data contain key (or code), but we want to display in the grid, the value related to this code or key.\n\n\nThe \nformatoptions\n used in this formatter are:\n\n\n\n\nvalue\n the option defines the mapping of key to the value name displayed into the grid. The parameter can be a string or object (see below)\n\n\ndelimiter\n used when the \nvalue\n options is a string and delimit the different key:value pair in the string. The default option is \";\"\n\n\nseparator\n used when the \nvalue\n options is a string and separate the key and value of the key:value pair. Default value is \":\"\n\n\n\n\n\n\nNote\n\n\nIf the \nformatoptions\n are not set we try to get the same values from \neditoptions\n  object.\n\n\n\n\nExample:\n\n\nscript\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n \n:\n \n[\n \n{\nname\n:\nmyname\n,\n \nformatter\n:\nselect\n,\n \nformatoptions\n \n:\n \n{\nvalue\n:\n1:One;2:Two\n}}\n \n...\n \n]\n\n\n...\n\n\n});\n\n\n/script\n\n\n\n\n\n\nThe source data can contain the keys (\"1\" or \"2\"), but the value (\"One\", or \"Two\") will be displayed in the grid.\n\n\nIn case of object the definition is as follow:\n\n\nscript\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n  \ncolModel\n \n:\n \n[\n\n    \n{\n\n      \nname\n:\nmyname\n,\n\n      \nformatter\n:\nselect\n,\n\n      \nformatoptions\n \n:\n \n{\n\n        \nvalue\n:\n \n{\n \n1\n:\nOne\n,\n2\n:\nTwo\n \n}\n\n      \n}\n\n    \n}\n\n    \n...\n \n]\n\n\n...\n\n\n});\n\n\n/script\n\n\n\n\n\n\nThe formatter support multiple option in editoptions which means that if this options is set a multiple values are displayed separated by comma.\n\n\nExample:\n\n\nscript\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n  \ncolModel\n \n:\n \n[\n\n    \n{\n\n      \nname\n:\nmyname\n,\n\n      \nedittype\n \n:\n \nselect\n,\n\n      \nformatter\n:\nselect\n,\n\n      \neditoptions\n \n:\n \n{\n\n        \nvalue\n:\n \n{\n \n1\n:\nOne\n,\n2\n:\nTwo\n},\n\n        \nmultiple\n \n:\n \ntrue\n\n      \n}\n\n    \n}\n\n    \n...\n \n]\n\n\n...\n\n\n});\n\n\n/script\n\n\n\n\n\n\nIf the source data contain the keys (\"1, 2\"), then  (\"One, Two\") will be displayed in the grid cell.\n\n\nThe second special formatter is:\n\n\nFormatter actions\n\n\nFormatter actions is a special feature where we prepare e function which add editable butons on every row. To do this it is needed to define additional column (usually as first or last columns ) in colModel and set it  formatter \nactions\n.\n\n\nThe following definition:\n\n\n$\n(\n#jqGrid\n).\njqGrid\n({\n\n  \n...\n\n  \ncolModel\n:\n \n[\n\n    \n{\n\n      \nlabel\n:\n \nEdit Actions\n,\n\n      \nname\n:\n \nactions\n,\n\n      \nwidth\n:\n \n100\n,\n\n      \nformatter\n:\n \nactions\n,\n\n      \nformatoptions\n:\n \n{\n\n        \nkeys\n:\n \ntrue\n,\n\n        \neditOptions\n:\n \n{},\n\n        \ndelOptions\n:\n \n{}\n\n      \n}\n       \n    \n},\n\n    \n...\n\n  \n]\n\n  \n...\n\n\n});\n\n\n\n\n\n\nwill cause this appearing\n\n\n\n\nThe formatter uses the \nnav\n property from \nlanguage file\n to get some text when hover the buttons and \ncommon\n styleUI property to get the needed icons\n\n\nThe following default parameters are used:\n\n\nformatoptions\n:\n \n{\n\n  \nkeys\n \n:\n \nfalse\n,\n\n  \neditbutton\n:\ntrue\n,\n\n  \ndelbutton\n:\ntrue\n,\n\n  \neditformbutton\n:\n \nfalse\n,\n\n  \nonEdit\n \n:\n \nnull\n,\n\n  \nonSuccess\n \n:\n \nfalse\n,\n\n  \nurl\n \n:\n \n,\n\n  \nextraparam\n \n:\n \n{},\n\n  \nafterSave\n \n:\n \nnull\n,\n\n  \nonError\n \n:\n \nnull\n,\n\n  \nafterRestore\n \n:\n \nnull\n,\n\n  \nrestoreAfterError\n:\n \nnull\n,\n\n  \nmtype\n:\n \nPOST\n,\n\n  \neditOptions\n:\n \n{},\n\n  \ndelOptions\n:\n \n{}\n\n\n}\n       \n\n\n\n\n\n\n\nNote\n\n\nIf a edit button is activated after the fields are in edit mode we automatically add two additinal buttons - save row and cancel editing. These buttons can not be disabled.\n\n\n\n\nBellow is a short description of the parameters:\n\n\n\n\nkeys - boolean variable if set to true, then when the user press ESC key the editing is restored without to be saved; when the user press Enter the editing is saved; if the current field (focused) is textarea and Enter key is pressed save is not occurred.\n\n\neditbutton - boolean enables or disables the edit button\n\n\ndelbutton - boolean enables/disables the delete button - see delOptions below\n\n\neditformbutton - boolean enables/disable the form edit form to appear instead of inline one - see editOptions below\n\n\nonEdit - fires after successfully accessing the row for editing, prior to allowing user access to the input fields. The row's id is passed as a parameter to this function.\n\n\nonSuccess - this function is called immediately after the request which save the data to the server is successful. This function is passed the data returned from the server. Depending on the data from server; this function should return true or false. Useful to notify the user if the operation is successfully or not.\n\n\nurl - url where the data should be saved, clientArray can be used for local save.\n\n\nextraparam - additional user parameters that can be added to be send to the server\n\n\nafterSave - this function is called after the data is saved to the server. Parameters passed to this function are the rowid and the response from the server request. The event is called too when the url is set to 'clientArray'.\n\n\nonError - function is called after the data is saved to the server. Parameters passed to this function are the rowid and the response from the server request and status. The event is called too when the url is set to 'clientArray'. The event is called either on ajax error or the onSuccess event return false.\n\n\nafterRestore - this function is called in after restoring the row (esc key or cancel button). To this function we pass the rowid\n\n\nmtype - the method type of posting the data(GET or POST).\n\n\neditOptions - object with valid editGridRow options in case editformbutton is set to true. See  \nform editing\n\n\ndelOptions - object with valid delGridRow options. See  \nform editing\n\n\n\n\nCustom Formatter\n\n\nIt is possible define your own formatter for a particular column. Usually this is a function. When set in the formatter option this should not be enclosed in quotes and not entered with () - show just the name of the function.For example,\n\n\nscript\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n:\n \n[\n\n      \n...\n\n      \n{\n\n        \nname\n:\nprice\n,\n\n        \nindex\n:\nprice\n,\n\n        \nformatter\n:\ncurrencyFmatter\n\n      \n},\n\n      \n...\n\n   \n]\n\n\n...\n\n\n});\n\n\n\nfunction\n \ncurrencyFmatter\n \n(\ncellvalue\n,\n \noptions\n,\n \nrowObject\n)\n\n\n{\n\n   \n// do something here\n\n   \nreturn\n \nnew_format_value\n\n\n}\n\n\n/script\n\n\n\n\n\n\nAnother possible definition is to set the function and parameters direct in formatter like this:\n\n\nscript\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n:\n \n[\n\n      \n...\n\n      \n{\n\n        \nname\n:\nprice\n,\n\n        \nindex\n:\nprice\n,\n\n        \nformatter\n:\n \nfunction\n(\ncellvalue\n,\n \noptions\n,\n \nrowObject\n)\n \n{\n\n          \n// do something here\n\n          \nreturn\n \nnew_format_value\n\n        \n}\n\n      \n},\n\n      \n...\n\n   \n]\n\n\n...\n\n\n});\n\n\n/script\n\n\n\n\n\n\nDefinition and parameters\n\n\nTo the custom formatter are passed the following parameters\n\n\nfunction\n \nmyformatter\n \n(\n \ncellvalue\n,\n \noptions\n,\n \nrowObject\n \n)\n\n\n{\n\n  \n// format the cellvalue to new format\n\n  \nreturn\n \nnew_formated_cellvalue\n;\n\n\n}\n\n\n\n\n\n\n\n\nCaution\n\n\nNote the return in the function. This function should always return a string value in order to work correctly.\n\n\n\n\n\n\ncellvalue - is the value to be formatted\n\n\noptions - is an object containing the following element \n options : { rowId: rid, colModel: cm, gid : gridId, pos : column_position, styleUI : guiStyle , isExported : boolval, exporttype : type_when_export},  where \n \nrowId\n - is the id of the row, \n \ncolModel\n is the object of the properties for this column get from colModel array of jqGrid, \n \ngid\n is the id of the grid,\n \npos\n is the position of the column in colModel,\n \nstyleUI\n is the \nstyle object\n, \n \nisExported\n is a parameter passed only when export occur allowing to make custom formatting when export is in action. The parameter in this case is true and is valid only when export to \nCSV, Excel or PDF\n, \n \nexporttype\n is a string which is available only when the isExported property is true. This indicates the type of the export - can be \ncsv, pdf or excel\n depending on the export method called.\n\n\nrowObject - is a row data represented in the format determined from datatype option. If we have datatype: xml/xmlstring - the rowObject is xml node, provided according to the rules from xmlReader. If we have datatype: json/jsonstring - the rowObject is object, provided according to the rules from jsonReader\n\n\n\n\nUnformatting\n\n\nAs mentioned in \nPredefined Formatter\n chapter all predefined types are compatible with the editing modules. This means that the numbers, links, e-mails, etc., are converted so that they can be edited correctly. The methods (like getRowData and getCell) that get data, used this unformat in order to get the original value. The question is: What to do if we use a custom formatter function and want to have the original value back if we use editing or methods getRowData and getCell?\n\n\nThe answer is: You can use your own custom unformat function to do that. This function can be used in colModel\n\n\nExample : show image and edit image's path:\n\n\nscript\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n:\n \n[\n\n      \n...\n\n      \n{\n\n        \nname\n:\nprice\n,\n\n        \nindex\n:\nprice\n,\n  \n        \neditable\n:\n \ntrue\n,\n\n        \nformatter\n:\nimageFormat\n,\n\n        \nunformat\n:\nimageUnFormat\n\n      \n},\n\n      \n...\n\n   \n]\n\n\n...\n\n\n});\n\n\n\nfunction\n \nimageFormat\n(\n \ncellvalue\n,\n \noptions\n,\n \nrowObject\n \n){\n\n    \nreturn\n \nimg src=\n+\ncellvalue\n+\n /\n;\n\n\n}\n\n\nfunction\n \nimageUnFormat\n(\n \ncellvalue\n,\n \noptions\n,\n \ncell\n){\n\n    \nreturn\n \n$\n(\nimg\n,\n \ncell\n).\nattr\n(\nsrc\n);\n\n\n}\n\n\n/script\n\n\n\n\n\n\nTo the custom unformat function are passed the following parameters:\n\n\n\n\ncellvalue - is the value to be unformated (pure text).\n\n\noptions - is an object containing the following element \n options : { rowId: rid, colModel: cm} where rowId - is the id of the row colModel is the object of the properties for this column getted from colModel array of jqGrid\n\n\ncellobject - is a jQuery cell object. This object can be used to obtain different things from the cell element - by example jQuery(cellobject).html() can be used to get the html content instead of the text.\n\n\n\n\nExample formatter\n\n\nBelow we will simulate partial currency formatter using a custom format and unformat functions\n\n\nscript\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n:\n \n[\n\n      \n...\n\n      \n{\n\n        \nname\n:\nprice\n,\n\n        \nindex\n:\nprice\n,\n\n        \neditable\n:\n \ntrue\n,\n\n        \nformatter\n:\ncurrencyFmatter\n,\n\n        \nunformat\n:\nunformatCurrency\n\n      \n},\n\n      \n...\n\n   \n]\n\n\n...\n\n\n});\n\n\n\nfunction\n \ncurrencyFmatter\n \n(\ncellvalue\n,\n \noptions\n,\n \nrowObject\n)\n\n\n{\n\n   \nreturn\n \n$\n+\ncellvalue\n;\n\n\n}\n\n\nfunction\n  \nunformatCurrency\n \n(\ncellvalue\n,\n \noptions\n)\n\n\n{\n\n   \nreturn\n \ncellvalue\n.\nreplace\n(\n$\n,\n);\n\n\n}\n\n\n/script\n\n\n\n\n\n\nIf the value that is inserted or updated in the grid is 123.00, the in the grid it will be displayed as: $123.00; When we use getRowData or getCell methods or any editing module the value for this column will be 123.00\n\n\nDefine common formatter function\n\n\nIn case certain custom formatter/unformatter is used many times in the code it is possible to define the formatter functions one time and use it into the code. The formatter module is created so that it can be easy extended from the developer and doing it so make the development process easy. Below is discussion how to make your own formatter functions to be visible all into the code.\n\n\nAfter loading the jqGrid Java Script files you can define in script tag the following (or simple create your own file and include it into the head section)\n\n\nscript\n \ntype\n=\ntext/javascript\n\n\njQuery\n.\nextend\n(\n$\n.\nfn\n.\nfmatter\n \n,\n \n{\n\n    \ncurrencyFmatter\n \n:\n \nfunction\n(\ncellvalue\n,\n \noptions\n,\n \nrowdata\n)\n \n{\n\n    \nreturn\n \n$\n+\ncellvalue\n;\n\n\n}\n\n\n});\n\n\njQuery\n.\nextend\n(\n$\n.\nfn\n.\nfmatter\n.\ncurrencyFmatter\n \n,\n \n{\n\n    \nunformat\n \n:\n \nfunction\n(\ncellvalue\n,\n \noptions\n)\n \n{\n\n    \nreturn\n \ncellvalue\n.\nreplace\n(\n$\n,\n);\n\n\n}\n\n\n});\n\n\n/script\n\n\n\n\n\n\nThe code to define the formatter is like this:\n\n\nscript\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n:\n \n[\n\n      \n...\n\n      \n{\n\n        \nname\n:\nprice\n,\n\n        \nindex\n:\nprice\n,\n\n        \neditable\n:\n \ntrue\n,\n\n        \nformatter\n:\ncurrencyFmatter\n\n      \n},\n\n      \n...\n\n   \n]\n\n\n...\n\n\n});\n\n\n...\n\n\n/script\n\n\n\n\n\n\nNote that in this case it is not needed to specify the unformat function.", 
            "title": "Formatters"
        }, 
        {
            "location": "/user-guide/formatters/#formatters", 
            "text": "Formatter supports advanced formatting of the contents of cells in form, in-line and cell editing. \nFormatter can be used in either of two ways: Predefined and Custom.", 
            "title": "Formatters"
        }, 
        {
            "location": "/user-guide/formatters/#predefined-formatters", 
            "text": "The formatter are defined in separate module named jquery.fmatter.js. The module is included in the entire  jquery.jqGrid.js  file and can be omitted if a custom download is used.", 
            "title": "Predefined Formatters"
        }, 
        {
            "location": "/user-guide/formatters/#language-options", 
            "text": "Default language formatting options are defined in the language files e.g., grid.locale-xx (where xx is the two character code for your preferred language).  That means that the formatter options are loaded when the grid javascript files are loaded.   Note  The default formatter options are different for each language file.   Here are the default formatter options for the English file:  $ . jgrid . regional [ en ]   =   { \n   ... \n   formatter   :   { \n         integer   :   { thousandsSeparator :   , ,   defaultValue :   0 }, \n         number   :   { decimalSeparator : . ,   thousandsSeparator :   , ,   decimalPlaces :   2 ,   defaultValue :   0.00 }, \n         currency   :   { decimalSeparator : . ,   thousandsSeparator :   , ,   decimalPlaces :   2 ,   prefix :   ,   suffix : ,   defaultValue :   0.00 }, \n         date   :   { \n             dayNames :     [ \n                 Sun ,   Mon ,   Tue ,   Wed ,   Thr ,   Fri ,   Sat , \n                 Sunday ,   Monday ,   Tuesday ,   Wednesday ,   Thursday ,   Friday ,   Saturday \n             ], \n             monthNames :   [ \n                 Jan ,   Feb ,   Mar ,   Apr ,   May ,   Jun ,   Jul ,   Aug ,   Sep ,   Oct ,   Nov ,   Dec , \n                 January ,   February ,   March ,   April ,   May ,   June ,   July ,   August ,   September ,   October ,   November ,   December \n             ], \n             AmPm   :   [ am , pm , AM , PM ], \n             S :   function   ( j )   { return   j     11   ||   j     13   ?   [ st ,   nd ,   rd ,   th ][ Math . min (( j   -   1 )   %   10 ,   3 )]   :   th ;}, \n             srcformat :   Y-m-d , \n             newformat :   n/j/Y , \n             parseRe   :   /[#%\\\\\\/:_;.,\\t\\s-]/ , \n             masks   :   { \n                 // see http://php.net/manual/en/function.date.php for PHP format used in jqGrid \n                 // and see http://docs.jquery.com/UI/Datepicker/formatDate \n                 // and https://github.com/jquery/globalize#dates for alternative formats used frequently \n                 // one can find on https://github.com/jquery/globalize/tree/master/lib/cultures many \n                 // information about date, time, numbers and currency formats used in different countries \n                 // one should just convert the information in PHP format \n                 ISO8601Long : Y-m-d H:i:s , \n                 ISO8601Short : Y-m-d , \n                 // short date: \n                 //    n - Numeric representation of a month, without leading zeros \n                 //    j - Day of the month without leading zeros \n                 //    Y - A full numeric representation of a year, 4 digits \n                 // example: 3/1/2012 which means 1 March 2012 \n                 ShortDate :   n/j/Y ,   // in jQuery UI Datepicker:  M/d/yyyy \n                 // long date: \n                 //    l - A full textual representation of the day of the week \n                 //    F - A full textual representation of a month \n                 //    d - Day of the month, 2 digits with leading zeros \n                 //    Y - A full numeric representation of a year, 4 digits \n                 LongDate :   l, F d, Y ,   // in jQuery UI Datepicker:  dddd, MMMM dd, yyyy \n                 // long date with long time: \n                 //    l - A full textual representation of the day of the week \n                 //    F - A full textual representation of a month \n                 //    d - Day of the month, 2 digits with leading zeros \n                 //    Y - A full numeric representation of a year, 4 digits \n                 //    g - 12-hour format of an hour without leading zeros \n                 //    i - Minutes with leading zeros \n                 //    s - Seconds, with leading zeros \n                 //    A - Uppercase Ante meridiem and Post meridiem (AM or PM) \n                 FullDateTime :   l, F d, Y g:i:s A ,   // in jQuery UI Datepicker:  dddd, MMMM dd, yyyy h:mm:ss tt \n                 // month day: \n                 //    F - A full textual representation of a month \n                 //    d - Day of the month, 2 digits with leading zeros \n                 MonthDay :   F d ,   // in jQuery UI Datepicker:  MMMM dd \n                 // short time (without seconds) \n                 //    g - 12-hour format of an hour without leading zeros \n                 //    i - Minutes with leading zeros \n                 //    A - Uppercase Ante meridiem and Post meridiem (AM or PM) \n                 ShortTime :   g:i A ,   // in jQuery UI Datepicker:  h:mm tt \n                 // long time (with seconds) \n                 //    g - 12-hour format of an hour without leading zeros \n                 //    i - Minutes with leading zeros \n                 //    s - Seconds, with leading zeros \n                 //    A - Uppercase Ante meridiem and Post meridiem (AM or PM) \n                 LongTime :   g:i:s A ,   // in jQuery UI Datepicker:  h:mm:ss tt \n                 SortableDateTime :   Y-m-d\\\\TH:i:s , \n                 UniversalSortableDateTime :   Y-m-d H:i:sO , \n                 // month with year \n                 //    Y - A full numeric representation of a year, 4 digits \n                 //    F - A full textual representation of a month \n                 YearMonth :   F, Y   // in jQuery UI Datepicker:  MMMM, yyyy \n             }, \n             reformatAfterEdit   :   false , \n             userLocalTime   :   false \n         }, \n         baseLinkUrl :   , \n         showAction :   , \n         target :   , \n         checkbox   :   { disabled : true }, \n         idName   :   id \n     },  ...  }   Here you will find all the settings that you may want to review or change before using the predefined formats. These settings can also be overridden for specific columns using the formatoptions parameter in the colModel.  The second step is to set the desired formatting in colModel. This is done using the option formatter. For example.  jQuery ( #grid_id ). jqGrid ({  ... \n   colModel   :   [ \n   ... \n      { name : myname ,   ...   formatter : number ,   ...}, \n   ... \n   ],  ...  });   The example above will format the contents of the 'myname' column according to the rules set for 'number' in the active language file. For example, if the source value is \"1234.1\", then the value that actually will be put in the grid will be \"1 234.10\" using the options above.", 
            "title": "Language options"
        }, 
        {
            "location": "/user-guide/formatters/#column-specific-options", 
            "text": "Formatter options can be defined for particular columns, overwriting the defaults from the language file. This is accomplished by using the formatoptions options in colModel. For example:  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel   :   [ \n    ... \n       { name : myname ,   ...   formatter : currency ,   formatoptions : { decimalSeparator : . ,   thousandsSeparator :   , ,   decimalPlaces :   2 ,   prefix :   $  }   }   , \n    ... \n    ],  ...  });   This definition will overwrite the default one from the language file. In formatoptions should be placed values appropriate for the particular format type.", 
            "title": "Column Specific Options"
        }, 
        {
            "location": "/user-guide/formatters/#predefined-format-types", 
            "text": "Below is a list of the predefined format types   Note  All predefined types are compatible with the editing modules. This means that the numbers, links, e-mails, etc., are converted so that they can be edited correctly.", 
            "title": "Predefined Format Types"
        }, 
        {
            "location": "/user-guide/formatters/#integer", 
            "text": "Format a integer number according to the following formatoptions properties: \n(The default values of these are set in the language file used)   thousandsSeparator  - determines the separator for the thousands.  defaultValue  set the default value if the source data is empty.   Example:  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel   :   [ \n    ... \n       { name : myname ,   ...   formatter : integer ,   formatoptions : { thousandsSeparator :     ,   deaultValue :   0 }   }   , \n    ... \n    ],  ...  });   The following code will format the number to:  1234  =   1 234        =   0  123   =   123   In case the expected number is not a integer, but number with decimal places -   decimalPlaces  property should be set to 0 in case to convert to integer, like the following code:  ...  colModel   :   [  ... \n    { name : myname ,   ...   formatter : integer ,   formatoptions : { thousandsSeparator :     ,   deaultValue :   0 ,   decimalPlaces   :   0 }   }   ,  ...  ],  ...   1234.12  =   1 234           =   0  123.65   =   124", 
            "title": "integer"
        }, 
        {
            "location": "/user-guide/formatters/#number", 
            "text": "Format a number according to the following formatoptions properties: \n(The default values of these are set in the language file used)   thousandsSeparator  - determines the separator for the thousands.  decimalSeparator  determines the separator for the decimals.  decimalPlaces  determine how many decimal places we should have for the number  defaultValue  set the default value if the source data is empty.   Example:  ...  colModel   :   [  ... \n    {   name : myname ,   ..., \n     formatter : number , \n     formatoptions : { \n       thousandsSeparator :     , \n       decimalSeparator :   . , \n       decimalPlaces   :   1 , \n       deaultValue :   0.0 \n     } \n   }   ,  ...  ],  ...   1234.12   =   1 234.1           =   0.0  123.65   =   124.7", 
            "title": "number"
        }, 
        {
            "location": "/user-guide/formatters/#currency", 
            "text": "Format a number to currency according to the following formatoptions properties: \n(The default values of these are set in the language file used)   thousandsSeparator  - determines the separator for the thousands.  decimalSeparator  determines the separator for the decimals.  decimalPlaces  determine how many decimal places we should have for the number  prefix  - string to be inserted before the number  suffix  - string inserted at end of the number  defaultValue  set the default value if the source data is empty.   Example:  ...  colModel   :   [  ... \n    {   name : myname ,   ..., \n     formatter : currency , \n     formatoptions : { \n       thousandsSeparator :   , , \n       decimalSeparator :   . , \n       decimalPlaces   :   2 , \n       prefix   :   $  , \n       suffix   :   \n       deaultValue :   $ 0.00 \n     } \n   }   ,  ...  ],  ...   1234.12  =   $ 1,234.12           =   $ 0.00  123.65   =   $ 124.65", 
            "title": "currency"
        }, 
        {
            "location": "/user-guide/formatters/#date", 
            "text": "Format date with source format  srcformat  to a new format defined with  newformat  according to the following formatoptions properties: \n(The default values of these are set in the language file used)   srcformat  is the source format - i.e. the format of the date that should be converted  newformat  is the new output format.  parseRe  is a expression for parsing date strings.  reformatAfterEdit  (default false) determine if the date should be reformatted after edited - i.e after the user changes the date and save it to the grid. The reason for this is that the date has no unformat when used in editiong modules.  userLocalTime  (default false) forces the local time offset to be calculated to the date when inserted into the grid. See more information below.   The local time offset in the date appear in jqGrid in the following situations.   A Microsoft  data serialization is used  and the response contain a date string with offset like: \n\"/Date(700000+0500)/\"  The srcformat is set to 'ISO8601Long' and the date value contain Z at end to indicate the UTC time zone  The option  userLocalTime  is set to true and the time offset (in previous calculations) is = 0.   The definition of the date format uses the  PHP date formatting \nIt is possible to use a set of predefined date format - see the mask options in the default date formatting set. In this case it is not needed to set a mask as option - it is needed to input the correct string defined in this property. See examples below  Examples:  ...  colModel   :   [  ... \n    {   name : myname ,   ..., \n     formatter : date , \n     formatoptions : { \n       srcformat :   Y-m-d , \n       newformat :   ShortDate   // we use here option mask which is = n/j/Y \n     } \n   }   ,  ...  ],  ...   The result from this is :  2017-03-01  =   3/1/2012  ...  colModel   :   [  ... \n    {   name : myname ,   ..., \n     formatter : date , \n     formatoptions : { \n       srcformat :   ISO8601Long , \n       newformat :   m/d/Y H:i \n     } \n   }   ,  ...  ],  ...   If the current time is + 2 GMT, the result from this is :  2017-03-01 11:19:22Z  =   03/01/2012 13:19  The below example is equivalent to:  ...  colModel   :   [  ... \n    {   name : myname ,   ..., \n     formatter : date , \n     formatoptions : { \n       srcformat :   Y-m-d H:i:s , \n       newformat :   m/d/Y H:i , \n       userLocalTime   :   true \n     } \n   }   ,  ...  ],  ...   2017-03-01 11:19:22  =   03/01/2012 13:19", 
            "title": "date"
        }, 
        {
            "location": "/user-guide/formatters/#email", 
            "text": "When used directly is added a href with  mailto: before the  e-mail  The formatter does not have formatoptions properties:  Example:  ...  colModel   :   [  ... \n    {   name : myname ,   ...,   formatter : email \n   }   ,  ...  ],  ...   john.smith@yahoo.com =   a   href= mailto:john.smith@yahoo.com john.smith@yahoo.com /a", 
            "title": "email"
        }, 
        {
            "location": "/user-guide/formatters/#link", 
            "text": "Convert a url to a href tag with the following formatoptions:   target  - The target attribute specifies where to open the linked document. The default value of the target options is empty. When this options is set, we construct a link with the target property set and the cell value put in the href tag.   The possible values of the target attribute can be:   _blank   Opens the linked document in a new window or tab  _self    Opens the linked document in the same frame as it was clicked (this is default)  _parent  Opens the linked document in the parent frame  _top     Opens the linked document in the full body of the window  framename     Opens the linked document in a named frame   Example:  ...  colModel   :   [  ... \n    {   name : myname ,   ..., \n    formatter : link , \n    formatoptions   :   { \n      target   :   _blank \n    } \n   }   ,  ...  ],  ...   http://www.guriddo.net =   a   href= http://www.guriddo.net   target= _blank http://www.guriddo.net /a", 
            "title": "link"
        }, 
        {
            "location": "/user-guide/formatters/#showlink", 
            "text": "This formatter is the same as the link one, with possibility to add additinal parameters to the link. The following formatoptions properties can be used:   baseLinkUrl is the link used  showAction is an additional value which is added after the baseLinkUrl.  addParam is an additional parameter that can be added after the idName property.  target - specifies where to open the linked document  idName is the first parameter that is added after the showAction. By default, this is id   Example:  ...  colModel   :   [  ... \n    {   name : myname ,   ..., \n    formatter : showLink , \n    formatoptions   :   { \n      baseLinkUrl   :   http://myserver.com/ \n      showaction :   editrecord.php \n      addParam   :   action=edit , \n      idName   :   id ,   // this is default \n      target   :   _blank \n    } \n   }   ,  ...  ],  ...   if the cell content is Edit Record and the row id = 10, then  Edit Record =   a   href= http://myserver.com/editrecord.php?id=10 action=edit   target= _blank Edit Record /a", 
            "title": "showLink"
        }, 
        {
            "location": "/user-guide/formatters/#checkbox", 
            "text": "Creates a checkbox element. The checkbox is not checked if the source cell value is one of the following: false, f, 0, no, n, off, undefined. \nOnly one format option is available:   disabled - The default value for the disabled is true. This option determines if the checkbox can be changed. If set to false, the values in checkbox can be changed.   Example:  ...  colModel   :   [  ... \n    {   name : myname ,   ..., \n    formatter : checkbox , \n    formatoptions   :   { \n      disabled   :   false \n    } \n   }   ,  ...  ],  ...   true =   input checked= checked  value= true  offval= no  type= checkbox", 
            "title": "checkbox"
        }, 
        {
            "location": "/user-guide/formatters/#special-formatters", 
            "text": "We have two special formatters type which perform useful transformations. The first one is:", 
            "title": "Special formatters"
        }, 
        {
            "location": "/user-guide/formatters/#formatter-select", 
            "text": "The select type is not real select. This is used when we use some editing module and have edittype:'select'. The formatter is useful if the data contain key (or code), but we want to display in the grid, the value related to this code or key.  The  formatoptions  used in this formatter are:   value  the option defines the mapping of key to the value name displayed into the grid. The parameter can be a string or object (see below)  delimiter  used when the  value  options is a string and delimit the different key:value pair in the string. The default option is \";\"  separator  used when the  value  options is a string and separate the key and value of the key:value pair. Default value is \":\"    Note  If the  formatoptions  are not set we try to get the same values from  editoptions   object.   Example:  script  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel   :   [   { name : myname ,   formatter : select ,   formatoptions   :   { value : 1:One;2:Two }}   ...   ]  ...  });  /script   The source data can contain the keys (\"1\" or \"2\"), but the value (\"One\", or \"Two\") will be displayed in the grid.  In case of object the definition is as follow:  script  jQuery ( #grid_id ). jqGrid ({  ... \n   colModel   :   [ \n     { \n       name : myname , \n       formatter : select , \n       formatoptions   :   { \n         value :   {   1 : One , 2 : Two   } \n       } \n     } \n     ...   ]  ...  });  /script   The formatter support multiple option in editoptions which means that if this options is set a multiple values are displayed separated by comma.  Example:  script  jQuery ( #grid_id ). jqGrid ({  ... \n   colModel   :   [ \n     { \n       name : myname , \n       edittype   :   select , \n       formatter : select , \n       editoptions   :   { \n         value :   {   1 : One , 2 : Two }, \n         multiple   :   true \n       } \n     } \n     ...   ]  ...  });  /script   If the source data contain the keys (\"1, 2\"), then  (\"One, Two\") will be displayed in the grid cell.  The second special formatter is:", 
            "title": "Formatter select"
        }, 
        {
            "location": "/user-guide/formatters/#formatter-actions", 
            "text": "Formatter actions is a special feature where we prepare e function which add editable butons on every row. To do this it is needed to define additional column (usually as first or last columns ) in colModel and set it  formatter  actions .  The following definition:  $ ( #jqGrid ). jqGrid ({ \n   ... \n   colModel :   [ \n     { \n       label :   Edit Actions , \n       name :   actions , \n       width :   100 , \n       formatter :   actions , \n       formatoptions :   { \n         keys :   true , \n         editOptions :   {}, \n         delOptions :   {} \n       }        \n     }, \n     ... \n   ] \n   ...  });   will cause this appearing   The formatter uses the  nav  property from  language file  to get some text when hover the buttons and  common  styleUI property to get the needed icons  The following default parameters are used:  formatoptions :   { \n   keys   :   false , \n   editbutton : true , \n   delbutton : true , \n   editformbutton :   false , \n   onEdit   :   null , \n   onSuccess   :   false , \n   url   :   , \n   extraparam   :   {}, \n   afterSave   :   null , \n   onError   :   null , \n   afterRestore   :   null , \n   restoreAfterError :   null , \n   mtype :   POST , \n   editOptions :   {}, \n   delOptions :   {}  }           Note  If a edit button is activated after the fields are in edit mode we automatically add two additinal buttons - save row and cancel editing. These buttons can not be disabled.   Bellow is a short description of the parameters:   keys - boolean variable if set to true, then when the user press ESC key the editing is restored without to be saved; when the user press Enter the editing is saved; if the current field (focused) is textarea and Enter key is pressed save is not occurred.  editbutton - boolean enables or disables the edit button  delbutton - boolean enables/disables the delete button - see delOptions below  editformbutton - boolean enables/disable the form edit form to appear instead of inline one - see editOptions below  onEdit - fires after successfully accessing the row for editing, prior to allowing user access to the input fields. The row's id is passed as a parameter to this function.  onSuccess - this function is called immediately after the request which save the data to the server is successful. This function is passed the data returned from the server. Depending on the data from server; this function should return true or false. Useful to notify the user if the operation is successfully or not.  url - url where the data should be saved, clientArray can be used for local save.  extraparam - additional user parameters that can be added to be send to the server  afterSave - this function is called after the data is saved to the server. Parameters passed to this function are the rowid and the response from the server request. The event is called too when the url is set to 'clientArray'.  onError - function is called after the data is saved to the server. Parameters passed to this function are the rowid and the response from the server request and status. The event is called too when the url is set to 'clientArray'. The event is called either on ajax error or the onSuccess event return false.  afterRestore - this function is called in after restoring the row (esc key or cancel button). To this function we pass the rowid  mtype - the method type of posting the data(GET or POST).  editOptions - object with valid editGridRow options in case editformbutton is set to true. See   form editing  delOptions - object with valid delGridRow options. See   form editing", 
            "title": "Formatter actions"
        }, 
        {
            "location": "/user-guide/formatters/#custom-formatter", 
            "text": "It is possible define your own formatter for a particular column. Usually this is a function. When set in the formatter option this should not be enclosed in quotes and not entered with () - show just the name of the function.For example,  script  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel :   [ \n       ... \n       { \n         name : price , \n         index : price , \n         formatter : currencyFmatter \n       }, \n       ... \n    ]  ...  });  function   currencyFmatter   ( cellvalue ,   options ,   rowObject )  { \n    // do something here \n    return   new_format_value  }  /script   Another possible definition is to set the function and parameters direct in formatter like this:  script  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel :   [ \n       ... \n       { \n         name : price , \n         index : price , \n         formatter :   function ( cellvalue ,   options ,   rowObject )   { \n           // do something here \n           return   new_format_value \n         } \n       }, \n       ... \n    ]  ...  });  /script", 
            "title": "Custom Formatter"
        }, 
        {
            "location": "/user-guide/formatters/#definition-and-parameters", 
            "text": "To the custom formatter are passed the following parameters  function   myformatter   (   cellvalue ,   options ,   rowObject   )  { \n   // format the cellvalue to new format \n   return   new_formated_cellvalue ;  }    Caution  Note the return in the function. This function should always return a string value in order to work correctly.    cellvalue - is the value to be formatted  options - is an object containing the following element   options : { rowId: rid, colModel: cm, gid : gridId, pos : column_position, styleUI : guiStyle , isExported : boolval, exporttype : type_when_export},  where    rowId  - is the id of the row,    colModel  is the object of the properties for this column get from colModel array of jqGrid,    gid  is the id of the grid,   pos  is the position of the column in colModel,   styleUI  is the  style object ,    isExported  is a parameter passed only when export occur allowing to make custom formatting when export is in action. The parameter in this case is true and is valid only when export to  CSV, Excel or PDF ,    exporttype  is a string which is available only when the isExported property is true. This indicates the type of the export - can be  csv, pdf or excel  depending on the export method called.  rowObject - is a row data represented in the format determined from datatype option. If we have datatype: xml/xmlstring - the rowObject is xml node, provided according to the rules from xmlReader. If we have datatype: json/jsonstring - the rowObject is object, provided according to the rules from jsonReader", 
            "title": "Definition and parameters"
        }, 
        {
            "location": "/user-guide/formatters/#unformatting", 
            "text": "As mentioned in  Predefined Formatter  chapter all predefined types are compatible with the editing modules. This means that the numbers, links, e-mails, etc., are converted so that they can be edited correctly. The methods (like getRowData and getCell) that get data, used this unformat in order to get the original value. The question is: What to do if we use a custom formatter function and want to have the original value back if we use editing or methods getRowData and getCell?  The answer is: You can use your own custom unformat function to do that. This function can be used in colModel  Example : show image and edit image's path:  script  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel :   [ \n       ... \n       { \n         name : price , \n         index : price ,   \n         editable :   true , \n         formatter : imageFormat , \n         unformat : imageUnFormat \n       }, \n       ... \n    ]  ...  });  function   imageFormat (   cellvalue ,   options ,   rowObject   ){ \n     return   img src= + cellvalue +  / ;  }  function   imageUnFormat (   cellvalue ,   options ,   cell ){ \n     return   $ ( img ,   cell ). attr ( src );  }  /script   To the custom unformat function are passed the following parameters:   cellvalue - is the value to be unformated (pure text).  options - is an object containing the following element   options : { rowId: rid, colModel: cm} where rowId - is the id of the row colModel is the object of the properties for this column getted from colModel array of jqGrid  cellobject - is a jQuery cell object. This object can be used to obtain different things from the cell element - by example jQuery(cellobject).html() can be used to get the html content instead of the text.", 
            "title": "Unformatting"
        }, 
        {
            "location": "/user-guide/formatters/#example-formatter", 
            "text": "Below we will simulate partial currency formatter using a custom format and unformat functions  script  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel :   [ \n       ... \n       { \n         name : price , \n         index : price , \n         editable :   true , \n         formatter : currencyFmatter , \n         unformat : unformatCurrency \n       }, \n       ... \n    ]  ...  });  function   currencyFmatter   ( cellvalue ,   options ,   rowObject )  { \n    return   $ + cellvalue ;  }  function    unformatCurrency   ( cellvalue ,   options )  { \n    return   cellvalue . replace ( $ , );  }  /script   If the value that is inserted or updated in the grid is 123.00, the in the grid it will be displayed as: $123.00; When we use getRowData or getCell methods or any editing module the value for this column will be 123.00", 
            "title": "Example formatter"
        }, 
        {
            "location": "/user-guide/formatters/#define-common-formatter-function", 
            "text": "In case certain custom formatter/unformatter is used many times in the code it is possible to define the formatter functions one time and use it into the code. The formatter module is created so that it can be easy extended from the developer and doing it so make the development process easy. Below is discussion how to make your own formatter functions to be visible all into the code.  After loading the jqGrid Java Script files you can define in script tag the following (or simple create your own file and include it into the head section)  script   type = text/javascript  jQuery . extend ( $ . fn . fmatter   ,   { \n     currencyFmatter   :   function ( cellvalue ,   options ,   rowdata )   { \n     return   $ + cellvalue ;  }  });  jQuery . extend ( $ . fn . fmatter . currencyFmatter   ,   { \n     unformat   :   function ( cellvalue ,   options )   { \n     return   cellvalue . replace ( $ , );  }  });  /script   The code to define the formatter is like this:  script  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel :   [ \n       ... \n       { \n         name : price , \n         index : price , \n         editable :   true , \n         formatter : currencyFmatter \n       }, \n       ... \n    ]  ...  });  ...  /script   Note that in this case it is not needed to specify the unformat function.", 
            "title": "Define common formatter function"
        }, 
        {
            "location": "/user-guide/searching/", 
            "text": "Searching\n\n\n\n\nSearching is a way of querying data from the server and local grid  using specified criteria.\n\n\nConfiguration\n\n\nThe columns in the grid can be used as the basis for a search form to appear above, below, or in place of, the grid.\n\n\nThere are following approaches:\n\n\n\n\ntoolbar searching\n\n\nsingle field searching\n\n\ncomplex approach involving many fields and conditions - advanced searching\n\n\nsearch on all fields (local only)\n\n\ncolumn menu search - see \nColumn menu\n\n\n\n\nThese approaches use common options from Guriddo jqGrid and so can be called only on an already-constructed grid.\n\n\nAll search methods (except column menu search) are located in the grid.filter.js module\n\n\nAll search modules uses the following definition from language file (English file).\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \n...\n\n    \nsearch\n \n:\n \n{\n\n        \ncaption\n:\n \nSearch...\n,\n\n        \nFind\n:\n \nFind\n,\n\n        \nReset\n:\n \nReset\n,\n\n        \nodata\n:\n \n[{\n \noper\n:\neq\n,\n \ntext\n:\nequal\n},\n \n{\n \noper\n:\nne\n,\n \ntext\n:\nnot equal\n},\n \n{\n \noper\n:\nlt\n,\n \ntext\n:\nless\n},{\n \noper\n:\nle\n,\n \ntext\n:\nless or equal\n},{\n \noper\n:\ngt\n,\n \ntext\n:\ngreater\n},{\n \noper\n:\nge\n,\n \ntext\n:\ngreater or equal\n},{\n \noper\n:\nbw\n,\n \ntext\n:\nbegins with\n},{\n \noper\n:\nbn\n,\n \ntext\n:\ndoes not begin with\n},{\n \noper\n:\nin\n,\n \ntext\n:\nis in\n},{\n \noper\n:\nni\n,\n \ntext\n:\nis not in\n},{\n \noper\n:\new\n,\n \ntext\n:\nends with\n},{\n \noper\n:\nen\n,\n \ntext\n:\ndoes not end with\n},{\n \noper\n:\ncn\n,\n \ntext\n:\ncontains\n},{\n \noper\n:\nnc\n,\n \ntext\n:\ndoes not contain\n},{\n \noper\n:\nnu\n,\n \ntext\n:\nis null\n},{\n \noper\n:\nnn\n,\n \ntext\n:\nis not null\n},\n \n{\noper\n:\nbt\n,\n \ntext\n:\nbetween\n}],\n\n        \ngroupOps\n:\n \n[{\n \nop\n:\n \nAND\n,\n \ntext\n:\n \nall\n \n},{\n \nop\n:\n \nOR\n,\n  \ntext\n:\n \nany\n \n}],\n\n        \noperandTitle\n \n:\n \nClick to select search operation.\n,\n\n        \nresetTitle\n \n:\n \nReset Search Value\n,\n\n        \naddsubgrup\n \n:\n \nAdd subgroup\n,\n\n        \naddrule\n \n:\n \nAdd rule\n,\n\n        \ndelgroup\n \n:\n \nDelete group\n,\n\n        \ndelrule\n \n:\n \nDelete rule\n\n    \n},\n\n\n...\n\n\n}\n\n\n\n\n\n\nThese options will be explained in the search methods.\n\n\ncolModel search options\n\n\nAs of 3.5 release Guriddo jqGrid uses a common search options that can be used on every search method. Below is a list of these options that should be set in colModel. Note that some options are not applicable for particular method. The used options on particular method will be explained in the method description\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nsearch\n\n\nboolean\n\n\nDetermines if the field can be searched.\n\n\ntrue\n\n\n\n\n\n\nstype\n\n\nstring\n\n\nDetermines the input search type of the field. Can be 'text' - also a input element with type text is created,  'select' - a select element is created and 'custom' to create a user defined search type element - see searchoptions custom_element and custom_value properties. Other search types are not supported.\n\n\ntext\n\n\n\n\n\n\nsearchoptions\n\n\nobject\n\n\nObject which contain definition, events and other properties for the searched field. \nSee below\n\n\n\n\n\n\n\n\nsearchrules\n\n\nobject\n\n\nObject which contain additional conditions for validating user input. \nSee below\n\n\n\n\n\n\n\n\nsorttype or \nsearchtype\n\n\nstring\n\n\nBoth options are equivalent, but sorttype have higher priority. When in local mode (datatype = local) this causes correct sorting and searching for the appropriate types. Possible values: \nint/integer - for sorting integer \nfloat/number/currency\n - for sorting decimal numbers \ndate\n - for sorting date (see datefmt parameter) \n \ntext* - for text sorting. \nSetting this property to allowed value in \ncolModel options\n causes single and advanced searches to construct allowed operations for that field. This is valid only if the sopt parameter is not set. Commonly we have two type settings - numeric fields and text fields. For numeric fields default settings is : ['eq', 'ne', 'lt', 'le', 'gt', 'ge', 'nu', 'nn', 'in', 'ni'], for text fields these are: ['eq', 'ne', 'bw', 'bn', 'ew', 'en', 'cn', 'nc', 'nu', 'nn', 'in', 'ni'].\n\n\ntext\n\n\n\n\n\n\n\n\nsearchoptions\n\n\nThe \nsearchoptions\n object have the following properties.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildSelect\n\n\nfunction\n\n\nThis option have sense only if the dataUrl parameter is set. In case where the server response can not build the select element as required above, you can use your on function to build the select. The function should return a string containing the select and options value(s) as described in dataUrl option. Parameter passed to this function is the server response\n\n\n\n\n\n\ncacheUrlData\n\n\nboolean\n\n\nWhen set to true prevent multiple ajax calls when search filed is build-ed via dataUrl (advanced searching). In this case the data is loaded only once. Default false.\n\n\n\n\n\n\nclearSearch\n\n\nboolean\n\n\nWhen set to false the X icon at end of search field which is responsible to clear the search data is disabled. The default value is true and is used in toolbar searching.\n\n\n\n\n\n\ncustom_element\n\n\nfunction\n\n\nThis function create user defined search element when the colModel stype options is set to 'custom'. The function should return string or jQuery object which will be used for searching. To the returned element automatically is added id and name attributes. The function can accept two parameters - value and the search options from colModel. To get or set search value refer to the custom_value function below.\n\n\n\n\n\n\ncustom_value\n\n\nfunction\n\n\nThe function is responsible to get and set value of the user defined element when a search is performed. Function has two parameters - the created element from custom_element function and the type of operation which is applied. The operation type can be 'get' or 'set'. Use get to return a value when a search button (or enter) is activated and set when search values are cleared and default should be set.\n\n\n\n\n\n\ndataEvents\n\n\narray\n\n\nList of events to apply to the data element; uses \n$(\"#id\").on(type, [data], fn)\n to bind events to data element. Should be described like this: \n \ndataEvents: [{ type: 'click', data: { i: 7 }, fn: function(e) { console.log(e.data.i); }}, { type: 'keypress', fn: function(e) { console.log('keypress'); } }\n ]\n\n\n\n\n\n\ndataInit\n\n\nfunction\n\n\nIf set this function is called only once when the element is created. To this function we pass the element object.\n \ndataInit: function(elem) {  do something  }\n \n Use this function to attach datepicker, time picker and etc. Example: \n \ndataInit : function (elem) { $(elem).datepicker(); }\n\n\n\n\n\n\ndataUrl\n\n\nstring\n\n\nThis option is valid only for the elements of type select - i.e stype:'select'. The option represent the url from where we load the select element. When this option is set the element will be filled with values from the ajax request. The data should be a valid html select element with the desired options. By example the request should contain \nselect\noption value=\"1\"\nOne\n/option\n \noption value=\"2\"\nTwo\n/option\n/select\n. This is called only once in filterToolbar method and every time in single and advanced searching.  To cache the data use cacheDataUrl option - see above. \n The ajax options when dataUrl is used can be overwriten using the grid parameter \najaxSelectOptions\n. When the ajax call is made to the server is posted a object (data parameter) which contain the searchoptions plus the \n{ id: 'dynamic_id', name : 'name_from_colModel', oper : 'search'}\n\n\n\n\n\n\ndefaultValue\n\n\nstring\n\n\nIf not empty set a default value in the search input element. The value is only set and does not perform automatic search.\n\n\n\n\n\n\ndelimiter\n\n\nstring\n\n\nUsed when the \nvalue\n option is a string and delimit the different key:value pair in the string. The default option is \";\"\n\n\n\n\n\n\nsearchhidden\n\n\nboolean\n\n\nBy default hidden elements in the grid are not search-able . In order to enable searching when the field is hidden set this option to true\n\n\n\n\n\n\nsearchOperMenu\n\n\nboolean\n\n\nAvailable only in toolbar search method. The option enable/disable the search operators menu for particular field in colModel. The option work with global searchOperator option in toolbar search method.\n\n\n\n\n\n\nsearchtitle\n\n\nstring\n\n\nThe option work only in toolbar search method when the searchOperator option is true and the searchOperMenu is true for the field. Set a title for a search operator menu for the column to be used when mouse over the element or if not set the more common operandTitle option from language file is used.\n\n\n\n\n\n\nseparator\n\n\nstring\n\n\nUsed when the \nvalue\n option is a string and separate the key and value of the key:value pair. Default value is \":\"\n\n\n\n\n\n\nsopt\n\n\narray\n\n\nThis option is used only in advanced, single and toolbar searching and determines the operation that is applied to the element. If not set all the available options will be used. When used in toolbar searching the first element is used. The available option are: \n  \n['eq', 'ne', 'lt', 'le', 'gt', 'ge', 'bw', 'bn', 'in', 'ni', 'ew', 'en', 'cn', 'nc']\n \n The corresponding texts are in language file (see \nodata\n option) and mean the following: \n \n['equal', 'not equal', 'less', 'less or equal', 'greater', 'greater or equal', 'begins with', 'does not begin with', 'is in', 'is not in', 'ends with', 'does not end with', 'contains', 'does not contain']\n \nThe elements in sopt array can be mixed in any order.\n\n\n\n\n\n\nvalue\n\n\nmixed\n\n\nThe option is used only for \nstype\n select and defines the select options in the search dialogs. When set for stype select and dataUrl option is not set, the value can be a string or object. \n If the option is a string it must contain a set of value:label pairs with the value separated from the label with a colon (:) \nseparator\n and ended with(;) \ndelimiter\n. The string should not end with a (;)- \nsearchoptions : {value : \"1:One;2:Two\" }\n. If set as object it should be defined as pair value:name - \nsearchoptions : {value : {1:'One',2:'Two'} }\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nWhen the dataUrl in searchoptions object is not used for the search type select, the definitions for the select are taken first from searchoptions value property and if this is not defined a editoptions value property is used- i.e editoptions: {value:\"1:one;2:two,\u2026\"\"}. See below how to use these options in different search methods.\n\n\n\n\nBelow is example on how to attach a jQueryUI datepicker to a date field. Before to use this example, please be a sure you have loaded the jQueryUI library, which includes datapicker module.\n\n\nscript\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n:\n \n[\n\n      \n...\n\n      \n{\n\n        \nname\n:\n \nprice\n,\n\n        \nindex\n:\n \nprice\n,\n\n        \nsearch\n:\n \ntrue\n,\n\n        \nstype\n:\n \ntext\n,\n\n        \ndatefmt\n \n:\n \nY-m-d\n\n        \nsearchoptions\n:\n \n{\n\n          \ndataInit\n:\n \ndatePick\n,\n\n          \ntitle\n:\n \nSelect Date\n}\n\n        \n},\n\n      \n...\n\n   \n]\n\n\n...\n\n\n});\n\n\ndatePick\n \n=\n \nfunction\n(\nelem\n)\n\n\n{\n\n   \njQuery\n(\nelem\n).\ndatepicker\n({\n\n     \ndateFormat\n:\n \nyy-mm-dd\n\n   \n});\n\n\n}\n\n\n/script\n\n\n\n\n\n\nTo synchronize format in jqGrid and datepicker a dateFormat option is used in datepicker. Note the difference in descriptions - Guriddo jqGrid uses PHP like date formatting, while datepicker another one.\n\n\nsearchrules\n\n\nThis option add additional properties to the search-able element and should be used in colModel. Mostly it is used to validate the user input before submitting the value(s) to the server. Syntax:\n\n\nscript\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n:\n \n[\n\n      \n...\n\n      \n{\nname\n:\nprice\n,\n \n...,\n \nsearchrules\n:\n{\nrequired\n:\ntrue\n....},\n \nsearch\n:\ntrue\n \n},\n\n      \n...\n\n   \n]\n\n\n...\n\n\n});\n\n\n/script\n\n\n\n\n\n\n\n\nWarning\n\n\nThe searchrules are used only in the searching dialog (searching and advanced searching) and not in the other search methods.\n\n\n\n\nAll error messages are located into the language file of edit.msg property. Bellow is the English part of the messages:\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n    \nedit\n \n:\n \n{\n\n        \naddCaption\n:\n \nAdd Record\n,\n\n    \n...\n\n        \nmsg\n:\n \n{\n\n            \nrequired\n:\nField is required\n,\n\n            \nnumber\n:\nPlease, enter valid number\n,\n\n            \nminValue\n:\nvalue must be greater than or equal to \n,\n\n            \nmaxValue\n:\nvalue must be less than or equal to\n,\n\n            \nemail\n:\n \nis not a valid e-mail\n,\n\n            \ninteger\n:\n \nPlease, enter valid integer value\n,\n\n            \ndate\n:\n \nPlease, enter valid date value\n,\n\n            \nurl\n:\n \nis not a valid URL. Prefix required (\nhttp://\n or \nhttps://\n)\n,\n\n            \nnodefined\n \n:\n \n is not defined!\n,\n\n            \nnovalue\n \n:\n \n return value is required!\n,\n\n            \ncustomarray\n \n:\n \nCustom function should return array!\n,\n\n            \ncustomfcheck\n \n:\n \nCustom function should be present in case of custom checking!\n\n\n        \n}\n\n    \n},\n\n\n...\n\n\n}\n\n\n\n\n\n\nThese messages can not be overwritten dynamically.\n\n\nThe \nsearchrules\n object have the following properties\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrequired\n\n\nboolean\n\n\n(true or false) if set to true, the value will be checked and if empty, an error message will be displayed.\n\n\n\n\n\n\nnumber\n\n\nboolean\n\n\n(true or false) if set to true, the value will be checked and if this is not a number, an error message will be displayed.\n\n\n\n\n\n\ninteger\n\n\nboolean\n\n\n(true or false) if set to true, the value will be checked and if this is not a integer, an error message will be displayed.\n\n\n\n\n\n\nminValue\n\n\nnumber(integer)\n\n\nif set, the value will be checked and if the value is less than this, an error message will be displayed.\n\n\n\n\n\n\nmaxValue\n\n\nnumber(integer)\n\n\nif set, the value will be checked and if the value is more than this, an error message will be displayed.\n\n\n\n\n\n\nemail\n\n\nboolean\n\n\nif set to true, the value will be checked and if this is not valid e-mail, an error message will be displayed\n\n\n\n\n\n\nurl\n\n\nboolean\n\n\nif set to true, the value will be checked and if this is not valid url, an error message will be displayed\n\n\n\n\n\n\ndate\n\n\nboolean\n\n\nif set to true a value from datefmt option is get (if not set ISO date is used) and the value will be checked and if this is not valid date, an error message will be displayed\n\n\n\n\n\n\ntime\n\n\nboolean\n\n\nif set to true, the value will be checked and if this is not valid time, an error message will be displayed. Currently we support only hh:mm format and optional am/pm at the end\n\n\n\n\n\n\ncustom\n\n\nboolean\n\n\nif set to true allow definition of the custom checking rules via a custom function. See below\n\n\n\n\n\n\ncustom_func\n\n\nfunction\n\n\nthis function should be used when a custom option is set to true. Parameters passed to this function are the value, which should be checked and the name - the property from colModel. The function should return array with the following parameters: first parameter - true or false. The value of true mean that the checking is successful false otherwise; the second parameter have sense only if the first value is false and represent the error message which will be displayed to the user. Typically this can look like this [false,\"Please enter valid value\"]\n\n\n\n\n\n\n\n\nMore about searching\n\n\n\n\nAll search modules uses the  \nurl\n parameter in grid to perform the search. In some methods there is additional separate option for the url which can be used too.\n\n\nWhen the search is performed the \npostData\n array is filled with the needed data for the search.\n\n\nThe grid parameter \nsearch\n in grid options is set to true in order to indicate the searching. Server side the name of the parameter set in postData is \n_search\n (note the difference) which can be obtained using the GET or POST data array. Use \noption prmNames\n to set another name for posting to server.\n\n\nWhen the grid is triggered using the refresh button in Navigator the search option is set to false.\n\n\nEvery search method creates its own method to clear the searched data from postData array.\n\n\nSearching is possible too if local data is used.\n\n\nWhen posting to the server or search locally, we try to pass, not the name, but the index set in colModel. When the index is not found we use the name.\n\n\nWhen datatype is local serch is performed by index set in colModel. To force search by name use \nuseNameForSearch\n grid option\n\n\n\n\nToolbar searching\n\n\nThis method construct searching creating input elements just below the header elements of the grid. When the header elements are re sized the input search elements are also re sized according to the new width.\n\nThe method uses the url option in grid to perform a search to the server and has his own one.\n\nWhen the search is activated, an object of type name:value is posted to the server. Note that this object is added to the postData parameter. Posted are fields that have an entered value. When we clear the search form, the values are deleted from the postData array. When posting to the server, we try to pass, not the name, but the index set in colModel. When the index is not found we use the name. Additionally, we add a _search=true to the posted data to the server and grid options search is set to true.\n\n\nCalling convention\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nfilterToolbar\n,\noptions\n);\n\n\n...\n\n\n\n\n\n\nWhere :\n\n\n\n\ngrid_id is the id of already constructed grid\n\n\noptions is a object containing different configuration setting. See below\n\n\n\n\nThis command will create a search elements something like this:\n\n\n\n\nThis method uses the definitions for searching from colModel. See \nConfiguration\n\n\nThe method uses the following properties from language file.\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \n...\n\n    \nsearch\n \n:\n \n{\n\n    \n...\n\n        \nodata\n:\n \n[{\n \noper\n:\neq\n,\n \ntext\n:\nequal\n},\n \n{\n \noper\n:\nne\n,\n \ntext\n:\nnot equal\n},\n \n{\n \noper\n:\nlt\n,\n \ntext\n:\nless\n},{\n \noper\n:\nle\n,\n \ntext\n:\nless or equal\n},{\n \noper\n:\ngt\n,\n \ntext\n:\ngreater\n},{\n \noper\n:\nge\n,\n \ntext\n:\ngreater or equal\n},{\n \noper\n:\nbw\n,\n \ntext\n:\nbegins with\n},{\n \noper\n:\nbn\n,\n \ntext\n:\ndoes not begin with\n},{\n \noper\n:\nin\n,\n \ntext\n:\nis in\n},{\n \noper\n:\nni\n,\n \ntext\n:\nis not in\n},{\n \noper\n:\new\n,\n \ntext\n:\nends with\n},{\n \noper\n:\nen\n,\n \ntext\n:\ndoes not end with\n},{\n \noper\n:\ncn\n,\n \ntext\n:\ncontains\n},{\n \noper\n:\nnc\n,\n \ntext\n:\ndoes not contain\n},{\n \noper\n:\nnu\n,\n \ntext\n:\nis null\n},{\n \noper\n:\nnn\n,\n \ntext\n:\nis not null\n},\n \n{\noper\n:\nbt\n,\n \ntext\n:\nbetween\n}],\n\n        \noperandTitle\n \n:\n \nClick to select search operation.\n,\n\n        \nresetTitle\n \n:\n \nReset Search Value\n,\n\n    \n...\n\n    \n},\n\n\n...\n\n\n}\n\n\n\n\n\n\nToolbar search options\n\n\nThe options in filterToolbar method are:\n\n\n\n\nNote\n\n\nAll events (Type function) in the table below has a \ntriggered event\n which can be used. The name is set below to the option event\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nafterClear\njqGridToolbarAfterClear\n\n\nfunction\n\n\nevent which fires after clearing entered values (i.e., clearToolbar activated)\n\n\nnull\n\n\n\n\n\n\nafterSearch \n jqGridToolbarAfterSearch\n\n\nfunction\n\n\nevent which fires after a search\n\n\nnull\n\n\n\n\n\n\nautosearch\n\n\nboolean\n\n\nSearch is performed according to the following rules: for text element when a Enter key is pressed (searchOnEnter is true) or while inputting values and search is performed (searchOnEnter is false). For select element when the value changes. The search parameter in grid is set to true and ajax call is made.\n\n\ntrue\n\n\n\n\n\n\nautosearchDelay\n\n\ninteger\n\n\nThe delay in milliseconds after which the search data is posted to the server in case if autosearch set to true and searchOnEnter is false\n\n\n500\n\n\n\n\n\n\nbeforeClear\njqGridToolbarBeforeClear\n\n\nfunction\n\n\nevent which fires before clearing entered values (i.e. clearToolbar is activated).It is called before clearing the data from search elements. If the event return true triggering does not occur. In this case you can construct your own search parameters and trigger the grid. The triggered event should return the string 'stop' in order not to trigger the grid. Any other return value causes triggering.\n\n\nnull\n\n\n\n\n\n\nbeforeSearch\njqGridToolbarBeforeSearch\n\n\nfunction\n\n\nevent which fires before a search. It is called before triggering the grid. If the event return true triggering does not occur. In this case you can construct your own search parameters and trigger the grid to search the data. The triggered event should return the string 'stop' in order not to trigger the grid. Any other return value causes triggering.\n\n\nnull\n\n\n\n\n\n\ndefaultSearch\n\n\nstring\n\n\nThe option determines the default search operator when a search is performed. If any valid option is set, then it will be used for the default operator in all fields. See \nSearch Configuration sopt array here\n for the available options\n\n\nbw\n\n\n\n\n\n\nerrorcheck\n\n\nboolean\n\n\nif searchrules are defined this turn on of error checking. If there is a error in the input the filter is not posted to the server and a error message appear.\n\n\ntrue\n\n\n\n\n\n\ngroupOp\n\n\nstring\n\n\nThis option is valid only if the option stringResult is set to true and determines the group operation. Can have values AND and OR. \nAdvanced searching\n\n\nAND\n\n\n\n\n\n\ngroupOpSelect\n\n\nstring\n\n\nThe option apply only on search fields which are selects and have a multiselect option. The selected values in multiselect are grouped with this operator between them. Can be OR or AND.\n\n\nOR\n\n\n\n\n\n\nodata\n\n\nobject\n\n\nDefines the long texts for the particular operations when searching. The default object is in language file and can be found as $.jgrid.regional['xx'].search.odata - see \nConfiguration\n. The default values are: [{ oper:'eq', text:'equal'},{ oper:'ne', text:'not equal'},{ oper:'lt', text:'less'},{ oper:'le', text:'less or equal'},{ oper:'gt', text:'greater'},{ oper:'ge', text:'greater or equal'},{ oper:'bw', text:'begins with'},{ oper:'bn', text:'does not begin with'},{ oper:'in', text:'is in'},{ oper:'ni', text:'is not in'},{ oper:'ew', text:'ends with'},{ oper:'en', text:'does not end with'},{ oper:'cn', text:'contains'},{ oper:'nc', text:'does not contain'}]\n\n\n\n\n\n\n\n\nonClearSearchValue\njqGridToolbarClearVal\n\n\nfunction\n\n\nthe event is triggered after the clear icon (see \nsearchoption\n clearSearch)  is clicked (near the search field) and before triggering the grid in case autosearch is true. Parameters passed to this event are: the search element, column index, searchoptions, default value.\n\n\nnull\n\n\n\n\n\n\noperands\n\n\nobject\n\n\nThe short text operation which is displayed to the user when a operation button is clicked. By example for equal we display '=='. The default setting of this object is:\n{ \"eq\" :\"==\", \"ne\":\"!\", \"lt\":\"\n\", \"le\":\"\n=\", \"gt\":\"\n\", \"ge\":\"\n=\", \"bw\":\"^\", \"bn\":\"!^\", \"in\":\"=\", \"ni\":\"!=\", \"ew\":\"\\|\", \"en\":\"!@\", \"cn\":\"~\", \"nc\":\"!~\", \"nu\":\"#\", \"nn\":\"!#\", \"bt\":\"...\"}.\n Changes have effect only if the value symbol is changed. See searchOperators option\n\n\n\n\n\n\n\n\noperandTitle\n\n\nstring\n\n\nThis options is valid only when searchOperators is true. It appear when the user hover with a mouse to the operation button (default for all search fields). This can be overwritten with option searchtitle in searchoptions in colModel. The default text is taken from the language file\n\n\n\n\n\n\n\n\nresetIcon\n\n\nstring\n\n\nString which appear near the search field to perform clearing the search value. See \nclearSearch\n in colModel searchoptions\n\n\n'x'\n\n\n\n\n\n\nrestoreFromFilters\n\n\nboolean\n\n\nIf set to true the method read the existing search data (postData object) when creating the toolbar search and try to restore it so that the toolbar search fields have the values of the previous search. Useful for initialization of the grid with filtered data.\n\n\nfalse\n\n\n\n\n\n\nsearchOnEnter\n\n\nboolean\n\n\nDetermines how the search should be applied. If this option is true see the autosearch option. If the option is false then the search is performed immediately when the user pres some character.\n\n\ntrue\n\n\n\n\n\n\nsearchOperators\n\n\nboolean\n\n\nWhen set to true allows the user to select search operations for particular field when searching. The click operations are created near the search field. In this case possible search operators that can appear can be configured with \nsopt\n option in \nsearchoptins\n in colModel.\n\n\nfalse\n\n\n\n\n\n\nsplitSelect\n\n\nstring\n\n\nString which delimit the selects in multiselect mode\n\n\n','\n\n\n\n\n\n\nstringResult\n\n\nboolean\n\n\nDetermines how to post the data on which we perform searching. When the this option is false the posted data is in key:value pair, if the option is true, the posted data is equal on those as in searchGrid method \nAdvanced searching\n. If this option is set to true the resulting search data that is posted to the server is string.\n\n\nfalse\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nWith this string it is possible to overwrite the url parameter used in grid to perform the search\n\n\nempty\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe sopt option in searchoptions can be used to set a different operator for the particular field in colModel.\n\n\n\n\nOther toolbar methods\n\n\ndestroyFilterToolbar()\n\nRemoves the filter toolbar complete from the grid unbinding all events\n\n\nparameters\n\n\nreturns\n\njqGrid object\n\n\nrefreshFilterToolbar( object options )\n\n\nThis method only refresh the toolbar filter and does not use reload to reload data. It loads the values from filters parameter in postData\n\n\nparameters\n\n\n\n\nobject options - set of options with default values\n\n\n\n\noptions\n \n=\n \n{\n\n  \nfilters\n \n:\n \n,\n\n  \nonClearVal\n \n:\n \nnull\n,\n\n  \nonSetVal\n \n:\n \nnull\n\n\n}\n\n\n\n\n\n\n\n\nfilters - if not set is read from postData.filtes property. Can be used for custom refresh.\n\n\nonClearVal - event which occur after the search values are cleared. The event is executed on every field.\n\n\nonSetVal - event which occur after the refreshed values is set. Executes on every field.\n\n\n\n\nreturns\n\njqGrid object\n\n\n\n\nAdditional methods for toolbar searching are available for using.\n\n\n\n\nWarning\n\n\nThe methods below can not be used with the jqGrid API - they must be called like this:\n\n\n\n\n...\n\n\nvar\n \nsgrid\n \n=\n \n$\n(\n#grid_id\n)[\n0\n];\n\n\nsgrid\n.\ntriggerToolbar\n();\n\n\n\n\n\n\nclearToolbar( boolean trigger )\n\n\nClears the toolbar search values, set the default one (if any) and reloads the grid depending on trigger parameter. The search grid parameter is set to false.\n\n\nparameters\n\n\n\n\nboolean trigger - if the parameter is set to false the grid is not triggered when the method is executed - only the entered values are cleared.\n\n\n\n\nreturns \n\nnone\n\n\ntoggleToolbar()\n\n\nToggeles the toolbar with the search elements\n\n\nparameters\n\n\nreturns\n\nnone\n\n\ntriggerToolbar()\n\n\nWhen this method is called a search is performed, the search parameter in grid becomes true and ajax call is made to the server or a local search is performed\n\n\nparameters\n\n\nreturns\n\nnone\n\n\nTooolbar server posting.\n\n\nToolbar searching can post data to the server two ways according to certain parameters:\n\n\n\n\nIf one of the toolbar option is set to true: \nstringResult\n or \nsearchOperators\n or the grid optiopns parameter \ndatatype\n is set to \nlocal\n, then the toolbar serch method post the data as \nstring field\n\n\nIn all other cases the data is posted in \nname value pair\n\n\n\n\nSingle searching\n\n\nSingle field searching is a way to search data on one field at a time. When using this method we construct a modal form where the user can select a field and condition to apply the search.\n\n\n\n\nCalling convention\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nsearchGrid\n,\n \noptions\n \n);\n\n\n...\n\n\n/script\n\n\n\n\n\n\nWhere\n\n\n\n\ngrid_id is the id of the already constructed grid\n\n\noptions is an array of settings in name: value pairs format.\n\n\n\n\nTypically when this method is called it launches the modal dialog and makes the grid inaccessible until the dialog is not closed.\n\nThis method is the default search method in the navigator if the search is enabled. The search parameters in navigator can be set the same way as the options described below.\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \npager\n \n:\n \n#gridpager\n,\n\n\n...\n\n\n}).\njqGrid\n(\nnavGrid\n,\n#gridpager\n,{\nview\n:\ntrue\n,\n \ndel\n:\nfalse\n},\n\n\n{},\n \n//  default settings for edit\n\n\n{},\n \n//  default settings for add\n\n\n{},\n  \n// delete instead that del:false we need this\n\n\n{\nsearch_options\n},\n \n// search options\n\n\n{}\n \n/* view parameters*/\n\n\n);\n\n\n...\n\n\n/script\n\n\n\n\n\n\nBy default the dialog appears at upper left corner of the grid.\n\n\nThe search dialog has a options overlay (default 10). If this option is set to 0 the cover overlay is disabled and the user can interact with the grid.\n\n\nSingle search options\n\n\nThe method uses the common search options and rules from \ncolModel\n\n\nThis method uses the following properties from language file grid.locale-xx and they can be passed in the options array of the search method\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \n...\n\n    \nsearch\n \n:\n \n{\n\n        \ncaption\n:\n \nSearch...\n,\n\n        \nFind\n:\n \nFind\n,\n\n        \nReset\n:\n \nReset\n,\n\n        \nodata\n:\n \n[{\n \noper\n:\neq\n,\n \ntext\n:\nequal\n},\n \n{\n \noper\n:\nne\n,\n \ntext\n:\nnot equal\n},\n \n{\n \noper\n:\nlt\n,\n \ntext\n:\nless\n},{\n \noper\n:\nle\n,\n \ntext\n:\nless or equal\n},{\n \noper\n:\ngt\n,\n \ntext\n:\ngreater\n},{\n \noper\n:\nge\n,\n \ntext\n:\ngreater or equal\n},{\n \noper\n:\nbw\n,\n \ntext\n:\nbegins with\n},{\n \noper\n:\nbn\n,\n \ntext\n:\ndoes not begin with\n},{\n \noper\n:\nin\n,\n \ntext\n:\nis in\n},{\n \noper\n:\nni\n,\n \ntext\n:\nis not in\n},{\n \noper\n:\new\n,\n \ntext\n:\nends with\n},{\n \noper\n:\nen\n,\n \ntext\n:\ndoes not end with\n},{\n \noper\n:\ncn\n,\n \ntext\n:\ncontains\n},{\n \noper\n:\nnc\n,\n \ntext\n:\ndoes not contain\n},{\n \noper\n:\nnu\n,\n \ntext\n:\nis null\n},{\n \noper\n:\nnn\n,\n \ntext\n:\nis not null\n},\n \n{\noper\n:\nbt\n,\n \ntext\n:\nbetween\n}],\n\n    \n...\n\n    \n},\n\n\n...\n\n\n}\n\n\n\n\n\n\n\n\nNote\n\n\nThe events (Type function) in the table below has a \ntriggred event\n which can be used. The name is set below to the option event. Note that not all events have triggered event equivalent.\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nafterChange\n\n\nfunction\n\n\nfires after we change something in the filter - field, operation or value\n\n\nnull\n\n\n\n\n\n\nafterRedraw\n\n\nfunction\n\n\nThis function if defined is lunched every time the filter is redrawed - the filter is redraw-ed every time when we add or delete rules or fields To this function we pass the search parameters as parameter. In single search it is lunched once when created and when the reset button is pressed.\n\n\nnull\n\n\n\n\n\n\nafterShowSearch\njqGridFilterAfterShow\n\n\nfunction\n\n\nThis event fires (if defined) every time after the search dialog is shown. Parameter passed to this event is the filter DOM element.\n\n\nnull\n\n\n\n\n\n\nbeforeShowSearch\njqGridFilterBeforeShow\n\n\nfunction\n\n\nThis event fires (if defined) every time before the search dialog is shown. If the event return false the search dialog is not shown.\n\n\nnull\n\n\n\n\n\n\nbuttons\n\n\narray\n\n\nDefines a custom buttons in the searchForm. Every element into the array is a object (button) with the following properties:\n \nicon\n - defines a icon according to the CSS framework used. \n \nside\n - left or right - the position of the icon \n \ntext\n - Text to appear in the button\n \nposition\n - the position of the button - last or first \n \nclick\n - function that is executed when the button is click. To the click function is passed the search form, search parameters and click event \n \nid\n - id to identify the button. If not set the jqGrid assing it internally using the jqGrid randId function.\n\n\nempty array\n\n\n\n\n\n\ncaption\n\n\nstring\n\n\nThe caption of the search form\n\n\nlang file\n\n\n\n\n\n\ncloseAfterReset\n\n\nboolean\n\n\nIf set to true this closes the search dialog after the user apply a reset - i.e. click on reset button\n\n\nfalse\n\n\n\n\n\n\ncloseOnEscape\n\n\nboolean\n\n\nIf this option is set to true the search dialog will be closed if the user press ESC key\n\n\nfalse\n\n\n\n\n\n\ncloseAfterSearch\n\n\nboolean\n\n\nIf set to true this closes the search dialog after the user apply a search - i.e. click on Find button\n\n\nfalse\n\n\n\n\n\n\ndrag\n\n\nboolean\n\n\nEnables or disables dragging of the modal\n\n\ntrue\n\n\n\n\n\n\nerrorcheck\n\n\nboolean\n\n\nif searchrules are defined this turn on of error checking. If there is a error in the input the filter is not posted to the server and a error message appear.\n\n\ntrue\n\n\n\n\n\n\nFind\n\n\nstring\n\n\nThe text in the find button\n\n\nlang file\n\n\n\n\n\n\nheight\n\n\nmixed\n\n\nDefines the height of the search dialog\n\n\nauto\n\n\n\n\n\n\njqModal\n\n\nboolean\n\n\nIf set to true uses jqModal plugin (if present) to create the dialogs. If set to true and the plugin is not present jqGrid uses its internal function to create dialog\n\n\ntrue\n\n\n\n\n\n\nlayer\n\n\nstring\n\n\nIf defined this should be a valid id in the DOM. Also if this option is set the filter is inserted as child of this element\n\n\nnull\n\n\n\n\n\n\nleft\n\n\ninteger\n\n\nthe initial left position of modal dialog. The default value of 0 mean the left position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the left position from upper left corner of the window.\n\n\n0\n\n\n\n\n\n\nloadDefaults\n\n\nboolean\n\n\nIf set to true the method load the existing filtered data stored in \nfilters\n property in postData object\n\n\ntrue\n\n\n\n\n\n\nmodal\n\n\nboolean\n\n\nIs set to true the search dialog becomes modal\n\n\nfalse\n\n\n\n\n\n\nodata\n\n\narray\n\n\nTranslation strings that corresponds to the sopt options\n\n\nlang file\n\n\n\n\n\n\nonClose\n\n\nfunction\n\n\nIf defined this event fires when the dialog is closed. Can return true or false. If the event return false the dialog will not be closed\n\n\nnull\n\n\n\n\n\n\nonInitializeSearch\njqGridFilterInitialize\n\n\nfunction\n\n\nThis event occurs only once when the modal is created\n\n\nnull\n\n\n\n\n\n\nonReset\n\n\nfunction\n\n\nIf defined this function fire if reset button is activated\n\n\nnull\n\n\n\n\n\n\nonSearch\n\n\nfunction\n\n\nIf defined this event fires when the search Button is clicked.\n\n\nnull\n\n\n\n\n\n\noverlay\n\n\ninteger\n\n\nIf this option is set to 0 the overlay in grid is disabled and the user can interact with the grid while search dialog is active\n\n\n30\n\n\n\n\n\n\nrecreateFilter\n\n\nboolean\n\n\nwhen set to true the form is recreated every time the search dialog is activated with the new options from colModel (if they are changed)\n\n\nfalse\n\n\n\n\n\n\nresize\n\n\nboolean\n\n\nEnables or disables resizing of the modal\n\n\ntrue\n\n\n\n\n\n\nReset\n\n\nstring\n\n\nThe text for the clear  button\n\n\nlang file\n\n\n\n\n\n\nsearchOnEnter\n\n\nboolean\n\n\nDetermines whether search should be applied on pressing Enter key.\n\n\nfalse\n\n\n\n\n\n\nshowOnLoad\n\n\nboolean\n\n\nThis option is valid only in navigator options. If set to true the dialog appear automatically when the navigator is constructed for first time\n\n\nfalse\n\n\n\n\n\n\nsField\n\n\nstring\n\n\nThe name of the property which will be posted  as a name for the searched  field. See \npredefined fields\n\n\nsearchField\n\n\n\n\n\n\nsOper\n\n\nstring\n\n\nThe name of the property which will be posted as a operation for the searched  field. See \npredefined fields\n\n\nsearchOper\n\n\n\n\n\n\nsopt\n\n\narray\n\n\nUse this option to set common search rules. If not set all the available options will be used. All available option are: ['eq','ne','lt','le','gt','ge','bw','bn','in','ni','ew','en','cn','nc','nu','nn'] The corresponding texts are in language file and mean the following: ['equal','not equal', 'less', 'less or equal','greater','greater or equal', 'begins with','does not begin with','is in','is not in','ends with','does not end with','contains','does not contain','is null','is not null'] Note that the elements in sopt array can be mixed in any order.\n\n\n\n\n\n\n\n\nsortStrategy\n\n\nfunction\n\n\napply a custom sort function for the order of the names that appear. Default order is those from colModel\n\n\nnull\n\n\n\n\n\n\nsValue\n\n\nstring\n\n\nThe name of the property which will be posted as a value for the searched field. See \npredefined fields\n\n\nsearchString\n\n\n\n\n\n\ntop\n\n\ninteger\n\n\nthe initial top position of modal dialog. The default value of 0 mean the top position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the top position from upper left corner of the window.\n\n\n0\n\n\n\n\n\n\nwidth\n\n\ninteger\n\n\nDefines the width os the search dialog\n\n\n450\n\n\n\n\n\n\nzIndex\n\n\ninteger\n\n\nThe starting z-index for the dialog. If you will see the dialog form under another elements or dialogs you should use the parameter with some value higher as default value 950. In the most cases it should be the value higher as 1000 - the default value of jQuery UI dialog.\n\n\n950\n\n\n\n\n\n\n\n\nSingle search posting\n\n\nThis method post the search data to the server only in a \nPredefined fields\n format\n\n\nAdvanced searching\n\n\nAdvanced searching is a way to search on multiple fields at the same time with different conditions. Advanced searching and single searching use the same method, but with different settings and posting data.\n\n\nCalling convention\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nsearchGrid\n,\n \n{\nmultipleSearch\n:\ntrue\n,...}\n \n);\n\n\n...\n\n\n/script\n\n\n\n\n\n\nWhere\n\n\n\n\ngrid_id is the id of the already constructed grid\n\n\nmultipleSearch:true activates the advanced searching\n\n\n\u2026 other options set as name:value pair\n\n\n\n\nTo set more advanced search do:\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nsearchGrid\n,\n \n{\nmultipleSearch\n:\ntrue\n,\n \nmultipleGroup\n:\ntrue\n,...}\n \n);\n\n\n...\n\n\n/script\n\n\n\n\n\n\n\n\nmultipleGroup:true activates the more advanced search dialog allowing to add complex group conditions\n\n\n\n\nTypically when this method is called it launches the modal dialog and makes it so the grid inaccessible until the dialog is closed.\n\nThis method is not the default search method in the navigator. To enable this you should either set the default search options using the extend method or set it in the navigator in the place of the search options.\n\n\nThe advanced searching can look like this when created:\n\n\n\n\nAs can be seen the user can add or delete an unlimited number of conditions to perform the search.\n\nTo add a condition the plus button should be pressed.\n\nTo delete a condition the minus button should be pressed\n\n\nAdvanced search options\n\n\nThe method uses the same options as those from \nSingle Searching\n plus the following:\n\n\nThis method uses the following properties from language file grid.locale-xx and they can be passed in the options array of the search method\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \n...\n\n    \nsearch\n \n:\n \n{\n\n        \ncaption\n:\n \nSearch...\n,\n\n        \nFind\n:\n \nFind\n,\n\n        \nReset\n:\n \nReset\n,\n\n        \nodata\n:\n \n[{\n \noper\n:\neq\n,\n \ntext\n:\nequal\n},\n \n{\n \noper\n:\nne\n,\n \ntext\n:\nnot equal\n},\n \n{\n \noper\n:\nlt\n,\n \ntext\n:\nless\n},{\n \noper\n:\nle\n,\n \ntext\n:\nless or equal\n},{\n \noper\n:\ngt\n,\n \ntext\n:\ngreater\n},{\n \noper\n:\nge\n,\n \ntext\n:\ngreater or equal\n},{\n \noper\n:\nbw\n,\n \ntext\n:\nbegins with\n},{\n \noper\n:\nbn\n,\n \ntext\n:\ndoes not begin with\n},{\n \noper\n:\nin\n,\n \ntext\n:\nis in\n},{\n \noper\n:\nni\n,\n \ntext\n:\nis not in\n},{\n \noper\n:\new\n,\n \ntext\n:\nends with\n},{\n \noper\n:\nen\n,\n \ntext\n:\ndoes not end with\n},{\n \noper\n:\ncn\n,\n \ntext\n:\ncontains\n},{\n \noper\n:\nnc\n,\n \ntext\n:\ndoes not contain\n},{\n \noper\n:\nnu\n,\n \ntext\n:\nis null\n},{\n \noper\n:\nnn\n,\n \ntext\n:\nis not null\n},\n \n{\noper\n:\nbt\n,\n \ntext\n:\nbetween\n}],\n\n    \ngroupOps\n:\n \n[{\n \nop\n:\n \nAND\n,\n \ntext\n:\n \nall\n \n},{\n \nop\n:\n \nOR\n,\n  \ntext\n:\n \nany\n \n}],\n\n        \naddsubgrup\n \n:\n \nAdd subgroup\n,\n\n        \naddrule\n \n:\n \nAdd rule\n,\n\n        \ndelgroup\n \n:\n \nDelete group\n,\n\n        \ndelrule\n \n:\n \nDelete rule\n    \n    \n...\n\n    \n},\n\n\n...\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\naddsubgroup\n\n\nstring\n\n\nTitle text when the user hover over the button '+'\n\n\nlang file\n\n\n\n\n\n\naddrule\n\n\nstring\n\n\nTitle text when the user hover over the button '+{}'\n\n\nlang file\n\n\n\n\n\n\ndelgroup\n\n\nstring\n\n\nTitle text when the user hover over the button  '-'\n\n\nlang file\n\n\n\n\n\n\ndelrule\n\n\nstring\n\n\nTitle text when the user hover over the button '-{}'\n\n\nlang file\n\n\n\n\n\n\ngroupOps\n\n\narray\n\n\nThe array describes the logical condition between the fields - i.e OR or AND. Evey element of the array is object with the following meaning - \nop\n  property describes the values posted to the server in groupOp item and \ntext\n property described the text displayed to the user - By example { op: \"AND\", text: \"AND\" }.  The default value is the first element into the array. It can be set only one element in the array\n\n\nlang file\n\n\n\n\n\n\nshowQuery\n\n\nboolean\n\n\nIf set to true shows the query which is generated when the user defines the conditions for the search. Valid only in advanced search. Again with this a button near search button appear which allows the user to show or hide the query string interactively\n\n\nfalse\n\n\n\n\n\n\nsFilter\n\n\nDetermines the name of the posting data to the server.\n\n\nfilters\n\n\n\n\n\n\n\n\nmultipleSearch\n\n\nboolean If set to true this activates the advanced searching\n\n\nfalse\n\n\n\n\n\n\n\n\nmultipleGroup\n\n\nboolean\n\n\nIf set to true this activates the advanced searching with a possibilities to define a complex conditions. The best way to see what conditions are generated is to use the showQuery options set to true.\n\n\nfalse\n\n\n\n\n\n\ntmplNames\n\n\narray\n\n\nDefines the name of the templates used for easy user input - by example like this : ['Template1', 'Template2',\u2026]. See demos at end of this chapter.\n\n\nnull\n\n\n\n\n\n\ntmplFilters\n\n\narray\n\n\narray of objects    where every object correspond to the object generated in \nfilters\n like. The length of this array should correspond to the length of tmplNames array. See demos at end of this chapter.\n\n\nnull\n\n\n\n\n\n\ntmplLabel\n\n\nstring\n\n\nIf a template is defined a select element appear between the Reset and Find buttons. This is a the text describing the select\n\n\nTemplate:\n\n\n\n\n\n\n\n\nSome options (not all) and events in advanced and single searching can be extended using the\n\n\n$\n.\njgrid\n.\nfilter\n \n=\n \n{...}\n\n\n\n\n\n\nobject. The object needs to be set before calling the method.\n\n\nAdvanced search posting\n\n\nThis method post the search data to the server only in a \nString field\n format\n\n\nSearch all fields\n\n\nThis type of searching allow to search on all fields in grid grid data using single input value. This method  have effect only if the \ndatatype\n parameter is local or \nloadonce\n parameter is true, which at end set the datatype to local.\n\n\nConversions and options\n\n\nscript\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nfilterInput\n,\n \nvalue\n,\n \noptions\n \n);\n\n\n...\n\n\n/script\n\n\n\n\n\n\nWhere\n\n\n\n\nstring value is the value to be searched\n\n\nobject options - various options for that search with defaults:\n\n\n\n\noptions\n \n=\n \n{\n\n  \ndefaultSearch\n \n:\n \ncn\n,\n\n  \ngroupOp\n \n:\n \nOR\n,\n\n  \nsearchAll\n \n:\n \nfalse\n,\n\n  \nbeforeSearch\n \n:\n \nnull\n,\n\n  \nafterSearch\n \n:\n \nnull\n\n\n}\n\n\n\n\n\n\n\n\noptions have the following description\n\n\ndeafultSearch - determines the default operation in searching. Default is \ncn\n contain. The option can have one of the following values defined in odata array (name property) in language file.\n\n\ngroupOp - Defines how the search criteria can be set between different fields - can be \nOR\n or \nAND\n . Default is OR which mean that the where clause is like this WHERE field1 ='val' OR field2='val'....\n\n\nsearchAll - By default the search is applied on fields with search=true parameter in colModel. If set to true the search is applied on all fields independent of the search parameter.\n\n\nbeforeSearch or triggered event jqGridFilterInputBeforeSearch  - the event occur before to apply the search. If the triggered event return 'stop' or the option event return false the search is not performed.\n\n\nafterSearch - or triggered event jqGridFilterInputAfterSearch - the event occur after the search is performed.\n\n\n\n\n\n\n\n\nSee examples at end of \nthis chapter\n.\n\n\nPosting when searching\n\n\nDepending on the search methods we have three types of posting the searched data to the sever (in case the datatype parameter is not local)\n\n\nName value pair\n\n\nThis type of searching is available in \ntoolbar searching\n method only when the option \nstringResult\n is set to false.\n\n\nThis type of posting is the simplest one. In this case when a search is activated according to the rules the grid option \nsearch\n is set to true. To the server are posted the fields which have a value on it and additionally a new postdata pair is added \n_search =\n true\n\n\nWhen posting to the server or search locally, we try to pass, not the name, but the index set in colModel. When the index is not found we use the name.\n\n\nAll these values are added to the postData array.\n\n\nLet suppose that we have the following grid:\n\n\n$\n(\n#grid_id\n).\njqGrid\n({\n\n     \nurl\n:\n \nexample.php\n,\n\n     \ndatatype\n:\n \njson\n,\n\n     \nmtype\n:\n \nGET\n,\n\n     \ncolModel\n:\n \n[\n\n         \n{\n \nname\n:\n \ninvid\n,\n \nindex\n:\n \ninvoice_id\n \nwidth\n:\n \n55\n \n},\n\n         \n{\n \nname\n:\n \ninvdate\n,\n \nindex\n:\n \nInvoice_date\n,\n \nwidth\n:\n \n90\n \n},\n\n         \n{\n \nname\n:\n \namount\n,\n  \nwidth\n:\n \n80\n,\n \nalign\n:\n \nright\n \n},\n\n         \n{\n \nname\n:\n \ntax\n,\n \nwidth\n:\n \n80\n,\n \nalign\n:\n \nright\n \n},\n\n         \n{\n \nname\n:\n \ntotal\n,\n \nwidth\n:\n \n80\n,\n \nalign\n:\n \nright\n \n},\n\n         \n{\n \nname\n:\n \nnote\n,\n \nwidth\n:\n \n150\n,\n \nsortable\n:\n \nfalse\n \n}\n\n     \n],\n\n\n...\n\n\n});\n\n\n$\n(\n#grid_id\n).\njqGrid\n(\nfilterToolbar\n,\n \n{\n \nstringResult\n \n:\n \nfalse\n \n});\n\n\n\n\n\n\nand a filterToolbar search method is lunched with option \nstringResult : false\n\n\nWhen the user fill the \ninvdate\n field  with some value like '2017-01-01' and \namount\n  field with 200 and press Enter then the following data is added to the postData object\n\n\npostData\n \n:\n \n{\n\n  \n...\n\n  \nInvoice_date\n \n:\n \n2017-01-01\n,\n\n  \namount\n \n:\n \n200\n,\n\n  \n_search\n \n:\n \ntrue\n\n  \n...\n\n\n}\n\n\n\n\n\n\nand we have the following url:\n\n\nhttp://www.myserver.com/example.php?... \nInvoice_date=2017-01-01\namount=200\n_search=true\n...\n\n\n\n\n\n\n\nNote\n\n\nThe posted fields names are get from index property if they available and if not from the name property.\n\n\n\n\nThe operation is not posted. This way developer is free to interpret the search data as they want.\n\n\nPredefined fields\n\n\nThis type of searching is used in \nsingle searching\n module.\n\n\nIn this case when the search is activated, jqGrid adds three parameters to postData, respectively  to the url (again with _search=true), in name=value pairs:\n\n\n\n\nsearchField\n, the value comes from the index or name  in colModel\n\n\nsearchString\n , the value to be searched\n\n\nsearchOper\n, the value is the operation of search - see sopt array\n\n\n\n\nThe names of these properties can be configured by developer. The corresponding one are in the options of \nsingle searching\n method and the names are \nsField, sValue, sOper\n\n\nUsing the example from previous chapter if the user select Invoice date and operation equal, then the following is added to the postData object:\n\n\npostData\n \n:\n \n{\n\n  \n...\n\n  \nsearchField\n \n:\n \nInvoice_date\n,\n\n  \nsearchString\n \n:\n \n2017-01-01\n,\n\n  \nsearchOper\n \n:\n \neq\n,\n\n  \n_search\n \n:\n \ntrue\n\n  \n...\n\n\n}\n\n\n\n\n\n\nand the the url is:\n\n\nhttp://www.myserver.com/example.php?...\nsearchField=Invoice_date\nsearchString=2017-01-01\nsearchOper=eq\n...\n\n\n\n\n\nString field\n\n\nThis type of posting is available in \ntoolbar searching\n (when stringResult is true), \nAdvanced searching\n and searching in \ncolumn Menu\n.\n\n\nWhen the search data is posted to the server added is only one parameter (again with _search=true) to the url and this is the \nfilters\n element.\n\n\nTo use this type of searching see the \nstringResult\n option in the appropriate methods\n\n\nThe posted data (the postData property filters) can look like this:\n\n\nfilters\n \n=\n\n  \n{\n\n   \ngroupOp\n:\nOR\n,\n\n   \nrules\n:\n[{\nfield\n:\na.id\n,\nop\n:\neq\n,\ndata\n:\n1\n}],\n\n   \ngroups\n:\n[\n\n        \n{\n\n            \ngroupOp\n:\nAND\n,\n\n            \nrules\n:\n[{\nfield\n:\na.id\n,\nop\n:\neq\n,\ndata\n:\n2\n}],\n\n            \ngroups\n:\n[...]\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\n\nThe posted data is a JSON string with the following parameters:\n\n\n\n\ngroupOp - this determines the rules of the search. Can be AND or OR. This option can be changed from the user with the help of the select box near the Reset button. When the user select all (English variant) the AND is set. When the user selects any the OR is set.\n\n\nrules - an array with the following options\n\n\nfield - the field property contains the name of the selected index (or name) from colModel\n\n\nop - determines the operation of the searching - see the \nsopt\n in the searchoptions\n\n\ndata - is the entered data to be searched on\n\n\n\n\n\n\ngroups - set of other groupOp, rules elements to define a complex search query\n\n\n\n\nRather than to explain how this string is build-ed a examples will be shown.\n\n\nIn the example below:\n\n\n\n\nthe following data will be posted to the server:\n\n\npostData\n \n:\n \n{\n\n  \n...\n\n  \nfilters\n \n:\n \n{\n\n    \ngroupOp\n:\n \nAND\n,\n\n    \nrules\n:\n \n[\n\n      \n{\nfield\n:\n \nCustomerID\n,\n \nop\n:\n \nbw\n,\n \ndata\n:\n \nW\n},\n\n      \n{\nfield\n:\n \nFreight\n,\n \nop\n:\n \nle\n,\n \ndata\n:\n \n1\n}\n\n    \n],\n\n    \ngroups\n:\n[]\n\n  \n}\n\n  \n\\\n_search\n \n:\n \ntrue\n\n  \n...\n\n\n}\n\n\n\n\n\n\nFor this example:\n\n\n\n\nthe following data will be posted to the server:\n\n\npostData\n \n:\n \n{\n\n \nfilters\n \n:\n \n{\n\n   \ngroupOp\n:\n \nOR\n,\n\n   \nrules\n:\n \n[],\n\n   \ngroups\n:\n \n[\n\n     \n{\n\n       \ngroupOp\n:\nAND\n,\n\n       \nrules\n:\n \n[\n\n         \n{\nfield\n:\nOrderDate\n,\nop\n:\ngt\n,\ndata\n:\n2001-01-01\n},\n\n         \n{\nfield\n:\nOrderDate\n,\nop\n:\nlt\n,\ndata\n:\n2013-01-01\n}\n\n       \n],\n\n       \ngroups\n:\n[]\n\n     \n},{\n\n       \ngroupOp\n:\nAND\n,\n\n       \nrules\n:\n[\n\n         \n{\nfield\n:\nFreight\n,\nop\n:\nlt\n,\ndata\n:\n10\n},\n\n         \n{\nfield\n:\nCustomerID\n,\nop\n:\nbw\n,\ndata\n:\nW\n}\n\n       \n],\n\n       \ngroups\n:\n[]\n\n     \n}\n\n   \n]\n\n \n},\n\n \n_search\n \n:\n \ntrue\n\n\n}\n\n\n\n\n\n\nSearch examples\n\n\nAll fields searching\n\n\nThe following example shows how to use the all fields search method when the user type in a single input filed. When the user continue typing new filter values will be show.\n\n\nThe html definition:\n\n\n...\n\nlabel\n \nfor\n=\nsearch_cells\n Search Grid: \n/\nlabel\n\n\ninput\n \nid\n=\nsearch_cells\n \ntype\n=\nsearch\n/\n\n\ntable\n \nid\n=\njqGrid\n/\ntable\n\n\ndiv\n \nid\n=\njqGridPager\n/\ndiv\n\n...\n\n\n\n\n\nThe JavaScript\n\n\n$\n(\n#jqGrid\n).\njqGrid\n({\n\n  \nurl\n:\n \ndata.json\n,\n\n  \nmtype\n:\n \nGET\n,\n\n  \ndatatype\n:\n \njson\n,\n\n  \ncolModel\n:\n \n[\n\n    \n{\n\n      \nlabel\n \n:\n \nOrder ID\n,\n\n      \nname\n:\n \nOrderID\n,\n\n      \nkey\n:\n \ntrue\n,\n\n      \nwidth\n:\n \n75\n \n,\n\n    \n},{\n\n      \nlabel\n:\n \nCustomer ID\n,\n\n      \nname\n:\n \nCustomerID\n,\n\n      \nwidth\n:\n \n150\n,\n\n    \n},{\n\n      \nlabel\n:\n \nOrder Date\n,\n\n      \nname\n:\n \nOrderDate\n,\n\n      \nwidth\n:\n \n150\n,\n\n      \nsorttype\n:\ndate\n,\n\n      \nformatter\n:\n \ndate\n,\n\n      \nsrcformat\n:\n \nY-m-d\n,\n\n      \nstype\n \n:\n \ntext\n,\n\n      \nnewformat\n:\n \nn/j/Y\n,\n\n    \n},{\n\n      \nlabel\n \n:\n \nShip Name\n,\n\n      \nname\n:\n \nShipName\n,\n\n      \nwidth\n:\n \n150\n,\n\n    \n},{\n\n      \nlabel\n:\n \nFreight\n,\n\n      \nsorttype\n:\n \nnumber\n,\n\n      \nname\n:\n \nFreight\n,\n\n      \nwidth\n:\n \n150\n,\n\n    \n},\n\n  \n],\n\n  \nloadonce\n:\n \ntrue\n,\n\n  \nviewrecords\n:\n \ntrue\n,\n\n  \nwidth\n:\n \n780\n,\n\n  \nheight\n:\n \n250\n,\n\n  \nrowNum\n:\n \n10\n,\n\n  \npager\n:\n \n#jqGridPager\n\n\n});\n\n\nvar\n \ntimer\n;\n\n\n$\n(\n#search_cells\n).\non\n(\nkeyup\n,\n \nfunction\n()\n \n{\n\n  \nvar\n \nself\n \n=\n \nthis\n;\n\n  \nif\n(\ntimer\n)\n \n{\n\n    \nclearTimeout\n(\ntimer\n);\n\n  \n}\n\n  \ntimer\n \n=\n \nsetTimeout\n(\nfunction\n(){\n\n    \n$\n(\n#jqGrid\n).\njqGrid\n(\nfilterInput\n,\n \nself\n.\nvalue\n);\n\n  \n},\n0\n);\n\n\n});\n\n\n\n\n\n\nAs can be seen we bind a \nkeyup\n event to the search input field \nsearch_cells\n and when the user type a letter the grid is triggered with the resulting data.\n\n\nSearch using template\n\n\nWith this example we demonstrate how we can have a predefined filters, which will simplify the searching. For this purpose we will use tmplNames and tmplFilters in navigator (searchGrid method) .\n\n\nThe html definition:\n\n\n...\n\ntable\n \nid\n=\njqGrid\n/\ntable\n\n\ndiv\n \nid\n=\njqGridPager\n/\ndiv\n\n...\n\n\n\n\n\nThe JavaScript\n\n\n$\n(\n#jqGrid\n).\njqGrid\n({\n\n  \nurl\n:\n \ndata.json\n,\n\n  \nmtype\n:\n \nGET\n,\n\n  \ndatatype\n:\n \njson\n,\n\n  \ncolModel\n:\n \n[\n\n    \n{\n\n      \nlabel\n \n:\n \nOrder ID\n,\n\n      \nname\n:\n \nOrderID\n,\n\n      \nkey\n:\n \ntrue\n,\n\n      \nwidth\n:\n \n75\n \n,\n\n    \n},{\n\n      \nlabel\n:\n \nCustomer ID\n,\n\n      \nname\n:\n \nCustomerID\n,\n\n      \nwidth\n:\n \n150\n,\n\n    \n},{\n\n      \nlabel\n:\n \nOrder Date\n,\n\n      \nname\n:\n \nOrderDate\n,\n\n      \nwidth\n:\n \n150\n,\n\n      \nsorttype\n:\ndate\n,\n\n      \nformatter\n:\n \ndate\n,\n\n      \nsrcformat\n:\n \nY-m-d\n,\n\n      \nstype\n \n:\n \ntext\n,\n\n      \nnewformat\n:\n \nn/j/Y\n,\n\n    \n},{\n\n      \nlabel\n \n:\n \nShip Name\n,\n\n      \nname\n:\n \nShipName\n,\n\n      \nwidth\n:\n \n150\n,\n\n    \n},{\n\n      \nlabel\n:\n \nFreight\n,\n\n      \nsorttype\n:\n \nnumber\n,\n\n      \nname\n:\n \nFreight\n,\n\n      \nwidth\n:\n \n150\n,\n\n    \n},\n\n  \n],\n\n  \nloadonce\n:\n \ntrue\n,\n\n  \nviewrecords\n:\n \ntrue\n,\n\n  \nwidth\n:\n \n780\n,\n\n  \nheight\n:\n \n250\n,\n\n  \nrowNum\n:\n \n10\n,\n\n  \npager\n:\n \n#jqGridPager\n\n\n});\n\n\n\nvar\n \ntemplate1\n \n=\n\n\n{\n \ngroupOp\n:\n \nAND\n,\n\n      \nrules\n:\n \n[\n\n        \n{\n \nfield\n:\n \nCustomerID\n,\n \nop\n:\n \nbw\n,\n \ndata\n:\n \nW\n \n},\n\n        \n{\n \nfield\n:\n \nFreight\n,\n \nop\n:\n \nle\n,\n \ndata\n:\n \n15\n}\n\n      \n]\n\n\n};\n\n\n\nvar\n \ntemplate2\n \n=\n\n\n{\n \ngroupOp\n:\n \nAND\n,\n\n      \nrules\n:\n \n[\n\n        \n{\n \nfield\n:\n \nShipName\n,\n \nop\n:\n \neq\n,\n \ndata\n:\n \nHanari Carnes\n \n},\n\n        \n{\n \nfield\n:\n \nOrderID\n,\n \nop\n:\n \nle\n,\n \ndata\n:\n \n10255\n}\n\n      \n]\n\n\n};\n\n\n// activate the build in search with multiple option\n\n\n$\n(\n#jqGrid\n).\nnavGrid\n(\n#jqGridPager\n,\n \n{\n\n    \n// show search button on the toolbar\n\n    \nsearch\n:\n \ntrue\n,\n\n    \nadd\n:\n \nfalse\n,\n\n    \nedit\n:\n \nfalse\n,\n\n    \ndel\n:\n \nfalse\n,\n\n    \nrefresh\n:\n \ntrue\n\n  \n},\n\n  \n{},\n \n// edit options\n\n  \n{},\n \n// add options\n\n  \n{},\n \n// delete options\n\n  \n{\n\n    \n// search options - define multiple search\n\n    \nmultipleSearch\n:\n \ntrue\n,\n\n    \nmultipleGroup\n:\n \ntrue\n,\n\n        \nshowQuery\n:\n \ntrue\n,\n\n        \n// set the names of the template\n\n        \ntmplNames\n:\n \n[\nTemplate One\n,\n \nTemplate Two\n],\n\n        \n// set the template contents\n\n        \ntmplFilters\n:\n \n[\ntemplate1\n,\n \ntemplate2\n]\n                 \n    \n}\n\n\n);\n\n\n\n\n\n\nUsing this code after click on search button and select the Template One we will have the following result.\n\n\n\n\nNote the object definition in template1 and template2.\n\n\n\n\nTip\n\n\nIf there is a dificulties to define a template object ,then use the following trick to put the correct object.\n\nDefine your grid with searching.  Open the search dialog and configure manually the needed template in the search dialog. After this push the Find button to make the search. Lunch the debug console and into the params tab see the \nfilters\n string which is posted. Copy/paste this string in your code.", 
            "title": "Searching"
        }, 
        {
            "location": "/user-guide/searching/#searching", 
            "text": "Searching is a way of querying data from the server and local grid  using specified criteria.", 
            "title": "Searching"
        }, 
        {
            "location": "/user-guide/searching/#configuration", 
            "text": "The columns in the grid can be used as the basis for a search form to appear above, below, or in place of, the grid.  There are following approaches:   toolbar searching  single field searching  complex approach involving many fields and conditions - advanced searching  search on all fields (local only)  column menu search - see  Column menu   These approaches use common options from Guriddo jqGrid and so can be called only on an already-constructed grid.  All search methods (except column menu search) are located in the grid.filter.js module  All search modules uses the following definition from language file (English file).  $ . jgrid . regional [ en ]   =   { \n   ... \n     search   :   { \n         caption :   Search... , \n         Find :   Find , \n         Reset :   Reset , \n         odata :   [{   oper : eq ,   text : equal },   {   oper : ne ,   text : not equal },   {   oper : lt ,   text : less },{   oper : le ,   text : less or equal },{   oper : gt ,   text : greater },{   oper : ge ,   text : greater or equal },{   oper : bw ,   text : begins with },{   oper : bn ,   text : does not begin with },{   oper : in ,   text : is in },{   oper : ni ,   text : is not in },{   oper : ew ,   text : ends with },{   oper : en ,   text : does not end with },{   oper : cn ,   text : contains },{   oper : nc ,   text : does not contain },{   oper : nu ,   text : is null },{   oper : nn ,   text : is not null },   { oper : bt ,   text : between }], \n         groupOps :   [{   op :   AND ,   text :   all   },{   op :   OR ,    text :   any   }], \n         operandTitle   :   Click to select search operation. , \n         resetTitle   :   Reset Search Value , \n         addsubgrup   :   Add subgroup , \n         addrule   :   Add rule , \n         delgroup   :   Delete group , \n         delrule   :   Delete rule \n     },  ...  }   These options will be explained in the search methods.", 
            "title": "Configuration"
        }, 
        {
            "location": "/user-guide/searching/#colmodel-search-options", 
            "text": "As of 3.5 release Guriddo jqGrid uses a common search options that can be used on every search method. Below is a list of these options that should be set in colModel. Note that some options are not applicable for particular method. The used options on particular method will be explained in the method description     Option  Type  Description  Default      search  boolean  Determines if the field can be searched.  true    stype  string  Determines the input search type of the field. Can be 'text' - also a input element with type text is created,  'select' - a select element is created and 'custom' to create a user defined search type element - see searchoptions custom_element and custom_value properties. Other search types are not supported.  text    searchoptions  object  Object which contain definition, events and other properties for the searched field.  See below     searchrules  object  Object which contain additional conditions for validating user input.  See below     sorttype or  searchtype  string  Both options are equivalent, but sorttype have higher priority. When in local mode (datatype = local) this causes correct sorting and searching for the appropriate types. Possible values:  int/integer - for sorting integer  float/number/currency  - for sorting decimal numbers  date  - for sorting date (see datefmt parameter)    text* - for text sorting.  Setting this property to allowed value in  colModel options  causes single and advanced searches to construct allowed operations for that field. This is valid only if the sopt parameter is not set. Commonly we have two type settings - numeric fields and text fields. For numeric fields default settings is : ['eq', 'ne', 'lt', 'le', 'gt', 'ge', 'nu', 'nn', 'in', 'ni'], for text fields these are: ['eq', 'ne', 'bw', 'bn', 'ew', 'en', 'cn', 'nc', 'nu', 'nn', 'in', 'ni'].  text", 
            "title": "colModel search options"
        }, 
        {
            "location": "/user-guide/searching/#searchoptions", 
            "text": "The  searchoptions  object have the following properties.     Option  Type  Description      buildSelect  function  This option have sense only if the dataUrl parameter is set. In case where the server response can not build the select element as required above, you can use your on function to build the select. The function should return a string containing the select and options value(s) as described in dataUrl option. Parameter passed to this function is the server response    cacheUrlData  boolean  When set to true prevent multiple ajax calls when search filed is build-ed via dataUrl (advanced searching). In this case the data is loaded only once. Default false.    clearSearch  boolean  When set to false the X icon at end of search field which is responsible to clear the search data is disabled. The default value is true and is used in toolbar searching.    custom_element  function  This function create user defined search element when the colModel stype options is set to 'custom'. The function should return string or jQuery object which will be used for searching. To the returned element automatically is added id and name attributes. The function can accept two parameters - value and the search options from colModel. To get or set search value refer to the custom_value function below.    custom_value  function  The function is responsible to get and set value of the user defined element when a search is performed. Function has two parameters - the created element from custom_element function and the type of operation which is applied. The operation type can be 'get' or 'set'. Use get to return a value when a search button (or enter) is activated and set when search values are cleared and default should be set.    dataEvents  array  List of events to apply to the data element; uses  $(\"#id\").on(type, [data], fn)  to bind events to data element. Should be described like this:    dataEvents: [{ type: 'click', data: { i: 7 }, fn: function(e) { console.log(e.data.i); }}, { type: 'keypress', fn: function(e) { console.log('keypress'); } }  ]    dataInit  function  If set this function is called only once when the element is created. To this function we pass the element object.   dataInit: function(elem) {  do something  }    Use this function to attach datepicker, time picker and etc. Example:    dataInit : function (elem) { $(elem).datepicker(); }    dataUrl  string  This option is valid only for the elements of type select - i.e stype:'select'. The option represent the url from where we load the select element. When this option is set the element will be filled with values from the ajax request. The data should be a valid html select element with the desired options. By example the request should contain  select option value=\"1\" One /option   option value=\"2\" Two /option /select . This is called only once in filterToolbar method and every time in single and advanced searching.  To cache the data use cacheDataUrl option - see above.   The ajax options when dataUrl is used can be overwriten using the grid parameter  ajaxSelectOptions . When the ajax call is made to the server is posted a object (data parameter) which contain the searchoptions plus the  { id: 'dynamic_id', name : 'name_from_colModel', oper : 'search'}    defaultValue  string  If not empty set a default value in the search input element. The value is only set and does not perform automatic search.    delimiter  string  Used when the  value  option is a string and delimit the different key:value pair in the string. The default option is \";\"    searchhidden  boolean  By default hidden elements in the grid are not search-able . In order to enable searching when the field is hidden set this option to true    searchOperMenu  boolean  Available only in toolbar search method. The option enable/disable the search operators menu for particular field in colModel. The option work with global searchOperator option in toolbar search method.    searchtitle  string  The option work only in toolbar search method when the searchOperator option is true and the searchOperMenu is true for the field. Set a title for a search operator menu for the column to be used when mouse over the element or if not set the more common operandTitle option from language file is used.    separator  string  Used when the  value  option is a string and separate the key and value of the key:value pair. Default value is \":\"    sopt  array  This option is used only in advanced, single and toolbar searching and determines the operation that is applied to the element. If not set all the available options will be used. When used in toolbar searching the first element is used. The available option are:     ['eq', 'ne', 'lt', 'le', 'gt', 'ge', 'bw', 'bn', 'in', 'ni', 'ew', 'en', 'cn', 'nc']    The corresponding texts are in language file (see  odata  option) and mean the following:    ['equal', 'not equal', 'less', 'less or equal', 'greater', 'greater or equal', 'begins with', 'does not begin with', 'is in', 'is not in', 'ends with', 'does not end with', 'contains', 'does not contain']   The elements in sopt array can be mixed in any order.    value  mixed  The option is used only for  stype  select and defines the select options in the search dialogs. When set for stype select and dataUrl option is not set, the value can be a string or object.   If the option is a string it must contain a set of value:label pairs with the value separated from the label with a colon (:)  separator  and ended with(;)  delimiter . The string should not end with a (;)-  searchoptions : {value : \"1:One;2:Two\" } . If set as object it should be defined as pair value:name -  searchoptions : {value : {1:'One',2:'Two'} }      Note  When the dataUrl in searchoptions object is not used for the search type select, the definitions for the select are taken first from searchoptions value property and if this is not defined a editoptions value property is used- i.e editoptions: {value:\"1:one;2:two,\u2026\"\"}. See below how to use these options in different search methods.   Below is example on how to attach a jQueryUI datepicker to a date field. Before to use this example, please be a sure you have loaded the jQueryUI library, which includes datapicker module.  script  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel :   [ \n       ... \n       { \n         name :   price , \n         index :   price , \n         search :   true , \n         stype :   text , \n         datefmt   :   Y-m-d \n         searchoptions :   { \n           dataInit :   datePick , \n           title :   Select Date } \n         }, \n       ... \n    ]  ...  });  datePick   =   function ( elem )  { \n    jQuery ( elem ). datepicker ({ \n      dateFormat :   yy-mm-dd \n    });  }  /script   To synchronize format in jqGrid and datepicker a dateFormat option is used in datepicker. Note the difference in descriptions - Guriddo jqGrid uses PHP like date formatting, while datepicker another one.", 
            "title": "searchoptions"
        }, 
        {
            "location": "/user-guide/searching/#searchrules", 
            "text": "This option add additional properties to the search-able element and should be used in colModel. Mostly it is used to validate the user input before submitting the value(s) to the server. Syntax:  script  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel :   [ \n       ... \n       { name : price ,   ...,   searchrules : { required : true ....},   search : true   }, \n       ... \n    ]  ...  });  /script    Warning  The searchrules are used only in the searching dialog (searching and advanced searching) and not in the other search methods.   All error messages are located into the language file of edit.msg property. Bellow is the English part of the messages:  $ . jgrid . regional [ en ]   =   { \n     edit   :   { \n         addCaption :   Add Record , \n     ... \n         msg :   { \n             required : Field is required , \n             number : Please, enter valid number , \n             minValue : value must be greater than or equal to  , \n             maxValue : value must be less than or equal to , \n             email :   is not a valid e-mail , \n             integer :   Please, enter valid integer value , \n             date :   Please, enter valid date value , \n             url :   is not a valid URL. Prefix required ( http://  or  https:// ) , \n             nodefined   :    is not defined! , \n             novalue   :    return value is required! , \n             customarray   :   Custom function should return array! , \n             customfcheck   :   Custom function should be present in case of custom checking! \n\n         } \n     },  ...  }   These messages can not be overwritten dynamically.  The  searchrules  object have the following properties     Option  Type  Description      required  boolean  (true or false) if set to true, the value will be checked and if empty, an error message will be displayed.    number  boolean  (true or false) if set to true, the value will be checked and if this is not a number, an error message will be displayed.    integer  boolean  (true or false) if set to true, the value will be checked and if this is not a integer, an error message will be displayed.    minValue  number(integer)  if set, the value will be checked and if the value is less than this, an error message will be displayed.    maxValue  number(integer)  if set, the value will be checked and if the value is more than this, an error message will be displayed.    email  boolean  if set to true, the value will be checked and if this is not valid e-mail, an error message will be displayed    url  boolean  if set to true, the value will be checked and if this is not valid url, an error message will be displayed    date  boolean  if set to true a value from datefmt option is get (if not set ISO date is used) and the value will be checked and if this is not valid date, an error message will be displayed    time  boolean  if set to true, the value will be checked and if this is not valid time, an error message will be displayed. Currently we support only hh:mm format and optional am/pm at the end    custom  boolean  if set to true allow definition of the custom checking rules via a custom function. See below    custom_func  function  this function should be used when a custom option is set to true. Parameters passed to this function are the value, which should be checked and the name - the property from colModel. The function should return array with the following parameters: first parameter - true or false. The value of true mean that the checking is successful false otherwise; the second parameter have sense only if the first value is false and represent the error message which will be displayed to the user. Typically this can look like this [false,\"Please enter valid value\"]", 
            "title": "searchrules"
        }, 
        {
            "location": "/user-guide/searching/#more-about-searching", 
            "text": "All search modules uses the   url  parameter in grid to perform the search. In some methods there is additional separate option for the url which can be used too.  When the search is performed the  postData  array is filled with the needed data for the search.  The grid parameter  search  in grid options is set to true in order to indicate the searching. Server side the name of the parameter set in postData is  _search  (note the difference) which can be obtained using the GET or POST data array. Use  option prmNames  to set another name for posting to server.  When the grid is triggered using the refresh button in Navigator the search option is set to false.  Every search method creates its own method to clear the searched data from postData array.  Searching is possible too if local data is used.  When posting to the server or search locally, we try to pass, not the name, but the index set in colModel. When the index is not found we use the name.  When datatype is local serch is performed by index set in colModel. To force search by name use  useNameForSearch  grid option", 
            "title": "More about searching"
        }, 
        {
            "location": "/user-guide/searching/#toolbar-searching", 
            "text": "This method construct searching creating input elements just below the header elements of the grid. When the header elements are re sized the input search elements are also re sized according to the new width. \nThe method uses the url option in grid to perform a search to the server and has his own one. \nWhen the search is activated, an object of type name:value is posted to the server. Note that this object is added to the postData parameter. Posted are fields that have an entered value. When we clear the search form, the values are deleted from the postData array. When posting to the server, we try to pass, not the name, but the index set in colModel. When the index is not found we use the name. Additionally, we add a _search=true to the posted data to the server and grid options search is set to true.", 
            "title": "Toolbar searching"
        }, 
        {
            "location": "/user-guide/searching/#calling-convention", 
            "text": "...  jQuery ( #grid_id ). jqGrid ( filterToolbar , options );  ...   Where :   grid_id is the id of already constructed grid  options is a object containing different configuration setting. See below   This command will create a search elements something like this:   This method uses the definitions for searching from colModel. See  Configuration  The method uses the following properties from language file.  $ . jgrid . regional [ en ]   =   { \n   ... \n     search   :   { \n     ... \n         odata :   [{   oper : eq ,   text : equal },   {   oper : ne ,   text : not equal },   {   oper : lt ,   text : less },{   oper : le ,   text : less or equal },{   oper : gt ,   text : greater },{   oper : ge ,   text : greater or equal },{   oper : bw ,   text : begins with },{   oper : bn ,   text : does not begin with },{   oper : in ,   text : is in },{   oper : ni ,   text : is not in },{   oper : ew ,   text : ends with },{   oper : en ,   text : does not end with },{   oper : cn ,   text : contains },{   oper : nc ,   text : does not contain },{   oper : nu ,   text : is null },{   oper : nn ,   text : is not null },   { oper : bt ,   text : between }], \n         operandTitle   :   Click to select search operation. , \n         resetTitle   :   Reset Search Value , \n     ... \n     },  ...  }", 
            "title": "Calling convention"
        }, 
        {
            "location": "/user-guide/searching/#toolbar-search-options", 
            "text": "The options in filterToolbar method are:   Note  All events (Type function) in the table below has a  triggered event  which can be used. The name is set below to the option event      Option  Type  Description  Default      afterClear jqGridToolbarAfterClear  function  event which fires after clearing entered values (i.e., clearToolbar activated)  null    afterSearch   jqGridToolbarAfterSearch  function  event which fires after a search  null    autosearch  boolean  Search is performed according to the following rules: for text element when a Enter key is pressed (searchOnEnter is true) or while inputting values and search is performed (searchOnEnter is false). For select element when the value changes. The search parameter in grid is set to true and ajax call is made.  true    autosearchDelay  integer  The delay in milliseconds after which the search data is posted to the server in case if autosearch set to true and searchOnEnter is false  500    beforeClear jqGridToolbarBeforeClear  function  event which fires before clearing entered values (i.e. clearToolbar is activated).It is called before clearing the data from search elements. If the event return true triggering does not occur. In this case you can construct your own search parameters and trigger the grid. The triggered event should return the string 'stop' in order not to trigger the grid. Any other return value causes triggering.  null    beforeSearch jqGridToolbarBeforeSearch  function  event which fires before a search. It is called before triggering the grid. If the event return true triggering does not occur. In this case you can construct your own search parameters and trigger the grid to search the data. The triggered event should return the string 'stop' in order not to trigger the grid. Any other return value causes triggering.  null    defaultSearch  string  The option determines the default search operator when a search is performed. If any valid option is set, then it will be used for the default operator in all fields. See  Search Configuration sopt array here  for the available options  bw    errorcheck  boolean  if searchrules are defined this turn on of error checking. If there is a error in the input the filter is not posted to the server and a error message appear.  true    groupOp  string  This option is valid only if the option stringResult is set to true and determines the group operation. Can have values AND and OR.  Advanced searching  AND    groupOpSelect  string  The option apply only on search fields which are selects and have a multiselect option. The selected values in multiselect are grouped with this operator between them. Can be OR or AND.  OR    odata  object  Defines the long texts for the particular operations when searching. The default object is in language file and can be found as $.jgrid.regional['xx'].search.odata - see  Configuration . The default values are: [{ oper:'eq', text:'equal'},{ oper:'ne', text:'not equal'},{ oper:'lt', text:'less'},{ oper:'le', text:'less or equal'},{ oper:'gt', text:'greater'},{ oper:'ge', text:'greater or equal'},{ oper:'bw', text:'begins with'},{ oper:'bn', text:'does not begin with'},{ oper:'in', text:'is in'},{ oper:'ni', text:'is not in'},{ oper:'ew', text:'ends with'},{ oper:'en', text:'does not end with'},{ oper:'cn', text:'contains'},{ oper:'nc', text:'does not contain'}]     onClearSearchValue jqGridToolbarClearVal  function  the event is triggered after the clear icon (see  searchoption  clearSearch)  is clicked (near the search field) and before triggering the grid in case autosearch is true. Parameters passed to this event are: the search element, column index, searchoptions, default value.  null    operands  object  The short text operation which is displayed to the user when a operation button is clicked. By example for equal we display '=='. The default setting of this object is: { \"eq\" :\"==\", \"ne\":\"!\", \"lt\":\" \", \"le\":\" =\", \"gt\":\" \", \"ge\":\" =\", \"bw\":\"^\", \"bn\":\"!^\", \"in\":\"=\", \"ni\":\"!=\", \"ew\":\"\\|\", \"en\":\"!@\", \"cn\":\"~\", \"nc\":\"!~\", \"nu\":\"#\", \"nn\":\"!#\", \"bt\":\"...\"}.  Changes have effect only if the value symbol is changed. See searchOperators option     operandTitle  string  This options is valid only when searchOperators is true. It appear when the user hover with a mouse to the operation button (default for all search fields). This can be overwritten with option searchtitle in searchoptions in colModel. The default text is taken from the language file     resetIcon  string  String which appear near the search field to perform clearing the search value. See  clearSearch  in colModel searchoptions  'x'    restoreFromFilters  boolean  If set to true the method read the existing search data (postData object) when creating the toolbar search and try to restore it so that the toolbar search fields have the values of the previous search. Useful for initialization of the grid with filtered data.  false    searchOnEnter  boolean  Determines how the search should be applied. If this option is true see the autosearch option. If the option is false then the search is performed immediately when the user pres some character.  true    searchOperators  boolean  When set to true allows the user to select search operations for particular field when searching. The click operations are created near the search field. In this case possible search operators that can appear can be configured with  sopt  option in  searchoptins  in colModel.  false    splitSelect  string  String which delimit the selects in multiselect mode  ','    stringResult  boolean  Determines how to post the data on which we perform searching. When the this option is false the posted data is in key:value pair, if the option is true, the posted data is equal on those as in searchGrid method  Advanced searching . If this option is set to true the resulting search data that is posted to the server is string.  false    url  string  With this string it is possible to overwrite the url parameter used in grid to perform the search  empty      Note  The sopt option in searchoptions can be used to set a different operator for the particular field in colModel.", 
            "title": "Toolbar search options"
        }, 
        {
            "location": "/user-guide/searching/#other-toolbar-methods", 
            "text": "destroyFilterToolbar() \nRemoves the filter toolbar complete from the grid unbinding all events  parameters  returns \njqGrid object  refreshFilterToolbar( object options )  This method only refresh the toolbar filter and does not use reload to reload data. It loads the values from filters parameter in postData  parameters   object options - set of options with default values   options   =   { \n   filters   :   , \n   onClearVal   :   null , \n   onSetVal   :   null  }    filters - if not set is read from postData.filtes property. Can be used for custom refresh.  onClearVal - event which occur after the search values are cleared. The event is executed on every field.  onSetVal - event which occur after the refreshed values is set. Executes on every field.   returns \njqGrid object   Additional methods for toolbar searching are available for using.   Warning  The methods below can not be used with the jqGrid API - they must be called like this:   ...  var   sgrid   =   $ ( #grid_id )[ 0 ];  sgrid . triggerToolbar ();   clearToolbar( boolean trigger )  Clears the toolbar search values, set the default one (if any) and reloads the grid depending on trigger parameter. The search grid parameter is set to false.  parameters   boolean trigger - if the parameter is set to false the grid is not triggered when the method is executed - only the entered values are cleared.   returns  \nnone  toggleToolbar()  Toggeles the toolbar with the search elements  parameters  returns \nnone  triggerToolbar()  When this method is called a search is performed, the search parameter in grid becomes true and ajax call is made to the server or a local search is performed  parameters  returns \nnone", 
            "title": "Other toolbar methods"
        }, 
        {
            "location": "/user-guide/searching/#tooolbar-server-posting", 
            "text": "Toolbar searching can post data to the server two ways according to certain parameters:   If one of the toolbar option is set to true:  stringResult  or  searchOperators  or the grid optiopns parameter  datatype  is set to  local , then the toolbar serch method post the data as  string field  In all other cases the data is posted in  name value pair", 
            "title": "Tooolbar server posting."
        }, 
        {
            "location": "/user-guide/searching/#single-searching", 
            "text": "Single field searching is a way to search data on one field at a time. When using this method we construct a modal form where the user can select a field and condition to apply the search.", 
            "title": "Single searching"
        }, 
        {
            "location": "/user-guide/searching/#calling-convention_1", 
            "text": "script  ...  jQuery ( #grid_id ). jqGrid ( searchGrid ,   options   );  ...  /script   Where   grid_id is the id of the already constructed grid  options is an array of settings in name: value pairs format.   Typically when this method is called it launches the modal dialog and makes the grid inaccessible until the dialog is not closed. \nThis method is the default search method in the navigator if the search is enabled. The search parameters in navigator can be set the same way as the options described below.  script  ...  jQuery ( #grid_id ). jqGrid ({  ... \n    pager   :   #gridpager ,  ...  }). jqGrid ( navGrid , #gridpager ,{ view : true ,   del : false },  {},   //  default settings for edit  {},   //  default settings for add  {},    // delete instead that del:false we need this  { search_options },   // search options  {}   /* view parameters*/  );  ...  /script   By default the dialog appears at upper left corner of the grid.  The search dialog has a options overlay (default 10). If this option is set to 0 the cover overlay is disabled and the user can interact with the grid.", 
            "title": "Calling convention"
        }, 
        {
            "location": "/user-guide/searching/#single-search-options", 
            "text": "The method uses the common search options and rules from  colModel  This method uses the following properties from language file grid.locale-xx and they can be passed in the options array of the search method  $ . jgrid . regional [ en ]   =   { \n   ... \n     search   :   { \n         caption :   Search... , \n         Find :   Find , \n         Reset :   Reset , \n         odata :   [{   oper : eq ,   text : equal },   {   oper : ne ,   text : not equal },   {   oper : lt ,   text : less },{   oper : le ,   text : less or equal },{   oper : gt ,   text : greater },{   oper : ge ,   text : greater or equal },{   oper : bw ,   text : begins with },{   oper : bn ,   text : does not begin with },{   oper : in ,   text : is in },{   oper : ni ,   text : is not in },{   oper : ew ,   text : ends with },{   oper : en ,   text : does not end with },{   oper : cn ,   text : contains },{   oper : nc ,   text : does not contain },{   oper : nu ,   text : is null },{   oper : nn ,   text : is not null },   { oper : bt ,   text : between }], \n     ... \n     },  ...  }    Note  The events (Type function) in the table below has a  triggred event  which can be used. The name is set below to the option event. Note that not all events have triggered event equivalent.      Option  Type  Description  Default      afterChange  function  fires after we change something in the filter - field, operation or value  null    afterRedraw  function  This function if defined is lunched every time the filter is redrawed - the filter is redraw-ed every time when we add or delete rules or fields To this function we pass the search parameters as parameter. In single search it is lunched once when created and when the reset button is pressed.  null    afterShowSearch jqGridFilterAfterShow  function  This event fires (if defined) every time after the search dialog is shown. Parameter passed to this event is the filter DOM element.  null    beforeShowSearch jqGridFilterBeforeShow  function  This event fires (if defined) every time before the search dialog is shown. If the event return false the search dialog is not shown.  null    buttons  array  Defines a custom buttons in the searchForm. Every element into the array is a object (button) with the following properties:   icon  - defines a icon according to the CSS framework used.    side  - left or right - the position of the icon    text  - Text to appear in the button   position  - the position of the button - last or first    click  - function that is executed when the button is click. To the click function is passed the search form, search parameters and click event    id  - id to identify the button. If not set the jqGrid assing it internally using the jqGrid randId function.  empty array    caption  string  The caption of the search form  lang file    closeAfterReset  boolean  If set to true this closes the search dialog after the user apply a reset - i.e. click on reset button  false    closeOnEscape  boolean  If this option is set to true the search dialog will be closed if the user press ESC key  false    closeAfterSearch  boolean  If set to true this closes the search dialog after the user apply a search - i.e. click on Find button  false    drag  boolean  Enables or disables dragging of the modal  true    errorcheck  boolean  if searchrules are defined this turn on of error checking. If there is a error in the input the filter is not posted to the server and a error message appear.  true    Find  string  The text in the find button  lang file    height  mixed  Defines the height of the search dialog  auto    jqModal  boolean  If set to true uses jqModal plugin (if present) to create the dialogs. If set to true and the plugin is not present jqGrid uses its internal function to create dialog  true    layer  string  If defined this should be a valid id in the DOM. Also if this option is set the filter is inserted as child of this element  null    left  integer  the initial left position of modal dialog. The default value of 0 mean the left position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the left position from upper left corner of the window.  0    loadDefaults  boolean  If set to true the method load the existing filtered data stored in  filters  property in postData object  true    modal  boolean  Is set to true the search dialog becomes modal  false    odata  array  Translation strings that corresponds to the sopt options  lang file    onClose  function  If defined this event fires when the dialog is closed. Can return true or false. If the event return false the dialog will not be closed  null    onInitializeSearch jqGridFilterInitialize  function  This event occurs only once when the modal is created  null    onReset  function  If defined this function fire if reset button is activated  null    onSearch  function  If defined this event fires when the search Button is clicked.  null    overlay  integer  If this option is set to 0 the overlay in grid is disabled and the user can interact with the grid while search dialog is active  30    recreateFilter  boolean  when set to true the form is recreated every time the search dialog is activated with the new options from colModel (if they are changed)  false    resize  boolean  Enables or disables resizing of the modal  true    Reset  string  The text for the clear  button  lang file    searchOnEnter  boolean  Determines whether search should be applied on pressing Enter key.  false    showOnLoad  boolean  This option is valid only in navigator options. If set to true the dialog appear automatically when the navigator is constructed for first time  false    sField  string  The name of the property which will be posted  as a name for the searched  field. See  predefined fields  searchField    sOper  string  The name of the property which will be posted as a operation for the searched  field. See  predefined fields  searchOper    sopt  array  Use this option to set common search rules. If not set all the available options will be used. All available option are: ['eq','ne','lt','le','gt','ge','bw','bn','in','ni','ew','en','cn','nc','nu','nn'] The corresponding texts are in language file and mean the following: ['equal','not equal', 'less', 'less or equal','greater','greater or equal', 'begins with','does not begin with','is in','is not in','ends with','does not end with','contains','does not contain','is null','is not null'] Note that the elements in sopt array can be mixed in any order.     sortStrategy  function  apply a custom sort function for the order of the names that appear. Default order is those from colModel  null    sValue  string  The name of the property which will be posted as a value for the searched field. See  predefined fields  searchString    top  integer  the initial top position of modal dialog. The default value of 0 mean the top position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the top position from upper left corner of the window.  0    width  integer  Defines the width os the search dialog  450    zIndex  integer  The starting z-index for the dialog. If you will see the dialog form under another elements or dialogs you should use the parameter with some value higher as default value 950. In the most cases it should be the value higher as 1000 - the default value of jQuery UI dialog.  950", 
            "title": "Single search options"
        }, 
        {
            "location": "/user-guide/searching/#single-search-posting", 
            "text": "This method post the search data to the server only in a  Predefined fields  format", 
            "title": "Single search posting"
        }, 
        {
            "location": "/user-guide/searching/#advanced-searching", 
            "text": "Advanced searching is a way to search on multiple fields at the same time with different conditions. Advanced searching and single searching use the same method, but with different settings and posting data.", 
            "title": "Advanced searching"
        }, 
        {
            "location": "/user-guide/searching/#calling-convention_2", 
            "text": "script  ...  jQuery ( #grid_id ). jqGrid ( searchGrid ,   { multipleSearch : true ,...}   );  ...  /script   Where   grid_id is the id of the already constructed grid  multipleSearch:true activates the advanced searching  \u2026 other options set as name:value pair   To set more advanced search do:  script  ...  jQuery ( #grid_id ). jqGrid ( searchGrid ,   { multipleSearch : true ,   multipleGroup : true ,...}   );  ...  /script    multipleGroup:true activates the more advanced search dialog allowing to add complex group conditions   Typically when this method is called it launches the modal dialog and makes it so the grid inaccessible until the dialog is closed. \nThis method is not the default search method in the navigator. To enable this you should either set the default search options using the extend method or set it in the navigator in the place of the search options.  The advanced searching can look like this when created:   As can be seen the user can add or delete an unlimited number of conditions to perform the search. \nTo add a condition the plus button should be pressed. \nTo delete a condition the minus button should be pressed", 
            "title": "Calling convention"
        }, 
        {
            "location": "/user-guide/searching/#advanced-search-options", 
            "text": "The method uses the same options as those from  Single Searching  plus the following:  This method uses the following properties from language file grid.locale-xx and they can be passed in the options array of the search method  $ . jgrid . regional [ en ]   =   { \n   ... \n     search   :   { \n         caption :   Search... , \n         Find :   Find , \n         Reset :   Reset , \n         odata :   [{   oper : eq ,   text : equal },   {   oper : ne ,   text : not equal },   {   oper : lt ,   text : less },{   oper : le ,   text : less or equal },{   oper : gt ,   text : greater },{   oper : ge ,   text : greater or equal },{   oper : bw ,   text : begins with },{   oper : bn ,   text : does not begin with },{   oper : in ,   text : is in },{   oper : ni ,   text : is not in },{   oper : ew ,   text : ends with },{   oper : en ,   text : does not end with },{   oper : cn ,   text : contains },{   oper : nc ,   text : does not contain },{   oper : nu ,   text : is null },{   oper : nn ,   text : is not null },   { oper : bt ,   text : between }], \n     groupOps :   [{   op :   AND ,   text :   all   },{   op :   OR ,    text :   any   }], \n         addsubgrup   :   Add subgroup , \n         addrule   :   Add rule , \n         delgroup   :   Delete group , \n         delrule   :   Delete rule     \n     ... \n     },  ...  }      Option  Type  Description  Default      addsubgroup  string  Title text when the user hover over the button '+'  lang file    addrule  string  Title text when the user hover over the button '+{}'  lang file    delgroup  string  Title text when the user hover over the button  '-'  lang file    delrule  string  Title text when the user hover over the button '-{}'  lang file    groupOps  array  The array describes the logical condition between the fields - i.e OR or AND. Evey element of the array is object with the following meaning -  op   property describes the values posted to the server in groupOp item and  text  property described the text displayed to the user - By example { op: \"AND\", text: \"AND\" }.  The default value is the first element into the array. It can be set only one element in the array  lang file    showQuery  boolean  If set to true shows the query which is generated when the user defines the conditions for the search. Valid only in advanced search. Again with this a button near search button appear which allows the user to show or hide the query string interactively  false    sFilter  Determines the name of the posting data to the server.  filters     multipleSearch  boolean If set to true this activates the advanced searching  false     multipleGroup  boolean  If set to true this activates the advanced searching with a possibilities to define a complex conditions. The best way to see what conditions are generated is to use the showQuery options set to true.  false    tmplNames  array  Defines the name of the templates used for easy user input - by example like this : ['Template1', 'Template2',\u2026]. See demos at end of this chapter.  null    tmplFilters  array  array of objects    where every object correspond to the object generated in  filters  like. The length of this array should correspond to the length of tmplNames array. See demos at end of this chapter.  null    tmplLabel  string  If a template is defined a select element appear between the Reset and Find buttons. This is a the text describing the select  Template:     Some options (not all) and events in advanced and single searching can be extended using the  $ . jgrid . filter   =   {...}   object. The object needs to be set before calling the method.", 
            "title": "Advanced search options"
        }, 
        {
            "location": "/user-guide/searching/#advanced-search-posting", 
            "text": "This method post the search data to the server only in a  String field  format", 
            "title": "Advanced search posting"
        }, 
        {
            "location": "/user-guide/searching/#search-all-fields", 
            "text": "This type of searching allow to search on all fields in grid grid data using single input value. This method  have effect only if the  datatype  parameter is local or  loadonce  parameter is true, which at end set the datatype to local.", 
            "title": "Search all fields"
        }, 
        {
            "location": "/user-guide/searching/#conversions-and-options", 
            "text": "script  ...  jQuery ( #grid_id ). jqGrid ( filterInput ,   value ,   options   );  ...  /script   Where   string value is the value to be searched  object options - various options for that search with defaults:   options   =   { \n   defaultSearch   :   cn , \n   groupOp   :   OR , \n   searchAll   :   false , \n   beforeSearch   :   null , \n   afterSearch   :   null  }    options have the following description  deafultSearch - determines the default operation in searching. Default is  cn  contain. The option can have one of the following values defined in odata array (name property) in language file.  groupOp - Defines how the search criteria can be set between different fields - can be  OR  or  AND  . Default is OR which mean that the where clause is like this WHERE field1 ='val' OR field2='val'....  searchAll - By default the search is applied on fields with search=true parameter in colModel. If set to true the search is applied on all fields independent of the search parameter.  beforeSearch or triggered event jqGridFilterInputBeforeSearch  - the event occur before to apply the search. If the triggered event return 'stop' or the option event return false the search is not performed.  afterSearch - or triggered event jqGridFilterInputAfterSearch - the event occur after the search is performed.     See examples at end of  this chapter .", 
            "title": "Conversions and options"
        }, 
        {
            "location": "/user-guide/searching/#posting-when-searching", 
            "text": "Depending on the search methods we have three types of posting the searched data to the sever (in case the datatype parameter is not local)", 
            "title": "Posting when searching"
        }, 
        {
            "location": "/user-guide/searching/#name-value-pair", 
            "text": "This type of searching is available in  toolbar searching  method only when the option  stringResult  is set to false.  This type of posting is the simplest one. In this case when a search is activated according to the rules the grid option  search  is set to true. To the server are posted the fields which have a value on it and additionally a new postdata pair is added  _search =  true  When posting to the server or search locally, we try to pass, not the name, but the index set in colModel. When the index is not found we use the name.  All these values are added to the postData array.  Let suppose that we have the following grid:  $ ( #grid_id ). jqGrid ({ \n      url :   example.php , \n      datatype :   json , \n      mtype :   GET , \n      colModel :   [ \n          {   name :   invid ,   index :   invoice_id   width :   55   }, \n          {   name :   invdate ,   index :   Invoice_date ,   width :   90   }, \n          {   name :   amount ,    width :   80 ,   align :   right   }, \n          {   name :   tax ,   width :   80 ,   align :   right   }, \n          {   name :   total ,   width :   80 ,   align :   right   }, \n          {   name :   note ,   width :   150 ,   sortable :   false   } \n      ],  ...  });  $ ( #grid_id ). jqGrid ( filterToolbar ,   {   stringResult   :   false   });   and a filterToolbar search method is lunched with option  stringResult : false  When the user fill the  invdate  field  with some value like '2017-01-01' and  amount   field with 200 and press Enter then the following data is added to the postData object  postData   :   { \n   ... \n   Invoice_date   :   2017-01-01 , \n   amount   :   200 , \n   _search   :   true \n   ...  }   and we have the following url:  http://www.myserver.com/example.php?...  Invoice_date=2017-01-01 amount=200 _search=true ...   Note  The posted fields names are get from index property if they available and if not from the name property.   The operation is not posted. This way developer is free to interpret the search data as they want.", 
            "title": "Name value pair"
        }, 
        {
            "location": "/user-guide/searching/#predefined-fields", 
            "text": "This type of searching is used in  single searching  module.  In this case when the search is activated, jqGrid adds three parameters to postData, respectively  to the url (again with _search=true), in name=value pairs:   searchField , the value comes from the index or name  in colModel  searchString  , the value to be searched  searchOper , the value is the operation of search - see sopt array   The names of these properties can be configured by developer. The corresponding one are in the options of  single searching  method and the names are  sField, sValue, sOper  Using the example from previous chapter if the user select Invoice date and operation equal, then the following is added to the postData object:  postData   :   { \n   ... \n   searchField   :   Invoice_date , \n   searchString   :   2017-01-01 , \n   searchOper   :   eq , \n   _search   :   true \n   ...  }   and the the url is:  http://www.myserver.com/example.php?... searchField=Invoice_date searchString=2017-01-01 searchOper=eq ...", 
            "title": "Predefined fields"
        }, 
        {
            "location": "/user-guide/searching/#string-field", 
            "text": "This type of posting is available in  toolbar searching  (when stringResult is true),  Advanced searching  and searching in  column Menu .  When the search data is posted to the server added is only one parameter (again with _search=true) to the url and this is the  filters  element.  To use this type of searching see the  stringResult  option in the appropriate methods  The posted data (the postData property filters) can look like this:  filters   = \n   { \n    groupOp : OR , \n    rules : [{ field : a.id , op : eq , data : 1 }], \n    groups : [ \n         { \n             groupOp : AND , \n             rules : [{ field : a.id , op : eq , data : 2 }], \n             groups : [...] \n         } \n     ]  }   The posted data is a JSON string with the following parameters:   groupOp - this determines the rules of the search. Can be AND or OR. This option can be changed from the user with the help of the select box near the Reset button. When the user select all (English variant) the AND is set. When the user selects any the OR is set.  rules - an array with the following options  field - the field property contains the name of the selected index (or name) from colModel  op - determines the operation of the searching - see the  sopt  in the searchoptions  data - is the entered data to be searched on    groups - set of other groupOp, rules elements to define a complex search query   Rather than to explain how this string is build-ed a examples will be shown.  In the example below:   the following data will be posted to the server:  postData   :   { \n   ... \n   filters   :   { \n     groupOp :   AND , \n     rules :   [ \n       { field :   CustomerID ,   op :   bw ,   data :   W }, \n       { field :   Freight ,   op :   le ,   data :   1 } \n     ], \n     groups : [] \n   } \n   \\ _search   :   true \n   ...  }   For this example:   the following data will be posted to the server:  postData   :   { \n  filters   :   { \n    groupOp :   OR , \n    rules :   [], \n    groups :   [ \n      { \n        groupOp : AND , \n        rules :   [ \n          { field : OrderDate , op : gt , data : 2001-01-01 }, \n          { field : OrderDate , op : lt , data : 2013-01-01 } \n        ], \n        groups : [] \n      },{ \n        groupOp : AND , \n        rules : [ \n          { field : Freight , op : lt , data : 10 }, \n          { field : CustomerID , op : bw , data : W } \n        ], \n        groups : [] \n      } \n    ] \n  }, \n  _search   :   true  }", 
            "title": "String field"
        }, 
        {
            "location": "/user-guide/searching/#search-examples", 
            "text": "", 
            "title": "Search examples"
        }, 
        {
            "location": "/user-guide/searching/#all-fields-searching", 
            "text": "The following example shows how to use the all fields search method when the user type in a single input filed. When the user continue typing new filter values will be show.  The html definition:  ... label   for = search_cells  Search Grid:  / label  input   id = search_cells   type = search /  table   id = jqGrid / table  div   id = jqGridPager / div \n...  The JavaScript  $ ( #jqGrid ). jqGrid ({ \n   url :   data.json , \n   mtype :   GET , \n   datatype :   json , \n   colModel :   [ \n     { \n       label   :   Order ID , \n       name :   OrderID , \n       key :   true , \n       width :   75   , \n     },{ \n       label :   Customer ID , \n       name :   CustomerID , \n       width :   150 , \n     },{ \n       label :   Order Date , \n       name :   OrderDate , \n       width :   150 , \n       sorttype : date , \n       formatter :   date , \n       srcformat :   Y-m-d , \n       stype   :   text , \n       newformat :   n/j/Y , \n     },{ \n       label   :   Ship Name , \n       name :   ShipName , \n       width :   150 , \n     },{ \n       label :   Freight , \n       sorttype :   number , \n       name :   Freight , \n       width :   150 , \n     }, \n   ], \n   loadonce :   true , \n   viewrecords :   true , \n   width :   780 , \n   height :   250 , \n   rowNum :   10 , \n   pager :   #jqGridPager  });  var   timer ;  $ ( #search_cells ). on ( keyup ,   function ()   { \n   var   self   =   this ; \n   if ( timer )   { \n     clearTimeout ( timer ); \n   } \n   timer   =   setTimeout ( function (){ \n     $ ( #jqGrid ). jqGrid ( filterInput ,   self . value ); \n   }, 0 );  });   As can be seen we bind a  keyup  event to the search input field  search_cells  and when the user type a letter the grid is triggered with the resulting data.", 
            "title": "All fields searching"
        }, 
        {
            "location": "/user-guide/searching/#search-using-template", 
            "text": "With this example we demonstrate how we can have a predefined filters, which will simplify the searching. For this purpose we will use tmplNames and tmplFilters in navigator (searchGrid method) .  The html definition:  ... table   id = jqGrid / table  div   id = jqGridPager / div \n...  The JavaScript  $ ( #jqGrid ). jqGrid ({ \n   url :   data.json , \n   mtype :   GET , \n   datatype :   json , \n   colModel :   [ \n     { \n       label   :   Order ID , \n       name :   OrderID , \n       key :   true , \n       width :   75   , \n     },{ \n       label :   Customer ID , \n       name :   CustomerID , \n       width :   150 , \n     },{ \n       label :   Order Date , \n       name :   OrderDate , \n       width :   150 , \n       sorttype : date , \n       formatter :   date , \n       srcformat :   Y-m-d , \n       stype   :   text , \n       newformat :   n/j/Y , \n     },{ \n       label   :   Ship Name , \n       name :   ShipName , \n       width :   150 , \n     },{ \n       label :   Freight , \n       sorttype :   number , \n       name :   Freight , \n       width :   150 , \n     }, \n   ], \n   loadonce :   true , \n   viewrecords :   true , \n   width :   780 , \n   height :   250 , \n   rowNum :   10 , \n   pager :   #jqGridPager  });  var   template1   =  {   groupOp :   AND , \n       rules :   [ \n         {   field :   CustomerID ,   op :   bw ,   data :   W   }, \n         {   field :   Freight ,   op :   le ,   data :   15 } \n       ]  };  var   template2   =  {   groupOp :   AND , \n       rules :   [ \n         {   field :   ShipName ,   op :   eq ,   data :   Hanari Carnes   }, \n         {   field :   OrderID ,   op :   le ,   data :   10255 } \n       ]  };  // activate the build in search with multiple option  $ ( #jqGrid ). navGrid ( #jqGridPager ,   { \n     // show search button on the toolbar \n     search :   true , \n     add :   false , \n     edit :   false , \n     del :   false , \n     refresh :   true \n   }, \n   {},   // edit options \n   {},   // add options \n   {},   // delete options \n   { \n     // search options - define multiple search \n     multipleSearch :   true , \n     multipleGroup :   true , \n         showQuery :   true , \n         // set the names of the template \n         tmplNames :   [ Template One ,   Template Two ], \n         // set the template contents \n         tmplFilters :   [ template1 ,   template2 ]                  \n     }  );   Using this code after click on search button and select the Template One we will have the following result.   Note the object definition in template1 and template2.   Tip  If there is a dificulties to define a template object ,then use the following trick to put the correct object. \nDefine your grid with searching.  Open the search dialog and configure manually the needed template in the search dialog. After this push the Find button to make the search. Lunch the debug console and into the params tab see the  filters  string which is posted. Copy/paste this string in your code.", 
            "title": "Search using template"
        }, 
        {
            "location": "/user-guide/editing/", 
            "text": "Editing\n\n\n\n\nOne of the key reasons for displaying data in a grid is to edit it, quickly and easily.\n\n\nCommon editing properties\n\n\njqGrid supports editing data in three ways:\n\n\n\n\nCell editing\n : edit specific cells in a gird\n\n\nInline editing\n : edit several cells in the same row\n\n\nForm editing\n : create a form to edit outside of the grid\n\n\n\n\nDeveloper information\n\n\nAll of editing methods are written in separate modules which are: \ngrid.celledit.js\n for Cell editing, grid.inlinedit.js for Inline editing and grid.formedit.js for Form editing. All of these modules use the common module grid.common.js.\n\n\nOptions and Description\n\n\nAll editing modules uses a common properties in colModel in order to perform editing. Below is the list of these properties with detailed description:\n\n\n\n\neditable\n\n\nedittype\n\n\neditoptions\n\n\neditrules\n\n\nformoptions (valid only in form editing)\n\n\n\n\nThe common syntax of using these options is:\n\n\nscript\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n:\n \n[\n\n      \n...\n\n      \n{\n\n        \nname\n:\nprice\n,\n \n...,\n\n        \neditable\n:\ntrue\n,\n\n        \nedittype\n:\ntext\n,\n\n        \neditoptions\n:\n{...},\n\n        \neditrules\n:\n{...},\n\n        \nformoptions\n:\n{...}\n\n        \n...\n\n      \n},\n\n      \n...\n\n   \n]\n\n\n...\n\n\n});\n\n\n/script\n\n\n\n\n\n\nFor all other specific options and events refer to the appropriate module.\n\n\n\n\nNote\n\n\nFor every editable element jqGrid construct different name and id which are specific for every module. Refer to the appropriate module on how these are constructed\n\n\n\n\neditable\n\n\nThe editable option is a boolean and can have a value of true or false. The option defines whether this field is editable (or not). Default is false. To make a field editable, set this option to true: editable:true.\n\nWe should mention that hidden fields are not editable; instead that they have been marked as editable. In the in-line and cell editing modules you should show these fields (using the showCol method) in order to edit it. In the form editing module you should use the certain editrules option (see below).\n\n\nedittype\n\n\nEdittype option defines the type of of the editable field. Possible values are: 'text', 'textarea', 'select', 'checkbox', 'password', 'button', 'image', 'file' and 'custom'. The default value is 'text'. Below is the description of these types:\n\n\ntext\n\n\nWhen edittype is 'text', jqGrid constructs a input tag of type text:\n\n\ninput\n \ntype\n=\ntext\n \n.....\n/\n\n\n\n\n\n\nIn editoptions we can set all the possible attributes for this field. For example,\n\n\n...\n \neditoptions\n:\n \n{\nsize\n:\n10\n,\n \nmaxlength\n:\n \n15\n}\n\n\n\n\n\n\nwill cause jqGrid to construct the following input\n\n\ninput\n \ntype\n=\ntext\n \nsize\n=\n10\n \nmaxlength\n=\n15\n \n/\n\n\n\n\n\n\nIn addition to the these settings, jqGrid adds the id and name attribute.\n\n\ntextarea\n\n\nWhen edittype is 'textarea', jqGrid constructs a input tag of type textarea\n\n\ninput\n \ntype\n=\ntextarea\n \n...\n/\n\n\n\n\n\n\nIn editoptions we can add additional attributes to this type. Typically, these govern the size of the box:\n\n\n...\n \neditoptions\n:\n \n{\nrows\n:\n2\n,\ncols\n:\n10\n}\n\n\n\n\n\n\ninput\n \ntype\n=\ntextarea\n \nrows\n=\n2\n \ncols\n=\n10\n...\n/\n\n\n\n\n\n\nTo these attributes jqGrid adds id and name attributes .\n\nIf the rows and cols attributes are not set jqGrid set defaults to rows =2, cols = 20\n\n\ncheckbox\n\n\nWhen edittype is 'checkbox', jqGrid constructs a input tag as follows:\n\n\ninput\n \ntype\n=\ncheckbox\n \n...\n/\n\n\n\n\n\n\neditoptions is used to define the checked and unchecked values. The first value is checked. For example\n\n\n...\neditoptions\n:\n \n{\n \nvalue\n:\nYes:No\n \n}\n\n\n\n\n\n\nThis will construct\n\n\ninput\n \ntype\n=\ncheckbox\n \nvalue\n=\nYes\n \noffval\n=\nNo\n...\n/\n\n\n\n\n\n\ndefines a checkbox; when the value is Yes, the checkbox becomes checked, otherwise it is unchecked. This value is passed as a parameter to the editurl.\n\n\nIf in editoptions, the value property is not set, jqGrid searches for the following values (false|0|no|off|undefined) in order to construct the checkbox. If the cell content does not contain one of these values, then the value attribute becomes the cell content and offval is set to off.\n\nExample if the cell content is true, then\n\n\ninput\n \ntype\n=\ncheckbox\n \nvalue\n=\ntrue\n \noffval\n=\noff\n \nchecked\n...\n/\n\n\n\n\n\n\nTo these attributes jqGrid adds id and name attributes.\n\n\nselect\n\n\nWhen edittype is 'select', jqGrid constructs a input tag as follows:\n\n\nselect\n\n\noption\n \nvalue\n=\nval1\n Value1 \n/\noption\n\n\noption\n \nvalue\n=\nval2\n Value2 \n/\noption\n\n...\n\noption\n \nvalue\n=\nvaln\n ValueN \n/\noption\n\n\n/\nselect\n\n\n\n\n\n\nTo construct this element we have three possible variants:\n\n\n\n\nSetting the editoptions value as string The editoptions value must contain a set of value:label pairs with the value separated from the label with a colon (:) and ended with(;). Whichever you use, something like the following\n\n\n\n\neditoptions\n:\n \n{\n \nvalue\n:\n \nFE:FedEx; IN:InTime; TN:TNT\n \n}\n\n\n\n\n\n\nwill construct\n\n\nselect\n\n\noption\n \nvalue\n=\nFE\n FedEx \n/\noption\n\n\noption\n \nvalue\n=\nIN\n InTime \n/\noption\n\n\noption\n \nvalue\n=\nTN\n TNT \n/\noption\n\n\n/\nselect\n\n\n\n\n\n\nNote the last element in the string - it should not end with ;\n\n\n\n\nSetting the editoptions value as object\n\n\n\n\nIn this case the editoptions value must contain an array {} with name:value properties separated by a comma. Below is an example:\n\n\n...\n\n\ncolModel\n \n:\n \n[\n\n      \n...\n\n    \n{\nname\n:\nmyname\n,\n \nedittype\n:\nselect\n,\n \neditoptions\n:\n{\nvalue\n:\n{\n1\n:\nOne\n,\n2\n:\nTwo\n}}\n \n},\n\n      \n...\n\n\n]\n\n\n...\n\n\n\n\n\n\nThis will construct an HTML select\n\n\nselect\n\n\noption\n \nvalue\n=\n1\nOne\n/\noption\n\n\noption\n \nvalue\n=\n2\nTwo\n/\noption\n\n\n/\nselect\n\n\n\n\n\n\n\n\nSetting the editoptions dataUrl parameter The editoptions dataUrl parameter is valid only for element of edittype:select. The dataUrl parameter represent the url from where the html select element should be get. When this option is set, the element will be filled with values from the AJAX request. The data should be a valid HTML select element with the desired options - something like:\n\n\n\n\nselect\n\n\noption\n \nvalue\n=\n1\nOne\n/\noption\n\n\noption\n \nvalue\n=\n2\nTwo\n/\noption\n\n...\n\n/\nselect\n\n\n\n\n\n\nTo this element, jqGrid adds the id and name attributes as above.\n\n\nMultiple selection of options in a select box is also possible. A size attribute may be added as well\n\n\n...\neditoptions\n:\n \n{\nmultiple\n \n:\n \ntrue\n,\n \nsize\n \n:\n \n4.\n..\n \n}\n\n\n\n\n\n\nIf not set the default size attribute is 3 when multiple is true.\n\n\npassword\n\n\nWhen edittype is 'password', jqGrid constructs a input tag of type text:\n\n\ninput\n \ntype\n=\npassword\n \n.....\n/\n\n\n\n\n\n\nIn editoptions we can set all the possible attributes for this field. For example,\n\n\n...\n \neditoptions\n:\n \n{\nsize\n:\n10\n,\n \nmaxlength\n:\n \n8\n}\n\n\n\n\n\n\nwill cause jqGrid to construct the following input\n\n\ninput\n \ntype\n=\npassword\n \nsize\n=\n10\n \nmaxlength\n=\n8\n \n/\n\n\n\n\n\n\nIn addition to the these settings, jqGrid adds the id and name attribute.\n\n\nbutton\n\n\nWhen edittype is 'button', jqGrid constructs a input tag of type text:\n\n\ninput\n \ntype\n=\nbutton\n \n.....\n/\n\n\n\n\n\n\nIn editoptions we can set all the possible attributes for this field. For example,\n\n\n...\n \neditoptions\n:\n \n{\nvalue\n:\nMyButton\n}\n\n\n\n\n\n\nwill cause jqGrid to construct the following input\n\n\ninput\n \ntype\n=\nbutton\n \nvalue\n=\nMyButton\n \n/\n\n\n\n\n\n\nIn addition to the these settings, jqGrid adds the id and name attribute.\n\n\nimage\n\n\nWhen edittype is 'image', jqGrid constructs a input tag of type text:\n\n\ninput\n \ntype\n=\nimage\n \n.....\n/\n\n\n\n\n\n\nIn editoptions we can set all the possible attributes for this field. For example,\n\n\n...\n \neditoptions\n:\n \n{\nsrc\n:\npath_to_my_image\n}\n\n\n\n\n\n\nwill cause jqGrid to construct the following input\n\n\ninput\n \ntype\n=\nimage\n \nsrc\n=\npath_to_my_image\n \n/\n\n\n\n\n\n\nIn addition to the these settings, jqGrid adds the id and name attribute.\n\n\nfile\n\n\nWhen edittype is 'file', jqGrid constructs a input tag of type text:\n\n\ninput\n \ntype\n=\nfile\n \n.....\n/\n\n\n\n\n\n\nIn editoptions we can set all the possible attributes for this field. For example,\n\n\n...\n \neditoptions\n:\n \n{\nalt\n:\nAlt text\n}\n\n\n\n\n\n\nwill cause jqGrid to construct the following input\n\n\ninput\n \ntype\n=\nfile\n \nalt\n=\nAlt text\n...\n \n/\n\n\n\n\n\n\nIn addition to the these settings, jqGrid adds the id and name attribute.\n\n\n\n\nWarning\n\n\nWhen this element is created (usually in form editing) the form does not become \nenctype=\"multipart/form-data\"\n in order to upload the file. You should apply another plugin for this purpose - Ajax File Upload plugin works fine or set a form property \nenctype\n using some events like beforeInitData.\n\n\n\n\ncustom\n\n\nThis edit type allows definition of a custom editable element. When the edit type is set to custom we should provide a set of two functions, one which creates the element, and one that gets and sets the value from in form in order to be posted to the server.\n\nThe functions that should be defined \nare custom_element\n and \ncustom_value\n. See the editoptions below for more details\n\n\nWhen the custom element is created we automatically do the following additinal tasks:\n\n\n\n\nadd a class 'customelement' to the element\n\n\nadd attribute name with name from colModel\n\n\nadd id according to the rules for every edited module.\n\n\n\n\nThe example above will create element input type text:\n\n\nscript\n\n\nfunction\n \nmyelem\n \n(\nvalue\n,\n \noptions\n)\n \n{\n\n  \nvar\n \nel\n \n=\n \ndocument\n.\ncreateElement\n(\ninput\n);\n\n  \nel\n.\ntype\n=\ntext\n;\n\n  \nel\n.\nvalue\n \n=\n \nvalue\n;\n\n  \nreturn\n \nel\n;\n\n\n}\n\n\n\nfunction\n \nmyvalue\n(\nelem\n,\n \noperation\n,\n \nvalue\n)\n \n{\n\n    \nif\n(\noperation\n \n===\n \nget\n)\n \n{\n\n       \nreturn\n \n$\n(\nelem\n).\nval\n();\n\n    \n}\n \nelse\n \nif\n(\noperation\n \n===\n \nset\n)\n \n{\n\n       \n$\n(\ninput\n,\nelem\n).\nval\n(\nvalue\n);\n\n    \n}\n\n\n}\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n:\n \n[\n\n      \n...\n\n      \n{\n\n        \nname\n:\nprice\n,\n \n...,\n\n        \neditable\n:\ntrue\n,\n\n        \nedittype\n:\ncustom\n,\n\n        \neditoptions\n:\n \n{\n\n          \ncustom_element\n:\n \nmyelem\n,\n\n          \ncustom_value\n:\nmyvalue\n\n        \n}\n\n      \n},\n\n      \n...\n\n   \n]\n\n\n...\n\n\n});\n\n\n/script\n\n\n\n\n\n\neditoptions\n\n\nThe editoptions property is an array which contains information about the editing column. It is important to note that in the editoptions array you may set any valid attribute for the chosen edittype.\n\nThe editoptions property is used in the colModel array and the syntax is:\n\n\nscript\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n:\n \n[\n\n      \n...\n\n      \n{\nname\n:\nprice\n,\n \n...,\n \neditoptions\n:\n{\nname1\n:\nvalue1\n...},\n \neditable\n:\ntrue\n \n},\n\n      \n...\n\n   \n]\n\n\n...\n\n\n});\n\n\n/script\n\n\n\n\n\n\ni.e. in name:value pair. Below is the list of the most commonly used options:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildSelect\n\n\nfunction\n\n\nThis option is relevant only if the dataUrl parameter is set. When the server response can not build the select element, you can use your own function to build the select. The function should return a string containing the select and options value(s) as described in dataUrl option. Parameter passed to this function is the server response\n\n\n\n\n\n\ncacheUrlData\n\n\nboolean\n\n\nWhen set to true prevent multiple ajax calls when input select is build-ed using the dataUrl (see below). In this case the data is loaded only once. Default false.\n\n\n\n\n\n\ncustom_element\n\n\nfunction\n\n\nUsed only if the edittype option is set to 'custom'. This function is used to create the element. The function should return the new DOM element. Parameters passed to this function are the value and the editoptions from colModel\n\n\n\n\n\n\ncustom_value\n\n\nfunction\n\n\nUsed only if the edittype option is set to 'custom'. This function should return the value from the element after the editing in order to post it to the server. Parameter passed to this function is the element object and the operation type In inline and cell editing modules this parameters is always a string value - 'get'.  See below for the other type. In form editing this function has a different behavior. In this case we pass additional third parameter - the value. When a values of the custom element is posted to the server the second parameter has a value 'get'. In this case the function should return a value. If no values is returned in this case a error is raised. In case the data is read from the grid in order to set it in the form the operation parameter has a value 'set' and the grid value is passed as a third parameter. This way we can modify the grid value before it is displayed in the form. See the example above.\n\n\n\n\n\n\ndataEvents\n\n\narray\n\n\nlist of events to apply to the data element; uses \n$(\"#id\").on(type, [data], fn)\n to bind events to data element. Should be described like this:\neditoptions: { dataEvents: [{type: 'click', data: { i: 7 },    fn: function(e) { console.log(e.data.i);  }}, {type: 'keypress', fn: function(e) { console.log('keypress'); } }]}\n\n\n\n\n\n\ndataInit\n\n\nfunction\n\n\nWe pass the element object to this function, if defined. This function is called only once when the element is created. Example : \n \n...editoptions: { dataInit : function (elem) { $(elem).autocomplete();  } }\n. The event is called only once when the element is created. In the inline edit or the cell edit module it is called every time when you edit a new row or cell. In the form edit module every time if the same option is set to true since the form is recreated every time.\n\n\n\n\n\n\ndataUrl\n\n\nstring\n\n\nThis option is valid only for elements of type select - i.e., \nedittype:select\n and should be the URL to get the AJAX data for the select element. The data is obtained via an AJAX call and should be a valid HTML select element with the desired options \nselect\noption value='1'\nOne\n/option\n...\n/select\n``. You can use option group. The AJAX request is called only once when the element is created. In the inline edit or the cell edit module or form edit module it is called every time when you edit a new row or cell or launch the form. To cache the data use cacheDataUrl option - see above. \nbr/\n The ajax options when dataUrl is used can be overwritten using the grid parameter _ajaxSelectOptions_. When the ajax call is made to the server is posted a object (data parameter) which contain the editoptions plus the\n { id: 'dynamic_id', name : 'name_from_colModel', rowId : 'id_of_the_row', oper : 'edit'}\n\n\n\n\n\n\ndefaultValue\n\n\nmixed\n\n\nThe option can be string or function. This option is valid only in Form Editing module when used with editGridRow method in add mode. If defined the input element is set with this value if only element is empty. If used in selects the text should be provided and not the key. Also when a function is used the function should return value.\n\n\n\n\n\n\ndelimiter\n\n\nstring\n\n\nUsed when edittype : ' select' and the \nvalue\n option is a string. Delimit the different key:value pair in the string. The default option is \";\"\n\n\n\n\n\n\nNullIfEmpty\n\n\nboolean\n\n\nIf set to true a string 'null' is send to the server when the data in that field is empty\n\n\n\n\n\n\nseparator\n\n\nstring\n\n\nUsed when edittype : 'select' and the \nvalue\n option is a string. Separate the key and value of the key:value pair. Default value is \":\"\n\n\n\n\n\n\nvalue\n\n\nmixed\n\n\nWhen set for edittype checkbox this value should be a string with two possible values separated with a colon (:) - Example editoptions:{value:\"Yes:No\"}, where the first value determines the checked property. When set for edittype select value can be a string, object or function. If the option is a string it must contain a set of value:label pairs with the value separated from the label with a colon (:) and ended with(;). The string should not ended with a (;)- editoptions:{value:\"1:One;2:Two\"}. If set as object it should be defined as pair name:value - editoptions:{value:{1:'One';2:'Two'}}. When defined as function - the function should return either formatted string or object. In all other cases this is the value of the input element if defined.\n\n\n\n\n\n\nother options\n\n\nmixed\n\n\nIn this case you can set any other valid attribute for the editable element. For example, if the element is edittype:'text', we can set size, maxlength, etc. attributes. Refer to the valid attributes for the element\n\n\n\n\n\n\n\n\neditrules\n\n\nThis option add additional properties to the editable element and should be used in colModel. Mostly it is used to validate the user input before submitting the value(s) to the server. Syntax:\n\n\nscript\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n:\n \n[\n\n      \n...\n\n      \n{\nname\n:\nprice\n,\n \n...,\n \neditrules\n:\n{\nedithidden\n:\ntrue\n,\n \nrequired\n:\ntrue\n....},\n \neditable\n:\ntrue\n \n},\n\n      \n...\n\n   \n]\n\n\n...\n\n\n});\n\n\n/script\n\n\n\n\n\n\nAll error messages are located into the language file of edit.msg property. Bellow is the English part of the messages:\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \n...\n\n    \nedit\n \n:\n \n{\n\n        \naddCaption\n:\n \nAdd Record\n,\n\n    \n...\n\n        \nmsg\n:\n \n{\n\n            \nrequired\n:\nField is required\n,\n\n            \nnumber\n:\nPlease, enter valid number\n,\n\n            \nminValue\n:\nvalue must be greater than or equal to \n,\n\n            \nmaxValue\n:\nvalue must be less than or equal to\n,\n\n            \nemail\n:\n \nis not a valid e-mail\n,\n\n            \ninteger\n:\n \nPlease, enter valid integer value\n,\n\n            \ndate\n:\n \nPlease, enter valid date value\n,\n\n            \nurl\n:\n \nis not a valid URL. Prefix required (\nhttp://\n or \nhttps://\n)\n,\n\n            \nnodefined\n \n:\n \n is not defined!\n,\n\n            \nnovalue\n \n:\n \n return value is required!\n,\n\n            \ncustomarray\n \n:\n \nCustom function should return array!\n,\n\n            \ncustomfcheck\n \n:\n \nCustom function should be present in case of custom checking!\n\n\n        \n}\n\n    \n},\n\n\n...\n\n\n}\n\n\n\n\n\n\nThese messages can not be overwritten dynamically.\n\n\nBelow is the list of available options:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncustom\n\n\nboolean\n\n\nif set to true allow definition of the custom checking rules via a custom function. See below\n\n\n\n\n\n\ncustom_func\n\n\nfunction\n\n\nthis function should be used when a custom option is set to true. Parameters passed to this function are the value, which should be checked and the name - the property from colModel. The function should return array with the following parameters: first parameter - true or false. The value of true mean that the checking is successful false otherwise; the second parameter have sense only if the first value is false and represent the error message which will be displayed to the user. Typically this can look like this [false,\"Please enter valid value\"]\n\n\n\n\n\n\nedithidden\n\n\nboolean\n\n\nThis option is valid only in form editing/view module. By default the hidden fields are not editable or viewable (in \nviewGridRow\n method). If the field is hidden in the grid and edithidden is set to true, the field can be edited or viewed when add, edit or view methods are called.\n\n\n\n\n\n\ndate\n\n\nboolean\n\n\nif set to true a value from datefmt option is get (if not set ISO date is used) and the value will be checked and if this is not valid date, an error message will be displayed\n\n\n\n\n\n\nemail\n\n\nboolean\n\n\nif set to true, the value will be checked and if this is not valid e-mail, an error message will be displayed\n\n\n\n\n\n\ninteger\n\n\nboolean\n\n\n(true or false) if set to true, the value will be checked and if this is not a integer, an error message will be displayed.\n\n\n\n\n\n\nmaxValue\n\n\nnumber(integer)\n\n\nif set, the value will be checked and if the value is more than this, an error message will be displayed.\n\n\n\n\n\n\nminValue\n\n\nnumber(integer)\n\n\nif set, the value will be checked and if the value is less than this, an error message will be displayed.\n\n\n\n\n\n\nnumber\n\n\nboolean\n\n\n(true or false) if set to true, the value will be checked and if this is not a number, an error message will be displayed.\n\n\n\n\n\n\nrequired\n\n\nboolean\n\n\n(true or false) if set to true, the value will be checked and if empty, an error message will be displayed.\n\n\n\n\n\n\ntime\n\n\nboolean\n\n\nif set to true, the value will be checked and if this is not valid time, an error message will be displayed. Currently we support only hh:mm format and optional am/pm at the end\n\n\n\n\n\n\nurl\n\n\nboolean\n\n\nif set to true, the value will be checked and if this is not valid url, an error message will be displayed\n\n\n\n\n\n\n\n\nBelow is example of using custom checking.\n\n\nscript\n\n\nfunction\n \nmypricecheck\n(\nvalue\n,\n \ncolname\n)\n \n{\n\n\nif\n \n(\nvalue\n \n \n0\n \n||\n \nvalue\n \n20\n)\n\n   \nreturn\n \n[\nfalse\n,\nPlease enter value between 0 and 20\n];\n\n\nelse\n\n   \nreturn\n \n[\ntrue\n,\n];\n\n\n}\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n:\n \n[\n\n      \n...\n\n      \n{\nname\n:\nprice\n,\n \n...,\n \neditrules\n:\n{\ncustom\n:\ntrue\n,\n \ncustom_func\n:\nmypricecheck\n....},\n \neditable\n:\ntrue\n \n},\n\n      \n...\n\n   \n]\n\n\n...\n\n\n});\n\n\n/script\n\n\n\n\n\n\nformoptions\n\n\nThis option is valid only in \nform editing\n. The purpose of these options is to reorder the elements in the form and to add some information before and after the editing element. Should be used in colModel array. Syntax:\n\n\nscript\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \ncolModel\n:\n \n[\n\n      \n...\n\n      \n{\n\n        \nname\n:\nprice\n,\n \n...,\n\n        \nformoptions\n:\n{\n\n          \nelmprefix\n:\n(*)\n,\n\n          \nrowpos\n:\n1\n,\n\n          \ncolpos\n:\n2\n,...\n\n        \n},\n\n        \neditable\n:\ntrue\n\n      \n},\n\n      \n...\n\n   \n]\n\n\n...\n\n\n});\n\n\n/script\n\n\n\n\n\n\n\n\nWarning\n\n\nIf you plan to use this object in collModel with rowpos and colpos properties it is recommended that all editing fields use these properties.\n\n\n\n\nBelow is a list of available options\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncolpos\n\n\nnumber\n\n\ndetermines the column position of the element (again with the label) in the form beginning from 1\n\n\n\n\n\n\nelmprefix\n\n\nstring\n\n\nif set, a text or html content appears before the input element\n\n\n\n\n\n\nelmsuffix\n\n\nstring\n\n\nif set, a text or html content appears after the input element\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nif set, this replace the name from colNames array that appears as label in the form.\n\n\n\n\n\n\nrowabove\n\n\nboolean\n\n\nif set to true enables adding a text above the input element - see \nrowcontent\n\n\n\n\n\n\nrowcontent\n\n\nstring\n\n\nText that appear above the input element. Valid only if \nrowabove\n option is a true\n\n\n\n\n\n\nrowpos\n\n\nnumber\n\n\ndetermines the row position of the element (again with the text-label) in the form; the count begins from 1\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nTwo elements can have equal row position, but different column position. This will place the two elements in one row on the form.\n\n\n\n\nCell editing\n\n\nCell editing provides the front-end user with functionality to change the contents of one single cell from a row and then the developer has the ability to handle the changed data by AJAX or in a jqGrid cell edit event (see below).\n\n\nCell Editing supports key navigation and editing individual cells, with the following behavior:\n\n\n\n\nWhen we click on a cell that is not editable, the cell is selected and we can use the up, down, left and right keys to navigate through the cells.\n\n\nIf we move to a cell that is editable, we can press [Enter] to edit the cell. The cell is saved when we press [Enter] again, when we press [Tab], or when we click on another cell. If we press [ESC], the cell is not saved. When editing a cell, the cursor keys move only within the cell.\n\n\nWhen we click on cell that is editable, then we go directly into edit mode.\n\n\nThe cell is not editable if it has a class 'not-editable-cell', instead that in colModel is set to be editable\n\n\n\n\nCell editing module uses text messages from language file. The messages are used only when a validation is in action using the \neditrules\n colModel options\n\n\nCell properties\n\n\nThese properties are specific for cell editing and should be set in grid options\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\najaxCellOptions\n\n\nobject\n\n\nThis option allow to set global ajax settings for the cell editing when we save the data to the server. Note that with this option is possible to overwrite all current ajax setting in the save request including the complete event.\n\n\nempty\n\n\n\n\n\n\ncellEdit\n\n\nboolean\n\n\nEnables (disables) cell editing. When this option is set to true, onSelectRow event can not be used, and hovering is disabled (when mouseover on the rows).\n\n\nfalse\n\n\n\n\n\n\ncellsubmit\n\n\nstring\n\n\nDetermines where the contents of the cell are saved - can have two values: 'remote' or 'clientArray'. If \nremote\n the content of the cell if anything is changed is immediately saved to the server using the cellurl property, via ajax. The rowid and the cell content are added to the url by default. If you have the \"mtype\" setting set to post, the key value pears will be send as post variables. For example, if we save the cell named mycell,{id: rowid, mycell: cellvalue} is added to the url. If cellsubmit is 'clientArray', no ajax request is made and the content of the changed cell can be obtained via the method getChangedCells.  In this case the cell is saved to the local grid \ndata\n parameter.\n\n\nremote\n\n\n\n\n\n\ncellurl\n\n\nstring\n\n\nthe url where the cell is to be saved. You need to set this only when you use cellsubmit as 'remote'.\n\n\nnull\n\n\n\n\n\n\nrestoreCellonFail\n\n\nboolean\n\n\nThe default behavior (restoreCellonFail = true ) when a cell is not saved for certain reasons it is restored in its original values and the input element is deleted. Setting this option to false causes no restoring of the cell,  but remain as it was before try to save it.\n\n\ntrue\n\n\n\n\n\n\nsavedRow\n\n\narray\n\n\nThis array stores the original values before editing the cell or row and is used in case the user press Esc to restore the original values of the edited row or cell.\n\n\nempty\n\n\n\n\n\n\n\n\nExamples\n\n\nWhen using the 'remote' setting you could add these lines to your grid configuration:\n\n\n{\n\n    \ncellEdit\n \n:\n \ntrue\n,\n\n    \ncellsubmit\n \n:\n \nremote\n,\n\n    \ncellurl\n \n:\n \n/url/to/handling/the/changed/cell/value\n\n\n}\n\n\n\n\n\n\nWhen your are using 'clientArray' as cellsubmit setting, only these settings are important:\n\n\n{\n\n    \ncellEdit\n \n:\n \ntrue\n,\n\n    \ncellsubmit\n \n:\n \nclientArray\n\n\n}\n\n\n\n\n\n\nCell events\n\n\nThese events are related to cell editing and should be used in grid options.\n\n\nThe most of the following events use the parameters defined here:\n\n\n\n\nrowid - string -is the id of the row\n\n\ncellname - string - is the name of the cell (name from colModel)\n\n\nvalue - sting - the value of the cell\n\n\niRow - integer \n=0 - the index of the row (do not mix with rowid)\n\n\niCol - integer \n=0 - the index of the column\n\n\nevent - the event passed as first parameter in triggered event\n\n\n\n\nBelow is the list of \"option\" and triggered events. The name of every triggered event begin with \njqGrid\n and is set below the option event.\n\n\n\n\nNote\n\n\nThe first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)\n\n\n\n\n\n\nNote\n\n\nthe triggered event is bind to the grid and is not passed to to any options. See \nTriggered events\n\n\n\n\n\n\nNote\n\n\nAll events (except onCellSelect) are applied to a editable cell\n\n\n\n\nafterEditCell(rowid, cellname, value, iRow, iCol)\n\n\njqGridAfterEditCell( event, rowid, cellname, value, iRow, iCol)\n\n\nApplies only to a cell that is editable; this event fires after the edited cell is edited - i.e. after the element is inserted into the DOM\n\n\n\n\nafterRestoreCell(rowid, value, iRow, iCol)\n\n\njqGridAfterRestoreCell( event rowid, value, iRow, iCol)\n\n\nFires after calling the method restoreCell or the user press ESC leaving the changes\n\n\n\n\nafterSaveCell(rowid, cellname, value, iRow, iCol)\n\n\njqGridAfterSaveCell(event, rowid, cellname, value, iRow, iCol)\n\n\nFires after the cell has been successfully saved. This is the ideal place to change other content.\n\n\n\n\nafterSubmitCell(serverresponse, rowid, cellname, value, iRow, iCol)\n\n\njqGridAfterSubmitCell(event, serverresponse, rowid, cellname, value, iRow, iCol)\n\n\nThe event fires after the cell and other data is posted to the server. Should return array of type\n\n\n[\nsuccess\n(\nboolean\n),\nmessage\n]\n\n\n\n\n\n\nwhen return \n[true,\"\"]\n all is ok and the cellcontent is saved. If the return is like\n\n\n[\nfalse\n,\nError message\n]\n\n\n\n\n\n\nthen a dialog appears with the \"Error message\" and the cell content is not saved. \nservereresponse\n is the response from the server. To use this we should use serverresponse.responseText to obtain the text message from the server. This is true since we call this event in ajax complete event.\n\n\n\n\nbeforeEditCell(rowid, cellname, value, iRow, iCol)\n\n\njqGridBeforeEditCell(event (rowid, cellname, value, iRow, iCol)\n\n\nThis event fires before editing the cell.\n\n\n\n\nbeforeSaveCell(rowid, cellname, value, iRow, iCol)\n\n\njqGridBeforeSaveCell(event, rowid, cellname, value, iRow, iCol)\n\n\nThis event fires before validation of values if any. This event can return the new value which value can replace the edited one\n\n\nbeforeSaveCell\n \n:\n \nfunction\n(\nrowid\n,\ncelname\n,\nvalue\n,\niRow\n,\niCol\n)\n \n{\n\n  \nif\n(\n \nsome_condition\n \n)\n \n{\n\n      \nreturn\n \nnew value\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\nThe cell value will be replaced with \"new value\" and posted to the server\n\n\n\n\nbeforeSubmitCell(rowid, cellname, value, iRow, iCol)\n\n\njqGridBeforeSubmitCell(event, rowid, cellname, value, iRow, iCol)\n\n\nThe event fires before submit the cell content to the server (valid only if cellsubmit : 'remote'). Can return new object that will be posted to the server.\n\n\nbeforeSubmitCell\n \n:\n \nfunction\n(\nrowid\n,\ncelname\n,\nvalue\n,\niRow\n,\niCol\n)\n \n{\n\n  \nif\n(\n \nsome_condition\n \n)\n \n{\n\n    \nreturn\n \n{\nname1\n:\nvalue1\n,\nname2\n:\nvalue2\n}\n\n  \n}\n \nelse\n{\n\n    \nreturn\n \n{}\n\n  \n}\n\n\n}\n\n\n\n\n\n\nThe returned array will be added to the cellurl posted data.\n\n\n\n\nerrorCell(serverresponse, status)\n\n\njqGridErrorCell(serverresponse, status)\n\n\nFires if there is a server error; \nservereresponse\n is the response from the server. To use this we should apply serverresponse.responseText to obtain the text message from the server. \nstatus\n is the status of the error. If not set a modal dialog appear. The event fire too if the \nafterSubmitCell\n event return \n[false,\"Error message\"]\n\n\n\n\nformatCell(rowid, cellname, value, iRow, iCol)\n\n\nNo triggred event\n\n\nThis event allows formatting the cell content before editing, and returns the formatted value\n\n\n\n\nserializeCellData( postdata )\n\n\nNo triggred event\n\n\nIf set this event can serialize the data passed to the ajax request when we save a cell. The function should return the serialized data. This event can be used when a custom data should be passed to the server - e.g - JSON string, XML string and etc. To this event is passed the data which will be posted to the server. The event is passed in ajax data parameter.\n\n\n\n\nonCellSelect(rowid, iCol, value, evnt)\n\n\njqGridCellSelect(event, rowid, iCol, value, evnt)\n\n\nThis event applies only to cells that are \nnot editable\n; fires after the cell is selected and it is not editable. The event fire too when a cell is selected in non edit mode.\n\n\n\n\nvalidationCell(cellobject, errormsg, iRow, iCol)\n\n\nNo triggred event\n\n\nIf defined this event can replace the error message dialog, that appear when a validation error occur.\n\nThe first parameter \ncellobject\n is a DOM cell object, the second parameter \nerrormsg\n is the text that is returned when a \nvalidation error occur\n (see language file edit.msg object ). The third and four parameters is the index row (not row id) and the column number (starting from 0).\n\n\n\n\nonSubmitCell(rowid, cellname, value, iRow, iCol)\n\n\njqGridOnSubmitCell(event, rowid, cellname, value, iRow, iCol)\n\nThe event fire after beforeSubmitCell and if it return false the data is not saved to the server or to the local data depending on cellSubmit\n\n\nisCellEditable(cellname,iRow,iCol)\n\n\nno triggred event\n\nDynamically set editing a cell. This event is executed (if defined) when a check for editable cell apply. If the event return false the cell will not be edited instead that it is set to editable in colModel, returning true enables editing\n\n\nEvent calling stack\n\n\nDepending on your cellSubmit setting set to 'remote' or 'clientArray' the following events will be fired in the following order:\n\n\ncellSubmit setting 'remote'\n\n\n\n\nformatCell\n\n\nbeforeEditCell\n\n\nafterEditCell\n\n\nbeforeSaveCell\n\n\nbeforeSubmitCell\n\n\nonSubmitCell\n\n\nafterSubmitCell\n\n\nafterSaveCell\n\n\nerrorCell\n\n\nvalidationCell\n\n\nonCellSelect\n\n\n\n\ncellSubmit setting 'clientArray'\n\n\n\n\nformatCell\n\n\nbeforeEditCell\n\n\nafterEditCell\n\n\nbeforeSaveCell\n\n\nbeforeSubmitCell\n\n\nonSubmitCell\n\n\nafterSaveCell\n\n\nvalidationCell\n\n\nonCellSelect\n\n\n\n\nCell methods\n\n\nAll of the methods below should be applied to the jqGrid object.\n\n\n\n\neditCell( integer iRow, integer iCol, [boolean edit])\n\n\nEdit a cell with the row index iRow( do not mix with rowid) in index column iCol. If the edit is set to false the cell is just selected and not edited. If set to true the cell is selected and edited. This method is called automatically in the grid when cellEdit is set to true and the user try to select a cell.\n\n\nparameters\n\n\n\n\ninteger iRow - the index of the row (do not mix with rowid) starting from 1\n\n\ninteger iCol - the index of the column starting from 0\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\ngetChangedCells( [string method] )\n\n\nReturns an array of objects of the changed(edited) cells depending on method . When 'all' this method returns all the edited cells (the cell can be edited, but not changed); when 'dirty' returns only the changed cells\n\n\nparameters\n\n\n\n\nstring method - can be 'all' or 'dirty'. Default is 'all'\n\n\n\n\nreturn\n\narray of objects with properties id(rowid) and the name (from colModel) of the edited(changed) cell. By example:\n\n\n[ {id:\n12\n, mycol1: \ndata1\n}, {id:\n15\n, mycol2: \ndata2\n},...]\n\n\n\n\n\n\n\nrestoreCell( integer iRow, integer iCol )\n\n\nRestores the edited content of cell with the row index iRow( do not mix with rowid) in index column iCol to its initial state before editing. This method is called automatically when the user press ESC key when editing the cell.\n\n\nparameters\n\n\n\n\ninteger iRow - the index of the row (do not mix with rowid) starting from 1\n\n\ninteger iCol - the index of the column starting from 0\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nsaveCell( integer iRow, integer iCol )\n\n\nSaves the cell with the row index iRow( do not mix with rowid) in index column iCol when it was in edit mode. This method is called automatically when the user press Enter key or Tab or Shit-Tab key on changed cell.\n\n\nparameters\n\n\n\n\ninteger iRow - the index of the row (do not mix with rowid) starting from 1\n\n\ninteger iCol - the index of the column starting from 0\n\n\n\n\nreturn\n\njqGrid object\n\n\nnextCell( integer iRow, integer iCol )\n\n\nMoves to the next editable cell right. The current cell is determined by iRow and iCol parameters. If there is no such one, the method try to save the exiting edited cell. The method is called when the user press Tab key.\n\n\nparameters\n\n\n\n\ninteger iRow - the index of the row (do not mix with rowid) starting from 1\n\n\ninteger iCol - the index of the column starting from 0\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nprevCell( integer iRow, integer iCol )\n\n\nMoves to the next editable cell left. The current cell is determined by iRow and iCol parameters. If there is no such one, the method try to save the exiting edited cell. The method is called when the user press Shift-Tab key.\n\n\nparameters\n\n\n\n\ninteger iRow - the index of the row (do not mix with rowid) starting from 1\n\n\ninteger iCol - the index of the column starting from 0\n\n\n\n\nreturn\n\njqGrid object\n\n\nCell posted data\n\n\nWhen the cell is edited and the input elements is created we set the following rules:\n\n\n\n\nThe id of the editable cell element is constructed as 'iRow_'+ the name from the colModel array - where the iRow is the index of the row (not rowid) Example if we edit cell with index=20 and editable element has name 'myname' (from colModel) then the id becomes 20_myname.\n\n\nThe name of the editable element is constructed from the name of the colModel array - property - name\n\n\n\n\nWhat is posted to the server?\n\n\nWhen the data is posted to the server we construct object {} that contain:\n\n\n\n\nthe name:value pair where the name is the name of the input element (from colModel) represented in the cell\n\n\nadditionally we add a pair id:rowid where the rowid is the id of the row and oper:'edit'\n\n\nif the returned data from beforeSubmitCell event is not empty we extend this data with the posted data.\n\n\n\n\nInline editing\n\n\nInline editing is a quick way to update database information by making changes directly in the row of the grid, as seen in the image below:\n\n\n\n\nTo use Inline Editing, users select a row with the mouse (or click a button). In response, jqGrid converts each editable field to a data entry cell, as seen in the Name and Price fields above. Cells that aren't editable, such as the ID field above, don't change appearance and remain read-only. Whether an individual column is editable or read-only is controlled by setting the attribute in the ColModel.\n\n\nWhen finished, users can hit the \"Enter\" key (or click a button) to send the data to the server.\n\n\nInline editing module uses text messages from language file. The messages are used only when a validation is in action using the \neditrules\n colModel options\n\n\nThese objects/events are related to inline editing and should be used in grid options and not as parameters of the methods described below. The objects/events/ below have effect only in \neditRow\n (when keys: true) and \nsaveRow\n methods. See below.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\najaxRowOptions\n\n\nobject\n\n\nThis option allow to set global ajax settings for the row editing when we save the data to the server. Note that with this option is possible to overwrite all current ajax setting in the save request including the complete event.\n\n\nempty\n\n\n\n\n\n\nserializeRowData\n\n\nfunction\n\n\nIf set this event can serialize the data passed to the ajax request when we save a row. The function should return the serialized data. This event can be used when a custom data should be passed to the server - e.g - JSON string, XML string and etc. To this event is passed the data which will be posted to the server\n\n\nnull\n\n\n\n\n\n\ninlineData\n\n\nobject\n\n\nIf defined this object extends (overwrite) the values of the object posted to the server via saveRow method\n\n\nempty\n\n\n\n\n\n\nsavedRow\n\n\narray\n\n\nThis array stores the original values before editing the cell or row and is used in case the user press Esc (or button Cancel) to restore the original values of the edited row or cell.\n\n\nempty\n\n\n\n\n\n\n\n\nExample :\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n  \najaxRowOptions\n \n:\n \n{\n\n    \nerror\n \n:\n \nfunction\n(\nresponse\n,\n \nstatus\n,\n \nerror\n)\n \n{\n\n      \n/// code when error in inline edit only\n\n    \n}\n\n  \n}\n\n\n...\n\n\n});\n\n\n\n\n\n\nInline Methods\n\n\nThe inline methods can be called only on an already-constructed grid, from a button click or from an event of the grid itself:\n\n\nExample:\n\n\nvar\n \nid\n,\n \nlastSel\n;\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n   \nonSelectRow\n:\n \nfunction\n(\nid\n){\n\n     \nif\n(\nid\n \n \nid\n!==\nlastSel\n){\n\n        \njQuery\n(\n#grid_id\n).\njqGrid\n(\nrestoreRow\n,\nlastSel\n);\n\n        \nlastSel\n=\nid\n;\n\n     \n}\n\n     \njQuery\n(\n#grid_id\n).\njqGrid\n(\neditRow\n,\n \nid\n,\n \n{\nkeys\n:\n  \ntrue\n}\n \n);\n\n   \n},\n\n\n...\n\n\n});\n\n\n\n\n\n\nIn this example, if another was row being edited and has not yet been saved, the original data will be restored and the row \"closed\" before \"opening\" the currently-selected row for editing (where lastSel was previously defined as a var).\n\nIf you want to save instead to restore the editing you can call saveRow in place of restoreRow.\n\n\neditRow( string rowid, [object options])\n\n\nWhen this method is called on particular row with id=rowid, jqGrid reads the data for the editable fields and constructs the appropriate elements defined in edittype and editoptions. Edited are all the fields that are marked as editable:true in colModel. If the id can not be found the method does nothing.  In case the id  is found the row can not be edited in the following cases:\n\n\n\n\nif it is already edited. The current edited row has a attribute \neditable\n = 1. If the attribute is 0 it can be edited\n\n\nif the row has a class \nnot-editable-row\n\n\n\n\n\n\nNote\n\n\nWhen the keys option (see below) is true this method call the  saveRow and restoreRow methods (see below). Most of parameters in this method are passed to these methods.\n\n\n\n\nWhen saved, the option \nurl\n or grid option \nediturl\n is used to post the data to the server.\n\n\nThe events (function) options have a triggered event equivalent which is set near to the options event.\n\n\n\n\nNote\n\n\nThe first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)\n\n\n\n\n\n\nNote\n\n\nthe triggered event is bind to the grid and is not passed to any options. See \nTriggered events\n\n\n\n\nThe options have the following default properties:\n\n\noptions\n \n=\n{\n\n  \nkeys\n \n:\n \nfalse\n,\n\n  \nkeyevent\n \n:\n \nkeydown\n,\n\n  \noneditfunc\n:\n \nnull\n,\n\n  \nsuccessfunc\n:\n \nnull\n,\n\n  \nurl\n:\n \nnull\n,\n\n  \nextraparam\n:\n \n{},\n\n  \naftersavefunc\n:\n \nnull\n,\n\n  \nerrorfunc\n:\n \nnull\n,\n\n  \nafterrestorefunc\n:\n \nnull\n,\n\n  \nrestoreAfterError\n:\n \ntrue\n,\n\n  \nmtype\n:\n \nPOST\n,\n\n  \nfocusField\n \n:\n \ntrue\n,\n\n  \nsaveui\n \n:\n \nenable\n,\n\n  \nsavetext\n \n:\n \n$\n.\njgrid\n.\ngetRegional\n(\n$t\n,\ndefaults.savetext\n),\n\n  \nbeforeEditRow\n \n:\n \nnull\n,\n\n  \nonEnter\n \n:\n \nnull\n,\n\n  \nonEscape\n \n:\n \nnull\n\n\n}\n\n\n\n\n\n\nThe options object can be overwritten by object \n$.jgrid.inlineEdit\n , which can be set before calling the method and used for all other calls. This object should contain the same properties as described above in order to have effect. See \nCommon functions\n\n\nThe options means:\n\n\n\n\nkeys\n - boolean when set to true a [Enter] key is used to save the row (method saveRow is called) and [Esc] to cancel editing (method restoreRow is called).\n\n\nkeyevent\n - string - the event is used only if keys option is true and defines the jquery binding method. Default is \nkeydown\n. In some situations \nkeyup\n can be used in case 'keydown' already is applied.\n\n\noneditfunc(rowid)\n or \njqGridInlineEditRow(ev, rowid)\n - function - fires after successfully accessing the row for editing, prior to allowing user access to the input fields. The row's id is passed as a parameter to this function.\n\n\nsuccessfunc(response)\n or \njqGridInlineSuccessSaveRow(ev, response)\n - function -if defined, this function is called immediately after the request is successful. This function is passed the data returned from the server. Depending on the data from server; this function should return true or false. In case of false the data is not saved to the grid and the row is restored in case when restoreAfterError is set to true.\n\n\nurl\n - string - if defined, this parameter replaces the editurl parameter from the grid options array. If set to 'clientArray', the data is not posted to the server but rather is saved only to the grid (presumably for later manual saving).\n\n\nextraparam\n - object - an object of type name: value. When set these values are posted along with the other values to the server.\n\n\naftersavefunc(rowid, response)\n  or \njqGridInlineAfterSaveRow(ev, rowid, response)\n - function -if defined, this function is called after the data is saved to the server. Parameters passed to this function are the rowid and the response from the server request. Also the event is called too when the url is set to 'clientArray'.\n\n\nerrorfunc(rowid, response, satus)\n or \njqGridInlineErrorSaveRow(ev, rowid, response, satus)\n - function -if defined, this function is called after the data is saved to the server. Parameters passed to this function are the rowid, the response from the server request and status of the request.\n\n\nafterrestorefunc(rowid)\n or \njqGridInlineAfterRestoreRow(ev, rowid)\n - function - if defined, this function is called in restoreRow (in case the row is not saved with success) method after restoring the row. To this function we pass the rowid\n\n\nrestoreAfterError\n - boolean. Default true which call the restoreRow method with afterrestorefunc if defined. If set to false the row stay in edit mode when a error occur.\n\n\nmtype\n - string - \"POST\" or \"GET\" - method type of posting the request . Default \"POST\"\n\n\nfocusField\n - mixed boolean or number. If true the cursor is positioned at the first editable field. If set to false no cursor position. If the the option is a number it is positioned to the editable field which correspond to this number starting from 0\n\n\nsaveui\n - string - When the url is not clientArray it is possible to show a message during a saving the data. This will show a box centered into the grid. Actually the method progressBar is called in this case. See \njqGrid methods\n. The default value is 'enable'. Possible values are: 'disable', 'enable', 'block'\n\n\nsavetext\n - string - text to show when saving is in progress determined by \nsaveui\n options - see above. Default value is taken from a language file from defaults.savetext property. The english file is like this:\nIf \nkeys\n option is true, then the remaining settings \u2013 \nsuccessfunc, url, extraparam, aftersavefunc, errorfunc and afterrestorefunc\n - are passed as parameters to the saveRow method when the [Enter] key is pressed (saveRow does not need to be defined as jqGrid calls it automatically). For more information see \nsaveRow\n method below.\n\nWhen a [Esc] key is pressed we call the method restoreRow nad pass the \nafterrestorefunc\n. For more information see \nrestoreRow\n method below.\n\n\nbeforeEditRow(options, rowid)\n - function - if this function is defined it executes before editing the row. If the function return false the row will be not edited. Parameters passed to this event are the options object and the rowid.\n\n\nbeforeSaveRow(options, rowid)\n - function - if this function is defined it executes before saving the row in saveRow method. If the function return false the row will be not be saved. Parameters passed to this event are the options object and the rowid.\n\n\nbeforeCancelRow(options, rowid)\n - function - if this function is defined it executes before restoring the row to its original state in \nrestoreRow\n method. If the function return false the row will be not be restored. Parameters passed to this event are the options object and the rowid.\n\n\nvalidationCell(elem, error, iRow, iCol)\n If defined this event can replace the error message dialog, that appear when a validation error occur.The first parameter \ncellobject\n is a DOM cell object, the second parameter \nerrormsg\n is the text that is returned when a \nvalidation error occur\n (see language file edit.msg object ). The third and four parameters are the index row (not row id) and the column number (starting from 0).\n\n\nonEnter( rowid, options, event)\n if defined this event is executed when a Enter key is pressed while editing the input element. The event is not executed when we edit a TEXTAREA field. When this event is executed saving the row is not performed. It is ideal to define some pop-up and call after the selection the desired task. First parameter is the row id, the second parameter is the options passed to the editRow and the third parameter is the event\n\n\nonEscape( rowid, options, event)\n if defined this event is executed when a Escape key is pressed while editing the input element. When the event is executed the row is not restored. It is ideal to define some pop-up and call after the selection the desired task. First parameter is the row id, the second parameter is the options passed to the editRow and the third parameter is the event\n\n\n\n\n\n\nsaveRow( string rowid, [object options])\n\n\nSaves a row edited with editRow method\n\n\nCalling convention\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nsaveRow\n,\nrowid\n,\n  \noptions\n);\n\n\n\n\n\n\nThe events (function) options parameters have a triggered event equivalent which is set near to the options event.\n\n\n\n\nNote\n\n\nThe first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)\n\n\n\n\n\n\nNote\n\n\nthe triggered event is bind to the grid and is not passed to any options. See \nTriggered events\n\n\n\n\nparameters\n\n\n\n\nstring rowid - is the id of the already edited row\n\n\nobject options have the following default properties:\n\n\n\n\noptions\n \n=\n \n{\n\n  \nsuccessfunc\n:\n \nnull\n,\n\n  \nurl\n:\n \nnull\n,\n\n  \nextraparam\n:\n \n{},\n\n  \naftersavefunc\n:\n \nnull\n,\n\n  \nerrorfunc\n:\n \nnull\n,\n\n  \nafterrestorefunc\n:\n \nnull\n,\n\n  \nrestoreAfterError\n:\n \ntrue\n,\n\n  \nmtype\n:\n \nPOST\n,\n\n  \nsaveui\n \n:\n \nenable\n,\n\n  \nvalidationCell\n:\n \nnull\n,\n\n  \nbeforeSaveRow\n \n:\n \nnull\n,\n\n  \nbeforeCancelRow\n:\n \nnull\n,\n\n  \nsavetext\n \n:\n \n$\n.\njgrid\n.\ngetRegional\n(\n$t\n,\ndefaults.savetext\n)\n\n\n}\n\n\n\n\n\n\n\n\nsuccessfunc\n or \njqGridInlineSuccessSaveRow\n - function -if defined, this function is called immediately after the request is successful. This function is passed the data returned from the server. Depending on the data from server; this function should return true or false. In case of false the data is not saved to the grid and the row is restored in case when restoreAfterError is set to true.\n\n\nurl\n - string - if defined, this parameter replaces the editurl parameter from the grid options array. If set to 'clientArray', the data is not posted to the server but rather is saved only to the grid (presumably for later manual saving).\n\n\nextraparam\n - object - an object of type name: value. When set these values are posted along with the other values to the server.\n\n\naftersavefunc\n  or \njqGridInlineAfterSaveRow\n - function -if defined, this function is called after the data is saved to the server. Parameters passed to this function are the rowid and the response from the server request. Also the event is called too when the url is set to 'clientArray'.\n\n\nerrorfunc\n or \njqGridInlineErrorSaveRow\n - function -if defined, this function is called after the data is saved to the server. Parameters passed to this function are the rowid, the response from the server request and status of the request.\n\n\nafterrestorefunc\n or \njqGridInlineAfterRestoreRow\n - function - if defined, this function is called in restoreRow (in case the row is not saved with success) method after restoring the row. To this function we pass the rowid\n\n\nrestoreAfterError\n - boolean. Default true which call the restoreRow method with afterrestorefunc if defined. If set to false the row stay in edit mode when a error occur.\n\n\nmtype\n - string - \"POST\" or \"GET\" - method type of posting the request . Default \"POST\"\n\n\nsaveui\n - string - When the url is not client arry it is possible to show a message during a saving the data. This will show a box cetered into the grid. Actually the method progressBar is called in this case. See \njqGrid methods\n. The default value is 'enable'. Possible values are: 'disable', 'enable', 'block'\n\n\nvalidationCell(elem, error, iRow, iCol)\n If defined this event can replace the error message dialog, that appear when a validation error occur.The first parameter \ncellobject\n is a DOM cell object, the second parameter \nerrormsg\n is the text that is returned when a \nvalidation error occur\n (see language file edit.msg object ). The third and four parameters are the index row (not row id) and the column number (starting from 0).\n\n\nbeforeSaveRow(options, rowid)\n - function - if this function is defined it executes before saving the row. If the function return false the row will be not be saved. Parameters passed to this event are the options object and the rowid.\n\n\nbeforeCancelRow(options, rowid)\n - function - if this function is defined it executes before restoring the row to its original state in \nrestoreRow\n method. If the function return false the row will be not be restored. Parameters passed to this event are the options object and the rowid.\n\n\nsavetext\n - string - text to show when saving is in progress determined by \nsaveui\n options - see above. Default value is taken from a language file from defaults.savetext property. The English file is like this:\n\n\n\n\n...\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n    \ndefaults\n \n:\n \n{\n\n    \n...\n\n        \nsavetext\n:\n \nSaving...\n,\n\n    \n...\n\n  \n}\n\n  \n...\n\n\n}\n\n\n\n\n\n\nThe options object can be overwritten by object \n$.jgrid.inlineEdit\n , which can be set before calling the method and used for all other calls. This object should contain the same properties as described above in order to have effect. See \nCommon functions\n\n\nSaved is only a row wihch have attribute editable = '1'. After the row is saved the row attribute \nediatable\n become a value  '0' (if nothing else is specified)\n\n\n\n\nrestoreRow( string rowid, [object options])\n\n\nThis method restores the data to original values before the editing of the row.\n\n\nCalling convention:\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nrestoreRow\n,\nrowid\n,\n  \noptions\n);\n\n\n\n\n\n\nThe events (function) options parameters have a triggered event equivalent which is set near to the options event.\n\n\n\n\nNote\n\n\nThe first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)\n\n\n\n\n\n\nNote\n\n\nthe triggered event is bind to the grid and is not passed to any options. See \nTriggered events\n\n\n\n\nparameters\n\n\n\n\nstring rowid - is the id of the already edited row\n\n\nobject options have the following default properties:\n\n\n\n\noptions\n \n=\n \n{\n\n  \nafterrestorefunc\n \n:\n \nnull\n,\n\n  \nbeforeCancelRow\n:\n \nnull\n\n\n}\n\n\n\n\n\n\n\n\nafterrestorefunc\n or \njqGridInlineAfterRestoreRow\n - function - if set it is called after restoring the row. To this function we pass the rowid\n\n\nbeforeCancelRow(options, rowid)\n - function - if this function is defined it executes before restoring the row to its original state. If the function return false the row will be not be restored. Parameters passed to this event are the options object and the rowid.\n\n\n\n\n\n\naddRow([object options])\n\n\nThis method add a row for inline edit.\n\n\nCalling convention:\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\naddRow\n,\n \noptions\n);\n\n\n\n\n\n\nparameters\n\n\n\n\nobject options have the following default properties:\n\n\n\n\n{\n\n    \nrowID\n \n:\n \nnew_row\n,\n\n    \ninitdata\n \n:\n \n{},\n\n    \nposition\n \n:\nfirst\n,\n\n    \nuseDefValues\n \n:\n \nfalse\n,\n\n    \nuseFormatter\n \n:\n \nfalse\n,\n\n    \naddRowParams\n \n:\n \n{\nextraparam\n:\n{}},\n\n    \nbeforeAddRow\n \n:\n \nnull\n\n\n}\n\n\n\n\n\n\n\n\nrowID - (mixed) the value of the id of the new added row. Can be a function. If defined as function a parameters object is passed as parameter.\n\n\ninitdata - (object) the object of the pair name:value where the name correspond to the name in colMode. When set this is the initial value of the the cell.\n\n\nposition - (string) determines the position of the new added row in the grid. Default is first. Can have a value last to be added at the last position\n\n\nuseDefValues - (boolean) if set to true uses the defaultValue property in editoptions of the colModel\n\n\nuseFormatter : (boolean) if set to true synchronises the parameters from the formatter actions\n\n\naddRowParams : (object) parameters which are passed to the addRow - they are the same as of \neditRow\n - see above\n\n\nbeforeAddRow(options) - function - if this function is defined it executes before adding a new row. If the function return false the row will be not be added. Parameters passed to this event is the options object.\n\n\n\n\nActually this method uses two already constructed methods. When calling the method first executes the addRowData method which add a local row. After this the method call editRow method to edit the row. If the keys parameter is set to true and the user press ESC key the row is automatically deleted.\n\n\n\n\ninlineNav\n\n\nFor more information of inline navigator see \nInline edit navigator\n\n\n\n\nshowAddEditButtons()\n\n\nEnables the add and edit buttons in inline navigator\n\n\nparameters\n\n\nnone\n\n\nreturn\n\njqGrid object\n\n\n\n\nshowSaveCancelButtons()\n\nEnables the Save Cancel buttons in inline navigator\n\n\nparameters\n\n\nnone\n\n\nreturn\n\njqGrid object\n\n\nInline posted data\n\n\nHow is the data organized!\n\n\nWhen the row is edited and the input elements are created we set the following rules:\n\n\n\n\nthe table row becomes attribute editable=\"1\"\n\n\nthe array savedRow (option in the grid) is filled with the original values before the editing. This is a name:value pair array with additional pair id:rowid\n\n\nHidden fields are not included in editing\n\n\nThe id of the editable element is constructed as 'rowid_'+ the name from the colModel array. Example if we edit row with id=10 and the only editable element is 'myname' (from colModel) then the id becomes 10_myname.\n\n\nThe name of the editable element is constructed from the name of the colModel array - property - name\n\n\nafter the row is saved or restored the editable attribute is set to \"0\" and the savedRow item with id=rowid is deleted\n\n\n\n\nWhat is posted to the server?\n\n\nWhen the data is posted to the server we construct an object {} that contain(s):\n\n\n\n\nthe name:value pair where the name is the name of the input element represented in the row (this is for all input elements)\n\n\nadditionally we add a pair id:rowid where the rowid is the id of the row\n\n\nif the \nextraparam\n parameter is not empty we extend this data with the posted data\n\n\nif the grid parameter \ninlineData\n is not empty we extend this data with the posted data.\n\n\n\n\nForm editing\n\n\njqGrid supports creating a form \"on the fly\" to view, add, edit, delete grid data. A screenshot of an \"Add Record\" form is shown below:\n\n\n\n\nAs of version 5.3 we fully support \nHTML5 forms\n\n\nMethods\n\n\nThe methods listed in the table below are included in the navGrid \nnavigator method\n.\n\nAll the methods bellow are applied to already constructed grid.\n\n\nEdit grid row\n\n\nThis operation is performed with the method \neditGridRow\n\n\nThis method creates a form via modal dialog for editing a particular row from the grid.\n\nThis method uses \nCommon Editing Properties\n from colModel and editurl option from jqGrid.\n\nThis method uses \nForm options\n from colModel properties.\n\n\nWhen called the constructed form can look like this:\n\n\n\n\nCalling convention:\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\neditGridRow\n,\n \nstring\n \nrowid\n,\n \n[\nobject\n \noptions\n]\n \n);\n\n\n\n\n\n\nparameters\n\n\n\n\nstring rowid: the id of the row to edit\n\n\nobject options: an object of name: value pairs, including any of the following properties or events.\n\n\n\n\nThe method uses the following options from language file (Example - English):\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \n...\n\n    \nedit\n \n:\n \n{\n\n    \n// formedit options\n\n        \naddCaption\n:\n \nAdd Record\n,\n\n        \neditCaption\n:\n \nEdit Record\n,\n\n        \nbSubmit\n:\n \nSubmit\n,\n\n        \nbCancel\n:\n \nCancel\n,\n\n        \nbClose\n:\n \nClose\n,\n\n        \nsaveData\n:\n \nData has been changed! Save changes?\n,\n\n        \nbYes\n \n:\n \nYes\n,\n\n        \nbNo\n \n:\n \nNo\n,\n\n        \nbExit\n \n:\n \nCancel\n,\n\n    \n// Validation options\n\n        \nmsg\n:\n \n{\n\n            \nrequired\n:\nField is required\n,\n\n            \nnumber\n:\nPlease, enter valid number\n,\n\n            \nminValue\n:\nvalue must be greater than or equal to \n,\n\n            \nmaxValue\n:\nvalue must be less than or equal to\n,\n\n            \nemail\n:\n \nis not a valid e-mail\n,\n\n            \ninteger\n:\n \nPlease, enter valid integer value\n,\n\n            \ndate\n:\n \nPlease, enter valid date value\n,\n\n            \nurl\n:\n \nis not a valid URL. Prefix required (\nhttp://\n or \nhttps://\n)\n,\n\n            \nnodefined\n \n:\n \n is not defined!\n,\n\n            \nnovalue\n \n:\n \n return value is required!\n,\n\n            \ncustomarray\n \n:\n \nCustom function should return array!\n,\n\n            \ncustomfcheck\n \n:\n \nCustom function should be present in case of custom checking!\n\n\n        \n}\n\n    \n},\n\n  \n...\n\n\n}\n\n\n\n\n\n\nThese options (except edit.msg) can be overwritten when passed as options to the method. When passed to the method we should use by example bSubmit : \"Submit\" and not $.jgrid.regional[\"en\"].edit.bSubmit : \"Submit\"\n\n\nOptions\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\naddedrow\n\n\nstring\n\n\nControls where the row just added is placed: 'first' at the top of the gird, 'last' at the bottom. In case there is a need to place the new added row in its natural sort order, set reloadAfterSubmit: true\n\n\nfirst\n\n\n\n\n\n\najaxEditOptions\n\n\nobject\n\n\nThis option allow to set global ajax settings for the form editiing when we save the data to the server. Note that with this option is possible to overwrite all current ajax setting in the save request including the complete event.\n\n\nempty\n\n\n\n\n\n\nbottominfo\n\n\nstring\n\n\nWhen set this information is placed just after the buttons of the form as additional row\n\n\nempty\n\n\n\n\n\n\nbuttons\n\n\narray\n\n\nDefines a custom buttons in the edit form. Every element into the array is a object (button) with the following properties:\n \nicon\n - defines a icon according to the CSS framework used. \n \nside\n - left or right - the position of the icon \n \ntext\n - Text to appear in the button\n \nposition\n - the position of the button - last or first \n \nclick\n - function that is executed when the button is click. To the click function is passed the search form, search parameters and click event \n \nid\n - id to identify the button. If not set the jqGrid assing it internally using the jqGrid randId function.\n\n\nempty array\n\n\n\n\n\n\ncheckOnSubmit\n\n\nboolean\n\n\nThis option work only in editing mode. If Set to true this option will work only when a submit button is clicked and if any data is changed in the form. If the data is changed a dialog message appear where the user is asked to confirm the changes or cancel it. Pressing cancel button of the new dialog will return to the form, but does not set the values to its original state.\n\n\nfalse\n\n\n\n\n\n\ncheckOnUpdate\n\n\nboolean\n\n\nThis option is applicable in add and edit mode. When this option is set to true the behavior as follow: when something is changed in the form and the user click on Cancel button, navigator buttons, close button (on upper right corner of the form), in overlay (if available) or press Esc key (if set) a message box appear asking the user to save the changes, not to save the changes or go back in the grid cancel all changes (this will close the modal form)\n\n\nfalse\n\n\n\n\n\n\nclearAfterAdd\n\n\nboolean\n\n\nWhen add mode, clear the data after adding data\n\n\ntrue\n\n\n\n\n\n\ncloseAfterAdd\n\n\nboolean\n\n\nWhen add mode, close the dialog after add record\n\n\nfalse\n\n\n\n\n\n\ncloseAfterEdit\n\n\nboolean\n\n\nWhen in edit mode, close the dialog after editing\n\n\nfalse\n\n\n\n\n\n\ncloseicon\n\n\narray\n\n\nDetermines the icon of the cancel button. The default values are [true,\"left\",\"ui-icon-close\"]. For description of these see saveicon below\n\n\n\n\n\n\n\n\ncloseOnEscape\n\n\nboolean\n\n\nWhen set to true the modal window can be closed with ESC key from the user.\n\n\nfalse\n\n\n\n\n\n\ndataheight\n\n\ninteger\n\n\nThe parameter control the scrolling content - i.e between the modal header and modal footer.\n\n\nauto\n\n\n\n\n\n\ndrag\n\n\nboolean\n\n\nDetermines if the dialog is dragabale. Works only if jqDnR plugin is present or if the drag-able widget is present from jQuery UI\n\n\ntrue\n\n\n\n\n\n\neditData\n\n\nobject\n\n\nObject used to add additional content to the data posted to the server\n\n\nempty\n\n\n\n\n\n\neditselected\n\n\nboolean\n\n\nThis options have effect only if the grid option multiselect is true. If multiselect is true and this option is true editing is enabled only to the selected grid rows. In this case the form navigation keys when pressed move only to the selected row(s).\n\n\nfalse\n\n\n\n\n\n\nfocusField\n\n\nmixed\n\n\nBoolean or number. If true the cursor is positioned at the first editable field. If set to false no cursor position. If the the option is a number it is positioned to the editable field which correspond tothis number starting from 0\n\n\ntrue\n\n\n\n\n\n\nheight\n\n\nmixed\n\n\nThe entry height of form dialog\n\n\nauto\n\n\n\n\n\n\nhtml5Check\n\n\nboolean\n\n\nEnables html5 checking in the grid\n\n\nfalse\n\n\n\n\n\n\njqModal\n\n\nboolean\n\n\nIf set to true uses jqModal plugin (if present) to create the dialog s. If set to true and the plugin is not present jqGrid uses its internal function to create dialog\n\n\ntrue\n\n\n\n\n\n\nleft\n\n\ninteger\n\n\nThe initial left position of modal dialog. The default value of 0 mean the left position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the left position from upper left corner of the window.\n\n\n0\n\n\n\n\n\n\nmtype\n\n\nstring\n\n\nDefines the type of request to make (\"POST\" or \"GET\") when data is sent to the server\n\n\nPOST\n\n\n\n\n\n\nmodal\n\n\nboolean\n\n\nDetermines if the dialog will be modal. Also works only if jqModal plugin is present\n\n\nfalse\n\n\n\n\n\n\nnavkeys\n\n\narray\n\n\nThis option works only in edit mode and  add keyboard navigation, which allow us to navigate through the records while in form editing pressing certain keys. The default state is disabled. The first item enables/disables the navigation. The second item corresponds to record up and by default is the  the key code for Up key. The third item corresponds to record down and by default is the  key code for Down key\n\n\n[false,38,40]\n\n\n\n\n\n\nrecreateForm\n\n\nboolean\n\n\nWhen set to true the form is recreated every time the dialog is activated with the new options from colModel (if they are changed)\n\n\nfalse\n\n\n\n\n\n\nreloadAfterSubmit\n\n\nboolean\n\n\nReload grid data after posting\n\n\ntrue\n\n\n\n\n\n\nresize\n\n\nboolean\n\n\nDetermines if the dialog can be re-sized. Works only is jqDnR plugin is available or re-sizable widget is present from jQuery UI\n\n\ntrue\n\n\n\n\n\n\nsaveicon\n\n\narray\n\n\nDetermines the icon of the submit button. The default value is [true,\"left\",\"ui-icon-disk\"]. The first item enables/disables the icon. The second item tells where to put the icon to left or to right of the text. The third item corresponds to valid ui icon from the css framework used\n\n\n\n\n\n\n\n\nsavekey\n\n\narray\n\n\nDetermines the possibility to save the form with pressing a certain key.The first element enables/disables saving with pressing certain key. The second item corresponds to key code for saving. If enabled the default value for saving is [Enter]. Note that this binding should be used for both adding and editing a row. Since the binding is for the form, there is no possibility to have one key in add and another in edit mode.\n\n\n[false,13]\n\n\n\n\n\n\ntemplate\n\n\nstring\n\n\nWhen defined the default edit form is replaced with this parameter. See \nUsing  templates\n.\n\n\nnull\n\n\n\n\n\n\ntop\n\n\ninteger\n\n\nThe initial top position of modal dialog. The default value of 0 mean the top position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the top position from upper left corner of the window.\n\n\n0\n\n\n\n\n\n\ntopinfo\n\n\nstring\n\n\nWhen set this information is placed just after the modal header as additional row\n\n\nempty\n\n\n\n\n\n\nviewPagerButtons\n\n\nboolean\n\n\nThis option enable or disable the appearing of the previous and next buttons (pager buttons) in the form\n\n\ntrue\n\n\n\n\n\n\nwidth\n\n\ninteger\n\n\nThe width of form dialog in pixels. Can have auto property.\n\n\n300\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nThe url where to post data. If set, replaces the editurl. If set to clientArray the data is saved only to the grid and not to the server.\n\n\nnull\n\n\n\n\n\n\nzIndex\n\n\ninteger\n\n\nThe starting z-index for the dialog. If you will see the dialog form under another elements or dialog s you should use the parameter with some value higher as default value 950. In the most cases it should be the value higher as 1000 - the default value of jQuery UI dialog.\n\n\n950\n\n\n\n\n\n\n\n\nEvents\n\n\nThe events (function) options parameters have a triggered event equivalent which is set below to the options event.\n\nEvery triggered event in editGridRow method begin with \njqGridAddEdit\n and should be called outside the method, while the options events are passed as parameters to the method.\n\n\n\n\nNote\n\n\nThe first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)\n\n\n\n\n\n\nNote\n\n\nthe triggered event is bind to the grid and is not passed to any options. See \nTriggered events\n\n\n\n\n\n\nafterclickPgButtons(string whichbutton, DOM element form, string rowid)\n\n\njqGridAddEditAfterClickPgButtons(event, whichbutton, formid, rowid)\n\n\nThis event can be used only when we are in edit mode and the navigator buttons are enabled; it fires after the data for the new row is loaded from the grid when the pager button is clicked, allowing modification of the data or form before the form is re-displayed.\n\n\nparameters\n\n\n\n\nstring whichbutton is either 'prev' or 'next'\n\n\nDOM element form is the jQuery object of form, you can use formid[0].id to get form id.\n\n\nstring rowid is the id of the newly loaded row\n\n\n\n\nreturn\n\nnone\n\n\n\n\nafterComplete(ajax response, object postdata, DOM form, string oper)\n\n\njqGridAddEditAfterComplete(event , ajax response, object postdata, DOM form, string oper)\n\n\nThis event fires immediately after all actions and events are completed and the row is inserted or updated in the grid.\n\n\nparameters\n\n\n\n\najax response is the data returned from the server (if any)\n\n\nobject postdata is the data sent to the server\n\n\nDOM form is the jQuery object of the form, you can use formid[0].id to get form id.\n\n\nstring oper - determine in which mode is called - \nadd\n when add row and \nedit\n when it is edited\n\n\n\n\nreturn\n\nnone\n\n\n\n\nafterShowForm( DOM form, string oper)\n\n\njqGridAddEditAfterShowForm(event,  DOM form, string oper)\n\n\nFires after showing the form;\n\n\nparameters\n\n\n\n\nDOM form is the jQuery object of the form, you can use formid[0].id to get form id.\n\n\nstring oper - determine in which mode is called - \nadd\n when add row and \nedit\n when it is edited\n\n\n\n\nreturn\n\nnone\n\n\n\n\nafterSubmit(ajax response, object postdata, string oper)\n\n\njqGridAddEditAfterSubmit(event, ajax response, object postdata, string oper)\n\n\nFires after response has been received from server. Typically used to display status from server (e.g., the data is successfully saved or the save canceled for server-side editing reasons)\n\n\nWhen used this event should return array with the following items \n[success, message, new_id]\n where\n\n\n\n\nsuccess is a boolean value if true the process continues, if false a error message appear and all other processing is stopped. (message is ignored if success is true).\n\n\nmessage - the message that appear when first parameter is false\n\n\nnew_id - if present is used as new row id in the grid when we are in add mode. Typically this is obtained from server response\n\n\n\n\nparameters\n\n\n\n\najax response is the data returned from the server (if any)\n\n\nobject postdata is the data sent to the server\n\n\nstring oper - determine in which mode is called - \nadd\n when add row and \nedit\n when it is edited\n\n\n\n\nreturn\n\narray -  see description above\n\n\n\n\nbeforeCheckValues( object postdata, DOM form, string oper)\n\n\njqGridAddEditBeforeCheckValues(event,  object postdata, DOM form, string oper)\n\n\nThis event fires before checking the values (if checking is defined in colModel via editrules option).\n\n\nIn all cases the event should return object in name value pair which then will be posted to the server.\n\n\nparameters\n\n\n\n\nobject postdata is the data sent to the server\n\n\nDOM form is the jQuery object of the form, you can use formid[0].id to get form id.\n\n\nstring oper - determine in which mode is called - \nadd\n when add row and \nedit\n when it is edited\n\n\n\n\nreturn\n\nobject\n\n\n\n\nbeforeInitData(DOM form, string oper)\n\n\njqGridAddEditBeforeInitData(event, DOM form, string oper)\n\n\nFires before initialize the new form data.\n\n\nThe Event can return true or false. If the event return false then the action is not done and the form is not shown. Any other return is treated as true.\n\n\nparameters\n\n\n\n\nDOM form is the jQuery object of the form, you can use formid[0].id to get form id.\n\n\nstring oper - determine in which mode is called - \nadd\n when add row and \nedit\n when it is edited\n\n\n\n\nreturn\n\nboolean\n\n\n\n\nbeforeShowForm(DOM form, string oper)\n\n\njqGridAddEditBeforeShowForm(event, DOM form, string oper)\n\n\nFires before showing the form with the new data;\n\n\nparameters\n\n\n\n\nDOM form is the jQuery object of the form, you can use formid[0].id to get form id.\n\n\nstring oper - determine in which mode is called - \nadd\n when add row and \nedit\n when it is edited\n\n\n\n\nreturn\n\nnone\n\n\n\n\nbeforeSubmit( object postdata, DOM form, string oper)\n\n\njqGridAddEditBeforeSubmit(event, object postdata, DOM form, string oper)\n\n\nFires before the data is submitted to the server.\n\nWhen defined this event should return array with the following values \n[boolean success, string error]\n\n\n\n\nsuccess boolean indicating if the process should continue (true) or a error (false)\n\n\nerror is the error message which appear to the user\n\n\n\n\nparameters\n\n\n\n\nobject postdata is the data sent to the server\n\n\nDOM form is the jQuery object of the form, you can use formid[0].id to get form id.\n\n\nstring oper - determine in which mode is called - \nadd\n when add row and \nedit\n when it is edited\n\n\n\n\nreturn\n\narray - see above\n\n\n\n\nonclickPgButtons(string whichbutton, DOM form, string rowid)\n\n\njqGridAddEditClickPgButtons(event, string whichbutton, DOM form, string rowid)\n\n\nThis event can be used only when we are in edit mode; it fires immediately after the previous or next button on form pager is clicked, before leaving the current row, allowing working with (e.g., saving) the currently loaded values in the form\n\n\nparameters\n\n\n\n\nstring which button - can be either 'prev' or 'next'\n\n\nDOM form is the jQuery object of the form, you can use formid[0].id to get form id.\n\n\nstring rowid is the id of the current row.\n\n\n\n\nreturn\n\nnone\n\n\n\n\nonclickSubmit( object options, object postdata, string oper)\n\n\njqGridAddEditClickSubmit(event, object options, object postdata, string oper)\n\n\nFires after the submit button is clicked and the postdata is constructed.\n\nThe event should return object in name:value pair which then will be added to the posted data to the server\n\n\nparameters\n\n\n\n\nobject options - parameters passed to the method\n\n\nobject postdata is the data sent to the server\n\n\nstring oper - determine in which mode is called - \nadd\n when add row and \nedit\n when it is edited\n\n\n\n\nreturn\n\nobject\n\n\n\n\nonInitializeForm(DOM form, string oper)\n\n\njqGridAddEditInitializeForm(event, DOM form, string oper)\n\n\nThis event stay for historical purpose. It is equivalent to the beforeShowForm event.\n\n\n\n\nonClose()\n\nNo trigered event\n\n\nThis event is called just before closing the form and when a close icon is clicked, a cancel button is clicked, ESC key is pressed or click on overlay (if jqModal is present). The event can return (optionally) true or false. If the return value is true the form is closed, if false the form does not close. If nothing is returned the form is closed\n\n\nparameters\n\nnone\n\n\nreturn\n\n[boolean]\n\n\n\n\nerrorTextFormat( ajax response, string oper)\n\n\njqGridAddEditErrorTextFormat(event, ajax response, string oper)\n\n\nThe event (can) fire when error occurs from the ajax call (status \n= 300 \n status !== 304) and can be used for better formatting of the error messages. To this event is passed response from the server. The event should return single message (not array), which then is displayed to the user.\n\n\nparameters\n\n\n\n\najax response - the response from the server\n\n\nstring oper - determine in which mode is called - \nadd\n when add row and \nedit\n when it is edited\n\n\n\n\nreturn\n\nstring\n\n\n\n\nserializeEditData( object postdata )\n\nNo trigered event\n\n\nIf set this event can serialize the data passed to the ajax request when we save a form data. Actually the event is called in the ajax data parameter. The function should return the serialized data. This event can be used when a custom data should be passed to the server - e.g - JSON string, XML string and etc. To this event is passed the data which will be posted to the server\n\n\nparameters\n\n\n\n\nobject postdata - data posted to the server\n\n\n\n\nreturn\n\nobject\n\n\n\n\nWhat is need to know?\n\n\nWhen the form is constructed we set the following rules:\n\n\n\n\nHidden fields are included in the form with the display:none property of the table row\n\n\nThe id of the editable element is constructed from the name of the colModel array - the property name\n\n\nThe name of the editable element is constructed from the name of the colModel array - the property name\n\n\nFor ease in manipulating the elements in an edit form, every table row in the form that holds the data for the edit has a id which is a combination of \"tr_\" + name (from colmodel). Example:\n\n\n\n\nform\n \n....\n\n  \ntable\n\n    \ntr\n \nid\n=\ntr_myfield\n  \n      \ntd\n Caption\n/\ntd\n \ntd\nedited element named, in colModel, as \nmyfield\n/\ntd\n\n    \n/\ntr\n ...\n  \n/\ntable\n\n\n/\nform\n\n\n\n\n\n\n\n\nEvery time the form is lunched it is recreated. The recreateForm parameter is set to true just remember the position of the form\n\n\n\n\nThis allow us to easily show or hide some table rows depending on conditions using beforeShowForm event\n\n\nWhat is posted to the server\n\n\nWhen we are in editing mode the data that is posted to the server is object {} that contain:\n\n\n\n\nthe name:value pair where the name is the name of the input element represented in the form (this is for all input elements)\n\n\nadditionally we add a pair id:rowid where the rowid is the id of the edited row\n\n\nadditionally we add a pair oper:edit to indicate the edit mode\n\n\nif the editData object is not empty we extend this data with the posted data\n\n\nif the returned object from onclickSubmit event is not empty we extend the posted data with this object\n\n\n\n\nAdd grid row\n\n\nThe \neditGridRow\n method is also used to add data to the server and grid, by passing \"new\" as the rowid.\n\n\nThis method creates a form via modal dialog for adding a particular row to the grid.\n\nThis method uses \nCommon Editing Properties\n from colModel and editurl option from jqGrid.\n\nThis method uses \nForm options\n from colModel properties.\n\n\nCalling convention:\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\neditGridRow\n,\n \nnew\n,\n \n[\nobject\n \noptions\n]\n \n);\n\n\n\n\n\n\nparameters\n\n\n\n\n\"new\" indicates that the method should go in add mode\n\n\nobject options: an object of name: value pairs, including any of the following properties or events.\n\n\n\n\nThe method uses the following options from language file (Example - English):\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \n...\n\n    \nedit\n \n:\n \n{\n\n    \n// formedit options\n\n        \naddCaption\n:\n \nAdd Record\n,\n\n        \neditCaption\n:\n \nEdit Record\n,\n\n        \nbSubmit\n:\n \nSubmit\n,\n\n        \nbCancel\n:\n \nCancel\n,\n\n        \nbClose\n:\n \nClose\n,\n\n        \nsaveData\n:\n \nData has been changed! Save changes?\n,\n\n        \nbYes\n \n:\n \nYes\n,\n\n        \nbNo\n \n:\n \nNo\n,\n\n        \nbExit\n \n:\n \nCancel\n,\n\n    \n// Validation options\n\n        \nmsg\n:\n \n{\n\n            \nrequired\n:\nField is required\n,\n\n            \nnumber\n:\nPlease, enter valid number\n,\n\n            \nminValue\n:\nvalue must be greater than or equal to \n,\n\n            \nmaxValue\n:\nvalue must be less than or equal to\n,\n\n            \nemail\n:\n \nis not a valid e-mail\n,\n\n            \ninteger\n:\n \nPlease, enter valid integer value\n,\n\n            \ndate\n:\n \nPlease, enter valid date value\n,\n\n            \nurl\n:\n \nis not a valid URL. Prefix required (\nhttp://\n or \nhttps://\n)\n,\n\n            \nnodefined\n \n:\n \n is not defined!\n,\n\n            \nnovalue\n \n:\n \n return value is required!\n,\n\n            \ncustomarray\n \n:\n \nCustom function should return array!\n,\n\n            \ncustomfcheck\n \n:\n \nCustom function should be present in case of custom checking!\n\n\n        \n}\n\n    \n},\n\n  \n...\n\n\n}\n\n\n\n\n\n\nThese options (except edit.msg) can be overwritten when passed as options to the method. When passed to the method we should use by example bSubmit : \"Submit\" and not $.jgrid.regional[\"en\"].edit.bSubmit : \"Submit\"\n\n\nAll the events and options are the same as those from \nedit grid row\n\n\nWhat is need to know?\n\n\nWhen the form is constructed we set the following rules:\n\n\n\n\nHidden fields are included in the form with the display:none property of the table row\n\n\nThe id of the editable element is constructed from the name of the colModel array - the property name\n\n\nThe name of the editable element is constructed from the name of the colModel array - the property  name\n\n\nFor ease in manipulating the elements in an edit form, every table row in the form that holds the data for the edit has a id which is a combination of \"tr_\" + name (from colmodel). Example:\n\n\n\n\nform\n \n....\n\n  \ntable\n\n    \ntr\n \nid\n=\ntr_myfield\n  \n      \ntd\n Caption\n/\ntd\n \ntd\nedited element named, in colModel, as \nmyfield\n/\ntd\n\n    \n/\ntr\n ...\n  \n/\ntable\n\n\n/\nform\n\n\n\n\n\n\nThis allow us to easily show or hide some table rows depending on conditions using beforeShowForm event\n\n\nWhat is posted to the server?\n\n\nWhen we are in editing mode the data that is posted to the server is object {} that contain:\n\n\n\n\nthe name:value pair where the name is the name of the input element represented in the form (this is for all input elements)\n\n\nadditionally we add a pair id:_empty where the _empty indicates that new row is inserted\n\n\nadditionally we add a pair oper:add to indicate the add mode\n\n\nif the editData object is not empty we extend this data with the posted data\n\n\nif the returned object from onclickSubmit event is not empty we extend the posted data with this object\n\n\n\n\nView grid row\n\n\nThe method \nviewGridRow\n method is similar to the editGridRow method except that the fields are not editable and we do not have any events attached to the form.\n\n\nCalling convention:\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nviewGridRow\n,\n \nstring\n \nrowid\n,\n \n[\nobject\n \noptions\n]\n \n);\n\n\n\n\n\n\nWhere\n\n\n\n\ngrid_id: the id of the parent grid\n\n\nstring rowid: the id of the row to edit\n\n\nobject options: an object of name: value pairs, including any of the following properties or events.\n\n\n\n\nThe method uses the following properties from language file (English file):\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \n...\n\n    \nview\n \n:\n \n{\n\n        \ncaption\n:\n \nView Record\n,\n\n        \nbClose\n:\n \nClose\n\n    \n},\n\n\n...\n\n\n}\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbottominfo\n\n\nstring\n\n\nWhen set this information is placed just after the buttons of the form as additional row\n\n\nempty\n\n\n\n\n\n\nbuttons\n\n\narray\n\n\nDefines a custom buttons in the view form. Every element into the array is a object (button) with the following properties:\n \nicon\n - defines a icon according to the CSS framework used. \n \nside\n - left or right - the position of the icon \n \ntext\n - Text to appear in the button\n \nposition\n - the position of the button - last or first \n \nclick\n - function that is executed when the button is click. To the click function is passed the search form, search parameters and click event \n \nid\n - id to identify the button. If not set the jqGrid assing it internally using the jqGrid randId function.\n\n\nempty array\n\n\n\n\n\n\ncloseicon\n\n\narray\n\n\nDetermines the icon of the cancel button. The default values are [true,\"left\",\"ui-icon-close\"]. For description of these see saveicon below\n\n\n\n\n\n\n\n\ncloseOnEscape\n\n\nboolean\n\n\nWhen set to true the modal window can be closed with ESC key from the user.\n\n\nfalse\n\n\n\n\n\n\ndataheight\n\n\ninteger\n\n\nThe parameter control the scrolling content - i.e between the modal header and modal footer.\n\n\nauto\n\n\n\n\n\n\ndrag\n\n\nboolean\n\n\nDetermines if the dialog is dragabale. Works only if jqDnR plugin is present or if the dragable widget is present from jQuery UI\n\n\ntrue\n\n\n\n\n\n\nheight\n\n\nmixed\n\n\nThe entry height of form dialog\n\n\nauto\n\n\n\n\n\n\njqModal\n\n\nboolean\n\n\nIf set to true uses jqModal plugin (if present) to create the dialog s. If set to true and the plugin is not present jqGrid uses its internal function to create dialog\n\n\ntrue\n\n\n\n\n\n\nlabelswidth\n\n\nmixed\n\n\nSince we construct the view with table element it is difficult to calculate, in this case, how much width is needed for the labels. Depending on the needs this value can be increased or decreased\n\n\n30%\n\n\n\n\n\n\nleft\n\n\ninteger\n\n\nThe initial left position of modal dialog. The default value of 0 mean the left position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the left position from upper left corner of the window.\n\n\n0\n\n\n\n\n\n\nmodal\n\n\nboolean\n\n\nDetermines if the dialog will be modal. Also works only if jqModal plugin is present\n\n\nfalse\n\n\n\n\n\n\nnavkeys\n\n\narray\n\n\nThis option works only in edit mode and  add keyboard navigation, which allow us to navigate through the records while in form editing pressing certain keys. The default state is disabled. The first item enables/disables the navigation. The second item corresponds to record up and by default is the  the key code for Up key. The third item corresponds to record down and by default is the  key code for Down key\n\n\n[false,38,40]\n\n\n\n\n\n\nrecreateForm\n\n\nboolean\n\n\nWhen set to true the form is recreated every time the dialog is activated with the new options from colModel (if they are changed)\n\n\nfalse\n\n\n\n\n\n\nresize\n\n\nboolean\n\n\nDetermines if the dialog can be re-sized. Works only is jqDnR plugin is available or re-sizable widget is present from jQuery UI\n\n\ntrue\n\n\n\n\n\n\ntop\n\n\ninteger\n\n\nThe initial top position of modal dialog. The default value of 0 mean the top position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the top position from upper left corner of the window.\n\n\n0\n\n\n\n\n\n\ntopinfo\n\n\nstring\n\n\nWhen set this information is placed just after the modal header as additional row\n\n\nempty\n\n\n\n\n\n\nviewPagerButtons\n\n\nboolean\n\n\nThis option enable or disable the appearing of the previous and next buttons (pager buttons) in the form\n\n\ntrue\n\n\n\n\n\n\nwidth\n\n\ninteger\n\n\nThe width of form dialog in pixels. Can have auto property.\n\n\n300\n\n\n\n\n\n\nzIndex\n\n\ninteger\n\n\nThe starting z-index for the dialog. If you will see the dialog form under another elements or dialogs you should use the parameter with some value higher as default value 950. In the most cases it should be the value higher as 1000 - the default value of jQuery UI dialog.\n\n\n950\n\n\n\n\n\n\n\n\nEvents\n\n\nThe events (function) options parameters have a triggered event equivalent which is set below to the options event.\n\nEvery triggered event in editGridRow method begin with \njqGridViewRow\n and should be called outside the method, while the options events are passed as parameters to the method.\n\n\n\n\nNote\n\n\nThe first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)\n\n\n\n\n\n\nNote\n\n\nthe triggered event is bind to the grid and is not passed to any options. See \nTriggered events\n\n\n\n\n\n\nafterclickPgButtons(string whichbutton, DOM element form, string rowid)\n\n\njqGridViewRowAfterClickPgButtons(event, whichbutton, formid, rowid)\n\n\nThis event can be used only when the navigator buttons are enabled; it fires after the data for the new row is loaded from the grid when the pager button is clicked, allowing modification of the data or form before the form is re-displayed.\n\n\nparameters\n\n\n\n\nstring whichbutton is either 'prev' or 'next'\n\n\nDOM element form is the jQuery object of form, you can use formid[0].id to get form id.\n\n\nstring rowid is the id of the newly loaded row\n\n\n\n\nreturn\n\nnone\n\n\n\n\nonclickPgButtons(string whichbutton, DOM form, string rowid)\n\n\njqGridViewRowClickPgButtons(event, string whichbutton, DOM form, string rowid)\n\n\nThis event can be used only when we are in view mode; it fires immediately after the previous or next button on form pager is clicked, before leaving the current row, allowing working with (e.g., saving) the currently loaded values in the form\n\n\nparameters\n\n\n\n\nstring which button - can be either 'prev' or 'next'\n\n\nDOM form is the jQuery object of the form, you can use formid[0].id to get form id.\n\n\nstring rowid is the id of the current row.\n\n\n\n\nreturn\n\nnone\n\n\n\n\nbeforeShowForm(DOM form)\n\n\njqGridViewRowBeforeShowForm(event, DOM form)\n\n\nFires before showing the form with the new data;\n\n\nparameters\n\n\n\n\nDOM form is the jQuery object of the form, you can use formid[0].id to get form id.\n\n\n\n\nreturn\n\nnone\n\n\n\n\nbeforeInitData(DOM form)\n\n\njqGridViewRowBeforeInitData(event, DOM form)\n\n\nFires before initialize the new form data.\n\n\nThe Event can return true or false. If the event return false the the action is not done and the form is not lunched. Any other return is treated as true.\n\n\nparameters\n\n\n\n\nDOM form is the jQuery object of the form, you can use formid[0].id to get form id.\n\n\n\n\nreturn\n\nboolean\n\n\n\n\nonClose()\n\nNo trigered event\n\n\nThis event is called just before closing the form and when a close icon is clicked, a cancel button is clicked, ESC key is pressed or click on overlay (if jqModal is present). The event can return (optionally) true or false. If the return value is true the form is closed, if false the form does not close. If nothing is returned the form is closed\n\n\nparameters\n\nnone\n\n\nreturn\n\n[boolean]\n\n\nWhat is need to know?\n\nWhen the form is constructed we set the following rules:\n\n\n\n\nNo input elements are created\n\n\nHidden fields are included in the form with the display:none property of the table row\n\n\nIf the field is not hidden in grid and there is a need to not show it in the view form use the colModel property \nviewable\n set to false.\n\n\nThe id of the viewed element is constructed from \"v_\" + the name of the colModel array - propery - name\n\n\nFor ease in manipulating the elements in an edit form, every table row in the form that holds the data for the edit has a id which is a combination of \"trv_\" + name (from colmodel). Example:\n\n\n\n\nform\n \n....\n\n \ntable\n\n   \ntr\n \nid\n=\ntrv_myfield\n  \n     \ntd\n Caption\n/\ntd\n \ntd\n \nid\n=\nv_myfield\nspan\ncontent of\nmyfield\n/\nspan\n/\ntd\n\n   \n/\ntr\n ...\n \n/\ntable\n\n\n/\nform\n\n\n\n\n\n\nDel grid row\n\n\nWith the method  \ndelGridRow\n  a delete operation can be performed in the grid and/or at server side.\n\n\nCalling convention:\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\ndelGridRow\n,\n \nstring\n \nrow_id_s\n,\n \n[\nobject\n \noptions\n]\n \n);\n\n\n\n\n\n\nWhere:\n\n\n\n\ngrid_id: the id of the parent grid\n\n\nstring row_id_s: the id of the row(s) to delete; can be a single value or list of ids separated by comma\n\n\noptions: an array of name: value pairs, including any of the following properties or events.\n\n\n\n\nThe method uses the following properties from language file:\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \n...\n\n \ndel\n \n:\n \n{\n\n   \ncaption\n:\n \nDelete\n,\n\n   \nmsg\n:\n \nDelete selected record(s)?\n,\n\n   \nbSubmit\n:\n \nDelete\n,\n\n   \nbCancel\n:\n \nCancel\n\n \n},\n\n\n...\n\n\n}\n\n\n\n\n\n\nThese options can be overwritten when passed as options to the method. When passed to the method we should use by example bSubmit : \"Delete\" and not $.jgrid.regional[\"en\"].del.bSubmit : \"Delete\"\n\n\nOptions\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\najaxDelOptions\n\n\nobject\n\n\nThis option allow to set global ajax settings for the form editing when we delete the data to the server. Note that with this option is possible to overwrite all current ajax setting in the save request including the complete event.\n\n\nempty\n\n\n\n\n\n\nbuttons\n\n\narray\n\n\nDefines a custom buttons in the delete form. Every element into the array is a object (button) with the following properties:\n \nicon\n - defines a icon according to the CSS framework used. \n \nside\n - left or right - the position of the icon \n \ntext\n - Text to appear in the button\n \nposition\n - the position of the button - last or first \n \nclick\n - function that is executed when the button is click. To the click function is passed the search form, search parameters and click event \n \nid\n - id to identify the button. If not set the jqGrid assing it internally using the jqGrid randId function.\n\n\nempty array\n\n\n\n\n\n\ncancelicon\n\n\narray\n\n\nDetermines the icon of the cancel button. The default values are [true,\u201dleft\u201d,\u201dui-icon-cancel\u201d]. For description of these see delicon\n\n\n\n\n\n\n\n\ncloseOnEscape\n\n\nboolean\n\n\nWhen set to true the modal window can be closed with ESC key from the user.\n\n\nfalse\n\n\n\n\n\n\ndataheight\n\n\ninteger\n\n\nThe parameter control the scrolling content - i.e between the modal header and modal footer.\n\n\nauto\n\n\n\n\n\n\ndelData\n\n\nobject\n\n\nObject used to add additional content to the data posted to the server\n\n\nempty\n\n\n\n\n\n\ndelicon\n\n\narray\n\n\nDetermines the icon of the submit button. The default value is [true,\"left\",\"ui-icon-trash\"]. The first item enables/disables the icon. The second item tells where to put the icon to left or to right of the text. The third item corresponds to valid ui icon from the css framework used\n\n\n\n\n\n\n\n\ndrag\n\n\nboolean\n\n\nDetermines if the dialog is dragabale. Works only if jqDnR plugin is present or if the dragable widget is present from jQuery UI\n\n\ntrue\n\n\n\n\n\n\nheight\n\n\nmixed\n\n\nThe entry height of form dialog\n\n\nauto\n\n\n\n\n\n\njqModal\n\n\nboolean\n\n\nIf set to true uses jqModal plugin (if present) to create the dialog s. If set to true and the plugin is not present jqGrid uses its internal function to create dialog\n\n\ntrue\n\n\n\n\n\n\nleft\n\n\ninteger\n\n\nThe initial left position of modal dialog. The default value of 0 mean the left position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the left position from upper left corner of the window.\n\n\n0\n\n\n\n\n\n\nmodal\n\n\nboolean\n\n\nDetermines if the dialog will be modal. Also works only if jqModal plugin is present\n\n\nfalse\n\n\n\n\n\n\nmtype\n\n\nstring\n\n\nDefines the type of request to make (\"POST\" or \"GET\") when data is sent to the server\n\n\nPOST\n\n\n\n\n\n\nreloadAfterSubmit\n\n\nboolean\n\n\nReload grid data after posting\n\n\ntrue\n\n\n\n\n\n\nresize\n\n\nboolean\n\n\nDetermines if the dialog can be re-sized. Works only is jqDnR plugin is available or re-sizable widget is present from jQuery UI\n\n\ntrue\n\n\n\n\n\n\ntop\n\n\ninteger\n\n\nThe initial top position of modal dialog. The default value of 0 mean the top position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the top position from upper left corner of the window.\n\n\n0\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nThe url where to post data. If set, replaces the editurl.\n\n\nnull\n\n\n\n\n\n\nwidth\n\n\ninteger\n\n\nThe width of form dialog in pixels. Can have auto property.\n\n\n300\n\n\n\n\n\n\nzIndex\n\n\ninteger\n\n\nThe starting z-index for the dialog. If you will see the dialog form under another elements or dialog s you should use the parameter with some value higher as default value 950. In the most cases it should be the value higher as 1000 - the default value of jQuery UI dialog.\n\n\n950\n\n\n\n\n\n\n\n\nEvents\n\n\nThe events (function) options parameters have a triggered event equivalent which is set below to the options event.\n\nEvery triggered event in delGridRow method begin with \njqGridDelRow\n and should be called outside the method, while the options events are passed as parameters to the method.\n\n\n\n\nNote\n\n\nThe first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)\n\n\n\n\n\n\nNote\n\n\nthe triggered event is bind to the grid and is not passed to any options. See \nTriggered events\n\n\n\n\n\n\nafterComplete(ajax response, object postdata)\n\n\njqGridDelRowAfterComplete(event , ajax response, object postdata)\n\n\nThis event fires immediately after all actions and events are completed and the row is deleted the grid.\n\n\nparameters\n\n\n\n\najax response is the data returned from the server (if any)\n\n\nobject postdata is the data sent to the server\n\n\n\n\nreturn\n\nnone\n\n\n\n\nafterShowForm( DOM form)\n\n\njqGridDelRowAfterShowForm(event,  DOM form)\n\n\nFires after showing the form;\n\n\nparameters\n\n\n\n\nDOM form is the jQuery object of the delete form.\n\n\n\n\nreturn\n\nnone\n\n\n\n\nafterSubmit(ajax response, object postdata)\n\n\njqGridDelRowAfterSubmit(event, ajax response, object postdata)\n\n\nFires after response has been received from server. Typically used to display status from server (e.g., the data is successfully deleted or the delete canceled for server-side reasons)\n\n\nWhen used this event should return array with the following items \n[success, message]\n where\n\n\n\n\nsuccess is a boolean value if true the process continues, if false a error message appear and all other processing is stopped. (message is ignored if success is true).\n\n\nmessage - the message that appear when first parameter is false\n\n\n\n\nparameters\n\n\n\n\najax response is the data returned from the server (if any)\n\n\nobject postdata is the data sent to the server\n\n\n\n\nreturn\n\narray -  see description above\n\n\n\n\nbeforeInitData(DOM form)\n\n\njqGridDelRowBeforeInitData(event, DOM form)\n\n\nFires before initialize the new form data.\n\n\nThe Event can return true or false. If the event return false the the action is not done and the form is not lunched. Any other return is treated as true.\n\n\nparameters\n\n\n\n\nDOM form is the jQuery object of the delete form.\n\n\n\n\nreturn\n\nboolean\n\n\n\n\nbeforeShowForm(DOM form)\n\n\njqGridDelRowBeforeShowForm(event, DOM form)\n\n\nFires before showing the form with the data;\n\n\nparameters\n\n\n\n\nDOM form is the jQuery object of the form, you can use formid[0].id to get form id.\n\n\n\n\nreturn\n\nnone\n\n\n\n\nbeforeSubmit( object postdata)\n\n\njqGridDelRowBeforeSubmit(event, object postdata)\n\n\nFires before the data is submitted to the server.\n\nWhen defined this event should return array with the following values \n[boolean success, string error]\n\n\n\n\nsuccess boolean indicating if the process should continue (true) or a error (false)\n\n\nerror is the error message which appear to the user\n\n\n\n\nparameters\n\n\n\n\nobject postdata is the data sent to the server\n\n\n\n\nreturn\n\narray - see above\n\n\n\n\nonclickSubmit( object options, object postdata)\n\n\njqGridDelRowClickSubmit(event, object options, object postdata)\n\n\nFires after the submit button is clicked and the postdata is constructed.\n\nThe event should return object in name:value pair which then will be added to the posted data to the server\n\n\nparameters\n\n\n\n\nobject options - parameters passed to the method\n\n\nobject postdata is the data sent to the server\n\n\n\n\nreturn\n\nobject\n\n\n\n\nonClose()\n\nNo trigered event\n\n\nThis event is called just before closing the form and when a close icon is clicked, a cancel button is clicked, ESC key is pressed or click on overlay (if jqModal is present). The event can return (optionally) true or false. If the return value is true the form is closed, if false the form does not close. If nothing is returned the form is closed\n\n\nparameters\n\nnone\n\n\nreturn\n\n[boolean]\n\n\n\n\nerrorTextFormat( ajax response)\n\n\njqGridDelRowErrorTextFormat(event, ajax response)\n\n\nThe event (can) fire when error occurs from the ajax call (status \n= 300 \n status !== 304) and can be used for better formatting of the error messages. To this event is passed response from the server. The event should return single message (not array), which then is displayed to the user.\n\n\nparameters\n\n\n\n\najax response - the response from the server\n\n\n\n\nreturn\n\nstring\n\n\n\n\nserializeDelData( object postdata )\n\nNo trigered event\n\n\nIf set this event can serialize the data passed to the ajax request when we post a data. Actually the event is called in the ajax data parameter. The function should return the serialized data. This event can be used when a custom data should be passed to the server - e.g - JSON string, XML string and etc. To this event is passed the data which will be posted to the server\n\n\nparameters\n\n\n\n\nobject postdata - data posted to the server\n\n\n\n\nreturn\n\nobject\n\n\n\n\nWhat is posted to the server?\n\n\nWhen we are in delete mode the data that is posted to the server is object {} that contain:\n\n\n\n\nthe pair id:rowids where the rowids can be a single value or value string separated with comma in case of multiple selection\n\n\nadditionally we add a pair oper:del to indicate the delete mode\n\n\nif the delData object is not empty we extend this data with the posted data\n\n\nif the returned object from onclickSubmit event is not empty we extend the posted data with this object\n\n\n\n\nUsing templates\n\n\nGuriddo jqGrid support templates in the form editing. This allow to customize the edit form in a way the developer want. To use a template it is needed to set the parameter template in the \nedit add/or add options\n. This can be done in navigator \nnavGrid\n or in the editing method \neditGridRow\n :\n\n\nIn navigator the code is:\n\n\n$\n(\n#grid\n).\njqGrid\n(\nnavGrid\n,\n\n    \n{\nadd\n:\ntrue\n,\n \nedit\n:\ntrue\n,...},\n\n    \n{\ntemplate\n:\n \ntemplate string for edit\n,...}\n\n    \n{\ntemplate\n:\n \ntemplate string for add\n,...},\n\n\n...\n\n\n);\n\n\n\n\n\n\nand in editGridRow method:\n\n\n$\n(\n#grid\n).\njqGrid\n(\neditGridRow\n,\n\n   \nrowid\n,\n\n   \n{\ntemplate\n:\n \ntemplate string\n,...}\n\n\n);\n\n\n\n\n\n\nwhere the 'template string...' is a string containing html tags and a special marks which points where the field from the grid should be.\n\n\n\n\nNote\n\n\nThe template for edit can be a different from the template from add operation. The template can be present only for add and only for edit operation.\n\n\n\n\nLet suppose that we have the following colModel (not all fields are present)\n\n\n$\n(\ngrid\n).\njqGrid\n({\n\n\n...\n\n\ncolModel\n:\n \n[\n\n   \n{\n\n      \nlabel\n:\n \nCustomer ID\n,\n\n      \nname\n:\n \nCustomerID\n,\n\n      \nwidth\n:\n \n75\n,\n\n      \nkey\n:\n \ntrue\n,\n\n      \neditable\n:\n \ntrue\n,\n\n      \neditrules\n \n:\n \n{\n \nrequired\n:\n \ntrue\n}\n\n   \n},\n\n   \n{\n\n      \nlabel\n:\n \nCompany Name\n,\n\n      \nname\n:\n \nCompanyName\n,\n\n      \nwidth\n:\n \n140\n,\n\n      \neditable\n:\n \ntrue\n \n// must set editable to true if you want to make the field editable\n\n   \n},\n\n   \n...\n\n\n],\n\n \n...\n\n \n});\n\n\n\n\n\n\nTo place the CustomerID field in the template the following code string should be inserted in the template string\n\n\n{CustomerID}\n\n\n\n\n\nWith other words the name from colModel should be put in bracket { }.\n\n\nTo place the Save and Cancel buttons we need to write a special code:\n\nFor the save button this is \n{sData}\n and for the cancel button this is a \n{cData}\n\n\nThe same apply for the navigator buttons for previous and next record.\n\nFor previous button this is \n{pData}\n and for the next button this is a \n{nData}\n\n\n\n\nNote\n\n\nIt is not needed to create a form element. The form element is created from the grid and the template content is put into it.\n\n\n\n\nBelow is the simple template which implements divs to represent the form.\n\n\nvar mytemplate = \ndiv\n \nstyle\n=\nmargin-left:15px;\n;\nmytemplate += \ndiv\n Customer ID \nsup\n*\n/\nsup\n:\n/\ndiv\ndiv\n {CustomerID} \n/\ndiv\n;\nmytemplate += \ndiv\n Company Name: \n/\ndiv\ndiv\n{CompanyName} \n/\ndiv\n;\nmytemplate += \ndiv\n Phone: \n/\ndiv\ndiv\n{Phone} \n/\ndiv\n;\nmytemplate += \ndiv\n Postal Code: \n/\ndiv\ndiv\n{PostalCode} \n/\ndiv\n;\nmytemplate += \ndiv\n City:\n/\ndiv\ndiv\n {City} \n/\ndiv\n;\nmytemplate += \nhr\n \nstyle\n=\nwidth:100%;\n/\n;\nmytemplate += \ndiv\n {sData} {cData}  \n/\ndiv\n/\ndiv\n;\n\n\n\n\n\n$\n(\n#jqGrid\n).\njqGrid\n({\n\n  \nurl\n:\n \ndata.json\n,\n\n  \n// we set the changes to be made at client side using predefined word clientArray\n\n  \nediturl\n:\n \nclientArray\n,\n\n    \ndatatype\n:\n \njson\n,\n\n  \ncolModel\n:\n \n[\n\n  \n{\n \nlabel\n:\n \nCustomer ID\n,\n\n    \nname\n:\n \nCustomerID\n,\n\n    \nwidth\n:\n \n75\n,\n\n    \nkey\n:\n \ntrue\n,\n\n    \neditable\n:\n \ntrue\n,\n\n    \neditrules\n \n:\n \n{\n \nrequired\n:\n \ntrue\n}\n \n},\n\n    \n{\n  \nlabel\n:\n \nCompany Name\n,\n\n        \nname\n:\n \nCompanyName\n,\n\n      \nwidth\n:\n \n140\n,\n\n      \neditable\n:\n \ntrue\n \n/* must set editable to true if you want to make the field editable*/\n\n        \n},\n\n    \n{\n\n        \nlabel\n \n:\n \nPhone\n,\n\n        \nname\n:\n \nPhone\n,\n\n      \nwidth\n:\n \n100\n,\n\n      \neditable\n:\n \ntrue\n\n    \n},\n\n    \n{\n\n        \nlabel\n:\n \nPostal Code\n,\n\n      \nname\n:\n \nPostalCode\n,\n\n      \nwidth\n:\n \n80\n,\n\n      \neditable\n:\n \ntrue\n\n    \n},\n\n    \n{\n\n        \nlabel\n:\n \nCity\n,\n\n      \nname\n:\n \nCity\n,\n\n      \nwidth\n:\n \n140\n,\n\n      \neditable\n:\n \ntrue\n\n    \n}\n\n    \n],\n\n  \nsortname\n:\n \nCustomerID\n,\n\n  \nsortorder\n \n:\n \nasc\n,\n\n  \nloadonce\n:\n \ntrue\n,\n\n  \nviewrecords\n:\n \ntrue\n,\n\n  \nwidth\n:\n \n780\n,\n\n  \nheight\n:\n \n200\n,\n\n  \nrowNum\n:\n \n10\n,\n\n  \npager\n:\n \n#jqGridPager\n\n\n});\n\n\n\n$\n(\n#jqGrid\n).\nnavGrid\n(\n#jqGridPager\n,\n\n    \n// the buttons to appear on the toolbar of the grid\n\n  \n{\n \nedit\n:\n \ntrue\n,\n \nadd\n:\n \ntrue\n,\n \ndel\n:\n \ntrue\n,\n \nsearch\n:\n \nfalse\n,\n \nrefresh\n:\n \nfalse\n,\n \nview\n:\n \nfalse\n,\n \nposition\n:\n    \nleft\n,\n \ncloneToTop\n:\n \nfalse\n \n},\n\n  \n//options for the Edit Dialog\n\n  \n{\n\n    \neditCaption\n:\n \nThe Edit Dialog\n,\n\n    \ntemplate\n:\n \nmytemplate\n,\n\n    \nerrorTextFormat\n:\n \nfunction\n \n(\ndata\n)\n \n{\n\n        \nreturn\n \nError: \n \n+\n \ndata\n.\nresponseText\n\n    \n}\n\n  \n},\n\n   \n// options for the Add Dialog\n\n  \n{\n\n    \ntemplate\n:\n \nmytemplate\n,\n\n    \nerrorTextFormat\n:\n \nfunction\n \n(\ndata\n)\n \n{\n\n        \nreturn\n \nError: \n \n+\n \ndata\n.\nresponseText\n\n    \n}\n\n  \n},\n\n  \n// options for the Delete Dailog\n\n  \n{\n\n    \nerrorTextFormat\n:\n \nfunction\n \n(\ndata\n)\n \n{\n\n        \nreturn\n \nError: \n \n+\n \ndata\n.\nresponseText\n\n    \n}\n\n  \n}\n\n\n);\n\n\n\n\n\n\nHTML5 Support\n\n\nThe html5 checking in the editGridRow method (form editing) is supported via the option \nhtml5Check\n. Additionally to this it is needed to use the \nedittype\n option in colModel to define valid html5 input type and editoptions in the same colModel to enter supported attributes for that edittype. Below is a small example:\n\n\n$\n(\n#jqGrid\n).\njqGrid\n({\n\n    \nurl\n:\n \ndata.json\n,\n\n    \nediturl\n:\n \nclientArray\n,\n\n    \ndatatype\n:\n \njson\n,\n\n    \ncolModel\n:\n \n[\n\n    \n{\n\n        \nlabel\n:\n \nCustomer ID\n,\n\n        \nname\n:\n \nCustomerID\n,\n\n        \nwidth\n:\n \n75\n,\n\n        \nkey\n:\n \ntrue\n,\n\n        \neditable\n:\n \ntrue\n,\n\n        \neditoptions\n \n:\n \n{\n\n            \nrequired\n:\n \ntrue\n,\n \n// html5 requiered\n\n            \nplaceholder\n:\n \nCustomerId requiered\n \n// html5 placeholder\n\n        \n}\n\n    \n},\n\n    \n{\n\n        \nlabel\n:\n \nCompany Name\n,\n\n        \nname\n:\n \nCompanyName\n,\n\n        \nwidth\n:\n \n140\n,\n\n        \neditable\n:\n \ntrue\n\n    \n},\n\n    \n{\n\n        \nlabel\n \n:\n \nPhone\n,\n\n        \nname\n:\n \nPhone\n,\n\n        \nwidth\n:\n \n100\n,\n\n        \neditable\n:\n \ntrue\n,\n\n        \neditoptions\n \n:\n \n{\n\n            \npattern\n \n:\n \n^[0-9\\-\\+\\s\\(\\)]*$\n,\n \n// html5 pattern to validate the input\n\n            \nplaceholder\n \n:\n \nPhone number\n,\n \n// html5 required\n\n            \nrequired\n:\n \ntrue\n \n// html5 required\n\n        \n}\n\n    \n},\n\n    \n{\n\n        \nlabel\n:\n \nPostal Code\n,\n\n        \nname\n:\n \nPostalCode\n,\n\n        \nwidth\n:\n \n80\n,\n\n        \neditable\n:\n \ntrue\n\n    \n},\n\n    \n{\n\n        \nlabel\n:\n \nCity\n,\n\n        \nname\n:\n \nCity\n,\n\n        \nwidth\n:\n \n140\n,\n\n        \neditable\n:\n \ntrue\n\n    \n},\n\n    \n{\n\n        \nlabel\n:\n \nRanking\n,\n\n        \nname\n:\n \nrank\n,\n\n        \nwidth\n:\n \n80\n,\n\n        \neditable\n:\n \ntrue\n,\n\n        \nedittype\n \n:\n \nnumber\n,\n \n// define number type\n\n        \neditoptions\n \n:\n \n{\n\n            \nrequired\n:\n \ntrue\n,\n \n// html5 required\n\n            \nmin\n \n:\n \n1\n,\n \n// html5 min\n\n            \nmax\n \n:\n \n10\n,\n \n// html5 max\n\n            \nplaceholder\n \n:\n \nEnter rank 1-10\n \n// html5 placeholder\n\n        \n}\n\n    \n}\n\n\n],\n\n\nsortname\n:\n \nCustomerID\n,\n\n\nsortorder\n \n:\n \nasc\n,\n\n\nloadonce\n:\n \ntrue\n,\n\n\nviewrecords\n:\n \ntrue\n,\n\n    \nwidth\n:\n \n780\n,\n\n    \nheight\n:\n \n200\n,\n\n    \nrowNum\n:\n \n10\n,\n\n    \npager\n:\n \n#jqGridPager\n\n\n});\n\n\n\n$\n(\n#jqGrid\n).\nnavGrid\n(\n#jqGridPager\n,\n\n    \n// the buttons to appear on the toolbar of the grid\n\n    \n{\n \nedit\n:\n \ntrue\n,\n \nadd\n:\n \ntrue\n,\n \ndel\n:\n \nfalse\n,\n \nsearch\n:\n \nfalse\n,\n \nrefresh\n:\n \nfalse\n,\n \nview\n:\n \nfalse\n,\n \nposition\n:\n \nleft\n,\n \ncloneToTop\n:\n \nfalse\n \n},\n\n    \n// options for the Edit Dialog\n\n    \n{\n\n        \nhtml5Check\n \n:\n  \ntrue\n,\n \n// Enable HTML5 check\n\n        \neditCaption\n:\n \nThe Edit Dialog\n,\n\n        \nrecreateForm\n:\n \ntrue\n,\n\n        \ncloseAfterEdit\n:\n \ntrue\n,\n\n        \nerrorTextFormat\n:\n \nfunction\n \n(\ndata\n)\n \n{\n\n            \nreturn\n \nError: \n \n+\n \ndata\n.\nresponseText\n\n        \n}\n\n    \n},\n\n    \n// options for the Add Dialog\n\n    \n{\n\n        \ncloseAfterAdd\n:\n \ntrue\n,\n\n        \nhtml5Check\n \n:\n \ntrue\n,\n \n// Enable HTML5 check\n\n        \nrecreateForm\n:\n \ntrue\n,\n\n        \nerrorTextFormat\n:\n \nfunction\n \n(\ndata\n)\n \n{\n\n            \nreturn\n \nError: \n \n+\n \ndata\n.\nresponseText\n\n        \n}\n\n    \n},\n\n    \n// options for the Delete Dailog\n\n    \n{\n\n        \nerrorTextFormat\n:\n \nfunction\n \n(\ndata\n)\n \n{\n\n            \nreturn\n \nError: \n \n+\n \ndata\n.\nresponseText\n\n        \n}\n\n    \n});\n\n\n});", 
            "title": "Editing"
        }, 
        {
            "location": "/user-guide/editing/#editing", 
            "text": "One of the key reasons for displaying data in a grid is to edit it, quickly and easily.", 
            "title": "Editing"
        }, 
        {
            "location": "/user-guide/editing/#common-editing-properties", 
            "text": "jqGrid supports editing data in three ways:   Cell editing  : edit specific cells in a gird  Inline editing  : edit several cells in the same row  Form editing  : create a form to edit outside of the grid", 
            "title": "Common editing properties"
        }, 
        {
            "location": "/user-guide/editing/#developer-information", 
            "text": "All of editing methods are written in separate modules which are:  grid.celledit.js  for Cell editing, grid.inlinedit.js for Inline editing and grid.formedit.js for Form editing. All of these modules use the common module grid.common.js.", 
            "title": "Developer information"
        }, 
        {
            "location": "/user-guide/editing/#options-and-description", 
            "text": "All editing modules uses a common properties in colModel in order to perform editing. Below is the list of these properties with detailed description:   editable  edittype  editoptions  editrules  formoptions (valid only in form editing)   The common syntax of using these options is:  script  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel :   [ \n       ... \n       { \n         name : price ,   ..., \n         editable : true , \n         edittype : text , \n         editoptions : {...}, \n         editrules : {...}, \n         formoptions : {...} \n         ... \n       }, \n       ... \n    ]  ...  });  /script   For all other specific options and events refer to the appropriate module.   Note  For every editable element jqGrid construct different name and id which are specific for every module. Refer to the appropriate module on how these are constructed", 
            "title": "Options and Description"
        }, 
        {
            "location": "/user-guide/editing/#editable", 
            "text": "The editable option is a boolean and can have a value of true or false. The option defines whether this field is editable (or not). Default is false. To make a field editable, set this option to true: editable:true. \nWe should mention that hidden fields are not editable; instead that they have been marked as editable. In the in-line and cell editing modules you should show these fields (using the showCol method) in order to edit it. In the form editing module you should use the certain editrules option (see below).", 
            "title": "editable"
        }, 
        {
            "location": "/user-guide/editing/#edittype", 
            "text": "Edittype option defines the type of of the editable field. Possible values are: 'text', 'textarea', 'select', 'checkbox', 'password', 'button', 'image', 'file' and 'custom'. The default value is 'text'. Below is the description of these types:  text  When edittype is 'text', jqGrid constructs a input tag of type text:  input   type = text   ..... /   In editoptions we can set all the possible attributes for this field. For example,  ...   editoptions :   { size : 10 ,   maxlength :   15 }   will cause jqGrid to construct the following input  input   type = text   size = 10   maxlength = 15   /   In addition to the these settings, jqGrid adds the id and name attribute.  textarea  When edittype is 'textarea', jqGrid constructs a input tag of type textarea  input   type = textarea   ... /   In editoptions we can add additional attributes to this type. Typically, these govern the size of the box:  ...   editoptions :   { rows : 2 , cols : 10 }   input   type = textarea   rows = 2   cols = 10 ... /   To these attributes jqGrid adds id and name attributes . \nIf the rows and cols attributes are not set jqGrid set defaults to rows =2, cols = 20  checkbox  When edittype is 'checkbox', jqGrid constructs a input tag as follows:  input   type = checkbox   ... /   editoptions is used to define the checked and unchecked values. The first value is checked. For example  ... editoptions :   {   value : Yes:No   }   This will construct  input   type = checkbox   value = Yes   offval = No ... /   defines a checkbox; when the value is Yes, the checkbox becomes checked, otherwise it is unchecked. This value is passed as a parameter to the editurl.  If in editoptions, the value property is not set, jqGrid searches for the following values (false|0|no|off|undefined) in order to construct the checkbox. If the cell content does not contain one of these values, then the value attribute becomes the cell content and offval is set to off. \nExample if the cell content is true, then  input   type = checkbox   value = true   offval = off   checked ... /   To these attributes jqGrid adds id and name attributes.  select  When edittype is 'select', jqGrid constructs a input tag as follows:  select  option   value = val1  Value1  / option  option   value = val2  Value2  / option \n... option   value = valn  ValueN  / option  / select   To construct this element we have three possible variants:   Setting the editoptions value as string The editoptions value must contain a set of value:label pairs with the value separated from the label with a colon (:) and ended with(;). Whichever you use, something like the following   editoptions :   {   value :   FE:FedEx; IN:InTime; TN:TNT   }   will construct  select  option   value = FE  FedEx  / option  option   value = IN  InTime  / option  option   value = TN  TNT  / option  / select   Note the last element in the string - it should not end with ;   Setting the editoptions value as object   In this case the editoptions value must contain an array {} with name:value properties separated by a comma. Below is an example:  ...  colModel   :   [ \n       ... \n     { name : myname ,   edittype : select ,   editoptions : { value : { 1 : One , 2 : Two }}   }, \n       ...  ]  ...   This will construct an HTML select  select  option   value = 1 One / option  option   value = 2 Two / option  / select    Setting the editoptions dataUrl parameter The editoptions dataUrl parameter is valid only for element of edittype:select. The dataUrl parameter represent the url from where the html select element should be get. When this option is set, the element will be filled with values from the AJAX request. The data should be a valid HTML select element with the desired options - something like:   select  option   value = 1 One / option  option   value = 2 Two / option \n... / select   To this element, jqGrid adds the id and name attributes as above.  Multiple selection of options in a select box is also possible. A size attribute may be added as well  ... editoptions :   { multiple   :   true ,   size   :   4. ..   }   If not set the default size attribute is 3 when multiple is true.  password  When edittype is 'password', jqGrid constructs a input tag of type text:  input   type = password   ..... /   In editoptions we can set all the possible attributes for this field. For example,  ...   editoptions :   { size : 10 ,   maxlength :   8 }   will cause jqGrid to construct the following input  input   type = password   size = 10   maxlength = 8   /   In addition to the these settings, jqGrid adds the id and name attribute.  button  When edittype is 'button', jqGrid constructs a input tag of type text:  input   type = button   ..... /   In editoptions we can set all the possible attributes for this field. For example,  ...   editoptions :   { value : MyButton }   will cause jqGrid to construct the following input  input   type = button   value = MyButton   /   In addition to the these settings, jqGrid adds the id and name attribute.  image  When edittype is 'image', jqGrid constructs a input tag of type text:  input   type = image   ..... /   In editoptions we can set all the possible attributes for this field. For example,  ...   editoptions :   { src : path_to_my_image }   will cause jqGrid to construct the following input  input   type = image   src = path_to_my_image   /   In addition to the these settings, jqGrid adds the id and name attribute.  file  When edittype is 'file', jqGrid constructs a input tag of type text:  input   type = file   ..... /   In editoptions we can set all the possible attributes for this field. For example,  ...   editoptions :   { alt : Alt text }   will cause jqGrid to construct the following input  input   type = file   alt = Alt text ...   /   In addition to the these settings, jqGrid adds the id and name attribute.   Warning  When this element is created (usually in form editing) the form does not become  enctype=\"multipart/form-data\"  in order to upload the file. You should apply another plugin for this purpose - Ajax File Upload plugin works fine or set a form property  enctype  using some events like beforeInitData.   custom  This edit type allows definition of a custom editable element. When the edit type is set to custom we should provide a set of two functions, one which creates the element, and one that gets and sets the value from in form in order to be posted to the server. \nThe functions that should be defined  are custom_element  and  custom_value . See the editoptions below for more details  When the custom element is created we automatically do the following additinal tasks:   add a class 'customelement' to the element  add attribute name with name from colModel  add id according to the rules for every edited module.   The example above will create element input type text:  script  function   myelem   ( value ,   options )   { \n   var   el   =   document . createElement ( input ); \n   el . type = text ; \n   el . value   =   value ; \n   return   el ;  }  function   myvalue ( elem ,   operation ,   value )   { \n     if ( operation   ===   get )   { \n        return   $ ( elem ). val (); \n     }   else   if ( operation   ===   set )   { \n        $ ( input , elem ). val ( value ); \n     }  }  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel :   [ \n       ... \n       { \n         name : price ,   ..., \n         editable : true , \n         edittype : custom , \n         editoptions :   { \n           custom_element :   myelem , \n           custom_value : myvalue \n         } \n       }, \n       ... \n    ]  ...  });  /script", 
            "title": "edittype"
        }, 
        {
            "location": "/user-guide/editing/#editoptions", 
            "text": "The editoptions property is an array which contains information about the editing column. It is important to note that in the editoptions array you may set any valid attribute for the chosen edittype. \nThe editoptions property is used in the colModel array and the syntax is:  script  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel :   [ \n       ... \n       { name : price ,   ...,   editoptions : { name1 : value1 ...},   editable : true   }, \n       ... \n    ]  ...  });  /script   i.e. in name:value pair. Below is the list of the most commonly used options:     Property  Type  Description      buildSelect  function  This option is relevant only if the dataUrl parameter is set. When the server response can not build the select element, you can use your own function to build the select. The function should return a string containing the select and options value(s) as described in dataUrl option. Parameter passed to this function is the server response    cacheUrlData  boolean  When set to true prevent multiple ajax calls when input select is build-ed using the dataUrl (see below). In this case the data is loaded only once. Default false.    custom_element  function  Used only if the edittype option is set to 'custom'. This function is used to create the element. The function should return the new DOM element. Parameters passed to this function are the value and the editoptions from colModel    custom_value  function  Used only if the edittype option is set to 'custom'. This function should return the value from the element after the editing in order to post it to the server. Parameter passed to this function is the element object and the operation type In inline and cell editing modules this parameters is always a string value - 'get'.  See below for the other type. In form editing this function has a different behavior. In this case we pass additional third parameter - the value. When a values of the custom element is posted to the server the second parameter has a value 'get'. In this case the function should return a value. If no values is returned in this case a error is raised. In case the data is read from the grid in order to set it in the form the operation parameter has a value 'set' and the grid value is passed as a third parameter. This way we can modify the grid value before it is displayed in the form. See the example above.    dataEvents  array  list of events to apply to the data element; uses  $(\"#id\").on(type, [data], fn)  to bind events to data element. Should be described like this: editoptions: { dataEvents: [{type: 'click', data: { i: 7 },    fn: function(e) { console.log(e.data.i);  }}, {type: 'keypress', fn: function(e) { console.log('keypress'); } }]}    dataInit  function  We pass the element object to this function, if defined. This function is called only once when the element is created. Example :    ...editoptions: { dataInit : function (elem) { $(elem).autocomplete();  } } . The event is called only once when the element is created. In the inline edit or the cell edit module it is called every time when you edit a new row or cell. In the form edit module every time if the same option is set to true since the form is recreated every time.    dataUrl  string  This option is valid only for elements of type select - i.e.,  edittype:select  and should be the URL to get the AJAX data for the select element. The data is obtained via an AJAX call and should be a valid HTML select element with the desired options  select option value='1' One /option ... /select ``. You can use option group. The AJAX request is called only once when the element is created. In the inline edit or the cell edit module or form edit module it is called every time when you edit a new row or cell or launch the form. To cache the data use cacheDataUrl option - see above.  br/  The ajax options when dataUrl is used can be overwritten using the grid parameter _ajaxSelectOptions_. When the ajax call is made to the server is posted a object (data parameter) which contain the editoptions plus the  { id: 'dynamic_id', name : 'name_from_colModel', rowId : 'id_of_the_row', oper : 'edit'}    defaultValue  mixed  The option can be string or function. This option is valid only in Form Editing module when used with editGridRow method in add mode. If defined the input element is set with this value if only element is empty. If used in selects the text should be provided and not the key. Also when a function is used the function should return value.    delimiter  string  Used when edittype : ' select' and the  value  option is a string. Delimit the different key:value pair in the string. The default option is \";\"    NullIfEmpty  boolean  If set to true a string 'null' is send to the server when the data in that field is empty    separator  string  Used when edittype : 'select' and the  value  option is a string. Separate the key and value of the key:value pair. Default value is \":\"    value  mixed  When set for edittype checkbox this value should be a string with two possible values separated with a colon (:) - Example editoptions:{value:\"Yes:No\"}, where the first value determines the checked property. When set for edittype select value can be a string, object or function. If the option is a string it must contain a set of value:label pairs with the value separated from the label with a colon (:) and ended with(;). The string should not ended with a (;)- editoptions:{value:\"1:One;2:Two\"}. If set as object it should be defined as pair name:value - editoptions:{value:{1:'One';2:'Two'}}. When defined as function - the function should return either formatted string or object. In all other cases this is the value of the input element if defined.    other options  mixed  In this case you can set any other valid attribute for the editable element. For example, if the element is edittype:'text', we can set size, maxlength, etc. attributes. Refer to the valid attributes for the element", 
            "title": "editoptions"
        }, 
        {
            "location": "/user-guide/editing/#editrules", 
            "text": "This option add additional properties to the editable element and should be used in colModel. Mostly it is used to validate the user input before submitting the value(s) to the server. Syntax:  script  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel :   [ \n       ... \n       { name : price ,   ...,   editrules : { edithidden : true ,   required : true ....},   editable : true   }, \n       ... \n    ]  ...  });  /script   All error messages are located into the language file of edit.msg property. Bellow is the English part of the messages:  $ . jgrid . regional [ en ]   =   { \n   ... \n     edit   :   { \n         addCaption :   Add Record , \n     ... \n         msg :   { \n             required : Field is required , \n             number : Please, enter valid number , \n             minValue : value must be greater than or equal to  , \n             maxValue : value must be less than or equal to , \n             email :   is not a valid e-mail , \n             integer :   Please, enter valid integer value , \n             date :   Please, enter valid date value , \n             url :   is not a valid URL. Prefix required ( http://  or  https:// ) , \n             nodefined   :    is not defined! , \n             novalue   :    return value is required! , \n             customarray   :   Custom function should return array! , \n             customfcheck   :   Custom function should be present in case of custom checking! \n\n         } \n     },  ...  }   These messages can not be overwritten dynamically.  Below is the list of available options:     Property  Type  Description      custom  boolean  if set to true allow definition of the custom checking rules via a custom function. See below    custom_func  function  this function should be used when a custom option is set to true. Parameters passed to this function are the value, which should be checked and the name - the property from colModel. The function should return array with the following parameters: first parameter - true or false. The value of true mean that the checking is successful false otherwise; the second parameter have sense only if the first value is false and represent the error message which will be displayed to the user. Typically this can look like this [false,\"Please enter valid value\"]    edithidden  boolean  This option is valid only in form editing/view module. By default the hidden fields are not editable or viewable (in  viewGridRow  method). If the field is hidden in the grid and edithidden is set to true, the field can be edited or viewed when add, edit or view methods are called.    date  boolean  if set to true a value from datefmt option is get (if not set ISO date is used) and the value will be checked and if this is not valid date, an error message will be displayed    email  boolean  if set to true, the value will be checked and if this is not valid e-mail, an error message will be displayed    integer  boolean  (true or false) if set to true, the value will be checked and if this is not a integer, an error message will be displayed.    maxValue  number(integer)  if set, the value will be checked and if the value is more than this, an error message will be displayed.    minValue  number(integer)  if set, the value will be checked and if the value is less than this, an error message will be displayed.    number  boolean  (true or false) if set to true, the value will be checked and if this is not a number, an error message will be displayed.    required  boolean  (true or false) if set to true, the value will be checked and if empty, an error message will be displayed.    time  boolean  if set to true, the value will be checked and if this is not valid time, an error message will be displayed. Currently we support only hh:mm format and optional am/pm at the end    url  boolean  if set to true, the value will be checked and if this is not valid url, an error message will be displayed     Below is example of using custom checking.  script  function   mypricecheck ( value ,   colname )   {  if   ( value     0   ||   value   20 ) \n    return   [ false , Please enter value between 0 and 20 ];  else \n    return   [ true , ];  }  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel :   [ \n       ... \n       { name : price ,   ...,   editrules : { custom : true ,   custom_func : mypricecheck ....},   editable : true   }, \n       ... \n    ]  ...  });  /script", 
            "title": "editrules"
        }, 
        {
            "location": "/user-guide/editing/#formoptions", 
            "text": "This option is valid only in  form editing . The purpose of these options is to reorder the elements in the form and to add some information before and after the editing element. Should be used in colModel array. Syntax:  script  jQuery ( #grid_id ). jqGrid ({  ... \n    colModel :   [ \n       ... \n       { \n         name : price ,   ..., \n         formoptions : { \n           elmprefix : (*) , \n           rowpos : 1 , \n           colpos : 2 ,... \n         }, \n         editable : true \n       }, \n       ... \n    ]  ...  });  /script    Warning  If you plan to use this object in collModel with rowpos and colpos properties it is recommended that all editing fields use these properties.   Below is a list of available options     Property  Type  Description      colpos  number  determines the column position of the element (again with the label) in the form beginning from 1    elmprefix  string  if set, a text or html content appears before the input element    elmsuffix  string  if set, a text or html content appears after the input element    label  string  if set, this replace the name from colNames array that appears as label in the form.    rowabove  boolean  if set to true enables adding a text above the input element - see  rowcontent    rowcontent  string  Text that appear above the input element. Valid only if  rowabove  option is a true    rowpos  number  determines the row position of the element (again with the text-label) in the form; the count begins from 1      Note  Two elements can have equal row position, but different column position. This will place the two elements in one row on the form.", 
            "title": "formoptions"
        }, 
        {
            "location": "/user-guide/editing/#cell-editing", 
            "text": "Cell editing provides the front-end user with functionality to change the contents of one single cell from a row and then the developer has the ability to handle the changed data by AJAX or in a jqGrid cell edit event (see below).  Cell Editing supports key navigation and editing individual cells, with the following behavior:   When we click on a cell that is not editable, the cell is selected and we can use the up, down, left and right keys to navigate through the cells.  If we move to a cell that is editable, we can press [Enter] to edit the cell. The cell is saved when we press [Enter] again, when we press [Tab], or when we click on another cell. If we press [ESC], the cell is not saved. When editing a cell, the cursor keys move only within the cell.  When we click on cell that is editable, then we go directly into edit mode.  The cell is not editable if it has a class 'not-editable-cell', instead that in colModel is set to be editable   Cell editing module uses text messages from language file. The messages are used only when a validation is in action using the  editrules  colModel options", 
            "title": "Cell editing"
        }, 
        {
            "location": "/user-guide/editing/#cell-properties", 
            "text": "These properties are specific for cell editing and should be set in grid options     Property  Type  Description  Default      ajaxCellOptions  object  This option allow to set global ajax settings for the cell editing when we save the data to the server. Note that with this option is possible to overwrite all current ajax setting in the save request including the complete event.  empty    cellEdit  boolean  Enables (disables) cell editing. When this option is set to true, onSelectRow event can not be used, and hovering is disabled (when mouseover on the rows).  false    cellsubmit  string  Determines where the contents of the cell are saved - can have two values: 'remote' or 'clientArray'. If  remote  the content of the cell if anything is changed is immediately saved to the server using the cellurl property, via ajax. The rowid and the cell content are added to the url by default. If you have the \"mtype\" setting set to post, the key value pears will be send as post variables. For example, if we save the cell named mycell,{id: rowid, mycell: cellvalue} is added to the url. If cellsubmit is 'clientArray', no ajax request is made and the content of the changed cell can be obtained via the method getChangedCells.  In this case the cell is saved to the local grid  data  parameter.  remote    cellurl  string  the url where the cell is to be saved. You need to set this only when you use cellsubmit as 'remote'.  null    restoreCellonFail  boolean  The default behavior (restoreCellonFail = true ) when a cell is not saved for certain reasons it is restored in its original values and the input element is deleted. Setting this option to false causes no restoring of the cell,  but remain as it was before try to save it.  true    savedRow  array  This array stores the original values before editing the cell or row and is used in case the user press Esc to restore the original values of the edited row or cell.  empty     Examples  When using the 'remote' setting you could add these lines to your grid configuration:  { \n     cellEdit   :   true , \n     cellsubmit   :   remote , \n     cellurl   :   /url/to/handling/the/changed/cell/value  }   When your are using 'clientArray' as cellsubmit setting, only these settings are important:  { \n     cellEdit   :   true , \n     cellsubmit   :   clientArray  }", 
            "title": "Cell properties"
        }, 
        {
            "location": "/user-guide/editing/#cell-events", 
            "text": "These events are related to cell editing and should be used in grid options.  The most of the following events use the parameters defined here:   rowid - string -is the id of the row  cellname - string - is the name of the cell (name from colModel)  value - sting - the value of the cell  iRow - integer  =0 - the index of the row (do not mix with rowid)  iCol - integer  =0 - the index of the column  event - the event passed as first parameter in triggered event   Below is the list of \"option\" and triggered events. The name of every triggered event begin with  jqGrid  and is set below the option event.   Note  The first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)    Note  the triggered event is bind to the grid and is not passed to to any options. See  Triggered events    Note  All events (except onCellSelect) are applied to a editable cell   afterEditCell(rowid, cellname, value, iRow, iCol)  jqGridAfterEditCell( event, rowid, cellname, value, iRow, iCol)  Applies only to a cell that is editable; this event fires after the edited cell is edited - i.e. after the element is inserted into the DOM   afterRestoreCell(rowid, value, iRow, iCol)  jqGridAfterRestoreCell( event rowid, value, iRow, iCol)  Fires after calling the method restoreCell or the user press ESC leaving the changes   afterSaveCell(rowid, cellname, value, iRow, iCol)  jqGridAfterSaveCell(event, rowid, cellname, value, iRow, iCol)  Fires after the cell has been successfully saved. This is the ideal place to change other content.   afterSubmitCell(serverresponse, rowid, cellname, value, iRow, iCol)  jqGridAfterSubmitCell(event, serverresponse, rowid, cellname, value, iRow, iCol)  The event fires after the cell and other data is posted to the server. Should return array of type  [ success ( boolean ), message ]   when return  [true,\"\"]  all is ok and the cellcontent is saved. If the return is like  [ false , Error message ]   then a dialog appears with the \"Error message\" and the cell content is not saved.  servereresponse  is the response from the server. To use this we should use serverresponse.responseText to obtain the text message from the server. This is true since we call this event in ajax complete event.   beforeEditCell(rowid, cellname, value, iRow, iCol)  jqGridBeforeEditCell(event (rowid, cellname, value, iRow, iCol)  This event fires before editing the cell.   beforeSaveCell(rowid, cellname, value, iRow, iCol)  jqGridBeforeSaveCell(event, rowid, cellname, value, iRow, iCol)  This event fires before validation of values if any. This event can return the new value which value can replace the edited one  beforeSaveCell   :   function ( rowid , celname , value , iRow , iCol )   { \n   if (   some_condition   )   { \n       return   new value ; \n   }  }   The cell value will be replaced with \"new value\" and posted to the server   beforeSubmitCell(rowid, cellname, value, iRow, iCol)  jqGridBeforeSubmitCell(event, rowid, cellname, value, iRow, iCol)  The event fires before submit the cell content to the server (valid only if cellsubmit : 'remote'). Can return new object that will be posted to the server.  beforeSubmitCell   :   function ( rowid , celname , value , iRow , iCol )   { \n   if (   some_condition   )   { \n     return   { name1 : value1 , name2 : value2 } \n   }   else { \n     return   {} \n   }  }   The returned array will be added to the cellurl posted data.   errorCell(serverresponse, status)  jqGridErrorCell(serverresponse, status)  Fires if there is a server error;  servereresponse  is the response from the server. To use this we should apply serverresponse.responseText to obtain the text message from the server.  status  is the status of the error. If not set a modal dialog appear. The event fire too if the  afterSubmitCell  event return  [false,\"Error message\"]   formatCell(rowid, cellname, value, iRow, iCol)  No triggred event  This event allows formatting the cell content before editing, and returns the formatted value   serializeCellData( postdata )  No triggred event  If set this event can serialize the data passed to the ajax request when we save a cell. The function should return the serialized data. This event can be used when a custom data should be passed to the server - e.g - JSON string, XML string and etc. To this event is passed the data which will be posted to the server. The event is passed in ajax data parameter.   onCellSelect(rowid, iCol, value, evnt)  jqGridCellSelect(event, rowid, iCol, value, evnt)  This event applies only to cells that are  not editable ; fires after the cell is selected and it is not editable. The event fire too when a cell is selected in non edit mode.   validationCell(cellobject, errormsg, iRow, iCol)  No triggred event  If defined this event can replace the error message dialog, that appear when a validation error occur. \nThe first parameter  cellobject  is a DOM cell object, the second parameter  errormsg  is the text that is returned when a  validation error occur  (see language file edit.msg object ). The third and four parameters is the index row (not row id) and the column number (starting from 0).   onSubmitCell(rowid, cellname, value, iRow, iCol)  jqGridOnSubmitCell(event, rowid, cellname, value, iRow, iCol) \nThe event fire after beforeSubmitCell and if it return false the data is not saved to the server or to the local data depending on cellSubmit  isCellEditable(cellname,iRow,iCol)  no triggred event \nDynamically set editing a cell. This event is executed (if defined) when a check for editable cell apply. If the event return false the cell will not be edited instead that it is set to editable in colModel, returning true enables editing  Event calling stack  Depending on your cellSubmit setting set to 'remote' or 'clientArray' the following events will be fired in the following order:  cellSubmit setting 'remote'   formatCell  beforeEditCell  afterEditCell  beforeSaveCell  beforeSubmitCell  onSubmitCell  afterSubmitCell  afterSaveCell  errorCell  validationCell  onCellSelect   cellSubmit setting 'clientArray'   formatCell  beforeEditCell  afterEditCell  beforeSaveCell  beforeSubmitCell  onSubmitCell  afterSaveCell  validationCell  onCellSelect", 
            "title": "Cell events"
        }, 
        {
            "location": "/user-guide/editing/#cell-methods", 
            "text": "All of the methods below should be applied to the jqGrid object.   editCell( integer iRow, integer iCol, [boolean edit])  Edit a cell with the row index iRow( do not mix with rowid) in index column iCol. If the edit is set to false the cell is just selected and not edited. If set to true the cell is selected and edited. This method is called automatically in the grid when cellEdit is set to true and the user try to select a cell.  parameters   integer iRow - the index of the row (do not mix with rowid) starting from 1  integer iCol - the index of the column starting from 0   return \njqGrid object   getChangedCells( [string method] )  Returns an array of objects of the changed(edited) cells depending on method . When 'all' this method returns all the edited cells (the cell can be edited, but not changed); when 'dirty' returns only the changed cells  parameters   string method - can be 'all' or 'dirty'. Default is 'all'   return \narray of objects with properties id(rowid) and the name (from colModel) of the edited(changed) cell. By example:  [ {id: 12 , mycol1:  data1 }, {id: 15 , mycol2:  data2 },...]   restoreCell( integer iRow, integer iCol )  Restores the edited content of cell with the row index iRow( do not mix with rowid) in index column iCol to its initial state before editing. This method is called automatically when the user press ESC key when editing the cell.  parameters   integer iRow - the index of the row (do not mix with rowid) starting from 1  integer iCol - the index of the column starting from 0   return \njqGrid object   saveCell( integer iRow, integer iCol )  Saves the cell with the row index iRow( do not mix with rowid) in index column iCol when it was in edit mode. This method is called automatically when the user press Enter key or Tab or Shit-Tab key on changed cell.  parameters   integer iRow - the index of the row (do not mix with rowid) starting from 1  integer iCol - the index of the column starting from 0   return \njqGrid object  nextCell( integer iRow, integer iCol )  Moves to the next editable cell right. The current cell is determined by iRow and iCol parameters. If there is no such one, the method try to save the exiting edited cell. The method is called when the user press Tab key.  parameters   integer iRow - the index of the row (do not mix with rowid) starting from 1  integer iCol - the index of the column starting from 0   return \njqGrid object   prevCell( integer iRow, integer iCol )  Moves to the next editable cell left. The current cell is determined by iRow and iCol parameters. If there is no such one, the method try to save the exiting edited cell. The method is called when the user press Shift-Tab key.  parameters   integer iRow - the index of the row (do not mix with rowid) starting from 1  integer iCol - the index of the column starting from 0   return \njqGrid object", 
            "title": "Cell methods"
        }, 
        {
            "location": "/user-guide/editing/#cell-posted-data", 
            "text": "When the cell is edited and the input elements is created we set the following rules:   The id of the editable cell element is constructed as 'iRow_'+ the name from the colModel array - where the iRow is the index of the row (not rowid) Example if we edit cell with index=20 and editable element has name 'myname' (from colModel) then the id becomes 20_myname.  The name of the editable element is constructed from the name of the colModel array - property - name   What is posted to the server?  When the data is posted to the server we construct object {} that contain:   the name:value pair where the name is the name of the input element (from colModel) represented in the cell  additionally we add a pair id:rowid where the rowid is the id of the row and oper:'edit'  if the returned data from beforeSubmitCell event is not empty we extend this data with the posted data.", 
            "title": "Cell posted data"
        }, 
        {
            "location": "/user-guide/editing/#inline-editing", 
            "text": "Inline editing is a quick way to update database information by making changes directly in the row of the grid, as seen in the image below:   To use Inline Editing, users select a row with the mouse (or click a button). In response, jqGrid converts each editable field to a data entry cell, as seen in the Name and Price fields above. Cells that aren't editable, such as the ID field above, don't change appearance and remain read-only. Whether an individual column is editable or read-only is controlled by setting the attribute in the ColModel.  When finished, users can hit the \"Enter\" key (or click a button) to send the data to the server.  Inline editing module uses text messages from language file. The messages are used only when a validation is in action using the  editrules  colModel options  These objects/events are related to inline editing and should be used in grid options and not as parameters of the methods described below. The objects/events/ below have effect only in  editRow  (when keys: true) and  saveRow  methods. See below.     Property  Type  Description  Default      ajaxRowOptions  object  This option allow to set global ajax settings for the row editing when we save the data to the server. Note that with this option is possible to overwrite all current ajax setting in the save request including the complete event.  empty    serializeRowData  function  If set this event can serialize the data passed to the ajax request when we save a row. The function should return the serialized data. This event can be used when a custom data should be passed to the server - e.g - JSON string, XML string and etc. To this event is passed the data which will be posted to the server  null    inlineData  object  If defined this object extends (overwrite) the values of the object posted to the server via saveRow method  empty    savedRow  array  This array stores the original values before editing the cell or row and is used in case the user press Esc (or button Cancel) to restore the original values of the edited row or cell.  empty     Example :  jQuery ( #grid_id ). jqGrid ({  ... \n   ajaxRowOptions   :   { \n     error   :   function ( response ,   status ,   error )   { \n       /// code when error in inline edit only \n     } \n   }  ...  });", 
            "title": "Inline editing"
        }, 
        {
            "location": "/user-guide/editing/#inline-methods", 
            "text": "The inline methods can be called only on an already-constructed grid, from a button click or from an event of the grid itself:  Example:  var   id ,   lastSel ;  jQuery ( #grid_id ). jqGrid ({  ... \n    onSelectRow :   function ( id ){ \n      if ( id     id !== lastSel ){ \n         jQuery ( #grid_id ). jqGrid ( restoreRow , lastSel ); \n         lastSel = id ; \n      } \n      jQuery ( #grid_id ). jqGrid ( editRow ,   id ,   { keys :    true }   ); \n    },  ...  });   In this example, if another was row being edited and has not yet been saved, the original data will be restored and the row \"closed\" before \"opening\" the currently-selected row for editing (where lastSel was previously defined as a var). \nIf you want to save instead to restore the editing you can call saveRow in place of restoreRow.  editRow( string rowid, [object options])  When this method is called on particular row with id=rowid, jqGrid reads the data for the editable fields and constructs the appropriate elements defined in edittype and editoptions. Edited are all the fields that are marked as editable:true in colModel. If the id can not be found the method does nothing.  In case the id  is found the row can not be edited in the following cases:   if it is already edited. The current edited row has a attribute  editable  = 1. If the attribute is 0 it can be edited  if the row has a class  not-editable-row    Note  When the keys option (see below) is true this method call the  saveRow and restoreRow methods (see below). Most of parameters in this method are passed to these methods.   When saved, the option  url  or grid option  editurl  is used to post the data to the server.  The events (function) options have a triggered event equivalent which is set near to the options event.   Note  The first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)    Note  the triggered event is bind to the grid and is not passed to any options. See  Triggered events   The options have the following default properties:  options   = { \n   keys   :   false , \n   keyevent   :   keydown , \n   oneditfunc :   null , \n   successfunc :   null , \n   url :   null , \n   extraparam :   {}, \n   aftersavefunc :   null , \n   errorfunc :   null , \n   afterrestorefunc :   null , \n   restoreAfterError :   true , \n   mtype :   POST , \n   focusField   :   true , \n   saveui   :   enable , \n   savetext   :   $ . jgrid . getRegional ( $t , defaults.savetext ), \n   beforeEditRow   :   null , \n   onEnter   :   null , \n   onEscape   :   null  }   The options object can be overwritten by object  $.jgrid.inlineEdit  , which can be set before calling the method and used for all other calls. This object should contain the same properties as described above in order to have effect. See  Common functions  The options means:   keys  - boolean when set to true a [Enter] key is used to save the row (method saveRow is called) and [Esc] to cancel editing (method restoreRow is called).  keyevent  - string - the event is used only if keys option is true and defines the jquery binding method. Default is  keydown . In some situations  keyup  can be used in case 'keydown' already is applied.  oneditfunc(rowid)  or  jqGridInlineEditRow(ev, rowid)  - function - fires after successfully accessing the row for editing, prior to allowing user access to the input fields. The row's id is passed as a parameter to this function.  successfunc(response)  or  jqGridInlineSuccessSaveRow(ev, response)  - function -if defined, this function is called immediately after the request is successful. This function is passed the data returned from the server. Depending on the data from server; this function should return true or false. In case of false the data is not saved to the grid and the row is restored in case when restoreAfterError is set to true.  url  - string - if defined, this parameter replaces the editurl parameter from the grid options array. If set to 'clientArray', the data is not posted to the server but rather is saved only to the grid (presumably for later manual saving).  extraparam  - object - an object of type name: value. When set these values are posted along with the other values to the server.  aftersavefunc(rowid, response)   or  jqGridInlineAfterSaveRow(ev, rowid, response)  - function -if defined, this function is called after the data is saved to the server. Parameters passed to this function are the rowid and the response from the server request. Also the event is called too when the url is set to 'clientArray'.  errorfunc(rowid, response, satus)  or  jqGridInlineErrorSaveRow(ev, rowid, response, satus)  - function -if defined, this function is called after the data is saved to the server. Parameters passed to this function are the rowid, the response from the server request and status of the request.  afterrestorefunc(rowid)  or  jqGridInlineAfterRestoreRow(ev, rowid)  - function - if defined, this function is called in restoreRow (in case the row is not saved with success) method after restoring the row. To this function we pass the rowid  restoreAfterError  - boolean. Default true which call the restoreRow method with afterrestorefunc if defined. If set to false the row stay in edit mode when a error occur.  mtype  - string - \"POST\" or \"GET\" - method type of posting the request . Default \"POST\"  focusField  - mixed boolean or number. If true the cursor is positioned at the first editable field. If set to false no cursor position. If the the option is a number it is positioned to the editable field which correspond to this number starting from 0  saveui  - string - When the url is not clientArray it is possible to show a message during a saving the data. This will show a box centered into the grid. Actually the method progressBar is called in this case. See  jqGrid methods . The default value is 'enable'. Possible values are: 'disable', 'enable', 'block'  savetext  - string - text to show when saving is in progress determined by  saveui  options - see above. Default value is taken from a language file from defaults.savetext property. The english file is like this: If  keys  option is true, then the remaining settings \u2013  successfunc, url, extraparam, aftersavefunc, errorfunc and afterrestorefunc  - are passed as parameters to the saveRow method when the [Enter] key is pressed (saveRow does not need to be defined as jqGrid calls it automatically). For more information see  saveRow  method below. \nWhen a [Esc] key is pressed we call the method restoreRow nad pass the  afterrestorefunc . For more information see  restoreRow  method below.  beforeEditRow(options, rowid)  - function - if this function is defined it executes before editing the row. If the function return false the row will be not edited. Parameters passed to this event are the options object and the rowid.  beforeSaveRow(options, rowid)  - function - if this function is defined it executes before saving the row in saveRow method. If the function return false the row will be not be saved. Parameters passed to this event are the options object and the rowid.  beforeCancelRow(options, rowid)  - function - if this function is defined it executes before restoring the row to its original state in  restoreRow  method. If the function return false the row will be not be restored. Parameters passed to this event are the options object and the rowid.  validationCell(elem, error, iRow, iCol)  If defined this event can replace the error message dialog, that appear when a validation error occur.The first parameter  cellobject  is a DOM cell object, the second parameter  errormsg  is the text that is returned when a  validation error occur  (see language file edit.msg object ). The third and four parameters are the index row (not row id) and the column number (starting from 0).  onEnter( rowid, options, event)  if defined this event is executed when a Enter key is pressed while editing the input element. The event is not executed when we edit a TEXTAREA field. When this event is executed saving the row is not performed. It is ideal to define some pop-up and call after the selection the desired task. First parameter is the row id, the second parameter is the options passed to the editRow and the third parameter is the event  onEscape( rowid, options, event)  if defined this event is executed when a Escape key is pressed while editing the input element. When the event is executed the row is not restored. It is ideal to define some pop-up and call after the selection the desired task. First parameter is the row id, the second parameter is the options passed to the editRow and the third parameter is the event    saveRow( string rowid, [object options])  Saves a row edited with editRow method  Calling convention  jQuery ( #grid_id ). jqGrid ( saveRow , rowid ,    options );   The events (function) options parameters have a triggered event equivalent which is set near to the options event.   Note  The first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)    Note  the triggered event is bind to the grid and is not passed to any options. See  Triggered events   parameters   string rowid - is the id of the already edited row  object options have the following default properties:   options   =   { \n   successfunc :   null , \n   url :   null , \n   extraparam :   {}, \n   aftersavefunc :   null , \n   errorfunc :   null , \n   afterrestorefunc :   null , \n   restoreAfterError :   true , \n   mtype :   POST , \n   saveui   :   enable , \n   validationCell :   null , \n   beforeSaveRow   :   null , \n   beforeCancelRow :   null , \n   savetext   :   $ . jgrid . getRegional ( $t , defaults.savetext )  }    successfunc  or  jqGridInlineSuccessSaveRow  - function -if defined, this function is called immediately after the request is successful. This function is passed the data returned from the server. Depending on the data from server; this function should return true or false. In case of false the data is not saved to the grid and the row is restored in case when restoreAfterError is set to true.  url  - string - if defined, this parameter replaces the editurl parameter from the grid options array. If set to 'clientArray', the data is not posted to the server but rather is saved only to the grid (presumably for later manual saving).  extraparam  - object - an object of type name: value. When set these values are posted along with the other values to the server.  aftersavefunc   or  jqGridInlineAfterSaveRow  - function -if defined, this function is called after the data is saved to the server. Parameters passed to this function are the rowid and the response from the server request. Also the event is called too when the url is set to 'clientArray'.  errorfunc  or  jqGridInlineErrorSaveRow  - function -if defined, this function is called after the data is saved to the server. Parameters passed to this function are the rowid, the response from the server request and status of the request.  afterrestorefunc  or  jqGridInlineAfterRestoreRow  - function - if defined, this function is called in restoreRow (in case the row is not saved with success) method after restoring the row. To this function we pass the rowid  restoreAfterError  - boolean. Default true which call the restoreRow method with afterrestorefunc if defined. If set to false the row stay in edit mode when a error occur.  mtype  - string - \"POST\" or \"GET\" - method type of posting the request . Default \"POST\"  saveui  - string - When the url is not client arry it is possible to show a message during a saving the data. This will show a box cetered into the grid. Actually the method progressBar is called in this case. See  jqGrid methods . The default value is 'enable'. Possible values are: 'disable', 'enable', 'block'  validationCell(elem, error, iRow, iCol)  If defined this event can replace the error message dialog, that appear when a validation error occur.The first parameter  cellobject  is a DOM cell object, the second parameter  errormsg  is the text that is returned when a  validation error occur  (see language file edit.msg object ). The third and four parameters are the index row (not row id) and the column number (starting from 0).  beforeSaveRow(options, rowid)  - function - if this function is defined it executes before saving the row. If the function return false the row will be not be saved. Parameters passed to this event are the options object and the rowid.  beforeCancelRow(options, rowid)  - function - if this function is defined it executes before restoring the row to its original state in  restoreRow  method. If the function return false the row will be not be restored. Parameters passed to this event are the options object and the rowid.  savetext  - string - text to show when saving is in progress determined by  saveui  options - see above. Default value is taken from a language file from defaults.savetext property. The English file is like this:   ...  $ . jgrid . regional [ en ]   =   { \n     defaults   :   { \n     ... \n         savetext :   Saving... , \n     ... \n   } \n   ...  }   The options object can be overwritten by object  $.jgrid.inlineEdit  , which can be set before calling the method and used for all other calls. This object should contain the same properties as described above in order to have effect. See  Common functions  Saved is only a row wihch have attribute editable = '1'. After the row is saved the row attribute  ediatable  become a value  '0' (if nothing else is specified)   restoreRow( string rowid, [object options])  This method restores the data to original values before the editing of the row.  Calling convention:  jQuery ( #grid_id ). jqGrid ( restoreRow , rowid ,    options );   The events (function) options parameters have a triggered event equivalent which is set near to the options event.   Note  The first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)    Note  the triggered event is bind to the grid and is not passed to any options. See  Triggered events   parameters   string rowid - is the id of the already edited row  object options have the following default properties:   options   =   { \n   afterrestorefunc   :   null , \n   beforeCancelRow :   null  }    afterrestorefunc  or  jqGridInlineAfterRestoreRow  - function - if set it is called after restoring the row. To this function we pass the rowid  beforeCancelRow(options, rowid)  - function - if this function is defined it executes before restoring the row to its original state. If the function return false the row will be not be restored. Parameters passed to this event are the options object and the rowid.    addRow([object options])  This method add a row for inline edit.  Calling convention:  jQuery ( #grid_id ). jqGrid ( addRow ,   options );   parameters   object options have the following default properties:   { \n     rowID   :   new_row , \n     initdata   :   {}, \n     position   : first , \n     useDefValues   :   false , \n     useFormatter   :   false , \n     addRowParams   :   { extraparam : {}}, \n     beforeAddRow   :   null  }    rowID - (mixed) the value of the id of the new added row. Can be a function. If defined as function a parameters object is passed as parameter.  initdata - (object) the object of the pair name:value where the name correspond to the name in colMode. When set this is the initial value of the the cell.  position - (string) determines the position of the new added row in the grid. Default is first. Can have a value last to be added at the last position  useDefValues - (boolean) if set to true uses the defaultValue property in editoptions of the colModel  useFormatter : (boolean) if set to true synchronises the parameters from the formatter actions  addRowParams : (object) parameters which are passed to the addRow - they are the same as of  editRow  - see above  beforeAddRow(options) - function - if this function is defined it executes before adding a new row. If the function return false the row will be not be added. Parameters passed to this event is the options object.   Actually this method uses two already constructed methods. When calling the method first executes the addRowData method which add a local row. After this the method call editRow method to edit the row. If the keys parameter is set to true and the user press ESC key the row is automatically deleted.   inlineNav  For more information of inline navigator see  Inline edit navigator   showAddEditButtons()  Enables the add and edit buttons in inline navigator  parameters  none  return \njqGrid object   showSaveCancelButtons() \nEnables the Save Cancel buttons in inline navigator  parameters  none  return \njqGrid object", 
            "title": "Inline Methods"
        }, 
        {
            "location": "/user-guide/editing/#inline-posted-data", 
            "text": "How is the data organized!  When the row is edited and the input elements are created we set the following rules:   the table row becomes attribute editable=\"1\"  the array savedRow (option in the grid) is filled with the original values before the editing. This is a name:value pair array with additional pair id:rowid  Hidden fields are not included in editing  The id of the editable element is constructed as 'rowid_'+ the name from the colModel array. Example if we edit row with id=10 and the only editable element is 'myname' (from colModel) then the id becomes 10_myname.  The name of the editable element is constructed from the name of the colModel array - property - name  after the row is saved or restored the editable attribute is set to \"0\" and the savedRow item with id=rowid is deleted   What is posted to the server?  When the data is posted to the server we construct an object {} that contain(s):   the name:value pair where the name is the name of the input element represented in the row (this is for all input elements)  additionally we add a pair id:rowid where the rowid is the id of the row  if the  extraparam  parameter is not empty we extend this data with the posted data  if the grid parameter  inlineData  is not empty we extend this data with the posted data.", 
            "title": "Inline posted data"
        }, 
        {
            "location": "/user-guide/editing/#form-editing", 
            "text": "jqGrid supports creating a form \"on the fly\" to view, add, edit, delete grid data. A screenshot of an \"Add Record\" form is shown below:   As of version 5.3 we fully support  HTML5 forms", 
            "title": "Form editing"
        }, 
        {
            "location": "/user-guide/editing/#methods", 
            "text": "The methods listed in the table below are included in the navGrid  navigator method . \nAll the methods bellow are applied to already constructed grid.", 
            "title": "Methods"
        }, 
        {
            "location": "/user-guide/editing/#edit-grid-row", 
            "text": "This operation is performed with the method  editGridRow  This method creates a form via modal dialog for editing a particular row from the grid. \nThis method uses  Common Editing Properties  from colModel and editurl option from jqGrid. \nThis method uses  Form options  from colModel properties.  When called the constructed form can look like this:   Calling convention:  jQuery ( #grid_id ). jqGrid ( editGridRow ,   string   rowid ,   [ object   options ]   );   parameters   string rowid: the id of the row to edit  object options: an object of name: value pairs, including any of the following properties or events.   The method uses the following options from language file (Example - English):  $ . jgrid . regional [ en ]   =   { \n   ... \n     edit   :   { \n     // formedit options \n         addCaption :   Add Record , \n         editCaption :   Edit Record , \n         bSubmit :   Submit , \n         bCancel :   Cancel , \n         bClose :   Close , \n         saveData :   Data has been changed! Save changes? , \n         bYes   :   Yes , \n         bNo   :   No , \n         bExit   :   Cancel , \n     // Validation options \n         msg :   { \n             required : Field is required , \n             number : Please, enter valid number , \n             minValue : value must be greater than or equal to  , \n             maxValue : value must be less than or equal to , \n             email :   is not a valid e-mail , \n             integer :   Please, enter valid integer value , \n             date :   Please, enter valid date value , \n             url :   is not a valid URL. Prefix required ( http://  or  https:// ) , \n             nodefined   :    is not defined! , \n             novalue   :    return value is required! , \n             customarray   :   Custom function should return array! , \n             customfcheck   :   Custom function should be present in case of custom checking! \n\n         } \n     }, \n   ...  }   These options (except edit.msg) can be overwritten when passed as options to the method. When passed to the method we should use by example bSubmit : \"Submit\" and not $.jgrid.regional[\"en\"].edit.bSubmit : \"Submit\"  Options     Property  Type  Description  Default      addedrow  string  Controls where the row just added is placed: 'first' at the top of the gird, 'last' at the bottom. In case there is a need to place the new added row in its natural sort order, set reloadAfterSubmit: true  first    ajaxEditOptions  object  This option allow to set global ajax settings for the form editiing when we save the data to the server. Note that with this option is possible to overwrite all current ajax setting in the save request including the complete event.  empty    bottominfo  string  When set this information is placed just after the buttons of the form as additional row  empty    buttons  array  Defines a custom buttons in the edit form. Every element into the array is a object (button) with the following properties:   icon  - defines a icon according to the CSS framework used.    side  - left or right - the position of the icon    text  - Text to appear in the button   position  - the position of the button - last or first    click  - function that is executed when the button is click. To the click function is passed the search form, search parameters and click event    id  - id to identify the button. If not set the jqGrid assing it internally using the jqGrid randId function.  empty array    checkOnSubmit  boolean  This option work only in editing mode. If Set to true this option will work only when a submit button is clicked and if any data is changed in the form. If the data is changed a dialog message appear where the user is asked to confirm the changes or cancel it. Pressing cancel button of the new dialog will return to the form, but does not set the values to its original state.  false    checkOnUpdate  boolean  This option is applicable in add and edit mode. When this option is set to true the behavior as follow: when something is changed in the form and the user click on Cancel button, navigator buttons, close button (on upper right corner of the form), in overlay (if available) or press Esc key (if set) a message box appear asking the user to save the changes, not to save the changes or go back in the grid cancel all changes (this will close the modal form)  false    clearAfterAdd  boolean  When add mode, clear the data after adding data  true    closeAfterAdd  boolean  When add mode, close the dialog after add record  false    closeAfterEdit  boolean  When in edit mode, close the dialog after editing  false    closeicon  array  Determines the icon of the cancel button. The default values are [true,\"left\",\"ui-icon-close\"]. For description of these see saveicon below     closeOnEscape  boolean  When set to true the modal window can be closed with ESC key from the user.  false    dataheight  integer  The parameter control the scrolling content - i.e between the modal header and modal footer.  auto    drag  boolean  Determines if the dialog is dragabale. Works only if jqDnR plugin is present or if the drag-able widget is present from jQuery UI  true    editData  object  Object used to add additional content to the data posted to the server  empty    editselected  boolean  This options have effect only if the grid option multiselect is true. If multiselect is true and this option is true editing is enabled only to the selected grid rows. In this case the form navigation keys when pressed move only to the selected row(s).  false    focusField  mixed  Boolean or number. If true the cursor is positioned at the first editable field. If set to false no cursor position. If the the option is a number it is positioned to the editable field which correspond tothis number starting from 0  true    height  mixed  The entry height of form dialog  auto    html5Check  boolean  Enables html5 checking in the grid  false    jqModal  boolean  If set to true uses jqModal plugin (if present) to create the dialog s. If set to true and the plugin is not present jqGrid uses its internal function to create dialog  true    left  integer  The initial left position of modal dialog. The default value of 0 mean the left position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the left position from upper left corner of the window.  0    mtype  string  Defines the type of request to make (\"POST\" or \"GET\") when data is sent to the server  POST    modal  boolean  Determines if the dialog will be modal. Also works only if jqModal plugin is present  false    navkeys  array  This option works only in edit mode and  add keyboard navigation, which allow us to navigate through the records while in form editing pressing certain keys. The default state is disabled. The first item enables/disables the navigation. The second item corresponds to record up and by default is the  the key code for Up key. The third item corresponds to record down and by default is the  key code for Down key  [false,38,40]    recreateForm  boolean  When set to true the form is recreated every time the dialog is activated with the new options from colModel (if they are changed)  false    reloadAfterSubmit  boolean  Reload grid data after posting  true    resize  boolean  Determines if the dialog can be re-sized. Works only is jqDnR plugin is available or re-sizable widget is present from jQuery UI  true    saveicon  array  Determines the icon of the submit button. The default value is [true,\"left\",\"ui-icon-disk\"]. The first item enables/disables the icon. The second item tells where to put the icon to left or to right of the text. The third item corresponds to valid ui icon from the css framework used     savekey  array  Determines the possibility to save the form with pressing a certain key.The first element enables/disables saving with pressing certain key. The second item corresponds to key code for saving. If enabled the default value for saving is [Enter]. Note that this binding should be used for both adding and editing a row. Since the binding is for the form, there is no possibility to have one key in add and another in edit mode.  [false,13]    template  string  When defined the default edit form is replaced with this parameter. See  Using  templates .  null    top  integer  The initial top position of modal dialog. The default value of 0 mean the top position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the top position from upper left corner of the window.  0    topinfo  string  When set this information is placed just after the modal header as additional row  empty    viewPagerButtons  boolean  This option enable or disable the appearing of the previous and next buttons (pager buttons) in the form  true    width  integer  The width of form dialog in pixels. Can have auto property.  300    url  string  The url where to post data. If set, replaces the editurl. If set to clientArray the data is saved only to the grid and not to the server.  null    zIndex  integer  The starting z-index for the dialog. If you will see the dialog form under another elements or dialog s you should use the parameter with some value higher as default value 950. In the most cases it should be the value higher as 1000 - the default value of jQuery UI dialog.  950     Events  The events (function) options parameters have a triggered event equivalent which is set below to the options event. \nEvery triggered event in editGridRow method begin with  jqGridAddEdit  and should be called outside the method, while the options events are passed as parameters to the method.   Note  The first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)    Note  the triggered event is bind to the grid and is not passed to any options. See  Triggered events    afterclickPgButtons(string whichbutton, DOM element form, string rowid)  jqGridAddEditAfterClickPgButtons(event, whichbutton, formid, rowid)  This event can be used only when we are in edit mode and the navigator buttons are enabled; it fires after the data for the new row is loaded from the grid when the pager button is clicked, allowing modification of the data or form before the form is re-displayed.  parameters   string whichbutton is either 'prev' or 'next'  DOM element form is the jQuery object of form, you can use formid[0].id to get form id.  string rowid is the id of the newly loaded row   return \nnone   afterComplete(ajax response, object postdata, DOM form, string oper)  jqGridAddEditAfterComplete(event , ajax response, object postdata, DOM form, string oper)  This event fires immediately after all actions and events are completed and the row is inserted or updated in the grid.  parameters   ajax response is the data returned from the server (if any)  object postdata is the data sent to the server  DOM form is the jQuery object of the form, you can use formid[0].id to get form id.  string oper - determine in which mode is called -  add  when add row and  edit  when it is edited   return \nnone   afterShowForm( DOM form, string oper)  jqGridAddEditAfterShowForm(event,  DOM form, string oper)  Fires after showing the form;  parameters   DOM form is the jQuery object of the form, you can use formid[0].id to get form id.  string oper - determine in which mode is called -  add  when add row and  edit  when it is edited   return \nnone   afterSubmit(ajax response, object postdata, string oper)  jqGridAddEditAfterSubmit(event, ajax response, object postdata, string oper)  Fires after response has been received from server. Typically used to display status from server (e.g., the data is successfully saved or the save canceled for server-side editing reasons)  When used this event should return array with the following items  [success, message, new_id]  where   success is a boolean value if true the process continues, if false a error message appear and all other processing is stopped. (message is ignored if success is true).  message - the message that appear when first parameter is false  new_id - if present is used as new row id in the grid when we are in add mode. Typically this is obtained from server response   parameters   ajax response is the data returned from the server (if any)  object postdata is the data sent to the server  string oper - determine in which mode is called -  add  when add row and  edit  when it is edited   return \narray -  see description above   beforeCheckValues( object postdata, DOM form, string oper)  jqGridAddEditBeforeCheckValues(event,  object postdata, DOM form, string oper)  This event fires before checking the values (if checking is defined in colModel via editrules option).  In all cases the event should return object in name value pair which then will be posted to the server.  parameters   object postdata is the data sent to the server  DOM form is the jQuery object of the form, you can use formid[0].id to get form id.  string oper - determine in which mode is called -  add  when add row and  edit  when it is edited   return \nobject   beforeInitData(DOM form, string oper)  jqGridAddEditBeforeInitData(event, DOM form, string oper)  Fires before initialize the new form data.  The Event can return true or false. If the event return false then the action is not done and the form is not shown. Any other return is treated as true.  parameters   DOM form is the jQuery object of the form, you can use formid[0].id to get form id.  string oper - determine in which mode is called -  add  when add row and  edit  when it is edited   return \nboolean   beforeShowForm(DOM form, string oper)  jqGridAddEditBeforeShowForm(event, DOM form, string oper)  Fires before showing the form with the new data;  parameters   DOM form is the jQuery object of the form, you can use formid[0].id to get form id.  string oper - determine in which mode is called -  add  when add row and  edit  when it is edited   return \nnone   beforeSubmit( object postdata, DOM form, string oper)  jqGridAddEditBeforeSubmit(event, object postdata, DOM form, string oper)  Fires before the data is submitted to the server. \nWhen defined this event should return array with the following values  [boolean success, string error]   success boolean indicating if the process should continue (true) or a error (false)  error is the error message which appear to the user   parameters   object postdata is the data sent to the server  DOM form is the jQuery object of the form, you can use formid[0].id to get form id.  string oper - determine in which mode is called -  add  when add row and  edit  when it is edited   return \narray - see above   onclickPgButtons(string whichbutton, DOM form, string rowid)  jqGridAddEditClickPgButtons(event, string whichbutton, DOM form, string rowid)  This event can be used only when we are in edit mode; it fires immediately after the previous or next button on form pager is clicked, before leaving the current row, allowing working with (e.g., saving) the currently loaded values in the form  parameters   string which button - can be either 'prev' or 'next'  DOM form is the jQuery object of the form, you can use formid[0].id to get form id.  string rowid is the id of the current row.   return \nnone   onclickSubmit( object options, object postdata, string oper)  jqGridAddEditClickSubmit(event, object options, object postdata, string oper)  Fires after the submit button is clicked and the postdata is constructed. \nThe event should return object in name:value pair which then will be added to the posted data to the server  parameters   object options - parameters passed to the method  object postdata is the data sent to the server  string oper - determine in which mode is called -  add  when add row and  edit  when it is edited   return \nobject   onInitializeForm(DOM form, string oper)  jqGridAddEditInitializeForm(event, DOM form, string oper)  This event stay for historical purpose. It is equivalent to the beforeShowForm event.   onClose() \nNo trigered event  This event is called just before closing the form and when a close icon is clicked, a cancel button is clicked, ESC key is pressed or click on overlay (if jqModal is present). The event can return (optionally) true or false. If the return value is true the form is closed, if false the form does not close. If nothing is returned the form is closed  parameters \nnone  return \n[boolean]   errorTextFormat( ajax response, string oper)  jqGridAddEditErrorTextFormat(event, ajax response, string oper)  The event (can) fire when error occurs from the ajax call (status  = 300   status !== 304) and can be used for better formatting of the error messages. To this event is passed response from the server. The event should return single message (not array), which then is displayed to the user.  parameters   ajax response - the response from the server  string oper - determine in which mode is called -  add  when add row and  edit  when it is edited   return \nstring   serializeEditData( object postdata ) \nNo trigered event  If set this event can serialize the data passed to the ajax request when we save a form data. Actually the event is called in the ajax data parameter. The function should return the serialized data. This event can be used when a custom data should be passed to the server - e.g - JSON string, XML string and etc. To this event is passed the data which will be posted to the server  parameters   object postdata - data posted to the server   return \nobject   What is need to know?  When the form is constructed we set the following rules:   Hidden fields are included in the form with the display:none property of the table row  The id of the editable element is constructed from the name of the colModel array - the property name  The name of the editable element is constructed from the name of the colModel array - the property name  For ease in manipulating the elements in an edit form, every table row in the form that holds the data for the edit has a id which is a combination of \"tr_\" + name (from colmodel). Example:   form   .... \n   table \n     tr   id = tr_myfield   \n       td  Caption / td   td edited element named, in colModel, as  myfield / td \n     / tr  ...\n   / table  / form    Every time the form is lunched it is recreated. The recreateForm parameter is set to true just remember the position of the form   This allow us to easily show or hide some table rows depending on conditions using beforeShowForm event  What is posted to the server  When we are in editing mode the data that is posted to the server is object {} that contain:   the name:value pair where the name is the name of the input element represented in the form (this is for all input elements)  additionally we add a pair id:rowid where the rowid is the id of the edited row  additionally we add a pair oper:edit to indicate the edit mode  if the editData object is not empty we extend this data with the posted data  if the returned object from onclickSubmit event is not empty we extend the posted data with this object", 
            "title": "Edit grid row"
        }, 
        {
            "location": "/user-guide/editing/#add-grid-row", 
            "text": "The  editGridRow  method is also used to add data to the server and grid, by passing \"new\" as the rowid.  This method creates a form via modal dialog for adding a particular row to the grid. \nThis method uses  Common Editing Properties  from colModel and editurl option from jqGrid. \nThis method uses  Form options  from colModel properties.  Calling convention:  jQuery ( #grid_id ). jqGrid ( editGridRow ,   new ,   [ object   options ]   );   parameters   \"new\" indicates that the method should go in add mode  object options: an object of name: value pairs, including any of the following properties or events.   The method uses the following options from language file (Example - English):  $ . jgrid . regional [ en ]   =   { \n   ... \n     edit   :   { \n     // formedit options \n         addCaption :   Add Record , \n         editCaption :   Edit Record , \n         bSubmit :   Submit , \n         bCancel :   Cancel , \n         bClose :   Close , \n         saveData :   Data has been changed! Save changes? , \n         bYes   :   Yes , \n         bNo   :   No , \n         bExit   :   Cancel , \n     // Validation options \n         msg :   { \n             required : Field is required , \n             number : Please, enter valid number , \n             minValue : value must be greater than or equal to  , \n             maxValue : value must be less than or equal to , \n             email :   is not a valid e-mail , \n             integer :   Please, enter valid integer value , \n             date :   Please, enter valid date value , \n             url :   is not a valid URL. Prefix required ( http://  or  https:// ) , \n             nodefined   :    is not defined! , \n             novalue   :    return value is required! , \n             customarray   :   Custom function should return array! , \n             customfcheck   :   Custom function should be present in case of custom checking! \n\n         } \n     }, \n   ...  }   These options (except edit.msg) can be overwritten when passed as options to the method. When passed to the method we should use by example bSubmit : \"Submit\" and not $.jgrid.regional[\"en\"].edit.bSubmit : \"Submit\"  All the events and options are the same as those from  edit grid row  What is need to know?  When the form is constructed we set the following rules:   Hidden fields are included in the form with the display:none property of the table row  The id of the editable element is constructed from the name of the colModel array - the property name  The name of the editable element is constructed from the name of the colModel array - the property  name  For ease in manipulating the elements in an edit form, every table row in the form that holds the data for the edit has a id which is a combination of \"tr_\" + name (from colmodel). Example:   form   .... \n   table \n     tr   id = tr_myfield   \n       td  Caption / td   td edited element named, in colModel, as  myfield / td \n     / tr  ...\n   / table  / form   This allow us to easily show or hide some table rows depending on conditions using beforeShowForm event  What is posted to the server?  When we are in editing mode the data that is posted to the server is object {} that contain:   the name:value pair where the name is the name of the input element represented in the form (this is for all input elements)  additionally we add a pair id:_empty where the _empty indicates that new row is inserted  additionally we add a pair oper:add to indicate the add mode  if the editData object is not empty we extend this data with the posted data  if the returned object from onclickSubmit event is not empty we extend the posted data with this object", 
            "title": "Add grid row"
        }, 
        {
            "location": "/user-guide/editing/#view-grid-row", 
            "text": "The method  viewGridRow  method is similar to the editGridRow method except that the fields are not editable and we do not have any events attached to the form.  Calling convention:  jQuery ( #grid_id ). jqGrid ( viewGridRow ,   string   rowid ,   [ object   options ]   );   Where   grid_id: the id of the parent grid  string rowid: the id of the row to edit  object options: an object of name: value pairs, including any of the following properties or events.   The method uses the following properties from language file (English file):  $ . jgrid . regional [ en ]   =   { \n   ... \n     view   :   { \n         caption :   View Record , \n         bClose :   Close \n     },  ...  }   Options     Property  Type  Description  Default      bottominfo  string  When set this information is placed just after the buttons of the form as additional row  empty    buttons  array  Defines a custom buttons in the view form. Every element into the array is a object (button) with the following properties:   icon  - defines a icon according to the CSS framework used.    side  - left or right - the position of the icon    text  - Text to appear in the button   position  - the position of the button - last or first    click  - function that is executed when the button is click. To the click function is passed the search form, search parameters and click event    id  - id to identify the button. If not set the jqGrid assing it internally using the jqGrid randId function.  empty array    closeicon  array  Determines the icon of the cancel button. The default values are [true,\"left\",\"ui-icon-close\"]. For description of these see saveicon below     closeOnEscape  boolean  When set to true the modal window can be closed with ESC key from the user.  false    dataheight  integer  The parameter control the scrolling content - i.e between the modal header and modal footer.  auto    drag  boolean  Determines if the dialog is dragabale. Works only if jqDnR plugin is present or if the dragable widget is present from jQuery UI  true    height  mixed  The entry height of form dialog  auto    jqModal  boolean  If set to true uses jqModal plugin (if present) to create the dialog s. If set to true and the plugin is not present jqGrid uses its internal function to create dialog  true    labelswidth  mixed  Since we construct the view with table element it is difficult to calculate, in this case, how much width is needed for the labels. Depending on the needs this value can be increased or decreased  30%    left  integer  The initial left position of modal dialog. The default value of 0 mean the left position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the left position from upper left corner of the window.  0    modal  boolean  Determines if the dialog will be modal. Also works only if jqModal plugin is present  false    navkeys  array  This option works only in edit mode and  add keyboard navigation, which allow us to navigate through the records while in form editing pressing certain keys. The default state is disabled. The first item enables/disables the navigation. The second item corresponds to record up and by default is the  the key code for Up key. The third item corresponds to record down and by default is the  key code for Down key  [false,38,40]    recreateForm  boolean  When set to true the form is recreated every time the dialog is activated with the new options from colModel (if they are changed)  false    resize  boolean  Determines if the dialog can be re-sized. Works only is jqDnR plugin is available or re-sizable widget is present from jQuery UI  true    top  integer  The initial top position of modal dialog. The default value of 0 mean the top position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the top position from upper left corner of the window.  0    topinfo  string  When set this information is placed just after the modal header as additional row  empty    viewPagerButtons  boolean  This option enable or disable the appearing of the previous and next buttons (pager buttons) in the form  true    width  integer  The width of form dialog in pixels. Can have auto property.  300    zIndex  integer  The starting z-index for the dialog. If you will see the dialog form under another elements or dialogs you should use the parameter with some value higher as default value 950. In the most cases it should be the value higher as 1000 - the default value of jQuery UI dialog.  950     Events  The events (function) options parameters have a triggered event equivalent which is set below to the options event. \nEvery triggered event in editGridRow method begin with  jqGridViewRow  and should be called outside the method, while the options events are passed as parameters to the method.   Note  The first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)    Note  the triggered event is bind to the grid and is not passed to any options. See  Triggered events    afterclickPgButtons(string whichbutton, DOM element form, string rowid)  jqGridViewRowAfterClickPgButtons(event, whichbutton, formid, rowid)  This event can be used only when the navigator buttons are enabled; it fires after the data for the new row is loaded from the grid when the pager button is clicked, allowing modification of the data or form before the form is re-displayed.  parameters   string whichbutton is either 'prev' or 'next'  DOM element form is the jQuery object of form, you can use formid[0].id to get form id.  string rowid is the id of the newly loaded row   return \nnone   onclickPgButtons(string whichbutton, DOM form, string rowid)  jqGridViewRowClickPgButtons(event, string whichbutton, DOM form, string rowid)  This event can be used only when we are in view mode; it fires immediately after the previous or next button on form pager is clicked, before leaving the current row, allowing working with (e.g., saving) the currently loaded values in the form  parameters   string which button - can be either 'prev' or 'next'  DOM form is the jQuery object of the form, you can use formid[0].id to get form id.  string rowid is the id of the current row.   return \nnone   beforeShowForm(DOM form)  jqGridViewRowBeforeShowForm(event, DOM form)  Fires before showing the form with the new data;  parameters   DOM form is the jQuery object of the form, you can use formid[0].id to get form id.   return \nnone   beforeInitData(DOM form)  jqGridViewRowBeforeInitData(event, DOM form)  Fires before initialize the new form data.  The Event can return true or false. If the event return false the the action is not done and the form is not lunched. Any other return is treated as true.  parameters   DOM form is the jQuery object of the form, you can use formid[0].id to get form id.   return \nboolean   onClose() \nNo trigered event  This event is called just before closing the form and when a close icon is clicked, a cancel button is clicked, ESC key is pressed or click on overlay (if jqModal is present). The event can return (optionally) true or false. If the return value is true the form is closed, if false the form does not close. If nothing is returned the form is closed  parameters \nnone  return \n[boolean]  What is need to know? \nWhen the form is constructed we set the following rules:   No input elements are created  Hidden fields are included in the form with the display:none property of the table row  If the field is not hidden in grid and there is a need to not show it in the view form use the colModel property  viewable  set to false.  The id of the viewed element is constructed from \"v_\" + the name of the colModel array - propery - name  For ease in manipulating the elements in an edit form, every table row in the form that holds the data for the edit has a id which is a combination of \"trv_\" + name (from colmodel). Example:   form   .... \n  table \n    tr   id = trv_myfield   \n      td  Caption / td   td   id = v_myfield span content of myfield / span / td \n    / tr  ...\n  / table  / form", 
            "title": "View grid row"
        }, 
        {
            "location": "/user-guide/editing/#del-grid-row", 
            "text": "With the method   delGridRow   a delete operation can be performed in the grid and/or at server side.  Calling convention:  jQuery ( #grid_id ). jqGrid ( delGridRow ,   string   row_id_s ,   [ object   options ]   );   Where:   grid_id: the id of the parent grid  string row_id_s: the id of the row(s) to delete; can be a single value or list of ids separated by comma  options: an array of name: value pairs, including any of the following properties or events.   The method uses the following properties from language file:  $ . jgrid . regional [ en ]   =   { \n   ... \n  del   :   { \n    caption :   Delete , \n    msg :   Delete selected record(s)? , \n    bSubmit :   Delete , \n    bCancel :   Cancel \n  },  ...  }   These options can be overwritten when passed as options to the method. When passed to the method we should use by example bSubmit : \"Delete\" and not $.jgrid.regional[\"en\"].del.bSubmit : \"Delete\"  Options     Property  Type  Description  Default      ajaxDelOptions  object  This option allow to set global ajax settings for the form editing when we delete the data to the server. Note that with this option is possible to overwrite all current ajax setting in the save request including the complete event.  empty    buttons  array  Defines a custom buttons in the delete form. Every element into the array is a object (button) with the following properties:   icon  - defines a icon according to the CSS framework used.    side  - left or right - the position of the icon    text  - Text to appear in the button   position  - the position of the button - last or first    click  - function that is executed when the button is click. To the click function is passed the search form, search parameters and click event    id  - id to identify the button. If not set the jqGrid assing it internally using the jqGrid randId function.  empty array    cancelicon  array  Determines the icon of the cancel button. The default values are [true,\u201dleft\u201d,\u201dui-icon-cancel\u201d]. For description of these see delicon     closeOnEscape  boolean  When set to true the modal window can be closed with ESC key from the user.  false    dataheight  integer  The parameter control the scrolling content - i.e between the modal header and modal footer.  auto    delData  object  Object used to add additional content to the data posted to the server  empty    delicon  array  Determines the icon of the submit button. The default value is [true,\"left\",\"ui-icon-trash\"]. The first item enables/disables the icon. The second item tells where to put the icon to left or to right of the text. The third item corresponds to valid ui icon from the css framework used     drag  boolean  Determines if the dialog is dragabale. Works only if jqDnR plugin is present or if the dragable widget is present from jQuery UI  true    height  mixed  The entry height of form dialog  auto    jqModal  boolean  If set to true uses jqModal plugin (if present) to create the dialog s. If set to true and the plugin is not present jqGrid uses its internal function to create dialog  true    left  integer  The initial left position of modal dialog. The default value of 0 mean the left position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the left position from upper left corner of the window.  0    modal  boolean  Determines if the dialog will be modal. Also works only if jqModal plugin is present  false    mtype  string  Defines the type of request to make (\"POST\" or \"GET\") when data is sent to the server  POST    reloadAfterSubmit  boolean  Reload grid data after posting  true    resize  boolean  Determines if the dialog can be re-sized. Works only is jqDnR plugin is available or re-sizable widget is present from jQuery UI  true    top  integer  The initial top position of modal dialog. The default value of 0 mean the top position from the upper left corner of the grid. When jqModal option is true (see below) and jqModal plugin is present any value different from 0 mean the top position from upper left corner of the window.  0    url  string  The url where to post data. If set, replaces the editurl.  null    width  integer  The width of form dialog in pixels. Can have auto property.  300    zIndex  integer  The starting z-index for the dialog. If you will see the dialog form under another elements or dialog s you should use the parameter with some value higher as default value 950. In the most cases it should be the value higher as 1000 - the default value of jQuery UI dialog.  950     Events  The events (function) options parameters have a triggered event equivalent which is set below to the options event. \nEvery triggered event in delGridRow method begin with  jqGridDelRow  and should be called outside the method, while the options events are passed as parameters to the method.   Note  The first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)    Note  the triggered event is bind to the grid and is not passed to any options. See  Triggered events    afterComplete(ajax response, object postdata)  jqGridDelRowAfterComplete(event , ajax response, object postdata)  This event fires immediately after all actions and events are completed and the row is deleted the grid.  parameters   ajax response is the data returned from the server (if any)  object postdata is the data sent to the server   return \nnone   afterShowForm( DOM form)  jqGridDelRowAfterShowForm(event,  DOM form)  Fires after showing the form;  parameters   DOM form is the jQuery object of the delete form.   return \nnone   afterSubmit(ajax response, object postdata)  jqGridDelRowAfterSubmit(event, ajax response, object postdata)  Fires after response has been received from server. Typically used to display status from server (e.g., the data is successfully deleted or the delete canceled for server-side reasons)  When used this event should return array with the following items  [success, message]  where   success is a boolean value if true the process continues, if false a error message appear and all other processing is stopped. (message is ignored if success is true).  message - the message that appear when first parameter is false   parameters   ajax response is the data returned from the server (if any)  object postdata is the data sent to the server   return \narray -  see description above   beforeInitData(DOM form)  jqGridDelRowBeforeInitData(event, DOM form)  Fires before initialize the new form data.  The Event can return true or false. If the event return false the the action is not done and the form is not lunched. Any other return is treated as true.  parameters   DOM form is the jQuery object of the delete form.   return \nboolean   beforeShowForm(DOM form)  jqGridDelRowBeforeShowForm(event, DOM form)  Fires before showing the form with the data;  parameters   DOM form is the jQuery object of the form, you can use formid[0].id to get form id.   return \nnone   beforeSubmit( object postdata)  jqGridDelRowBeforeSubmit(event, object postdata)  Fires before the data is submitted to the server. \nWhen defined this event should return array with the following values  [boolean success, string error]   success boolean indicating if the process should continue (true) or a error (false)  error is the error message which appear to the user   parameters   object postdata is the data sent to the server   return \narray - see above   onclickSubmit( object options, object postdata)  jqGridDelRowClickSubmit(event, object options, object postdata)  Fires after the submit button is clicked and the postdata is constructed. \nThe event should return object in name:value pair which then will be added to the posted data to the server  parameters   object options - parameters passed to the method  object postdata is the data sent to the server   return \nobject   onClose() \nNo trigered event  This event is called just before closing the form and when a close icon is clicked, a cancel button is clicked, ESC key is pressed or click on overlay (if jqModal is present). The event can return (optionally) true or false. If the return value is true the form is closed, if false the form does not close. If nothing is returned the form is closed  parameters \nnone  return \n[boolean]   errorTextFormat( ajax response)  jqGridDelRowErrorTextFormat(event, ajax response)  The event (can) fire when error occurs from the ajax call (status  = 300   status !== 304) and can be used for better formatting of the error messages. To this event is passed response from the server. The event should return single message (not array), which then is displayed to the user.  parameters   ajax response - the response from the server   return \nstring   serializeDelData( object postdata ) \nNo trigered event  If set this event can serialize the data passed to the ajax request when we post a data. Actually the event is called in the ajax data parameter. The function should return the serialized data. This event can be used when a custom data should be passed to the server - e.g - JSON string, XML string and etc. To this event is passed the data which will be posted to the server  parameters   object postdata - data posted to the server   return \nobject   What is posted to the server?  When we are in delete mode the data that is posted to the server is object {} that contain:   the pair id:rowids where the rowids can be a single value or value string separated with comma in case of multiple selection  additionally we add a pair oper:del to indicate the delete mode  if the delData object is not empty we extend this data with the posted data  if the returned object from onclickSubmit event is not empty we extend the posted data with this object", 
            "title": "Del grid row"
        }, 
        {
            "location": "/user-guide/editing/#using-templates", 
            "text": "Guriddo jqGrid support templates in the form editing. This allow to customize the edit form in a way the developer want. To use a template it is needed to set the parameter template in the  edit add/or add options . This can be done in navigator  navGrid  or in the editing method  editGridRow  :  In navigator the code is:  $ ( #grid ). jqGrid ( navGrid , \n     { add : true ,   edit : true ,...}, \n     { template :   template string for edit ,...} \n     { template :   template string for add ,...},  ...  );   and in editGridRow method:  $ ( #grid ). jqGrid ( editGridRow , \n    rowid , \n    { template :   template string ,...}  );   where the 'template string...' is a string containing html tags and a special marks which points where the field from the grid should be.   Note  The template for edit can be a different from the template from add operation. The template can be present only for add and only for edit operation.   Let suppose that we have the following colModel (not all fields are present)  $ ( grid ). jqGrid ({  ...  colModel :   [ \n    { \n       label :   Customer ID , \n       name :   CustomerID , \n       width :   75 , \n       key :   true , \n       editable :   true , \n       editrules   :   {   required :   true } \n    }, \n    { \n       label :   Company Name , \n       name :   CompanyName , \n       width :   140 , \n       editable :   true   // must set editable to true if you want to make the field editable \n    }, \n    ...  ], \n  ... \n  });   To place the CustomerID field in the template the following code string should be inserted in the template string  {CustomerID}  With other words the name from colModel should be put in bracket { }.  To place the Save and Cancel buttons we need to write a special code: \nFor the save button this is  {sData}  and for the cancel button this is a  {cData}  The same apply for the navigator buttons for previous and next record. \nFor previous button this is  {pData}  and for the next button this is a  {nData}   Note  It is not needed to create a form element. The form element is created from the grid and the template content is put into it.   Below is the simple template which implements divs to represent the form.  var mytemplate =  div   style = margin-left:15px; ;\nmytemplate +=  div  Customer ID  sup * / sup : / div div  {CustomerID}  / div ;\nmytemplate +=  div  Company Name:  / div div {CompanyName}  / div ;\nmytemplate +=  div  Phone:  / div div {Phone}  / div ;\nmytemplate +=  div  Postal Code:  / div div {PostalCode}  / div ;\nmytemplate +=  div  City: / div div  {City}  / div ;\nmytemplate +=  hr   style = width:100%; / ;\nmytemplate +=  div  {sData} {cData}   / div / div ;  $ ( #jqGrid ). jqGrid ({ \n   url :   data.json , \n   // we set the changes to be made at client side using predefined word clientArray \n   editurl :   clientArray , \n     datatype :   json , \n   colModel :   [ \n   {   label :   Customer ID , \n     name :   CustomerID , \n     width :   75 , \n     key :   true , \n     editable :   true , \n     editrules   :   {   required :   true }   }, \n     {    label :   Company Name , \n         name :   CompanyName , \n       width :   140 , \n       editable :   true   /* must set editable to true if you want to make the field editable*/ \n         }, \n     { \n         label   :   Phone , \n         name :   Phone , \n       width :   100 , \n       editable :   true \n     }, \n     { \n         label :   Postal Code , \n       name :   PostalCode , \n       width :   80 , \n       editable :   true \n     }, \n     { \n         label :   City , \n       name :   City , \n       width :   140 , \n       editable :   true \n     } \n     ], \n   sortname :   CustomerID , \n   sortorder   :   asc , \n   loadonce :   true , \n   viewrecords :   true , \n   width :   780 , \n   height :   200 , \n   rowNum :   10 , \n   pager :   #jqGridPager  });  $ ( #jqGrid ). navGrid ( #jqGridPager , \n     // the buttons to appear on the toolbar of the grid \n   {   edit :   true ,   add :   true ,   del :   true ,   search :   false ,   refresh :   false ,   view :   false ,   position :      left ,   cloneToTop :   false   }, \n   //options for the Edit Dialog \n   { \n     editCaption :   The Edit Dialog , \n     template :   mytemplate , \n     errorTextFormat :   function   ( data )   { \n         return   Error:    +   data . responseText \n     } \n   }, \n    // options for the Add Dialog \n   { \n     template :   mytemplate , \n     errorTextFormat :   function   ( data )   { \n         return   Error:    +   data . responseText \n     } \n   }, \n   // options for the Delete Dailog \n   { \n     errorTextFormat :   function   ( data )   { \n         return   Error:    +   data . responseText \n     } \n   }  );", 
            "title": "Using templates"
        }, 
        {
            "location": "/user-guide/editing/#html5-support", 
            "text": "The html5 checking in the editGridRow method (form editing) is supported via the option  html5Check . Additionally to this it is needed to use the  edittype  option in colModel to define valid html5 input type and editoptions in the same colModel to enter supported attributes for that edittype. Below is a small example:  $ ( #jqGrid ). jqGrid ({ \n     url :   data.json , \n     editurl :   clientArray , \n     datatype :   json , \n     colModel :   [ \n     { \n         label :   Customer ID , \n         name :   CustomerID , \n         width :   75 , \n         key :   true , \n         editable :   true , \n         editoptions   :   { \n             required :   true ,   // html5 requiered \n             placeholder :   CustomerId requiered   // html5 placeholder \n         } \n     }, \n     { \n         label :   Company Name , \n         name :   CompanyName , \n         width :   140 , \n         editable :   true \n     }, \n     { \n         label   :   Phone , \n         name :   Phone , \n         width :   100 , \n         editable :   true , \n         editoptions   :   { \n             pattern   :   ^[0-9\\-\\+\\s\\(\\)]*$ ,   // html5 pattern to validate the input \n             placeholder   :   Phone number ,   // html5 required \n             required :   true   // html5 required \n         } \n     }, \n     { \n         label :   Postal Code , \n         name :   PostalCode , \n         width :   80 , \n         editable :   true \n     }, \n     { \n         label :   City , \n         name :   City , \n         width :   140 , \n         editable :   true \n     }, \n     { \n         label :   Ranking , \n         name :   rank , \n         width :   80 , \n         editable :   true , \n         edittype   :   number ,   // define number type \n         editoptions   :   { \n             required :   true ,   // html5 required \n             min   :   1 ,   // html5 min \n             max   :   10 ,   // html5 max \n             placeholder   :   Enter rank 1-10   // html5 placeholder \n         } \n     }  ],  sortname :   CustomerID ,  sortorder   :   asc ,  loadonce :   true ,  viewrecords :   true , \n     width :   780 , \n     height :   200 , \n     rowNum :   10 , \n     pager :   #jqGridPager  });  $ ( #jqGrid ). navGrid ( #jqGridPager , \n     // the buttons to appear on the toolbar of the grid \n     {   edit :   true ,   add :   true ,   del :   false ,   search :   false ,   refresh :   false ,   view :   false ,   position :   left ,   cloneToTop :   false   }, \n     // options for the Edit Dialog \n     { \n         html5Check   :    true ,   // Enable HTML5 check \n         editCaption :   The Edit Dialog , \n         recreateForm :   true , \n         closeAfterEdit :   true , \n         errorTextFormat :   function   ( data )   { \n             return   Error:    +   data . responseText \n         } \n     }, \n     // options for the Add Dialog \n     { \n         closeAfterAdd :   true , \n         html5Check   :   true ,   // Enable HTML5 check \n         recreateForm :   true , \n         errorTextFormat :   function   ( data )   { \n             return   Error:    +   data . responseText \n         } \n     }, \n     // options for the Delete Dailog \n     { \n         errorTextFormat :   function   ( data )   { \n             return   Error:    +   data . responseText \n         } \n     });  });", 
            "title": "HTML5 Support"
        }, 
        {
            "location": "/user-guide/grouping/", 
            "text": "Grouping\n\n\n\n\nGuriddo jqGrid support two type of grouping:\n\n\n\n\nHeader grouping\n\n\nData grouping.\n\n\n\n\nThese two types of grouping can be used independent and together and are used with success in \nPivot Grid\n.\n\n\nThe code related to both types of grouping is in file: \ngrid.grouping.js\n\n\nHeader grouping\n\n\nHeader grouping is a way to add additional columns above the header grid rows, so that they are grouped in a way you need them. Typical implementation can look like the picture below.\n\n\n\n\nWe support two types of grouping - with colSpan enabled and colSpan disabled.\n\nIf the colSpan is disabled (the default) the headers that do not have grouping have a additional cell above it.\n\nIf the colSpan is enabled there is no additional cell above the non-grouped column and it is considered as one column.\n\n\nLimitations\n\n\nCurrently header grouping has the following limitations:\n\n\n\n\nSortable columns is not compatible with grouping when used together. Only one of these feature can be used, but not booth together\n\n\nColumn Chooser is not compatible with the header grouping\n\n\n\n\nSet group headers\n\n\nGrouping of the header should be used after the grid is created. For this purpose a method \nsetGroupHeaders\n is used.\n\n\nTypical implementation can look like this:\n\n\n$\n(\n#jqGrid\n).\njqGrid\n({\n\n    \nurl\n:\n \ndata.json\n,\n\n    \nmtype\n:\n \nGET\n,\n\n    \ndatatype\n:\n \njson\n,\n\n    \npage\n:\n \n1\n,\n\n    \ncolModel\n:\n \n[\n\n        \n{\n   \n          \nlabel\n \n:\n \nOrder ID\n,\n\n          \nname\n:\n \nOrderID\n,\n\n          \nkey\n:\n \ntrue\n,\n\n        \n},\n \n{\n\n          \nlabel\n:\n \nOrder Date\n,\n\n          \nname\n:\n \nOrderDate\n,\n\n          \nwidth\n:\n \n150\n,\n\n          \n},\n                    \n        \n},\n \n{\n\n          \nlabel\n:\n \nCustomer ID\n,\n\n          \nname\n:\n \nCustomerID\n,\n\n        \n},{\n\n          \nlabel\n:\n \nFreight\n,\n\n          \nname\n:\n \nFreight\n\n        \n},{\n\n          \nlabel\n \n:\n \nShip Name\n,\n\n          \nname\n:\n \nShipName\n,\n\n        \n},{\n\n          \nlabel\n \n:\n \nShip City\n,\n\n          \nname\n:\n \nShipCity\n,\n\n        \n}\n\n        \n},{\n\n          \nlabel\n \n:\n \nShip Country\n,\n\n          \nname\n:\n \nShipCountry\n,\n\n      \n}\n\n    \n],\n\n    \n//loadonce: true,\n\n    \nviewrecords\n:\n \ntrue\n,\n\n    \nwidth\n:\n \n780\n,\n\n    \nheight\n:\n \n250\n,\n\n    \nrowNum\n:\n \n10\n,\n\n    \npager\n:\n \n#jqGridPager\n\n\n});\n\n\n$\n(\n#jqGrid\n).\njqGrid\n(\nsetGroupHeaders\n,\n \n{\n\n  \nuseColSpanStyle\n:\nfalse\n,\n\n  \ngroupHeaders\n \n:\n \n[\n\n    \n{\n \nstartColumnName\n:\nOrderID\n,\n \nnumberOfColumns\n:\n2\n,\n \ntitleText\n:\nOrder Info\n \n},\n\n    \n{\n \nstartColumnName\n:\nShipName\n,\n \nnumberOfColumns\n:\n3\n,\n \ntitleText\n:\nShipping Details\n \n}\n\n  \n]\n\n\n});\n\n\n\n\n\n\nThe method \nsetGroupHeaders\n creates the group of headers in the grid, after the creation of the grid.\n\n\n\n\nNote\n\n\nThe group headers options are stored as grid parameter. This grid parameters is called \ngroupHeader\n and can be requested with \ngetGridParam\n method after it is run and there is no call of \ndestroyGroupHeader\n method (see below).\n\n\n\n\nCalling convetions:\n\n\n$\n(\n#grid_id\n).\njqGrid\n(\nsetGroupHeaders\n,\n \nobject\n \noptions\n \n)\n\n\n\n\n\n\nWhere the default properties of options are :\n\n\noptions\n \n=\n \n{\n\n  \nuseColSpanStyle\n \n:\n  \nfalse\n,\n\n  \ngroupHeaders\n \n:\n \n[]\n\n\n}\n\n\n\n\n\n\nand have the following meaning:\n\n\n\n\nuseColSpanStyle   boolean - Determine if the non grouping header cell should be have cell above it - value of false, or the column should be treated as one combining boot - true\n\n\ngroupHeaders  - array-  set of object(s) which describes the header grouping texts and rules. Bellow is the list of the options of every element of this array\n\n\nstartColumnName   - string - The name from colModel from which the grouping header begin, including the same field\n\n\nnumberOfColumns   - integer - The number of columns which are included for this group. Note that the number start from the startColumnName. If the column is hidden it is skipped and as result the group does not contain the field, but the method count it.\n\n\ntitleText - string -  The text for this group. The text can contain html tags\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe method can be called several times one after other and in this case the last called setGroupHeader will be put at first place (below the main grid header)  the before last above it and etc. In all cases the names from colModel should be used in startColumnName property.\n\n\n\n\nUsing the previous example if we change the useColSpanStyle to true we will obtain the following picture:\n\n\n$\n(\n#jqGrid\n).\njqGrid\n(\nsetGroupHeaders\n,\n \n{\n\n \nuseColSpanStyle\n:\ntrue\n,\n\n \ngroupHeaders\n \n:\n \n[\n\n   \n{\n \nstartColumnName\n:\nOrderID\n,\n \nnumberOfColumns\n:\n2\n,\n \ntitleText\n:\nOrder Info\n \n},\n\n   \n{\n \nstartColumnName\n:\nShipName\n,\n \nnumberOfColumns\n:\n3\n,\n \ntitleText\n:\nShipping Details\n \n}\n\n \n]\n\n\n});\n\n\n\n\n\n\n\n\nDestroy headers\n\n\nTo destroy group header call the \ndestroyGroupHeader\n method. This method returns back the grid headers to its initial state.\n\n\nCalling conventions\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\ndestroyGroupHeader\n,\n \nboolean\n \nkeepOptions\n);\n\n\n...\n\n\n\n\n\n\nwhere\n\n- boolean keepOptions if set to false the group header(s) is removed, but the groupHeader option in grid is not empty and can be used later.\n\n\nData grouping\n\n\nGrouping is a way to group data by diffrent criteria. jqGrid support multiple level of grouping.\n\n\nThe simple way to group in jqGrid is to enable grouping with the grid option \ngrouping:true\n and define a field name on which grouping occurs. The name should correspond to the name in colModel The definition is done with array groupField which is a part of another grid option \ngroupingView\n.\n\n\nIt is important to note that if you want the grouping to be correct, then the data should come from server to the grid sorted by that field. When we are in local mode (the data is an array) the data is grouped (sorted) automatically so there is no need to define any additional sort column.\n\n\nIn order to inform the server that we want to have a grouped data, jqGrid add to the sidx parameter the groupField name on which we group and then the sortname parameter. This is done only if we have enabled the grouping and the data is remote.\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n  \n...\n\n  \nsortname\n \n:\n \ninvdate\n,\n\n  \nsortorder\n \n:\n \ndesc\n,\n\n  \ngrouping\n:\ntrue\n,\n\n  \ngroupingView\n \n:\n \n{\n\n    \ngroupField\n \n:\n \n[\nname\n],\n\n    \ngroupOrder\n:\n \n[\nasc\n]\n\n  \n},\n\n  \ncaption\n:\n \nGrouping\n\n  \n...\n\n\n});\n\n\n\n\n\n\nthen the sidx and sord parameters will become:\n\n\nsidx = name asc, invdate\nsord = desc\n\n\n\n\n\nAs can be seen the grouped field(s) is set in the beginning of the string and the sortname parameter as last.\n\n\nWe should get this information from the request, perform the appropriate sorting server side and return the requested data to the grid. The grid then get the data and do the grouping adding the appropriate (defined) headers and footers.\n\n\nLimitations\n\n\nWhen the grouping is enabled, the following options will be set explicit into the code:\n\n\n\n\nscroll = false;\n\n\nrownumbers = false;\n\n\ntreeGrid = false;\n\n\ngridview = true (afterInsertRow does not fire too);\n\n\n\n\nPlease refer in \ngrid options\n for detailed information on these options.\n\n\nOptions\n\n\nAll options in grouping are set as grid options and can be changed dynamically using the setGridParam method. Two options are related to grouping\n\n\n\n\ngrouping\n\n\ngroupingView\n\n\n\n\nThe first option grouping is Boolean and enables or disables the grouping feature into the grid. The default values of this option is false. To enable grouping set it to true - i.e \ngrouping : true\n\n\nThe \ngroupingView\n option is actually a object and consist a lot of other options. Below is a example on how this should be used:\n\n\njQuery\n(\n#grid\n).\njqGrid\n({\n\n  \n...\n\n  \ngroupingView\n \n:\n \n{\n\n     \ngroupField\n \n:\n \n[\nname\n,\n \ninvdate\n],\n\n     \ngroupOrder\n \n:\n \n[\nasc\n,\n \ndesc\n]\n\n  \n}\n\n  \n...\n\n\n});\n\n\n\n\n\n\nBelow is the list of the options that are part of groupingView option\n\n\n\n\nNote\n\n\nAny options below, which is array, should have the same length as the groupField array, when defined\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ngroupField\n\n\narray\n\n\nDefines the name from colModel on which we group. The first value is the first level, the second values is the second level and etc.\n\n\nempty\n\n\n\n\n\n\ngroupOrder\n\n\narray\n\n\nDefines the initial sort order of the group level. Can be asc for ascending or desc for descending order. If the grouping is enabled the default value is asc.\n\n\nempty\n\n\n\n\n\n\ngroupText\n\n\narray\n\n\nDefines the grouping header text for the group level that will be displayed in the grid. By default if defined the value if {0} which means that the group value name will be displayed.  It is possible to specify another value {1} which mean that the total cont of this group will be displayed too. It is possible to set here any valid html content.\n\n\nempty\n\n\n\n\n\n\ngroupColumnShow\n\n\narray\n\n\nShow/Hide the column on which we group. The value here should be a boolean true/false for the group level. If the grouping is enabled we set this value to true.\n\n\nempty\n\n\n\n\n\n\ngroupSummary\n\n\narray\n\n\nEnable or disable the summary (footer) row of the current group level. If grouping is set the default value for the group is false.\n\n\nempty\n\n\n\n\n\n\ngroupSummaryPos\n\n\narray\n\n\nSet the position of the summary row at current group level. Possible values - header or footer. If set to header the summary values are placed at the same row where the group values is. If footer is set additional row at end of the group level is build-ed and the summary values are placed here\n\n\nfooter\n\n\n\n\n\n\nhideFirstGroupCol\n\n\nboolean\n\n\nIf set to true the values at first column are replaced with empty ones so that we have a pretty view. This usually is set ih the first column is a group column\n\n\nfalse\n\n\n\n\n\n\nshowSummaryOnHide\n\n\nboolean\n\n\nShow or hide the summary (footer) row when we collapse the group.\n\n\nfalse\n\n\n\n\n\n\ngroupCollapse\n\n\nboolean\n\n\nDefines if the initially the grid should show or hide the detailed rows of the group.\n\n\nfalse\n\n\n\n\n\n\nplusicon\n\n\nstring\n\n\nSet the icon from jQuery UI  Theme Roller  or Bootstrap that will be used if the grouped row is collapsed. The default is get from styleUI object property grouping for the CSS framework used\n\n\n\n\n\n\n\n\nminusicon\n\n\nstring\n\n\nSet the icon from jQuery UI Theme Roller or Bootstrap that will be used if the grouped row is expanded. The default is get from styleUI object property grouping for the CSS framework used\n\n\n\n\n\n\n\n\nisInTheSameGroup\n\n\narray\n\n\nThe elements of the array correspond to the number of the groups. Every element of this array is a function which should return true or false. In case if it return false the element will be added in the new group. Parameters passed to this function are : previous value, current value, group index, group object\n\n\nnull\n\n\n\n\n\n\nformatDisplayField\n\n\narray\n\n\nThe elements of the array correspond to the number of the groups. Every element of this array is a function which should return a value, which will be display the grouped value. Parameters passed to this function are: current value, source value, colModel option, group index and group object.\n\n\nnull\n\n\n\n\n\n\n\n\nThe last two functions are very useful to implement custom grouping and display of the grouped values.\n\n\nExample:\n\n\nBy default jqGrid groups the values case-sensitive. To group the values case-insensitive we can use the \nisInTheSameGroup\n and \nformatDisplayField\n properties to solve the problem. Bellow is how this can be done\n\n\n$\n(\n#grid_id\n).\njqGrid\n({\n\n  \ncolModel\n \n:\n[\n\n    \n{\n\n      \nname\n \n:\nname\n,\n \nindex\n:\nname\n...\n\n    \n},{\n\n      \n...\n\n    \n}\n\n    \n...\n\n  \n],\n\n  \ngrouping\n \n:\n \ntrue\n,\n\n  \ngroupingView\n:\n \n{\n\n    \ngroupField\n:\n \n[\nname\n],\n\n    \nformatDisplayField\n:\n \n[\n\n        \n//display the filed in lowecase\n\n        \nfunction\n \n(\ndspVal\n,\n \nvalue\n,\n \ncmopt\n,\n \nlevel\n,\n \ngrpopt\n)\n \n{\n\n            \nreturn\n \nString\n(\ndspVal\n).\ntoLowerCase\n();\n\n        \n}\n\n    \n],\n\n    \ngroupColumnShow\n:\n \n[\ntrue\n],\n\n    \nisInTheSameGroup\n:\n \n[\n\n        \nfunction\n \n(\nx\n,\n \ny\n,\n \nindex\n,\n \ngrpopt\n)\n \n{\n\n            \n// compare the values\n\n            \nreturn\n \nString\n(\nx\n).\ntoLowerCase\n()\n \n===\n \nString\n(\ny\n).\ntoLowerCase\n();\n\n        \n}\n\n    \n]\n\n  \n}\n\n  \n...\n\n\n});\n\n\n\n\n\n\nThe callbacks isInTheSameGroup[0] and formatDisplayField[0] will be used by grouping by groupField[0]. Because jqGrid support multilevel grouping the isInTheSameGroup and formatDisplayField properties are arrays of callback functions instead of just callback function.\n\n\nThe function isInTheSameGroup[level] (where level correspond to the level of groupField array) will be used consequently to compare the value of grouping column from of previous row with the corresponding value of the current row. The function isInTheSameGroup[level] will be called with the values. If the callback returns true then the row will be grouped with the previous one.\n\n\nThe callback formatDisplayField[level] allows to customize the information displayed in the grouping header. In the example above it is converted to lowercase.\n\n\ncolModel options\n\n\nAdditionally if the group summary footer row is enabled we use a option in column model to set the type of the summary field. We add the following options in colModel and its names are: \nsummaryType, summaryTpl, summaryRound and  summaryRoundType\n.\n\n\nsummaryType\n\n\nThis option can be a string with certain values or a user defined function. Bellow is a example of using this option:\n\n\njQuery\n(\n#grid\n).\njqGrid\n({\n\n  \n...\n\n  \ncolModel\n \n:\n \n[\n\n     \n{..},\n\n     \n{\nname\n:\namount\n,\n \nformatter\n:\nnumber\n,\n \nsummaryType\n:\nsum\n},\n\n     \n...\n\n  \n],\n\n  \n...\n\n\n});\n\n\n\n\n\n\nThe option determines what type of calculation we should do with the current group value applied to column. Currently we support the following build in functions:\n\n\n\n\nsum - apply the sum function to the current group value and return the result\n\n\ncount - apply the count function to the current group value and return the result\n\n\navg - apply the average function to the current group value and return the result\n\n\nmin - apply the min function to the current group value and return the result\n\n\nmax - apply the max function to the current group value and return the result\n\n\nfunction - use custom function for calculations.\n\n\n\n\nThe option can be defined as function. If defined we pass three parameters to it - the current value, the name and the record object. The function should return value. Note that this value will be used again for the group value until it changes.\n\n\nBellow is a example on using this function - simulating the sum function.\n\n\nfunction\n \nmysum\n(\nval\n,\n \nname\n,\n \nrecord\n)\n\n\n{\n\n  \nreturn\n \nparseFloat\n(\nval\n||\n0\n)\n \n+\n \nparseFloat\n((\nrecord\n[\nname\n]\n||\n0\n));\n\n\n}\n\n\n\njQuery\n(\n#grid\n).\njqGrid\n({\n\n  \n...\n\n  \ncolModel\n \n:\n \n[\n\n     \n{..},\n\n     \n{\nname\n:\namount\n,\n \nformatter\n:\nnumber\n,\n \nsummaryType\n:\nmysum\n},\n\n     \n...\n\n  \n],\n\n  \n...\n\n\n});\n\n\n\n\n\n\nsummaryTpl\n\n\nThis option acts as template which can be used in the summary footer row. By default its value is defined as \n{0}\n - which means that this will print the calculated (summary) value. A second parameter is possible to be added \n{1}\n which mean the count of records to the current group The parameter can contain any valid HTML code. As of version 5.3 two additional parameter can be used \n{2}\n, which is the name of the column and \n{3}\n  the group value \n\n\nsummaryRound\n\n\n{...,\n \nsummaryRound\n:\n \nnumber_of_digits\n,\n \n...\n \n}\n\n\n\n\n\n\nBy default this parameter is not defined in colModel when grouping is on. The number_of_digits by default is not defined. This options determines the length of the remaining part after the decimal point.\n\n\nsummaryRoundType\n\n\n{\n \nsummaryRoundType\n:\n \nround\n \n|\n \nfixed\n \n}\n\n\n\n\n\n\nThis parameter works only if the summaryRound is defined. and sets the rounding method selector.\n\n\nParameter round means 'just round it and do not keep trailing zeroes'. fixed means 'round it and keep the given fixed number of digits even zeroes'.\n\n\nThe default option is set to round\n\n\nGroup methods\n\n\nBellow are the methods that can be used with the grouping.\n\n\n\n\ngroupingToggle(string groupid)\n\n\nToggles the group identified by groupid. The groupid is a combination of grid id plus 'ghead_' plus the current count number in the grid view. By example if the grid id is named mygrid the the second grouping value in grid will become mygridghead_1\n\n\nparemeters\n\n\n\n\nstring groupid - the id of the group to toggle\n\n\n\n\nreturn\n\nnone\n\n\n\n\ngroupingGroupBy(mixed name, [object options])\n\n\nPerform a grouping by given name. The previous grouping is destroyed and new one is applied. A set of additional options can be set with the option parameter. The groupingView object is extended with the options parameter.\n\n\nparameters\n\n\n\n\nmixed name - can be name from col model or array with a names from colModel. Replaces the groupField array.\n\n\nobject options - a set of allowed options for groupView\n\n\n\n\nreturn\n\ngrid object\n\n\n\n\ngroupingRemove( boolean current)\n\n\nRemove the current grouping and set the grouping parameter to false. If the parameter current is set to true all the headers and footers are removed without triggering the grid. If the parameter is false (default) the grid is triggered.\n\nand grouping parameter is set to false. Note that the groupingView parameter is not destroyed.\n\n\nparameters\n\n\n\n\nboolean current - set to true removed the headers and footers without triggering the grid.\n\n\n\n\nreturn\n\ngrid object", 
            "title": "Grouping"
        }, 
        {
            "location": "/user-guide/grouping/#grouping", 
            "text": "Guriddo jqGrid support two type of grouping:   Header grouping  Data grouping.   These two types of grouping can be used independent and together and are used with success in  Pivot Grid .  The code related to both types of grouping is in file:  grid.grouping.js", 
            "title": "Grouping"
        }, 
        {
            "location": "/user-guide/grouping/#header-grouping", 
            "text": "Header grouping is a way to add additional columns above the header grid rows, so that they are grouped in a way you need them. Typical implementation can look like the picture below.   We support two types of grouping - with colSpan enabled and colSpan disabled. \nIf the colSpan is disabled (the default) the headers that do not have grouping have a additional cell above it. \nIf the colSpan is enabled there is no additional cell above the non-grouped column and it is considered as one column.", 
            "title": "Header grouping"
        }, 
        {
            "location": "/user-guide/grouping/#limitations", 
            "text": "Currently header grouping has the following limitations:   Sortable columns is not compatible with grouping when used together. Only one of these feature can be used, but not booth together  Column Chooser is not compatible with the header grouping", 
            "title": "Limitations"
        }, 
        {
            "location": "/user-guide/grouping/#set-group-headers", 
            "text": "Grouping of the header should be used after the grid is created. For this purpose a method  setGroupHeaders  is used.  Typical implementation can look like this:  $ ( #jqGrid ). jqGrid ({ \n     url :   data.json , \n     mtype :   GET , \n     datatype :   json , \n     page :   1 , \n     colModel :   [ \n         {    \n           label   :   Order ID , \n           name :   OrderID , \n           key :   true , \n         },   { \n           label :   Order Date , \n           name :   OrderDate , \n           width :   150 , \n           },                     \n         },   { \n           label :   Customer ID , \n           name :   CustomerID , \n         },{ \n           label :   Freight , \n           name :   Freight \n         },{ \n           label   :   Ship Name , \n           name :   ShipName , \n         },{ \n           label   :   Ship City , \n           name :   ShipCity , \n         } \n         },{ \n           label   :   Ship Country , \n           name :   ShipCountry , \n       } \n     ], \n     //loadonce: true, \n     viewrecords :   true , \n     width :   780 , \n     height :   250 , \n     rowNum :   10 , \n     pager :   #jqGridPager  });  $ ( #jqGrid ). jqGrid ( setGroupHeaders ,   { \n   useColSpanStyle : false , \n   groupHeaders   :   [ \n     {   startColumnName : OrderID ,   numberOfColumns : 2 ,   titleText : Order Info   }, \n     {   startColumnName : ShipName ,   numberOfColumns : 3 ,   titleText : Shipping Details   } \n   ]  });   The method  setGroupHeaders  creates the group of headers in the grid, after the creation of the grid.   Note  The group headers options are stored as grid parameter. This grid parameters is called  groupHeader  and can be requested with  getGridParam  method after it is run and there is no call of  destroyGroupHeader  method (see below).   Calling convetions:  $ ( #grid_id ). jqGrid ( setGroupHeaders ,   object   options   )   Where the default properties of options are :  options   =   { \n   useColSpanStyle   :    false , \n   groupHeaders   :   []  }   and have the following meaning:   useColSpanStyle   boolean - Determine if the non grouping header cell should be have cell above it - value of false, or the column should be treated as one combining boot - true  groupHeaders  - array-  set of object(s) which describes the header grouping texts and rules. Bellow is the list of the options of every element of this array  startColumnName   - string - The name from colModel from which the grouping header begin, including the same field  numberOfColumns   - integer - The number of columns which are included for this group. Note that the number start from the startColumnName. If the column is hidden it is skipped and as result the group does not contain the field, but the method count it.  titleText - string -  The text for this group. The text can contain html tags      Note  The method can be called several times one after other and in this case the last called setGroupHeader will be put at first place (below the main grid header)  the before last above it and etc. In all cases the names from colModel should be used in startColumnName property.   Using the previous example if we change the useColSpanStyle to true we will obtain the following picture:  $ ( #jqGrid ). jqGrid ( setGroupHeaders ,   { \n  useColSpanStyle : true , \n  groupHeaders   :   [ \n    {   startColumnName : OrderID ,   numberOfColumns : 2 ,   titleText : Order Info   }, \n    {   startColumnName : ShipName ,   numberOfColumns : 3 ,   titleText : Shipping Details   } \n  ]  });", 
            "title": "Set group headers"
        }, 
        {
            "location": "/user-guide/grouping/#destroy-headers", 
            "text": "To destroy group header call the  destroyGroupHeader  method. This method returns back the grid headers to its initial state.  Calling conventions  ...  jQuery ( #grid_id ). jqGrid ( destroyGroupHeader ,   boolean   keepOptions );  ...   where \n- boolean keepOptions if set to false the group header(s) is removed, but the groupHeader option in grid is not empty and can be used later.", 
            "title": "Destroy headers"
        }, 
        {
            "location": "/user-guide/grouping/#data-grouping", 
            "text": "Grouping is a way to group data by diffrent criteria. jqGrid support multiple level of grouping.  The simple way to group in jqGrid is to enable grouping with the grid option  grouping:true  and define a field name on which grouping occurs. The name should correspond to the name in colModel The definition is done with array groupField which is a part of another grid option  groupingView .  It is important to note that if you want the grouping to be correct, then the data should come from server to the grid sorted by that field. When we are in local mode (the data is an array) the data is grouped (sorted) automatically so there is no need to define any additional sort column.  In order to inform the server that we want to have a grouped data, jqGrid add to the sidx parameter the groupField name on which we group and then the sortname parameter. This is done only if we have enabled the grouping and the data is remote.  jQuery ( #grid_id ). jqGrid ({ \n   ... \n   sortname   :   invdate , \n   sortorder   :   desc , \n   grouping : true , \n   groupingView   :   { \n     groupField   :   [ name ], \n     groupOrder :   [ asc ] \n   }, \n   caption :   Grouping \n   ...  });   then the sidx and sord parameters will become:  sidx = name asc, invdate\nsord = desc  As can be seen the grouped field(s) is set in the beginning of the string and the sortname parameter as last.  We should get this information from the request, perform the appropriate sorting server side and return the requested data to the grid. The grid then get the data and do the grouping adding the appropriate (defined) headers and footers.", 
            "title": "Data grouping"
        }, 
        {
            "location": "/user-guide/grouping/#limitations_1", 
            "text": "When the grouping is enabled, the following options will be set explicit into the code:   scroll = false;  rownumbers = false;  treeGrid = false;  gridview = true (afterInsertRow does not fire too);   Please refer in  grid options  for detailed information on these options.", 
            "title": "Limitations"
        }, 
        {
            "location": "/user-guide/grouping/#options", 
            "text": "All options in grouping are set as grid options and can be changed dynamically using the setGridParam method. Two options are related to grouping   grouping  groupingView   The first option grouping is Boolean and enables or disables the grouping feature into the grid. The default values of this option is false. To enable grouping set it to true - i.e  grouping : true  The  groupingView  option is actually a object and consist a lot of other options. Below is a example on how this should be used:  jQuery ( #grid ). jqGrid ({ \n   ... \n   groupingView   :   { \n      groupField   :   [ name ,   invdate ], \n      groupOrder   :   [ asc ,   desc ] \n   } \n   ...  });   Below is the list of the options that are part of groupingView option   Note  Any options below, which is array, should have the same length as the groupField array, when defined      Property  Type  Description  Default      groupField  array  Defines the name from colModel on which we group. The first value is the first level, the second values is the second level and etc.  empty    groupOrder  array  Defines the initial sort order of the group level. Can be asc for ascending or desc for descending order. If the grouping is enabled the default value is asc.  empty    groupText  array  Defines the grouping header text for the group level that will be displayed in the grid. By default if defined the value if {0} which means that the group value name will be displayed.  It is possible to specify another value {1} which mean that the total cont of this group will be displayed too. It is possible to set here any valid html content.  empty    groupColumnShow  array  Show/Hide the column on which we group. The value here should be a boolean true/false for the group level. If the grouping is enabled we set this value to true.  empty    groupSummary  array  Enable or disable the summary (footer) row of the current group level. If grouping is set the default value for the group is false.  empty    groupSummaryPos  array  Set the position of the summary row at current group level. Possible values - header or footer. If set to header the summary values are placed at the same row where the group values is. If footer is set additional row at end of the group level is build-ed and the summary values are placed here  footer    hideFirstGroupCol  boolean  If set to true the values at first column are replaced with empty ones so that we have a pretty view. This usually is set ih the first column is a group column  false    showSummaryOnHide  boolean  Show or hide the summary (footer) row when we collapse the group.  false    groupCollapse  boolean  Defines if the initially the grid should show or hide the detailed rows of the group.  false    plusicon  string  Set the icon from jQuery UI  Theme Roller  or Bootstrap that will be used if the grouped row is collapsed. The default is get from styleUI object property grouping for the CSS framework used     minusicon  string  Set the icon from jQuery UI Theme Roller or Bootstrap that will be used if the grouped row is expanded. The default is get from styleUI object property grouping for the CSS framework used     isInTheSameGroup  array  The elements of the array correspond to the number of the groups. Every element of this array is a function which should return true or false. In case if it return false the element will be added in the new group. Parameters passed to this function are : previous value, current value, group index, group object  null    formatDisplayField  array  The elements of the array correspond to the number of the groups. Every element of this array is a function which should return a value, which will be display the grouped value. Parameters passed to this function are: current value, source value, colModel option, group index and group object.  null     The last two functions are very useful to implement custom grouping and display of the grouped values.  Example:  By default jqGrid groups the values case-sensitive. To group the values case-insensitive we can use the  isInTheSameGroup  and  formatDisplayField  properties to solve the problem. Bellow is how this can be done  $ ( #grid_id ). jqGrid ({ \n   colModel   : [ \n     { \n       name   : name ,   index : name ... \n     },{ \n       ... \n     } \n     ... \n   ], \n   grouping   :   true , \n   groupingView :   { \n     groupField :   [ name ], \n     formatDisplayField :   [ \n         //display the filed in lowecase \n         function   ( dspVal ,   value ,   cmopt ,   level ,   grpopt )   { \n             return   String ( dspVal ). toLowerCase (); \n         } \n     ], \n     groupColumnShow :   [ true ], \n     isInTheSameGroup :   [ \n         function   ( x ,   y ,   index ,   grpopt )   { \n             // compare the values \n             return   String ( x ). toLowerCase ()   ===   String ( y ). toLowerCase (); \n         } \n     ] \n   } \n   ...  });   The callbacks isInTheSameGroup[0] and formatDisplayField[0] will be used by grouping by groupField[0]. Because jqGrid support multilevel grouping the isInTheSameGroup and formatDisplayField properties are arrays of callback functions instead of just callback function.  The function isInTheSameGroup[level] (where level correspond to the level of groupField array) will be used consequently to compare the value of grouping column from of previous row with the corresponding value of the current row. The function isInTheSameGroup[level] will be called with the values. If the callback returns true then the row will be grouped with the previous one.  The callback formatDisplayField[level] allows to customize the information displayed in the grouping header. In the example above it is converted to lowercase.", 
            "title": "Options"
        }, 
        {
            "location": "/user-guide/grouping/#colmodel-options", 
            "text": "Additionally if the group summary footer row is enabled we use a option in column model to set the type of the summary field. We add the following options in colModel and its names are:  summaryType, summaryTpl, summaryRound and  summaryRoundType .  summaryType  This option can be a string with certain values or a user defined function. Bellow is a example of using this option:  jQuery ( #grid ). jqGrid ({ \n   ... \n   colModel   :   [ \n      {..}, \n      { name : amount ,   formatter : number ,   summaryType : sum }, \n      ... \n   ], \n   ...  });   The option determines what type of calculation we should do with the current group value applied to column. Currently we support the following build in functions:   sum - apply the sum function to the current group value and return the result  count - apply the count function to the current group value and return the result  avg - apply the average function to the current group value and return the result  min - apply the min function to the current group value and return the result  max - apply the max function to the current group value and return the result  function - use custom function for calculations.   The option can be defined as function. If defined we pass three parameters to it - the current value, the name and the record object. The function should return value. Note that this value will be used again for the group value until it changes.  Bellow is a example on using this function - simulating the sum function.  function   mysum ( val ,   name ,   record )  { \n   return   parseFloat ( val || 0 )   +   parseFloat (( record [ name ] || 0 ));  }  jQuery ( #grid ). jqGrid ({ \n   ... \n   colModel   :   [ \n      {..}, \n      { name : amount ,   formatter : number ,   summaryType : mysum }, \n      ... \n   ], \n   ...  });   summaryTpl  This option acts as template which can be used in the summary footer row. By default its value is defined as  {0}  - which means that this will print the calculated (summary) value. A second parameter is possible to be added  {1}  which mean the count of records to the current group The parameter can contain any valid HTML code. As of version 5.3 two additional parameter can be used  {2} , which is the name of the column and  {3}   the group value   summaryRound  {...,   summaryRound :   number_of_digits ,   ...   }   By default this parameter is not defined in colModel when grouping is on. The number_of_digits by default is not defined. This options determines the length of the remaining part after the decimal point.  summaryRoundType  {   summaryRoundType :   round   |   fixed   }   This parameter works only if the summaryRound is defined. and sets the rounding method selector.  Parameter round means 'just round it and do not keep trailing zeroes'. fixed means 'round it and keep the given fixed number of digits even zeroes'.  The default option is set to round", 
            "title": "colModel options"
        }, 
        {
            "location": "/user-guide/grouping/#group-methods", 
            "text": "Bellow are the methods that can be used with the grouping.   groupingToggle(string groupid)  Toggles the group identified by groupid. The groupid is a combination of grid id plus 'ghead_' plus the current count number in the grid view. By example if the grid id is named mygrid the the second grouping value in grid will become mygridghead_1  paremeters   string groupid - the id of the group to toggle   return \nnone   groupingGroupBy(mixed name, [object options])  Perform a grouping by given name. The previous grouping is destroyed and new one is applied. A set of additional options can be set with the option parameter. The groupingView object is extended with the options parameter.  parameters   mixed name - can be name from col model or array with a names from colModel. Replaces the groupField array.  object options - a set of allowed options for groupView   return \ngrid object   groupingRemove( boolean current)  Remove the current grouping and set the grouping parameter to false. If the parameter current is set to true all the headers and footers are removed without triggering the grid. If the parameter is false (default) the grid is triggered. \nand grouping parameter is set to false. Note that the groupingView parameter is not destroyed.  parameters   boolean current - set to true removed the headers and footers without triggering the grid.   return \ngrid object", 
            "title": "Group methods"
        }, 
        {
            "location": "/user-guide/frozencols/", 
            "text": "Frozen Columns\n\n\n\n\nIt is quit easy for developers to make some columns frozen/locked within jqGrid. The locked columns do not scroll out of view when users moving horizontally across the grid. This is quite useful when you dealing with wide table with some fields should be visible permanently.\n\n\nSetup\n\n\nFirst you will need to setup which columns will be frozen/locked. This is done in colModel setting the property \nfrozen:true\n. Below is a correct setup:\n\n\n...\n\n\njQuery\n(\n#grid\n).\njqGrid\n({\n\n\n...\n\n \ncolModel\n:\n \n[\n\n   \n{\nname\n:\n \nname\n,\n \nwidth\n:\n \n70\n,\n \nfrozen\n:\ntrue\n \n},\n\n   \n{\nname\n:\n \ninvdate\n,\n \nwidth\n:\n \n80\n,\n \nalign\n:\n \ncenter\n,\n \nsorttype\n:\n \ndate\n,\n\n    \nformatter\n:\n \ndate\n,\n  \nfrozen\n:\ntrue\n},\n\n   \n{\nname\n:\n \namount\n,\n \nwidth\n:\n \n75\n,\n \nformatter\n:\n \nnumber\n,\n \nalign\n:\n \nright\n},\n\n   \n{\nname\n:\n \ntax\n,\n \nwidth\n:\n \n75\n,\n \nformatter\n:\n \nnumber\n,\n \nalign\n:\n \nright\n},\n\n   \n{\nname\n:\n \ntotal\n,\n \nwidth\n:\n \n75\n,\n \nformatter\n:\n \nnumber\n,\n \nalign\n:\n \nright\n},\n\n   \n{\nname\n:\n \nclosed\n,\n \nwidth\n:\n \n75\n,\n \nalign\n:\n \ncenter\n,\n \nformatter\n:\n \ncheckbox\n},\n\n   \n{\nname\n:\n \nship_via\n,\n \nwidth\n:\n \n100\n,\n \nalign\n:\n \ncenter\n,\n \nformatter\n:\n \nselect\n,\n\n      \nedittype\n:\n \nselect\n,\n \neditoptions\n:\n \n{\nvalue\n:\n \nFE:FedEx;TN:TNT;IN:Intim\n}},\n\n   \n{\nname\n:\n \nnote\n,\n \nwidth\n:\n \n70\n,\n \nsortable\n:\n \nfalse\n}\n\n \n],\n\n \n...\n\n\n});\n\n\n\n\n\n\nAfter this you will need to call the method which is responsible to do this:\n\n\njQuery\n(\n#grid\n).\njqGrid\n(\nsetFrozenColumns\n);\n\n\n\n\n\n\nThe method has no parameters.\n\n\n\n\nNote\n\n\nThe frozen property should be set one after other. If there is a missing frozen property in the sequence then the last position which meet this criteria will be used.\n\n\n\n\nIn the example below only the first column will be locked.\n\n\n...\n\n\njQuery\n(\n#grid\n).\njqGrid\n({\n\n\n...\n\n \ncolModel\n:\n \n[\n\n   \n{\nname\n:\n \nname\n,\n \nwidth\n:\n \n70\n,\n \nfrozen\n:\ntrue\n \n},\n\n   \n{\nname\n:\n \ninvdate\n,\n \nwidth\n:\n \n80\n,\n \nalign\n:\n \ncenter\n,\n \nsorttype\n:\n \ndate\n}\n\n   \n{\nname\n:\n \namount\n,\n \nwidth\n:\n \n75\n,\n \nalign\n:\n \nright\n,\n \nfrozen\n \n:\n \ntrue\n},\n\n   \n{\nname\n:\n \ntax\n,\n \nwidth\n:\n \n75\n,\n \nformatter\n:\n \nnumber\n,\n \nalign\n:\n \nright\n},\n\n   \n{\nname\n:\n \ntotal\n,\n \nwidth\n:\n \n75\n,\n \nformatter\n:\n \nnumber\n,\n  \nalign\n:\n \nright\n},\n\n   \n{\nname\n:\n \nclosed\n,\n \nwidth\n:\n \n75\n,\n \nalign\n:\n \ncenter\n,\n \nformatter\n:\n \ncheckbox\n}\n\n   \n{\nname\n:\n \nship_via\n,\n \nwidth\n:\n \n100\n,\n \nalign\n:\n \ncenter\n,\n \nformatter\n:\n \nselect\n,\n\n      \nedittype\n:\n \nselect\n,\n \neditoptions\n:\n \n{\nvalue\n:\n \nFE:FedEx;TN:TNT;IN:Intim\n}},\n\n   \n{\nname\n:\n \nnote\n,\n \nwidth\n:\n \n70\n,\n \nsortable\n:\n \nfalse\n}\n\n \n],\n\n \n...\n\n\n});\n\n\njQuery\n(\n#grid\n).\njqGrid\n(\nsetFrozenColumns\n);\n\n\n\n\n\n\nDestroy\n\n\nIt is possible to destroy the frozenColumns in the grid using the method destroyFrozenColumns. This method restores the grid configuration before calling the setFrozenColums\n\n\njQuery\n(\n#grid\n).\njqGrid\n(\ndestroyFrozenColumns\n);\n\n\n\n\n\n\nDynamic setup\n\n\nIt is possible to set the frozen columns dynamically. In this case it is needed to call first destroyFrozenColumns method, setup new frozen properties and call again setFrozenColumns.\n\n\nBelow example tell how to do this, making the invdate column frozen:\n\n\njQuery\n(\n#mybutton\n).\nclick\n(\nfunction\n(){\n\n   \njQuery\n(\n#grid\n)\n\n   \n.\njqGrid\n(\ndestroyFrozenColumns\n)\n\n   \n.\njqGrid\n(\nsetColProp\n,\ninvdate\n,\n \n{\nfrozen\n:\ntrue\n})\n\n   \n.\njqGrid\n(\nsetFrozenColumns\n)\n\n   \n.\ntrigger\n(\nreloadGrid\n,\n \n[{\ncurrent\n:\ntrue\n}]);\n \n// optional\n\n\n});\n\n\n\n\n\n\nNotes, Limitations\n\n\nWhen possible the setFrozenColumns method should be called as last method of the sequence dealing with the initial loading of the grid. By example if you first call frozenColumns and then filterToolbar method this will make a inconsistency of the locked columns and the rest of columns. This is valid for all methods dealing with the changing the grid presentation like toolbars, group headers and etc.\n\n\nThe frozen columns need a horizontal scroll bar. In order this to happen it is needed to set the option \nshrinkToFit\n set to false and set explicit the width of the grid. Optionally the autowidth option should be set to true in order to fit to parent container.\n\n\nIn case when the visual presentation of the grid should be changed dynamically - i.e by example the filterToolbar is set dynamically or any other similar action - it is needed first to call the method \ndestroyFrozenColumns\n, make your changes and call again \nsetFrozenColumns\n  in your script. Note that this is valid only if the visual change of grid is made.\n\n\nThe service columns for the row numbers (grid options rownumbers : true ) and the multiselect column (grid option multiselect: true) are set by default to frozen:true. This way it is not needed to set these property to frozen.\n\n\nThe following limitations are valid when deal with frozen columns - i.e the frozen columns will not set-up.\n\n\n\n\nWhen TreeGrid is enabled\n\n\nWhen SubGrid is enabled\n\n\nWhen cellEdit is enabled\n\n\nWhen inline edit is used - the frozen columns can not be edit.\n\n\nWhen sortable columns are enabled - grid parameter sortable is set to true or is function\n\n\nWhen scroll is set to true or 1\n\n\nWhen Data grouping is enabled", 
            "title": "Frozen Columns"
        }, 
        {
            "location": "/user-guide/frozencols/#frozen-columns", 
            "text": "It is quit easy for developers to make some columns frozen/locked within jqGrid. The locked columns do not scroll out of view when users moving horizontally across the grid. This is quite useful when you dealing with wide table with some fields should be visible permanently.", 
            "title": "Frozen Columns"
        }, 
        {
            "location": "/user-guide/frozencols/#setup", 
            "text": "First you will need to setup which columns will be frozen/locked. This is done in colModel setting the property  frozen:true . Below is a correct setup:  ...  jQuery ( #grid ). jqGrid ({  ... \n  colModel :   [ \n    { name :   name ,   width :   70 ,   frozen : true   }, \n    { name :   invdate ,   width :   80 ,   align :   center ,   sorttype :   date , \n     formatter :   date ,    frozen : true }, \n    { name :   amount ,   width :   75 ,   formatter :   number ,   align :   right }, \n    { name :   tax ,   width :   75 ,   formatter :   number ,   align :   right }, \n    { name :   total ,   width :   75 ,   formatter :   number ,   align :   right }, \n    { name :   closed ,   width :   75 ,   align :   center ,   formatter :   checkbox }, \n    { name :   ship_via ,   width :   100 ,   align :   center ,   formatter :   select , \n       edittype :   select ,   editoptions :   { value :   FE:FedEx;TN:TNT;IN:Intim }}, \n    { name :   note ,   width :   70 ,   sortable :   false } \n  ], \n  ...  });   After this you will need to call the method which is responsible to do this:  jQuery ( #grid ). jqGrid ( setFrozenColumns );   The method has no parameters.   Note  The frozen property should be set one after other. If there is a missing frozen property in the sequence then the last position which meet this criteria will be used.   In the example below only the first column will be locked.  ...  jQuery ( #grid ). jqGrid ({  ... \n  colModel :   [ \n    { name :   name ,   width :   70 ,   frozen : true   }, \n    { name :   invdate ,   width :   80 ,   align :   center ,   sorttype :   date } \n    { name :   amount ,   width :   75 ,   align :   right ,   frozen   :   true }, \n    { name :   tax ,   width :   75 ,   formatter :   number ,   align :   right }, \n    { name :   total ,   width :   75 ,   formatter :   number ,    align :   right }, \n    { name :   closed ,   width :   75 ,   align :   center ,   formatter :   checkbox } \n    { name :   ship_via ,   width :   100 ,   align :   center ,   formatter :   select , \n       edittype :   select ,   editoptions :   { value :   FE:FedEx;TN:TNT;IN:Intim }}, \n    { name :   note ,   width :   70 ,   sortable :   false } \n  ], \n  ...  });  jQuery ( #grid ). jqGrid ( setFrozenColumns );", 
            "title": "Setup"
        }, 
        {
            "location": "/user-guide/frozencols/#destroy", 
            "text": "It is possible to destroy the frozenColumns in the grid using the method destroyFrozenColumns. This method restores the grid configuration before calling the setFrozenColums  jQuery ( #grid ). jqGrid ( destroyFrozenColumns );", 
            "title": "Destroy"
        }, 
        {
            "location": "/user-guide/frozencols/#dynamic-setup", 
            "text": "It is possible to set the frozen columns dynamically. In this case it is needed to call first destroyFrozenColumns method, setup new frozen properties and call again setFrozenColumns.  Below example tell how to do this, making the invdate column frozen:  jQuery ( #mybutton ). click ( function (){ \n    jQuery ( #grid ) \n    . jqGrid ( destroyFrozenColumns ) \n    . jqGrid ( setColProp , invdate ,   { frozen : true }) \n    . jqGrid ( setFrozenColumns ) \n    . trigger ( reloadGrid ,   [{ current : true }]);   // optional  });", 
            "title": "Dynamic setup"
        }, 
        {
            "location": "/user-guide/frozencols/#notes-limitations", 
            "text": "When possible the setFrozenColumns method should be called as last method of the sequence dealing with the initial loading of the grid. By example if you first call frozenColumns and then filterToolbar method this will make a inconsistency of the locked columns and the rest of columns. This is valid for all methods dealing with the changing the grid presentation like toolbars, group headers and etc.  The frozen columns need a horizontal scroll bar. In order this to happen it is needed to set the option  shrinkToFit  set to false and set explicit the width of the grid. Optionally the autowidth option should be set to true in order to fit to parent container.  In case when the visual presentation of the grid should be changed dynamically - i.e by example the filterToolbar is set dynamically or any other similar action - it is needed first to call the method  destroyFrozenColumns , make your changes and call again  setFrozenColumns   in your script. Note that this is valid only if the visual change of grid is made.  The service columns for the row numbers (grid options rownumbers : true ) and the multiselect column (grid option multiselect: true) are set by default to frozen:true. This way it is not needed to set these property to frozen.  The following limitations are valid when deal with frozen columns - i.e the frozen columns will not set-up.   When TreeGrid is enabled  When SubGrid is enabled  When cellEdit is enabled  When inline edit is used - the frozen columns can not be edit.  When sortable columns are enabled - grid parameter sortable is set to true or is function  When scroll is set to true or 1  When Data grouping is enabled", 
            "title": "Notes, Limitations"
        }, 
        {
            "location": "/user-guide/colmenu/", 
            "text": "Column Menu\n\n\n\n\nWhen you interact with grid columns, you may want to be able to trigger column operations via a dedicated menu for this purpose.\n\n\nThe Guriddo jqGrid has built-in support for such a feature, which can be enabled via a single configuration setting, i.e. colMenu=true in grid options. Thus an option to display a column menu will be rendered in the grid column headers, which when activated allows  you to sort, filter, freeze, group or change the visibility of the column.\n\n\nFurthermore, this menu takes into account whether a certain column operation is disabled via the column definition, and excludes the corresponding UI from its rendering.\n\n\nWhen activeted the UI can look like this:\n\n\n\n\nSetup\n\n\nTo setup the column menu it is needed to set to true the \ncolMenu\n grid option.\n\n\n$\n(\n#grid_id\n).\njqGrid\n({\n\n  \n...\n\n  \ncolMenu\n \n:\n \ntrue\n,\n\n  \n...\n\n\n});\n\n\n\n\n\n\nWhen this is set we have a grid like the picture above.\n\n\nThe column menu uses the following properties from language file:\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \n...\n\n  \ncolmenu\n \n:\n \n{\n\n    \nsortasc\n \n:\n \nSort Ascending\n,\n\n    \nsortdesc\n \n:\n \nSort Descending\n,\n\n    \ncolumns\n \n:\n \nColumns\n,\n\n    \nfilter\n \n:\n \nFilter\n,\n\n    \ngrouping\n \n:\n \nGroup By\n,\n\n    \nungrouping\n \n:\n \nUngroup\n,\n\n    \nsearchTitle\n \n:\n \nGet items with value that:\n,\n\n    \nfreeze\n \n:\n \nFreeze\n,\n\n    \nunfreeze\n \n:\n \nUnfreeze\n,\n\n    \nreorder\n \n:\n \nMove to reorder\n\n  \n}\n\n\n};\n\n\n\n\n\n\nThese properties correspond to the menu names when the user activates it. The text in the menu can not be changed dynamically. To change the text you can either change the language file or set a property before calling the grid setup. By example to change the 'Filter' text to 'Search' you can (in case a English language is used):\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n].\ncolmenu\n.\nfilter\n \n=\n \nSearch\n;\n\n\n$\n(\n#jqgrid_id\n).\njqGrid\n({...});\n\n\n\n\n\n\nIt is possible to control the appearance of the menu of every column. This is done with the help of the following colModel options:\n\n\n\n\nboolean colmenu - when set to false the column menu is not enabled for that column\n\n\nobject coloptions - object setting which action of the menu is enabled for that columns. The object have the following properties\n\n\nsorting boolean - enables/disable sorting actions - default true\n\n\ncolumns boolean - enables/disables columns reorder and moving action - default true\n\n\nfiltering boolean - enables disables filtering action - default true\n\n\ngrouping boolean  - enables disables grouping action - default true\n\n\nfreeze boolean - enables disables freeze action - default true\n\n\n\n\n\n\n\n\nThe example below disables the column menu for OrderID column and the filter action for OrderDate column.\n\n\n$\n(\n#grid_id\n).\njqGrid\n({\n\n  \n...\n\n  \ncolMenu\n \n:\n \ntrue\n,\n\n  \ncolModel\n \n:\n \n[\n\n    \n{\nname\n:\n \nOrderID\n,\n \n...,\n \ncolmenu\n:\n \nfalse\n,...},\n\n    \n{\nname\n:\n \nCustomerID\n,...},\n\n    \n{\nname\n:\n \nOrderDate\n,...,\n \ncoloptions\n:\n \n{\n \nfiltering\n:\n \nfalse\n},...}\n\n    \n...\n\n  \n],\n\n  \n...\n\n\n});\n\n\n\n\n\n\nCurrently it is not possible to disable dynamically column menu globally and appearance of certain menu and items in it when they already set.\n\n\nActions\n\n\nSorting\n\n\nThe appearance of sorting action is controlled with \nsortiong\n property in \ncoloptions\n object in \ncolModel\n. When this option is enabled two actions appear - one for sorting Ascending and one for sorting Descending. When clicked the grid sorts on selected direction and the menu is closed.\n\nWhen this option is set to false both actions does not appear for that column.\n\n\nColumns\n\n\nThe appeariance of columns action is controlled with \ncolumns\n property in \ncoloptions\n object in \ncolModel\n. When this action is enabled, when hover with the mouse over the column item additional menu appear like in the menu below:\n\n\n\n\nThis menu contain of three columns - the first one has indicator for moving, the second one has a checkbox for show/hide the column and the third one is the label of the column.\n\n\nTo move the column to a certain position click with the mouse on the mark indicator of the desired column, hold the button and move the column to new position and release the mouse button. Moving is enabled only vertically.\n\n\nTo show/hide a column click on the checkbox of the desired column. If the state is checked the column is shown and if unchecked the column is hidden immediately.\n\n\nHidden columns does not appear in the list.\n\nIt is possible to control which columns can be show/hide using the colModel option \nhidedlg\n. If this option is set to true the columns does not appear in the list for moving and showing.\n\n\nTo disable appearance of OrderDate coulmn in column list (using the above example) do:\n\n\n$\n(\n#grid_id\n).\njqGrid\n({\n\n  \n...\n\n  \ncolMenu\n \n:\n \ntrue\n,\n\n  \ncolModel\n \n:\n \n[\n\n    \n{\nname\n:\n \nOrderID\n,\n \n...,\n \ncolmenu\n:\n \nfalse\n,...},\n\n    \n{\nname\n:\n \nCustomerID\n,...},\n\n    \n{\nname\n:\n \nOrderDate\n,...,\n \nhidedlg\n:\n \ntrue\n,\n \ncoloptions\n:\n \n{\n \nfiltering\n:\n \nfalse\n},...}\n\n    \n...\n\n  \n],\n\n  \n...\n\n\n});\n\n\n\n\n\n\nA event \ncolMenuColumnDone\n can be executed (if defined) after the columns are reordered or the check-box is selected.\n\n\nThe service columns for multiselect, row numbers and subgrid does not appear in this list\n\n\nFiltering\n\n\nThe appearance of filtering action is controlled with \nfiltering\n property in \ncoloptions\n object in \ncolModel\n. When this action is enabled, when hover with the mouse over the column item additional menu appear like in the menu below:\n\n\n\n\nWith this action is possible to search on the column using two possible values. It is possible to use only one value for searching. To change the search operations use \nsearchoptions sopt array\n. If the search operations are not changes, we use the following default operations\n\n\n[\neq\n,\n \nne\n,\n \nbw\n,\n \nbn\n,\n \new\n,\n \nen\n,\n \ncn\n,\n \nnc\n,\n \nnu\n,\n \nnn\n,\n \nin\n,\n \nni\n]\n\n\n\n\n\n\nif the field is defined as text and\n\n\n[\neq\n,\nne\n,\n \nlt\n,\n \nle\n,\n \ngt\n,\n \nge\n,\n \nnu\n,\n \nnn\n,\n \nin\n,\n \nni\n]\n\n\n\n\n\n\nif the field is defined numeric.\n\n\nThe OR or AND operand option between the two fields can be configured with the \nsearchoptions\n  \ngroupOps\n option. This option is taken from language file and is exception in settings which is valid only for the colMenu. To set only one operand AND use :\n\n\n$\n(\n#grid_id\n).\njqGrid\n({\n\n  \n...\n\n  \ncolMenu\n \n:\n \ntrue\n,\n\n  \ncolModel\n \n:\n \n[\n\n    \n{\nname\n:\n \nOrderID\n,\n \n...,\n \ncolmenu\n:\n \nfalse\n,...},\n\n    \n{\nname\n:\n \nCustomerID\n,...},\n\n    \n{\nname\n:\n \nOrderDate\n,...,\n \nsearchoptions\n:\n \n{\n \ngroupOps\n:\n[{\nop\n:\nAND\n,\n \ntext\n:\nAND\n}],...}}\n\n    \n...\n\n  \n],\n\n  \n...\n\n\n});\n\n\n\n\n\n\nThe first element in array is the default when two elements are used.\n\n\nIt is possible to set default operations and values for the field if it is activated. This is done with the grid option \ncolFilters\n. This is a grid option object where the property correspond to the name in colModel. This property is another object with the following properties:\n\n\ncolFilters\n \n:\n \n{\n\n  \ncolModel_name1\n \n:\n \n{\n\n    \noper1\n \n:\n \noper1 value\n,\n\n    \nvalue1\n:\n \nvalue1 value\n,\n\n    \nrule\n:\n \nrule value\n,\n\n    \noper2\n \n:\n \noper2 value\n,\n\n    \nvalue2\n:\n \nvalue2 value\n,\n\n  \n},\n\n  \ncolModel_name2\n \n:\n \n{\n\n    \n...\n\n  \n},\n\n  \n...\n\n\n}\n\n\n\n\n\n\n\n\noper1 is the initial operation for the field\n\n\nvalue1 is the value corresponding to the initial operation\n\n\nrule is the operand - can be OR or AND\n\n\noper2 is the second operation for the field\n\n\nvalue2 is the value corresponding to the second operation\n\n\n\n\nExample\n\n\nTo set up a initial value to the OrderDate where:\n\n\nOrderDate \n= 7/10/1996 AND OrderDate \n= 7/10/1996\n\n\n\n\n\ndo:\n\n\n$\n(\n#grid_id\n).\njqGrid\n({\n\n  \n...\n\n  \ncolMenu\n \n:\n \ntrue\n,\n\n  \ncolModel\n \n:\n \n[\n\n    \n{\nname\n:\n \nOrderDate\n,\ncolmenu\n:\n \ntrue\n,...,\n \n}\n\n    \n...\n\n  \n],\n\n  \ncolFilters\n \n:\n \n{\n\n    \nOrderDate\n \n:\n \n{\n\n      \noper1\n \n:\n \nge\n,\n\n      \nvalue1\n:\n \n7/10/1996\n,\n\n      \nrule\n:\n \nAND\n,\n\n      \noper2\n \n:\n \nle\n,\n\n      \nvalue2\n:\n \n7/11/1996\n,\n      \n    \n}\n\n  \n},\n\n  \n...\n\n\n});\n\n\n\n\n\n\nWhen the Find button is pressed the data is posted to the server is as \nString field\n.\n\n\nGrouping\n\n\nThe appearance of grouping action is controlled with \ngrouping\n property in \ncoloptions\n object in \ncolModel\n.\n\n\nWhen this option is enabled and the user click on it, a quick grouping by the selected column is performed. The action call the jqGrid method \ngroupingGroupBy\n.\n\n\nCurrently no other actions and events are possible when perform this action.\n\n\nTo remove the grouping of this column select the column Menu on this column again and select the action \nUngroup\n. The action Ungoup appear only if the column is already grouped.\n\n\nFreeze\n\n\nThe appearance of freeze action is controlled with \nfreeze\n property in \ncoloptions\n object in \ncolModel\n.\n\n\nWhen this option is enabled clicking on it we perform the following actions.\n\n\n\n\nWe found the first column which is set to frozen.\n\n\nWe move the selected column near to the first frozen column. If there is not yet frozen column the selected column is set as first one.\n\n\nWe call first the methods - \ndestroyFrozenColumns\n and then \nsetFrozenColums\n\n\n\n\nTo remove freeze to certain column click on column menu again and select \nUnfreeze\n. The columns are shifted so that the selected column is moved near to last frozen one.\n\n\nMethods\n\n\nIt is possible to add and delete a custom action in the column menu. This is done via the two new methods \ncolMenuAdd\n to add a new column menu and \ncolMenuDelete\n to delete it.\n\nBelow is a short description of the methods:\n\n\ncolMenuAdd( string colname, object options)\n\nAdd a custom column menu into the list of predefined column menu. See \ncolMenu\n option in \ngrid options\n\n\nparameters\n\n\n\n\nstring colname - the column name as set in colModel array. If the string has a value \n'all'\n the item will be added to all columns\n\n\nobject options - t with following properties and default values:\n\n\n\n\noptions = {\n  title: \nItem\n,\n  icon : styles.icon_new_item,\n  funcname: null,\n  position : \nlast\n,\n  closeOnRun : true,\n  exclude : \n,\n  id : null\n}\n\n\n\n\n\ntitle\n - the text that will appear in column menu\n\n\nicon\n - the icon associated with this menu. This should correspond to the used CSS framework name\n\n\nfuncname\n - function to be executed when the menu is selected. To this function is passed the name of the column\n\n\nposition\n - the position of the item added. Can be  \"last\" or \"first\"\n\n\ncloseOnRun\n - closes the menu after selecting the item\n\n\nexclude\n - list of columns which should be excluded. The string is a list of comma separated column names\n\n\nid\n - the id of the item when inserted into the menu. If this parameter is not set jqGrid creates internally it using the jqGrid rand functin - \n$.jgrid.randId()\n\n\n\n\ncolMenuDelete( string id)\n\nDelete custom column menu from the list of predefined column menu added with colMenuAdd method. See \ncolMenu\n option in \ngrid options\n\n\nparameters\n\n\nid\n the id which should be deleted\n\n\nAdding and deleting items in the column menu is dynamically, so it is possible to run these commands at any time. Example:\n\n\nAdding menu to all columns:\n\n\nmyfunc\n \n=\n \nfunction\n(\ncolname\n)\n \n{\n\n    \nalert\n(\ncolname\n);\n\n\n}\n\n\n$\n(\n#jqGrid\n).\njqGrid\n(\ncolMenuAdd\n,\n \nall\n,\n \n{\n\n    \nid\n \n:\n \nmyid\n,\n\n    \ntitle\n:\n \nMy menu\n,\n\n    \nfuncname\n:\n \nmyfunc\n\n\n});\n\n\n\n\n\n\nAdding menu to all columns except of column OrderID and CustomerID:\n\n\nmyfunc\n \n=\n \nfunction\n(\ncolname\n)\n \n{\n\n    \nalert\n(\ncolname\n);\n\n\n}\n\n\n$\n(\n#jqGrid\n).\njqGrid\n(\ncolMenuAdd\n,\n \nall\n,\n \n{\n\n    \nid\n \n:\n \nmyid\n,\n\n    \ntitle\n:\n \nMy menu\n,\n\n    \nfuncname\n:\n \nmyfunc\n,\n\n    \nexclude\n \nOrderID, CustomerID\n\n\n});\n\n\n\n\n\n\nDelete menu item  with id=myid:\n\n\n$\n(\n#jqGrid\n).\njqGrid\n(\ncolMenuDelete\n,\n \nmyid\n);", 
            "title": "Column menu"
        }, 
        {
            "location": "/user-guide/colmenu/#column-menu", 
            "text": "When you interact with grid columns, you may want to be able to trigger column operations via a dedicated menu for this purpose.  The Guriddo jqGrid has built-in support for such a feature, which can be enabled via a single configuration setting, i.e. colMenu=true in grid options. Thus an option to display a column menu will be rendered in the grid column headers, which when activated allows  you to sort, filter, freeze, group or change the visibility of the column.  Furthermore, this menu takes into account whether a certain column operation is disabled via the column definition, and excludes the corresponding UI from its rendering.  When activeted the UI can look like this:", 
            "title": "Column Menu"
        }, 
        {
            "location": "/user-guide/colmenu/#setup", 
            "text": "To setup the column menu it is needed to set to true the  colMenu  grid option.  $ ( #grid_id ). jqGrid ({ \n   ... \n   colMenu   :   true , \n   ...  });   When this is set we have a grid like the picture above.  The column menu uses the following properties from language file:  $ . jgrid . regional [ en ]   =   { \n   ... \n   colmenu   :   { \n     sortasc   :   Sort Ascending , \n     sortdesc   :   Sort Descending , \n     columns   :   Columns , \n     filter   :   Filter , \n     grouping   :   Group By , \n     ungrouping   :   Ungroup , \n     searchTitle   :   Get items with value that: , \n     freeze   :   Freeze , \n     unfreeze   :   Unfreeze , \n     reorder   :   Move to reorder \n   }  };   These properties correspond to the menu names when the user activates it. The text in the menu can not be changed dynamically. To change the text you can either change the language file or set a property before calling the grid setup. By example to change the 'Filter' text to 'Search' you can (in case a English language is used):  $ . jgrid . regional [ en ]. colmenu . filter   =   Search ;  $ ( #jqgrid_id ). jqGrid ({...});   It is possible to control the appearance of the menu of every column. This is done with the help of the following colModel options:   boolean colmenu - when set to false the column menu is not enabled for that column  object coloptions - object setting which action of the menu is enabled for that columns. The object have the following properties  sorting boolean - enables/disable sorting actions - default true  columns boolean - enables/disables columns reorder and moving action - default true  filtering boolean - enables disables filtering action - default true  grouping boolean  - enables disables grouping action - default true  freeze boolean - enables disables freeze action - default true     The example below disables the column menu for OrderID column and the filter action for OrderDate column.  $ ( #grid_id ). jqGrid ({ \n   ... \n   colMenu   :   true , \n   colModel   :   [ \n     { name :   OrderID ,   ...,   colmenu :   false ,...}, \n     { name :   CustomerID ,...}, \n     { name :   OrderDate ,...,   coloptions :   {   filtering :   false },...} \n     ... \n   ], \n   ...  });   Currently it is not possible to disable dynamically column menu globally and appearance of certain menu and items in it when they already set.", 
            "title": "Setup"
        }, 
        {
            "location": "/user-guide/colmenu/#actions", 
            "text": "", 
            "title": "Actions"
        }, 
        {
            "location": "/user-guide/colmenu/#sorting", 
            "text": "The appearance of sorting action is controlled with  sortiong  property in  coloptions  object in  colModel . When this option is enabled two actions appear - one for sorting Ascending and one for sorting Descending. When clicked the grid sorts on selected direction and the menu is closed. \nWhen this option is set to false both actions does not appear for that column.", 
            "title": "Sorting"
        }, 
        {
            "location": "/user-guide/colmenu/#columns", 
            "text": "The appeariance of columns action is controlled with  columns  property in  coloptions  object in  colModel . When this action is enabled, when hover with the mouse over the column item additional menu appear like in the menu below:   This menu contain of three columns - the first one has indicator for moving, the second one has a checkbox for show/hide the column and the third one is the label of the column.  To move the column to a certain position click with the mouse on the mark indicator of the desired column, hold the button and move the column to new position and release the mouse button. Moving is enabled only vertically.  To show/hide a column click on the checkbox of the desired column. If the state is checked the column is shown and if unchecked the column is hidden immediately.  Hidden columns does not appear in the list. \nIt is possible to control which columns can be show/hide using the colModel option  hidedlg . If this option is set to true the columns does not appear in the list for moving and showing.  To disable appearance of OrderDate coulmn in column list (using the above example) do:  $ ( #grid_id ). jqGrid ({ \n   ... \n   colMenu   :   true , \n   colModel   :   [ \n     { name :   OrderID ,   ...,   colmenu :   false ,...}, \n     { name :   CustomerID ,...}, \n     { name :   OrderDate ,...,   hidedlg :   true ,   coloptions :   {   filtering :   false },...} \n     ... \n   ], \n   ...  });   A event  colMenuColumnDone  can be executed (if defined) after the columns are reordered or the check-box is selected.  The service columns for multiselect, row numbers and subgrid does not appear in this list", 
            "title": "Columns"
        }, 
        {
            "location": "/user-guide/colmenu/#filtering", 
            "text": "The appearance of filtering action is controlled with  filtering  property in  coloptions  object in  colModel . When this action is enabled, when hover with the mouse over the column item additional menu appear like in the menu below:   With this action is possible to search on the column using two possible values. It is possible to use only one value for searching. To change the search operations use  searchoptions sopt array . If the search operations are not changes, we use the following default operations  [ eq ,   ne ,   bw ,   bn ,   ew ,   en ,   cn ,   nc ,   nu ,   nn ,   in ,   ni ]   if the field is defined as text and  [ eq , ne ,   lt ,   le ,   gt ,   ge ,   nu ,   nn ,   in ,   ni ]   if the field is defined numeric.  The OR or AND operand option between the two fields can be configured with the  searchoptions    groupOps  option. This option is taken from language file and is exception in settings which is valid only for the colMenu. To set only one operand AND use :  $ ( #grid_id ). jqGrid ({ \n   ... \n   colMenu   :   true , \n   colModel   :   [ \n     { name :   OrderID ,   ...,   colmenu :   false ,...}, \n     { name :   CustomerID ,...}, \n     { name :   OrderDate ,...,   searchoptions :   {   groupOps : [{ op : AND ,   text : AND }],...}} \n     ... \n   ], \n   ...  });   The first element in array is the default when two elements are used.  It is possible to set default operations and values for the field if it is activated. This is done with the grid option  colFilters . This is a grid option object where the property correspond to the name in colModel. This property is another object with the following properties:  colFilters   :   { \n   colModel_name1   :   { \n     oper1   :   oper1 value , \n     value1 :   value1 value , \n     rule :   rule value , \n     oper2   :   oper2 value , \n     value2 :   value2 value , \n   }, \n   colModel_name2   :   { \n     ... \n   }, \n   ...  }    oper1 is the initial operation for the field  value1 is the value corresponding to the initial operation  rule is the operand - can be OR or AND  oper2 is the second operation for the field  value2 is the value corresponding to the second operation   Example  To set up a initial value to the OrderDate where:  OrderDate  = 7/10/1996 AND OrderDate  = 7/10/1996  do:  $ ( #grid_id ). jqGrid ({ \n   ... \n   colMenu   :   true , \n   colModel   :   [ \n     { name :   OrderDate , colmenu :   true ,...,   } \n     ... \n   ], \n   colFilters   :   { \n     OrderDate   :   { \n       oper1   :   ge , \n       value1 :   7/10/1996 , \n       rule :   AND , \n       oper2   :   le , \n       value2 :   7/11/1996 ,       \n     } \n   }, \n   ...  });   When the Find button is pressed the data is posted to the server is as  String field .", 
            "title": "Filtering"
        }, 
        {
            "location": "/user-guide/colmenu/#grouping", 
            "text": "The appearance of grouping action is controlled with  grouping  property in  coloptions  object in  colModel .  When this option is enabled and the user click on it, a quick grouping by the selected column is performed. The action call the jqGrid method  groupingGroupBy .  Currently no other actions and events are possible when perform this action.  To remove the grouping of this column select the column Menu on this column again and select the action  Ungroup . The action Ungoup appear only if the column is already grouped.", 
            "title": "Grouping"
        }, 
        {
            "location": "/user-guide/colmenu/#freeze", 
            "text": "The appearance of freeze action is controlled with  freeze  property in  coloptions  object in  colModel .  When this option is enabled clicking on it we perform the following actions.   We found the first column which is set to frozen.  We move the selected column near to the first frozen column. If there is not yet frozen column the selected column is set as first one.  We call first the methods -  destroyFrozenColumns  and then  setFrozenColums   To remove freeze to certain column click on column menu again and select  Unfreeze . The columns are shifted so that the selected column is moved near to last frozen one.", 
            "title": "Freeze"
        }, 
        {
            "location": "/user-guide/colmenu/#methods", 
            "text": "It is possible to add and delete a custom action in the column menu. This is done via the two new methods  colMenuAdd  to add a new column menu and  colMenuDelete  to delete it. \nBelow is a short description of the methods:  colMenuAdd( string colname, object options) \nAdd a custom column menu into the list of predefined column menu. See  colMenu  option in  grid options  parameters   string colname - the column name as set in colModel array. If the string has a value  'all'  the item will be added to all columns  object options - t with following properties and default values:   options = {\n  title:  Item ,\n  icon : styles.icon_new_item,\n  funcname: null,\n  position :  last ,\n  closeOnRun : true,\n  exclude :  ,\n  id : null\n}  title  - the text that will appear in column menu  icon  - the icon associated with this menu. This should correspond to the used CSS framework name  funcname  - function to be executed when the menu is selected. To this function is passed the name of the column  position  - the position of the item added. Can be  \"last\" or \"first\"  closeOnRun  - closes the menu after selecting the item  exclude  - list of columns which should be excluded. The string is a list of comma separated column names  id  - the id of the item when inserted into the menu. If this parameter is not set jqGrid creates internally it using the jqGrid rand functin -  $.jgrid.randId()   colMenuDelete( string id) \nDelete custom column menu from the list of predefined column menu added with colMenuAdd method. See  colMenu  option in  grid options  parameters  id  the id which should be deleted  Adding and deleting items in the column menu is dynamically, so it is possible to run these commands at any time. Example:  Adding menu to all columns:  myfunc   =   function ( colname )   { \n     alert ( colname );  }  $ ( #jqGrid ). jqGrid ( colMenuAdd ,   all ,   { \n     id   :   myid , \n     title :   My menu , \n     funcname :   myfunc  });   Adding menu to all columns except of column OrderID and CustomerID:  myfunc   =   function ( colname )   { \n     alert ( colname );  }  $ ( #jqGrid ). jqGrid ( colMenuAdd ,   all ,   { \n     id   :   myid , \n     title :   My menu , \n     funcname :   myfunc , \n     exclude   OrderID, CustomerID  });   Delete menu item  with id=myid:  $ ( #jqGrid ). jqGrid ( colMenuDelete ,   myid );", 
            "title": "Methods"
        }, 
        {
            "location": "/user-guide/persiststate/", 
            "text": "Persist State\n\n\n\n\nA common requirement for web apps is to save the user customization and settings when interacting with your app, and then restore them once he/she logs back at some point in the future.\n\n\nThe Guriddo jqGrid exposes the capability to save and restore settings that were previously applied to its structure using the \n$.jgrid.saveState\n and \n$.jgrid.loadState\n methods from its API. These methods allow you to serialize the grid current state, when needed, and then recover it at certain point in time.\n\n\nSaving State\n\n\nThe method saves the current state of the grid using the Storage JavaScript feature. If the Storage is not present the grid can return the state as string.\n\n\nCalling conventions:\n\n\n...\n\n\n$\n.\njgrid\n.\nsaveState\n(\n \ngrid_id\n,\n \n[\noptions\n]);\n\n\n...\n\n\n\n\n\n\nparameters\n\n\n\n\nstring \ngrid_id\n is id of the grid. The string should not begin with '#'\n\n\nobject \noptions\n - a set of options for saving the state.\n\n\n\n\nreturn\n\nThe method return string describing the current state of the grid, but not the data.\n\n\n\n\nWarning\n\n\nWhen a saveSate method is planed to be implemented and navigator is present it is needed to set the grid option \nstoreNavOptions\n to true in order to save the build in and custom actions in the \nnavigator\n  \n\n\n\n\nTo save everthing it is needed to do:\n\n\n$\n(\n#jqGrid\n).\njqGrid\n({\n\n  \n...\n\n  \nstoreNavOptions\n \n:\n \ntrue\n,\n\n  \npager\n:\n \nPager\n\n  \n...\n\n\n});\n\n\n$\n(\n#jqGrid\n).\njqGrid\n(\nnavGrid\n,\n \nPager\n,\n \n{...});\n\n\n...\n\n\n$\n.\njgrid\n.\nsaveState\n(\n \njqGrid\n);\n\n\n\n\n\n\nSaving options\n\n\nThe object \noptions\n have the following properties with default values:\n\n\noptions\n \n=\n \n{\n\n  \nuseStorage\n \n:\n \ntrue\n,\n\n  \nstorageType\n \n:\n \nlocalStorage\n,\n\n  \nbeforeSetItem\n \n:\n \nnull\n,\n\n  \ncompression\n:\n \nfalse\n,\n\n  \ncompressionModule\n \n:\n  \nLZString\n,\n\n  \ncompressionMethod\n \n:\n \ncompressToUTF16\n,\n\n  \ndebug\n \n:\n \nfalse\n,\n\n  \nsaveData\n \n:\n \ntrue\n\n\n}\n\n\n\n\n\n\n\n\nuseStorage  - boolean - default true. Enable/disable saving the sate to Storage. If set to false use the return string which is the state of the grid without data.\n\n\nstorageType - string - default \n'localStorage'\n. Set the storage type. Can be loacalStorage or sessionStorage. For difference between these \nsee here\n\n\nbeforeSetItem - function - function to execute before to store the state to the Storage. Parameter passed to this function is the grid state as json string.\n\n\ncompression - boolean - default false. Enable/disable compression of the state before to be saved into the Storage. In order to use this it is needed to load the plugin which do the compression. See parameters below.\n\n\ncompressionModule - string - default \n'LZString'\n. The module responsible for the compression. This module can be gzip, zip or LZString. We preffer to use LZString since it is designed to compress the data in Storage.\n\n\ncompressionMethod - string - default \n'compressToUTF16'\n the method from compressionModule which compress the data. Actually using the compressionModule and compressionMethod we execute the following to compress the grid sate: \nwindow[compressionModule][compressionMethod](gridstate)\n, where gridstate is a string.\n\n\ndebug - boolean - default false. This option is used for support purposes. When set to true a save dialog appear with the data and state of the grid. Save this to a file and it can be send to the support.\n\n\nsaveData - boolean - default true. If set to false the data is not saved into the storage and when restoring a empty data is inserted to the grid.\n\n\n\n\nLoading State\n\n\nThe method restores a Guriddo jqGrid state saved with \nloadState\n . The method can be applied either on existing grid or on grid (table) definition.\n\n\nCalling convention:\n\n\n...\n\n\n$\n.\njgrid\n.\nloadState\n(\n \ngrid_id\n,\n \n[\njson_string\n],\n \n[\noptions\n]);\n\n\n...\n\n\n\n\n\n\nparameters\n\n\n\n\nstring \ngrid_id\n is id of the grid to be restored. The string should not begin with '#'. Th\n\n\nstring json_string - optitional string to be restored.\n\n\nobject \noptions\n - optional - a set of options for restoring the grid state.\n\n\n\n\nreturn\n\nnone\n\n\nLoading options\n\n\nThe object \noptions\n have the following properties with default values:\n\n\noptions\n \n=\n \n{\n\n  \nuseStorage\n \n:\n \ntrue\n,\n\n  \nstorageType\n \n:\n \nlocalStorage\n,\n\n  \nclearAfterLoad\n:\n \nfalse\n,\n  \n  \nbeforeSetGrid\n \n:\n \nnull\n,\n\n  \nafterSetGrid\n \n:\n \nnull\n,\n\n  \ndecompression\n:\n \nfalse\n,\n\n  \ndecompressionModule\n \n:\n  \nLZString\n,\n\n  \ndecompressionMethod\n \n:\n \ndecompressFromUTF16\n,\n\n  \nrestoreData\n \n:\n \ntrue\n\n\n}\n\n\n\n\n\n\n\n\nuseStorage  - boolean - default true. Enable/disable loading the sate from Storage. If set to false  a \njson_string\n parameter should be set. If use a Storeage the string can be empty.\n\n\nstorageType - string - default \n'localStorage'\n. Set the storage type for loading, previously set with \nloadState\n. Can be loacalStorage or sessionStorage. For difference between these \nsee here\n\n\nclearAfterLoad - boolean - default false. If set to true clears the jqGrid localStorage items aftre load.\n\n\nbeforeSetGrid - function - function to execute before to restore the state from the Storage. Parameter passed to this function is the grid grid options as object.\n\n\nafterSetGrid - function - function to be executed after the grid is restored. Parameters passed to this function is the grid object.\n\n\ndecompression - boolean - default false. Enable/disable decompression of the grid state before to be restored. In order to use this it is needed to load the plugin which do the decompression compressed with method in \nsaveState\n. See parameters below.\n\n\ndecompressionModule - string - default \n'LZString'\n. The module responsible for the decompression. This module can be gzip, zip or LZString. We preffer to use LZString since it is designed to compress/decompress  data in Storage.\n\n\ncompressionMethod - string - default \n'ecompressFromUTF16'\n the method from decompressionModule which decompress the data. Actually using the decompressionModule and decompressionMethod we execute the following to decompress the grid sate: \nwindow[decompressionModule][decompressionMethod](grid_string)\n, where grid_string is a compressed string.\n\n\nrestoreData - boolean - default true. If set to false the data is not restored into the grid.\n\n\n\n\n\n\nNote\n\n\nTo restore from string set the \nuseStorage\n option to false and  \njson_string\n parameter to non empty string. To restore from localStorage or sessionStorage set the \nuseStorage\n to true in options and \njson_string\n parameter to empty string\n\n\n\n\nOther methods\n\n\nThe methods below are used in \nsaveState\n and \nloadState\n methods, but actually they can be used separately to meet certain requirements.\n\n\n\n\n$.jgrid.isGridInStorage( grid_id, options )\n\n\nDetermine if the grid is saved in the sessionStorage or localStorage.\n\n\nparameters\n\n\n\n\nstring grid_id - the id of the grid without '#'.\n\n\nobject options - the only property is \n'storageType'\n with default value localStorage. Can be sessionStorage.\n\n\n\n\nreturn\n\ntrue if the grid is in storage, otherwise false.\n\n\nExample:\n\nTo check the grid in session storage do:\n\n\nif\n(\n \n$\n.\njgrid\n.\nisGridInStorage\n(\ngrid\n,\n \n{\nstorageType\n:\nsessionStorage\n})\n \n)\n \n{\n\n  \n// do something\n\n\n}\n \nelse\n \n{\n\n  \nalert\n(\ngrid is not in session storage\n);\n\n\n}\n\n\n\n\n\n\n\n\n$.jgrid.setReginal( grid_id, [options] )\n\n\nChange the language in grid dynamically. This method uses Storage to perform its action. For more information refer \nChange language dynamically\n\n\nparameters\n\n\n\n\nstring grid_id - the id of the grid. This should be the id of a table element.\n\n\nobject options - a set of options for saving the grid state and restore it. Actually the options can contain any valid options from loadSate and saveState methods above, and the option \nregional\n to change the last used language language.\n\n\n\n\nreturn\n\nnone\n\n\n\n\n$.jgrid.jqGridImport( grid_id, options )\n\n\nCreate a jqGrid from json or xml string, created with \njqGridExport\n method (see below) with possibility to load the parameter data via ajax.\n\n\nparameters\n\n\n\n\nstring grid_id - the id of the grid. This should be the id of a table element.\n\n\nobject options - a set of options for creating jqgrid. See the default values and description below.\n\n\n\n\nreturn\n\nnone\n\n\nThe options parameter have the following properties and default values:\n\n\noptions\n \n=\n \n{\n\n  \nimptype\n \n:\n \nxml\n,\n\n  \nimpstring\n:\n \n,\n\n  \nimpurl\n:\n \n,\n\n  \nmtype\n:\n \nGET\n,\n\n  \nimpData\n \n:\n \n{},\n\n  \nxmlGrid\n \n:\n{\n\n    \nconfig\n \n:\n \nroot\ngrid\n,\n\n    \ndata\n:\n \nroot\nrows\n\n  \n},\n\n  \njsonGrid\n \n:\n{\n\n    \nconfig\n \n:\n \ngrid\n,\n\n    \ndata\n:\n \ndata\n\n  \n},\n\n  \najaxOptions\n \n:\n{},\n\n  \nimportComplete\n \n:\n \nnull\n\n\n}\n\n\n\n\n\n\n\n\nstring imptype. Default is 'xml'. Determine how the data parameters ar obtained to construct the grid. Can be 'xml', 'json', 'xmlstring', 'jsonstring'. If a xml or json is set a ajax call is set to obtain the data. If 'xmlstring' or 'jsonstring' is used a local string should be used. See below.\n\n\nstring impstring. This parameter should be set if \nimptype\n is 'xmlstring' or 'jsonstring' and is actually the string exported with jqGridExport.\n\n\nstring impurl - valid url to the configuration when \nimptype\n xml or json. The data is obtained via ajax request\n\n\nsting mtype - default 'GET'.  Determines the type of request. Can be GET or POST\n\n\nobject impData  - default empty object. Additional data that can be passed to the url in pair name:value\n\n\nobject xmlGrid - describes from where to read the xml configuration and from where the data if any. See the default values above. The option config describes the configuration (jqGrid options) tag. The option data describes the data tag.\n\n\nobject jsonGrid - describes from where to read the json configuration and from where the data if any. See the default values above. The option config describes the configuration (jqGrid options) tag. The option data describes the data tag.\n\n\nobject ajaxOptions -  Additional options which can be passed to the ajax request\n\n\nfunction importComplete.  This event is called after the successfully import and when the grid is constructed. To this event we pas the request from server. Use this event to set additional parameters in the grid or to construct the navigator.\n\n\n\n\njqGridExport( options )\n\n\nExport the current grid configuration as string.\n\n\nCalling convention:\n\n\n(\n#grid_id\n).\njqGrid\n(\njqGridExport\n,\n \noptions\n);\n\n\n\n\n\n\nWhere\n\n\n\n\nstring grid_id is the id of the already constructed grid\n\n\nobject options is object of pair name:value to set different configuration listed bellow\n\n\n\n\n\n\nNote\n\n\nPlease take in account how this method is called in difference to the previous one.\n\n\n\n\noptions\n \n=\n \n{\n\n  \nexptype\n \n:\n \nxmlstring\n,\n\n  \nroot\n:\n \ngrid\n,\n\n  \nident\n:\n \n\\t\n,\n\n  \naddOptions\n \n:\n \n{}\n\n\n}\n\n\n\n\n\n\n\n\nstring exptype. Determines the type of the export. Two possible values are accepted - xmlstring - the grid configuration is exported as xml string and jsonstring - the configuration is exported as jsonstring   xmlstring\n\n\nstring root   . This element set the name of the root element when we export the data - i.e. the grid configuration is enclosed in this element. For xmlstring the exported data can look like this: \nrootelement\njqgrid_configuration \n/rootelement\n. For json string we have \n{rootelement:{grid_configuration}}\n. Deafult is 'grid'\n\n\nstring ident. Tab or indent string for pretty output formatting   Default \n\\t\n\n\n\n\nSince some columns in the grid are created dynamically (row numbers, subgrids and etc) the export method intelligently removes all the not needed data and make the string configuration ready for use in jqGridImport\n\n\n\n\nWarning\n\n\nWhen using these methods the pager parameter in grid options should not be set as : \npager: jQuery(\"\"#mypager\")\n but as \npager : \"#mypager\"\n or \n pager : \"mypager\"\n otherwise the import or export will not work.\n\n\n\n\n\n\nNote\n\n\nThe export respectivley the import methods have some limitations. When the export is called,  exported is only the grid configuration and the related events. The navigator is not exported. In order to do this you should manually construct the navigator in the jqGridImport using the importComplete event.", 
            "title": "Persist state"
        }, 
        {
            "location": "/user-guide/persiststate/#persist-state", 
            "text": "A common requirement for web apps is to save the user customization and settings when interacting with your app, and then restore them once he/she logs back at some point in the future.  The Guriddo jqGrid exposes the capability to save and restore settings that were previously applied to its structure using the  $.jgrid.saveState  and  $.jgrid.loadState  methods from its API. These methods allow you to serialize the grid current state, when needed, and then recover it at certain point in time.", 
            "title": "Persist State"
        }, 
        {
            "location": "/user-guide/persiststate/#saving-state", 
            "text": "The method saves the current state of the grid using the Storage JavaScript feature. If the Storage is not present the grid can return the state as string.  Calling conventions:  ...  $ . jgrid . saveState (   grid_id ,   [ options ]);  ...   parameters   string  grid_id  is id of the grid. The string should not begin with '#'  object  options  - a set of options for saving the state.   return \nThe method return string describing the current state of the grid, but not the data.   Warning  When a saveSate method is planed to be implemented and navigator is present it is needed to set the grid option  storeNavOptions  to true in order to save the build in and custom actions in the  navigator      To save everthing it is needed to do:  $ ( #jqGrid ). jqGrid ({ \n   ... \n   storeNavOptions   :   true , \n   pager :   Pager \n   ...  });  $ ( #jqGrid ). jqGrid ( navGrid ,   Pager ,   {...});  ...  $ . jgrid . saveState (   jqGrid );", 
            "title": "Saving State"
        }, 
        {
            "location": "/user-guide/persiststate/#saving-options", 
            "text": "The object  options  have the following properties with default values:  options   =   { \n   useStorage   :   true , \n   storageType   :   localStorage , \n   beforeSetItem   :   null , \n   compression :   false , \n   compressionModule   :    LZString , \n   compressionMethod   :   compressToUTF16 , \n   debug   :   false , \n   saveData   :   true  }    useStorage  - boolean - default true. Enable/disable saving the sate to Storage. If set to false use the return string which is the state of the grid without data.  storageType - string - default  'localStorage' . Set the storage type. Can be loacalStorage or sessionStorage. For difference between these  see here  beforeSetItem - function - function to execute before to store the state to the Storage. Parameter passed to this function is the grid state as json string.  compression - boolean - default false. Enable/disable compression of the state before to be saved into the Storage. In order to use this it is needed to load the plugin which do the compression. See parameters below.  compressionModule - string - default  'LZString' . The module responsible for the compression. This module can be gzip, zip or LZString. We preffer to use LZString since it is designed to compress the data in Storage.  compressionMethod - string - default  'compressToUTF16'  the method from compressionModule which compress the data. Actually using the compressionModule and compressionMethod we execute the following to compress the grid sate:  window[compressionModule][compressionMethod](gridstate) , where gridstate is a string.  debug - boolean - default false. This option is used for support purposes. When set to true a save dialog appear with the data and state of the grid. Save this to a file and it can be send to the support.  saveData - boolean - default true. If set to false the data is not saved into the storage and when restoring a empty data is inserted to the grid.", 
            "title": "Saving options"
        }, 
        {
            "location": "/user-guide/persiststate/#loading-state", 
            "text": "The method restores a Guriddo jqGrid state saved with  loadState  . The method can be applied either on existing grid or on grid (table) definition.  Calling convention:  ...  $ . jgrid . loadState (   grid_id ,   [ json_string ],   [ options ]);  ...   parameters   string  grid_id  is id of the grid to be restored. The string should not begin with '#'. Th  string json_string - optitional string to be restored.  object  options  - optional - a set of options for restoring the grid state.   return \nnone", 
            "title": "Loading State"
        }, 
        {
            "location": "/user-guide/persiststate/#loading-options", 
            "text": "The object  options  have the following properties with default values:  options   =   { \n   useStorage   :   true , \n   storageType   :   localStorage , \n   clearAfterLoad :   false ,   \n   beforeSetGrid   :   null , \n   afterSetGrid   :   null , \n   decompression :   false , \n   decompressionModule   :    LZString , \n   decompressionMethod   :   decompressFromUTF16 , \n   restoreData   :   true  }    useStorage  - boolean - default true. Enable/disable loading the sate from Storage. If set to false  a  json_string  parameter should be set. If use a Storeage the string can be empty.  storageType - string - default  'localStorage' . Set the storage type for loading, previously set with  loadState . Can be loacalStorage or sessionStorage. For difference between these  see here  clearAfterLoad - boolean - default false. If set to true clears the jqGrid localStorage items aftre load.  beforeSetGrid - function - function to execute before to restore the state from the Storage. Parameter passed to this function is the grid grid options as object.  afterSetGrid - function - function to be executed after the grid is restored. Parameters passed to this function is the grid object.  decompression - boolean - default false. Enable/disable decompression of the grid state before to be restored. In order to use this it is needed to load the plugin which do the decompression compressed with method in  saveState . See parameters below.  decompressionModule - string - default  'LZString' . The module responsible for the decompression. This module can be gzip, zip or LZString. We preffer to use LZString since it is designed to compress/decompress  data in Storage.  compressionMethod - string - default  'ecompressFromUTF16'  the method from decompressionModule which decompress the data. Actually using the decompressionModule and decompressionMethod we execute the following to decompress the grid sate:  window[decompressionModule][decompressionMethod](grid_string) , where grid_string is a compressed string.  restoreData - boolean - default true. If set to false the data is not restored into the grid.    Note  To restore from string set the  useStorage  option to false and   json_string  parameter to non empty string. To restore from localStorage or sessionStorage set the  useStorage  to true in options and  json_string  parameter to empty string", 
            "title": "Loading options"
        }, 
        {
            "location": "/user-guide/persiststate/#other-methods", 
            "text": "The methods below are used in  saveState  and  loadState  methods, but actually they can be used separately to meet certain requirements.   $.jgrid.isGridInStorage( grid_id, options )  Determine if the grid is saved in the sessionStorage or localStorage.  parameters   string grid_id - the id of the grid without '#'.  object options - the only property is  'storageType'  with default value localStorage. Can be sessionStorage.   return \ntrue if the grid is in storage, otherwise false.  Example: \nTo check the grid in session storage do:  if (   $ . jgrid . isGridInStorage ( grid ,   { storageType : sessionStorage })   )   { \n   // do something  }   else   { \n   alert ( grid is not in session storage );  }    $.jgrid.setReginal( grid_id, [options] )  Change the language in grid dynamically. This method uses Storage to perform its action. For more information refer  Change language dynamically  parameters   string grid_id - the id of the grid. This should be the id of a table element.  object options - a set of options for saving the grid state and restore it. Actually the options can contain any valid options from loadSate and saveState methods above, and the option  regional  to change the last used language language.   return \nnone   $.jgrid.jqGridImport( grid_id, options )  Create a jqGrid from json or xml string, created with  jqGridExport  method (see below) with possibility to load the parameter data via ajax.  parameters   string grid_id - the id of the grid. This should be the id of a table element.  object options - a set of options for creating jqgrid. See the default values and description below.   return \nnone  The options parameter have the following properties and default values:  options   =   { \n   imptype   :   xml , \n   impstring :   , \n   impurl :   , \n   mtype :   GET , \n   impData   :   {}, \n   xmlGrid   : { \n     config   :   root grid , \n     data :   root rows \n   }, \n   jsonGrid   : { \n     config   :   grid , \n     data :   data \n   }, \n   ajaxOptions   : {}, \n   importComplete   :   null  }    string imptype. Default is 'xml'. Determine how the data parameters ar obtained to construct the grid. Can be 'xml', 'json', 'xmlstring', 'jsonstring'. If a xml or json is set a ajax call is set to obtain the data. If 'xmlstring' or 'jsonstring' is used a local string should be used. See below.  string impstring. This parameter should be set if  imptype  is 'xmlstring' or 'jsonstring' and is actually the string exported with jqGridExport.  string impurl - valid url to the configuration when  imptype  xml or json. The data is obtained via ajax request  sting mtype - default 'GET'.  Determines the type of request. Can be GET or POST  object impData  - default empty object. Additional data that can be passed to the url in pair name:value  object xmlGrid - describes from where to read the xml configuration and from where the data if any. See the default values above. The option config describes the configuration (jqGrid options) tag. The option data describes the data tag.  object jsonGrid - describes from where to read the json configuration and from where the data if any. See the default values above. The option config describes the configuration (jqGrid options) tag. The option data describes the data tag.  object ajaxOptions -  Additional options which can be passed to the ajax request  function importComplete.  This event is called after the successfully import and when the grid is constructed. To this event we pas the request from server. Use this event to set additional parameters in the grid or to construct the navigator.   jqGridExport( options )  Export the current grid configuration as string.  Calling convention:  ( #grid_id ). jqGrid ( jqGridExport ,   options );   Where   string grid_id is the id of the already constructed grid  object options is object of pair name:value to set different configuration listed bellow    Note  Please take in account how this method is called in difference to the previous one.   options   =   { \n   exptype   :   xmlstring , \n   root :   grid , \n   ident :   \\t , \n   addOptions   :   {}  }    string exptype. Determines the type of the export. Two possible values are accepted - xmlstring - the grid configuration is exported as xml string and jsonstring - the configuration is exported as jsonstring   xmlstring  string root   . This element set the name of the root element when we export the data - i.e. the grid configuration is enclosed in this element. For xmlstring the exported data can look like this:  rootelement jqgrid_configuration  /rootelement . For json string we have  {rootelement:{grid_configuration}} . Deafult is 'grid'  string ident. Tab or indent string for pretty output formatting   Default  \\t   Since some columns in the grid are created dynamically (row numbers, subgrids and etc) the export method intelligently removes all the not needed data and make the string configuration ready for use in jqGridImport   Warning  When using these methods the pager parameter in grid options should not be set as :  pager: jQuery(\"\"#mypager\")  but as  pager : \"#mypager\"  or   pager : \"mypager\"  otherwise the import or export will not work.    Note  The export respectivley the import methods have some limitations. When the export is called,  exported is only the grid configuration and the related events. The navigator is not exported. In order to do this you should manually construct the navigator in the jqGridImport using the importComplete event.", 
            "title": "Other methods"
        }, 
        {
            "location": "/user-guide/exporting/", 
            "text": "Exporting\n\n\n\n\nWhen using Guriddo jqGrid, it is often useful and important to export your data to MS Excel, PDF or CSV file formats in order to make it accessible offline, share it with other users, etc.\n\n\nThe Guriddo jqGrid JS grid provides client Excel, PDF an CSV export functionality (server-agnostic) which can be directly utilized to serve the purpose to share data in the aforementioned ways. To enable it, you can trigger export by invoking the exportToExcel, exportToPdf and exportToCsv methods from the client API of the grid.\n\n\nAdditionally, you have the option to customize the rows/columns and cells of the exported file by intercepting the export event.\n\n\nCommon rules\n\n\nBelow are common rules which are valid for all export methods.\n\n\n\n\nThe methods export data if \ndatatype\n parameter is set to local or the loadonce parameter is set to true.\n\n\nThe methods does not export data which is requested at server - datatype is json or xml.\n\n\nThe methods export the current data set, which means that it exports filtered, sorted and etc data.\n\n\nThe \nhidden\n columns are not included into the export\n\n\nThe columns with property \nexportcol\n : false in colModel will be not exported\n\n\nWhen a custom formatter is used, options parameter is extended with a properties:  \nisExported\n  which in this case is set to true and \nexporttype\n which can be \npdf, csv or excel\n . This allow custom formatting when export occurred for a different export type.\n\n\n\n\nExport to CSV\n\n\nA CSV is a comma separated values file/string which allows data to be saved in a table structured format. CSVs look like a garden-variety spreadsheet but with a .csv extension (Traditionally they take the form of a text file containing information separated by commas, hence the name).\n\n\nCSV files can be used with any spreadsheet program, such as Microsoft Excel, Open Office Calc, or Google Spreadsheets. They differ from other spreadsheet file types in that you can only have a single sheet in a file, they can not save cell, column, or row styling, and can not save formulas\n\n\nThis method does not require additional plugin or external programs. When called the method either propmt to save the exported data to a CSV file or it can return the exported data as CSV string depending on configuration (see below).\n\n\nTo export to CSV file format simple call the method:\n\n\n$\n(\n#grid_id\n).\njqGrid\n(\nexportToCsv\n,\n \noptions\n);\n\n\n\n\n\n\nWhere options is a object with a following default properties:\n\n\noptions\n \n=\n \n{\n\n  \nseparator\n:\n \n,\n,\n\n  \nseparatorReplace\n \n:\n \n \n,\n\n  \nquote\n \n:\n \n,\n\n  \nescquote\n \n:\n \n,\n\n  \nnewLine\n \n:\n \n\\r\\n\n,\n\n  \nreplaceNewLine\n \n:\n \n \n,\n\n  \nincludeCaption\n \n:\n \ntrue\n,\n\n  \nincludeLabels\n \n:\n \ntrue\n,\n\n  \nincludeGroupHeader\n \n:\n \ntrue\n,\n\n  \nincludeFooter\n:\n \ntrue\n,\n\n  \nfileName\n \n:\n \njqGridExport.csv\n,\n\n  \nmimetype\n \n:\n \ntext/csv;charset=utf-8\n,\n\n  \nreturnAsString\n \n:\n \nfalse\n\n\n}\n\n\n\n\n\n\n\n\nseparator - string - defines the separator between the fields\n\n\nseparatorReplace - string - string which replaces the separator which can be contained into the field string\n\n\nquote - string - the test which enclosed the field\n\n\nnewLine - string - the characters put at end of each row for new line\n\n\nreplaceNewLine -  string - replace the new line if it is contained into the data field\n\n\nincludeCaption - boolean - if false the grid caption will be not exported. Default is true\n\n\nincludeLabels - boolean - if false the grid header columns will be not exported. Default is true.\n\n\nincludeGroupHeader boolean - if set to false the group header will be not exported if they are activated. Default is true.\n\n\nincludeFooter - boolean - if false the footer row will be not included into the export if it is defined. Default is true.\n\n\nfileName - string - the file name to save when data is exported. Default jqGridExport.csv\n\n\nmimetype - string - a way of identifying files on the Internet according to their nature and format in our case CSV type of data. Usually this parameter should not be changed.\n\n\nreturnAsString - boolean - if set to true the data is returned as CSV string\n\n\n\n\nExport to Excel\n\n\n(Excel Open XML)\n\n\nA file with the XLSX file extension is a Microsoft Excel Open XML Format Spreadsheet file. It's an XML-based spreadsheet file created by Microsoft Excel version 2007 and later.\n\n\nXLSX files organize data in cells that are stored in worksheets, which are in turn stored in workbooks, which are files that contain multiple worksheets. The cells are positioned by rows and columns and can contain styles, formatting, math functions, and more.\n\n\nSpreadsheet files made in earlier versions of Excel are saved in the XLS format. Excel files that support macros are XLSM files\n\n\njqGrid export the data to Microsoft Excel Open XML Format only.\n\n\nIn order to use the method additional module is needed to be loaded. The name of the module is \nJSZip\n. The module is included into the package. More about the installation of this module can be seen \nhere\n. The JSZip can be loaded via cdnjs.\n\n\nIf the JSZip module is not loaded the export to Excel will fail.\n\n\nTo export to Excel it is needed to load JSZip\n\n\nscript\n \ntype\n=\ntext/javascript\n \nlanguage\n=\njavascript\n \nsrc\n=\n//cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min.js\n/\nscript\n\n\n\n\n\n\nand call the method\n\n\n$\n(\n#grid_id\n).\njqGrid\n(\nexportToExcel\n,\n \noptions\n);\n\n\n\n\n\n\nWhere options is a object with the following default properties:\n\n\noptions\n \n=\n \n{\n\n  \nincludeLabels\n \n:\n \ntrue\n,\n\n  \nincludeGroupHeader\n \n:\n \ntrue\n,\n\n  \nincludeFooter\n:\n \ntrue\n,\n\n  \nfileName\n \n:\n \njqGridExport.xlsx\n,\n\n  \nmimetype\n \n:\n \napplication/vnd.openxmlformats-officedocument.spreadsheetml.sheet\n,\n\n  \nmaxlength\n \n:\n \n40\n,\n\n  \nonBeforeExport\n \n:\n \nnull\n,\n\n  \nreplaceStr\n \n:\n \nnull\n\n\n}\n\n\n\n\n\n\n\n\nincludeLabels - boolean - if false the grid header columns will be not exported. Default is true.\n\n\nincludeGroupHeader - boolean - if set to false the group header will be not exported if they are activated. Default is true.\n\n\nincludeFooter - boolean - if false the footer row will be not included into the export if it is defined. Default is true.\n\n\nfileName - string - the file name to save when data is exported. Default jqGridExport.xlsx\n\n\nmimetype - string - a way of identifying files on the Internet according to their nature and format in our case Excel Open XML type of data. Usually this parameter should not be changed.\n\n\nmaxlength - integer - set the max length of the visible string data\n\n\nonBeforeExport - event - The event  raises before building the zip file and is used as custom function to modify the XML document before it is exported. Parameter passed to this event is the exported XML document.\n\n\nreplaceStr - event - custom event to parse the string data before inserted into the XML document. Parameter passed to this event is a string value.\n\n\n\n\nWhen called the method open a save dialog with the exported data. Select Save to save the file or Open to open it with the associated application.\n\n\nThe export to Excel method recognizes three data types when exported - numeric, string and date. Note that the data is exported as it is seen into the grid - i.e formatted with formatters if they are used.\n\n\nBy default the string fields are parsed for \"\n\" and \"\n\" and these are replaced with their HTML equivalent \nlt;\n and \ngt;\n\n\nExport to Pdf\n\n\n(Portable Document Format)\n\n\nPortable Document Format (PDF) is a file format used to present and exchange documents reliably, independent of software, hardware, or operating system. Invented by Adobe, PDF is now an open standard maintained by the International Organization for Standardization (ISO). PDFs can contain links and buttons, form fields, audio, video, and business logic.\n\n\nToday PDF is the most used exchange document format.\n\n\njqGrid support export of its data to PDF.\n\n\nIn order to use the method additional module is needed to be loaded. The name of the module is \npdfmake\n. The module is included into the package. More about the installation of this module can be seen \nhere\n. The pdfmake and vfs_fonts can be loaded via cdn.\n\n\n\n\nWarning\n\n\nSince the pdf creation is a heavy work, please use the method in relative small data set. Using the script on data set with more than 300 rows can cause problems and memory leaks.\n\n\n\n\nTo export to PDF it is needed to load the following javascripts\n\n\nscript\n \ntype\n=\ntext/javascript\n \nlanguage\n=\njavascript\n \nsrc\n=\n//cdn.rawgit.com/bpampuch/pdfmake/0.1.26/build/pdfmake.min.js\n   \n/\nscript\n\n\nscript\n \ntype\n=\ntext/javascript\n \nlanguage\n=\njavascript\n \nsrc\n=\n//cdn.rawgit.com/bpampuch/pdfmake/0.1.26/build/vfs_fonts.js\n/\nscript\n\n\n\n\n\n\nand call the method\n\n\n$\n(\n#grid_id\n).\njqGrid\n(\nexportToPdf\n,\n \noptions\n);\n\n\n\n\n\n\nwhere the options is a object with the following properties and default values:\n\n\noptions\n \n=\n \n{\n\n  \ntitle\n:\n \nnull\n,\n\n  \norientation\n:\n \nportrait\n,\n\n  \npageSize\n:\n \nA4\n,\n\n  \ndescription\n:\n \nnull\n,\n\n  \nonBeforeExport\n:\n \nnull\n,\n\n  \ndownload\n:\n \ndownload\n,\n\n  \nincludeLabels\n \n:\n \ntrue\n,\n\n  \nincludeGroupHeader\n \n:\n \ntrue\n,\n\n  \nincludeFooter\n:\n \ntrue\n,\n\n  \nfileName\n \n:\n \njqGridExport.pdf\n,\n\n  \nmimetype\n \n:\n \napplication/pdf\n  \n\n}\n\n\n\n\n\n\n\n\ntitle - string - The title of the exported data. Printed only once at top of the first page.\n\n\norientation - string - defines the orientation of the page. Can be 'portrait' or 'landscape'. Default is 'portrait'.\n\n\npageSize - string - defines the size of the page. Default is 'A4'. For all possible values see \nhere\n\n\ndescription - string - Free text which is printed after the title at first page. Default null.\n\n\ndownload - string - defines how to handle the PDF. Available two values - 'open' - open the PDF in a new window or 'download' - download the PDF with file name set in \nfileName\n (see below)\n\n\nincludeLabels - boolean - if false the grid header columns will be not exported. Default is true.\n\n\nincludeGroupHeader - boolean - if set to false the group header will be not exported if they are activated. Default is true.\n\n\nincludeFooter - boolean - if false the footer row will be not included into the export if it is defined. Default is true.\n\n\nfileName - string - the file name to save when data is exported. Default jqGridExport.pdf\n\n\nmimetype - string - a way of identifying files on the Internet according to their nature and format in our case PDF type of data. Usually this parameter should not be changed.\n\n\nonBeforeExport - event - The event  raises before building the PDF file and is used as custom function to modify the PDF document definition before it is exported. Parameter passed to this event is the document definition object. For more information refer the \npdfmake documentation here\n. See below the default settings for document definition\n\n\n\n\nThe default settings for the document before PDF export are follow:\n\n\nvar\n \ndocumentDefinition\n \n=\n \n{\n\n  \npageSize\n:\n \noptions\n.\npageSize\n,\n\n  \npageOrientation\n:\n \nooptions\n.\norientation\n,\n\n  \ncontent\n:\n \n[\n\n    \n{\n\n      \nstyle\n \n:\n \ntableExample\n,\n\n      \nwidths\n \n:\n \njqgrid\n.\nwidths\n,\n\n      \ntable\n:\n \n{\n\n        \nheaderRows\n:\n \n0\n,\n \n//or 1\n\n        \nbody\n:\n \njqgrid\n.\nrows\n\n      \n}\n\n    \n}\n\n  \n],\n\n  \nstyles\n:\n \n{\n\n    \ntableHeader\n:\n \n{\n\n      \nbold\n:\n \ntrue\n,\n\n      \nfontSize\n:\n \n11\n,\n\n      \ncolor\n:\n \n#2e6e9e\n,\n\n      \nfillColor\n:\n \n#dfeffc\n,\n\n      \nalignment\n:\n \ncenter\n\n    \n},\n\n    \ntableBody\n:\n \n{\n\n      \nfontSize\n:\n \n10\n\n    \n},\n\n    \ntableFooter\n:\n \n{\n\n      \nbold\n:\n \ntrue\n,\n\n      \nfontSize\n:\n \n11\n,\n\n      \ncolor\n:\n \n#2e6e9e\n,\n\n      \nfillColor\n:\n \n#dfeffc\n\n    \n},\n\n    \ntitle\n:\n \n{\n\n      \nalignment\n:\n \ncenter\n,\n\n      \nfontSize\n:\n \n15\n\n    \n},\n\n    \ndescription\n:\n \n{}\n\n  \n},\n\n  \ndefaultStyle\n:\n \n{\n\n    \nfontSize\n:\n \n10\n\n  \n}\n\n\n};\n\n\n\n\n\n\nThis definition is passed to the onBeforeExport event and it can be modified for custom purposes.\n\n\nBelow example shows how to make the body font of the table body smaller using the onBeforeExport event.\n\n\n$\n(\n#export\n).\non\n(\nclick\n,\n \nfunction\n(){\n\n  \n$\n(\n#jqGrid\n).\njqGrid\n(\nexportToPdf\n,{\n\n    \n...\n\n    \nonBeforeExport\n \n:\n \nfunction\n(\n \ndoc\n \n)\n \n{\n\n      \ndoc\n.\nstyles\n.\ntableBody\n.\nfontSize\n \n=\n \n8\n;\n\n    \n},\n\n    \n...\n\n  \n});\n\n\n});\n\n\n\n\n\n\nExport to Html\n\n\nHTML is the standard markup language for creating web pages and web applications. With Cascading Style Sheets (CSS) and JavaScript it forms a triad of cornerstone technologies for the World Wide Web. Web browsers receive HTML documents from a web server or from local storage and render them into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for the appearance of the document.\n\n\nThis method does not require additional plugin or external programs. When called the method either shows a new html page (with option to print) or it can return the exported data as HTML string depending on configuration (see below).\n\n\nTo export to HTML format simple call the method:\n\n\n$\n(\n#grid_id\n).\njqGrid\n(\nexportToHtml\n,\n \noptions\n);\n\n\n\n\n\n\nWhere options is a object with a following default properties:\n\n\noptions\n \n=\n \n{\n\n    \ntitle\n:\n \n,\n\n    \nonBeforeExport\n:\n \nnull\n,\n\n    \nincludeLabels\n \n:\n \ntrue\n,\n\n    \nincludeGroupHeader\n \n:\n \ntrue\n,\n\n    \nincludeFooter\n:\n \ntrue\n,\n\n    \ntableClass\n \n:\n \njqgridprint\n,\n\n    \nautoPrint\n \n:\n \nfalse\n,\n\n    \ntopText\n \n:\n \n,\n\n    \nbottomText\n \n:\n \n,\n\n    \nreturnAsString\n \n:\n \nfalse\n\n\n}\n\n\n\n\n\n\n\n\nonBeforeExport - event - The event  raises before building the HTML file and is used as custom function to modify the HTML document before it is exported. Parameter passed to this event is the exported html document.\n\n\nincludeLabels - boolean - if false the grid header columns will be not exported. Default is true.\n\n\nincludeGroupHeader - boolean - if set to false the group header will be not exported if they are activated. Default is true.\n\n\nincludeFooter - boolean - if false the footer row will be not included into the export if it is defined. Default is true.\n\n\ntableClass - string - class to be added in the table when exported. Can be added more classes separated with space \n\n\nautoPrint - boolean - if set to true after creating the html document in new browser window a print dialog appear automatically.\n\n\ntopText - string - text included at the top of the document\n\n\nbottomText - string - text included at the bottom of the document\n\n\nreturnAsString - boolean - if set to true the html document is returned as string", 
            "title": "Exporting"
        }, 
        {
            "location": "/user-guide/exporting/#exporting", 
            "text": "When using Guriddo jqGrid, it is often useful and important to export your data to MS Excel, PDF or CSV file formats in order to make it accessible offline, share it with other users, etc.  The Guriddo jqGrid JS grid provides client Excel, PDF an CSV export functionality (server-agnostic) which can be directly utilized to serve the purpose to share data in the aforementioned ways. To enable it, you can trigger export by invoking the exportToExcel, exportToPdf and exportToCsv methods from the client API of the grid.  Additionally, you have the option to customize the rows/columns and cells of the exported file by intercepting the export event.", 
            "title": "Exporting"
        }, 
        {
            "location": "/user-guide/exporting/#common-rules", 
            "text": "Below are common rules which are valid for all export methods.   The methods export data if  datatype  parameter is set to local or the loadonce parameter is set to true.  The methods does not export data which is requested at server - datatype is json or xml.  The methods export the current data set, which means that it exports filtered, sorted and etc data.  The  hidden  columns are not included into the export  The columns with property  exportcol  : false in colModel will be not exported  When a custom formatter is used, options parameter is extended with a properties:   isExported   which in this case is set to true and  exporttype  which can be  pdf, csv or excel  . This allow custom formatting when export occurred for a different export type.", 
            "title": "Common rules"
        }, 
        {
            "location": "/user-guide/exporting/#export-to-csv", 
            "text": "A CSV is a comma separated values file/string which allows data to be saved in a table structured format. CSVs look like a garden-variety spreadsheet but with a .csv extension (Traditionally they take the form of a text file containing information separated by commas, hence the name).  CSV files can be used with any spreadsheet program, such as Microsoft Excel, Open Office Calc, or Google Spreadsheets. They differ from other spreadsheet file types in that you can only have a single sheet in a file, they can not save cell, column, or row styling, and can not save formulas  This method does not require additional plugin or external programs. When called the method either propmt to save the exported data to a CSV file or it can return the exported data as CSV string depending on configuration (see below).  To export to CSV file format simple call the method:  $ ( #grid_id ). jqGrid ( exportToCsv ,   options );   Where options is a object with a following default properties:  options   =   { \n   separator :   , , \n   separatorReplace   :     , \n   quote   :   , \n   escquote   :   , \n   newLine   :   \\r\\n , \n   replaceNewLine   :     , \n   includeCaption   :   true , \n   includeLabels   :   true , \n   includeGroupHeader   :   true , \n   includeFooter :   true , \n   fileName   :   jqGridExport.csv , \n   mimetype   :   text/csv;charset=utf-8 , \n   returnAsString   :   false  }    separator - string - defines the separator between the fields  separatorReplace - string - string which replaces the separator which can be contained into the field string  quote - string - the test which enclosed the field  newLine - string - the characters put at end of each row for new line  replaceNewLine -  string - replace the new line if it is contained into the data field  includeCaption - boolean - if false the grid caption will be not exported. Default is true  includeLabels - boolean - if false the grid header columns will be not exported. Default is true.  includeGroupHeader boolean - if set to false the group header will be not exported if they are activated. Default is true.  includeFooter - boolean - if false the footer row will be not included into the export if it is defined. Default is true.  fileName - string - the file name to save when data is exported. Default jqGridExport.csv  mimetype - string - a way of identifying files on the Internet according to their nature and format in our case CSV type of data. Usually this parameter should not be changed.  returnAsString - boolean - if set to true the data is returned as CSV string", 
            "title": "Export to CSV"
        }, 
        {
            "location": "/user-guide/exporting/#export-to-excel", 
            "text": "(Excel Open XML)  A file with the XLSX file extension is a Microsoft Excel Open XML Format Spreadsheet file. It's an XML-based spreadsheet file created by Microsoft Excel version 2007 and later.  XLSX files organize data in cells that are stored in worksheets, which are in turn stored in workbooks, which are files that contain multiple worksheets. The cells are positioned by rows and columns and can contain styles, formatting, math functions, and more.  Spreadsheet files made in earlier versions of Excel are saved in the XLS format. Excel files that support macros are XLSM files  jqGrid export the data to Microsoft Excel Open XML Format only.  In order to use the method additional module is needed to be loaded. The name of the module is  JSZip . The module is included into the package. More about the installation of this module can be seen  here . The JSZip can be loaded via cdnjs.  If the JSZip module is not loaded the export to Excel will fail.  To export to Excel it is needed to load JSZip  script   type = text/javascript   language = javascript   src = //cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min.js / script   and call the method  $ ( #grid_id ). jqGrid ( exportToExcel ,   options );   Where options is a object with the following default properties:  options   =   { \n   includeLabels   :   true , \n   includeGroupHeader   :   true , \n   includeFooter :   true , \n   fileName   :   jqGridExport.xlsx , \n   mimetype   :   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet , \n   maxlength   :   40 , \n   onBeforeExport   :   null , \n   replaceStr   :   null  }    includeLabels - boolean - if false the grid header columns will be not exported. Default is true.  includeGroupHeader - boolean - if set to false the group header will be not exported if they are activated. Default is true.  includeFooter - boolean - if false the footer row will be not included into the export if it is defined. Default is true.  fileName - string - the file name to save when data is exported. Default jqGridExport.xlsx  mimetype - string - a way of identifying files on the Internet according to their nature and format in our case Excel Open XML type of data. Usually this parameter should not be changed.  maxlength - integer - set the max length of the visible string data  onBeforeExport - event - The event  raises before building the zip file and is used as custom function to modify the XML document before it is exported. Parameter passed to this event is the exported XML document.  replaceStr - event - custom event to parse the string data before inserted into the XML document. Parameter passed to this event is a string value.   When called the method open a save dialog with the exported data. Select Save to save the file or Open to open it with the associated application.  The export to Excel method recognizes three data types when exported - numeric, string and date. Note that the data is exported as it is seen into the grid - i.e formatted with formatters if they are used.  By default the string fields are parsed for \" \" and \" \" and these are replaced with their HTML equivalent  lt;  and  gt;", 
            "title": "Export to Excel"
        }, 
        {
            "location": "/user-guide/exporting/#export-to-pdf", 
            "text": "(Portable Document Format)  Portable Document Format (PDF) is a file format used to present and exchange documents reliably, independent of software, hardware, or operating system. Invented by Adobe, PDF is now an open standard maintained by the International Organization for Standardization (ISO). PDFs can contain links and buttons, form fields, audio, video, and business logic.  Today PDF is the most used exchange document format.  jqGrid support export of its data to PDF.  In order to use the method additional module is needed to be loaded. The name of the module is  pdfmake . The module is included into the package. More about the installation of this module can be seen  here . The pdfmake and vfs_fonts can be loaded via cdn.   Warning  Since the pdf creation is a heavy work, please use the method in relative small data set. Using the script on data set with more than 300 rows can cause problems and memory leaks.   To export to PDF it is needed to load the following javascripts  script   type = text/javascript   language = javascript   src = //cdn.rawgit.com/bpampuch/pdfmake/0.1.26/build/pdfmake.min.js     / script  script   type = text/javascript   language = javascript   src = //cdn.rawgit.com/bpampuch/pdfmake/0.1.26/build/vfs_fonts.js / script   and call the method  $ ( #grid_id ). jqGrid ( exportToPdf ,   options );   where the options is a object with the following properties and default values:  options   =   { \n   title :   null , \n   orientation :   portrait , \n   pageSize :   A4 , \n   description :   null , \n   onBeforeExport :   null , \n   download :   download , \n   includeLabels   :   true , \n   includeGroupHeader   :   true , \n   includeFooter :   true , \n   fileName   :   jqGridExport.pdf , \n   mimetype   :   application/pdf    }    title - string - The title of the exported data. Printed only once at top of the first page.  orientation - string - defines the orientation of the page. Can be 'portrait' or 'landscape'. Default is 'portrait'.  pageSize - string - defines the size of the page. Default is 'A4'. For all possible values see  here  description - string - Free text which is printed after the title at first page. Default null.  download - string - defines how to handle the PDF. Available two values - 'open' - open the PDF in a new window or 'download' - download the PDF with file name set in  fileName  (see below)  includeLabels - boolean - if false the grid header columns will be not exported. Default is true.  includeGroupHeader - boolean - if set to false the group header will be not exported if they are activated. Default is true.  includeFooter - boolean - if false the footer row will be not included into the export if it is defined. Default is true.  fileName - string - the file name to save when data is exported. Default jqGridExport.pdf  mimetype - string - a way of identifying files on the Internet according to their nature and format in our case PDF type of data. Usually this parameter should not be changed.  onBeforeExport - event - The event  raises before building the PDF file and is used as custom function to modify the PDF document definition before it is exported. Parameter passed to this event is the document definition object. For more information refer the  pdfmake documentation here . See below the default settings for document definition   The default settings for the document before PDF export are follow:  var   documentDefinition   =   { \n   pageSize :   options . pageSize , \n   pageOrientation :   ooptions . orientation , \n   content :   [ \n     { \n       style   :   tableExample , \n       widths   :   jqgrid . widths , \n       table :   { \n         headerRows :   0 ,   //or 1 \n         body :   jqgrid . rows \n       } \n     } \n   ], \n   styles :   { \n     tableHeader :   { \n       bold :   true , \n       fontSize :   11 , \n       color :   #2e6e9e , \n       fillColor :   #dfeffc , \n       alignment :   center \n     }, \n     tableBody :   { \n       fontSize :   10 \n     }, \n     tableFooter :   { \n       bold :   true , \n       fontSize :   11 , \n       color :   #2e6e9e , \n       fillColor :   #dfeffc \n     }, \n     title :   { \n       alignment :   center , \n       fontSize :   15 \n     }, \n     description :   {} \n   }, \n   defaultStyle :   { \n     fontSize :   10 \n   }  };   This definition is passed to the onBeforeExport event and it can be modified for custom purposes.  Below example shows how to make the body font of the table body smaller using the onBeforeExport event.  $ ( #export ). on ( click ,   function (){ \n   $ ( #jqGrid ). jqGrid ( exportToPdf ,{ \n     ... \n     onBeforeExport   :   function (   doc   )   { \n       doc . styles . tableBody . fontSize   =   8 ; \n     }, \n     ... \n   });  });", 
            "title": "Export to Pdf"
        }, 
        {
            "location": "/user-guide/exporting/#export-to-html", 
            "text": "HTML is the standard markup language for creating web pages and web applications. With Cascading Style Sheets (CSS) and JavaScript it forms a triad of cornerstone technologies for the World Wide Web. Web browsers receive HTML documents from a web server or from local storage and render them into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for the appearance of the document.  This method does not require additional plugin or external programs. When called the method either shows a new html page (with option to print) or it can return the exported data as HTML string depending on configuration (see below).  To export to HTML format simple call the method:  $ ( #grid_id ). jqGrid ( exportToHtml ,   options );   Where options is a object with a following default properties:  options   =   { \n     title :   , \n     onBeforeExport :   null , \n     includeLabels   :   true , \n     includeGroupHeader   :   true , \n     includeFooter :   true , \n     tableClass   :   jqgridprint , \n     autoPrint   :   false , \n     topText   :   , \n     bottomText   :   , \n     returnAsString   :   false  }    onBeforeExport - event - The event  raises before building the HTML file and is used as custom function to modify the HTML document before it is exported. Parameter passed to this event is the exported html document.  includeLabels - boolean - if false the grid header columns will be not exported. Default is true.  includeGroupHeader - boolean - if set to false the group header will be not exported if they are activated. Default is true.  includeFooter - boolean - if false the footer row will be not included into the export if it is defined. Default is true.  tableClass - string - class to be added in the table when exported. Can be added more classes separated with space   autoPrint - boolean - if set to true after creating the html document in new browser window a print dialog appear automatically.  topText - string - text included at the top of the document  bottomText - string - text included at the bottom of the document  returnAsString - boolean - if set to true the html document is returned as string", 
            "title": "Export to Html"
        }, 
        {
            "location": "/user-guide/subgrid/", 
            "text": "SubGrid\n\n\n\n\nThere are projects where we need to be able to easily display (or edit) records that are the children of a selected record in the parent grid. We would, of course, want to show only those records that are the children of the selected record in the grid, never the children of all records.\n\n\nGuriddo jqGrid JS offers two ways of handling child records:\n\n\n\n\nsubGrid\n\n\nGrid as a subGrid\n\n\n\n\nsubGrid\n\n\nWhen created this type of subGrid is a simple flat table. The table can not be sorted, paged or re-sized - it just display the information in table format. The data can not be formatted, edited and selected.\n\n\nsubGrids use properties, events and methods of the parent grid - i.e. they should be set as properties in the grid options.\n\n\nProperties\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nsubGrid\n\n\nboolean\n\n\nIf set to true this enables using a subGrid. If the subGrid is enabled additional column at left side is added to the basic grid. This column contains a 'plus' icon, which indicate that the user can click on it to expand the row. By default all rows are collapsed.\n\n\nfalse\n\n\n\n\n\n\nsubGridOptions\n\n\nobject\n\n\nA set of options for the subGrid. Below are all the options with their default values \n { \n plusicon : classes.icon_plus,\n minusicon : classes.icon_minus,\n openicon: \"ui-icon-carat-1-sw\", \n expandOnLoad:  false, \n selectOnExpand : false, \n selectOnCollapse:false, \n reloadOnExpand : true \n } \n \nplusicon\n and \nminusicon\n defies the icons when the grid is collapsed/expanded. The icons are defined in the styleUI object for the particular CSS - see \nsubGrid property\n. \n \nopenicon\n the icon bellow the minusicon when the subGrid row is expanded - see the same property from subGrid property. \n \nexpandOnLoad\n when set to true make it so that all rows will be expanded automatically when a new set of data is loaded. \n \nselectOnLoad\n when set to true the row is selected when a plusicon is clicked with the mouse. \n \nselectOnCollapse\n when set to true the row is selected when a minusicon is clicked with the mouse. \n \nreloadOnExpand\n If set to false the data in the subGrid is loaded only once and all other subsequent clicks just hide or show the data and no more ajax calls  are made.\n\n\n\n\n\n\n\n\nsubGridModel\n\n\narray\n\n\nThis property, which describes the model of the subGrid, has an effect only if the subGrid property is set to true. It is an array in which we describe the column model for the subGrid data. The syntax is : \n subGridModel : [ \n { \n name: ['name_1', 'name_2', ..., 'name_n'], \n width: [width_1, width_2, ..., width_n], \n align: ['left', 'center', ..., 'right'],\nparams: [param_1, ..., param_n], \n mapping: ['name_1_map', 'name_2_map', ..., 'name_n_map']\n} \n Where \n \nname\n: an array containing the labels of the columns of the subGrid.\n \nwidth\n: an array containing the width of the columns. This array should have the same length as in name array. \n \nalign:\n an array containing the alignment of the columns. The values can be left, center or right. If omited  the alignment is left. \n \nparams:\n an array in which we can add a name from main grid's colModel to pass as additional parameter to the subGridUrl when click on the plus icon. \n \nmapping:\n the parameter is used only when repeatitems in subGrid is set to false. When defined in this case we use the names from this array to map it to the subGrid names. If not set and repeatitems is false we use the name option.\n\n\n\n\n\n\n\n\nsubgridtype\n\n\nmixed\n\n\nThis option allow loading subGrid as a service. If not set, the datatype parameter of the parent grid is used. See the example below\n\n\nnull\n\n\n\n\n\n\nsubGridWidth\n\n\ninteger\n\n\nDetermines the width of the subGrid column if subGrid is enabled.\n\n\n20\n\n\n\n\n\n\nsubGridUrl\n\n\nmixed\n\n\nThis option has effect only if subGrid option is set to true. This option points to the file from which we get the data for the subGrid. jqGrid adds the id of the row to this url as parameter. If there is a need to pass additional parameters, use the params option in subGridModel. The option can be set as function. The parameter pass to this fumction is the id and the params data as defined in subGridModel.\n\n\nempty\n\n\n\n\n\n\najaxSubgridOptions\n\n\nobject\n\n\nThis option allow to set global ajax settings for the subGrid when we request data. Note that with this option is possible to overwrite all current ajax setting in the subGrid request including the complete event.\n\n\nempty object\n\n\n\n\n\n\nserializeSubGridData\n\n\nfunction\n\n\nIf set this event can serialize the data passed to the subGrid ajax request. The function should return the serialized data. This event can be used when a custom data should be passed to the server - e.g - JSON string, XML string and etc. The event actually is used in subGrid ajax data parameter\n\n\nnull\n\n\n\n\n\n\n\n\nIn order to configure the subGrid it is needed to configure the subGrid item in xmlReader or jsonReader. The default setting for these are:\n\n\nxmlReader\n \n:\n \n{\n\n\n...\n\n  \nsubgrid\n:\n \n{\n\n     \nroot\n:\n \nrows\n,\n\n     \nrow\n:\n \nrow\n,\n\n     \nrepeatitems\n:\n \ntrue\n,\n\n     \ncell\n:\n \ncell\n\n  \n}\n\n\n}\n\n\n\n\n\n\nand a jsonReader\n\n\njsonReader\n \n:\n \n{\n\n\n...\n\n  \nsubgrid\n:\n \n{\n\n     \nroot\n:\n \nrows\n,\n\n     \nrepeatitems\n:\n \ntrue\n,\n\n     \ncell\n:\n \ncell\n\n  \n}\n\n\n}\n\n\n\n\n\n\nThe mapping rules are the same as those in the basic grid. For more information refer to \nRetrieving Data\n.\n\n\nIn order to use correct subgridtype as service, below is a simple code which shows how this can be achieved:\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n\n...\n\n  \nsubgridtype\n:\n \nfunction\n(\n \nprm\n \n)\n \n{\n\n     \njQuery\n.\najax\n({\n\n        \nurl\n:\nurl_to_the_service\n,\n\n        \ndata\n:\nrowidprm\n,\n\n        \ndataType\n:\njson\n,\n\n        \ncomplete\n:\n \nfunction\n(\njsondata\n,\nstat\n){\n\n           \nif\n(\nstat\n==\nsuccess\n)\n \n{\n\n              \nvar\n \nthegrid\n \n=\n \njQuery\n(\n#grid_id\n)[\n0\n];\n\n              \nthegrid\n.\nsubGridJson\n(\n$\n.\njgrid\n.\nparse\n(\njsondata\n.\nresponseText\n),\n \nprm\n.\nid\n);\n\n           \n}\n\n        \n}\n\n     \n});\n\n  \n},\nsubgrid\n\n\n...\n\n\n});\n\n\n\n\n\n\nWhere \nprm\n is object that contains the id of the row plus other parameters as required to set subGridModel parameters and subGridJson is a method which is described below.\n\n\n\n\nNote\n\n\nNote the use of the variable \nthegrid\n in the exmple above.\n\n\n\n\nEvents\n\n\nThe most of the following events use the parameters defined here:\n\n\n\n\npID is the unique id of the div element where we can put contents when subgrid is enabled,\n\n\nid is the id of the row\n\n\nsPostData - the data which is posted when a subgrid request is made\n\n\n\n\nBelow is the list of \"option\" and triggered events. The name of every triggered event begin with \njqGrid\n and is set below the \"option\" event.\n\n\n\n\nNote\n\n\nThe first parameter of the trigered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)\n\n\n\n\n\n\nNote\n\n\nthe triggered event is bind to the grid and is not passed to to any options. See \nTriggered events\n\n\n\n\n\n\nsubGridBeforeExpand( pID, id)\n\n\njqGridSubGridBeforeExpand(event pID, id)\n\n\nThe event is raised just before expanding the grid. When set, this event should return true or false. If it returns false the subgrid row is not expanded and the subgrid is not opened.\n\n\n\n\nsubGridRowExpanded( pID, id)\n\n\njqGridSubGridRowExpanded(event pID, id)\n\n\nThis event is raised when the subgrid is enabled and is executed when the user clicks on the plus icon of the grid. Can be used to put custom data in the subgrid omitting the build-in ajax request.\n\n\n\n\nsubGridRowColapsed( pID, id)\n\n\njqGridSubGridRowExpanded(event pID, id)\n\n\nThis event is raised when the user clicks on the minus icon. The event should return true or false; when the returned value is false the row can not be collapsed.\n\n\n\n\nserializeSubGridData( sPostData )\n\n\nno triggered event\n\n\nIf set this event can serialize the data passed to the ajax request. The function should return the serialized data. This event can be used when a custom data should be passed to the server - e.g - JSON string, XML string and etc.\n\n\n\n\nisHasSubGrid( row_id )\n\n\nno triggered event\n\n\nTo the event is passed the row_id parameter. If defined it is executed on every row before the subgrid is build. If the event return false the subgrid for that row is not build-ed. The plus icon disappear.\n\n\nIn the example below if the first symbol of the first column of the grid begin with \"1\" the subgrid is not build.\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n({\n\n  \nurl\n:\nexample.php\n,\n\n  \ncolNames\n:\n[\nInv No\n,\nDate\n,\n \nAmount\n,\nTax\n,\nTotal\n,\nNotes\n],\n\n  \ncolModel\n \n:\n[\n\n    \n{\nname\n:\ninvid\n,\n \nindex\n:\ninvid\n,\n \nwidth\n:\n55\n},\n\n    \n{\nname\n:\ninvdate\n,\n \nindex\n:\ninvdate\n,\n \nwidth\n:\n90\n},\n\n    \n{\nname\n:\namount\n,\n \nindex\n:\namount\n,\n \nwidth\n:\n80\n,\n \nalign\n:\nright\n},\n\n    \n{\nname\n:\ntax\n,\n \nindex\n:\ntax\n,\n \nwidth\n:\n80\n,\n \nalign\n:\nright\n},\n\n    \n{\nname\n:\ntotal\n,\n \nindex\n:\ntotal\n,\n \nwidth\n:\n80\n,\n \nalign\n:\nright\n},\n\n    \n{\nname\n:\nnote\n,\n \nindex\n:\nnote\n,\n \nwidth\n:\n150\n,\n \nsortable\n:\nfalse\n}\n\n  \n],\n\n  \npager\n:\n \n#pager\n,\n\n  \nrowNum\n:\n10\n,\n\n  \nrowList\n:\n[\n10\n,\n20\n,\n30\n],\n\n  \nsubGrid\n:\n \ntrue\n,\n\n  \nisHasSubGrid\n \n:\n \nfunction\n \n(\nrowid\n)\n \n{\n\n    \n// if invid begin with 1, do not use subgrid\n\n    \n// the first column is a subgrid\n\n    \nvar\n \ncell\n \n=\n \n$\n(\nthis\n).\njqGrid\n(\ngetCell\n,\n \nrowid\n,\n \n1\n);\n\n    \nif\n(\n \ncell\n \n \ncell\n.\nsubstring\n(\n0\n,\n1\n)\n \n===\n \n1\n)\n \n{\n\n        \nreturn\n \nfalse\n;\n\n    \n}\n\n    \nreturn\n \ntrue\n;\n\n  \n}\n\n\n});\n\n\n\n\n\n\nMethods\n\n\nThe following methods are available for manipulating SubGrid data.\n\n\n\n\nexpandSubGridRow( row_id )\n\n\nDynamically expand the subgrid row with the id = row_id\n\n\nparameters\n\n\n\n\nstring row_id the id of the row to be expended\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\ncollapseSubGridRow( row_id )\n\n\nDynamically collapse the subgrid row with the id = row_id\n\n\nparameters\n\n\n\n\nstring row_id the id of the row to be collapsed\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\ntoggleSubGridRow( row_id )\n\n\nDynamically toggle the subgrid row with the id = row_id\n\n\nparameters\n\n\n\n\nstring row_id - the id of the row\n\n\n\n\nreturn\n\njqGrid object\n\n\nExample\n\n\nThis example demonstrates a simple using of Subgrid. After run it look like this:\n\n\n\n\nPlease look at the code which is well documented.\n\n\ntable\n \nid\n=\njqGrid\n/table\n\n\ndiv\n \nid\n=\njqGridPager\n/div\n\n\n\nscript\n \ntype\n=\ntext/javascript\n\n\n    \n$\n(\ndocument\n).\nready\n(\nfunction\n \n()\n \n{\n\n        \n$\n(\n#jqGrid\n).\njqGrid\n({\n\n            \nurl\n:\n \ndata.json\n,\n\n            \nmtype\n:\n \nGET\n,\n\n            \ndatatype\n:\n \njson\n,\n\n            \ncolModel\n:\n \n[\n\n                \n{\n \nlabel\n:\n \nID\n,\n \nname\n:\n \nCustomerID\n,\n \nkey\n:\n \ntrue\n,\n \nwidth\n:\n \n75\n \n},\n\n                \n{\n \nlabel\n:\n \nCompany Name\n,\n \nname\n:\n \nCompanyName\n,\n \nwidth\n:\n \n150\n \n},\n\n                \n{\n \nlabel\n:\n \nContact Name\n,\n \nname\n:\n \nContactName\n,\n \nwidth\n:\n \n150\n \n},\n\n                \n{\n \nlabel\n:\n \nPhone\n,\n \nname\n:\n \nPhone\n,\n \nwidth\n:\n \n150\n \n},\n\n                \n{\n \nlabel\n:\n \nCity\n,\n \nname\n:\n \nCity\n,\n \nwidth\n:\n \n150\n \n}\n\n            \n],\n\n        \nloadonce\n:\n \ntrue\n,\n\n        \nwidth\n:\n \n780\n,\n\n        \nheight\n:\n \n250\n,\n\n        \nrowNum\n:\n \n10\n,\n\n        \nsortname\n:\n \nCustomerID\n,\n\n        \njsonReader\n:\n \n{\n\n          \n// instruct subgrid to get the data as name:value pair\n\n          \nsubgrid\n \n:\n \n{\n \nrepeatitems\n:\n \nfalse\n}\n\n        \n},\n\n        \n// set the subGrid property to true to show expand buttons for each row\n\n        \nsubGrid\n:\n \ntrue\n,\n\n        \n// set the subgrid type to json\n\n        \nsubgridtype\n:\n \njson\n,\n\n        \n// the url can be a function. In this case we build the urls depending on the id\n\n        \nsubGridUrl\n:\n \nfunction\n(\n \nparams\n \n)\n \n{\n  \nrow\n\n          \nreturn\n \nparams\n.\nid\n+\n.json\n;\n\n        \n},\n\n        \n// description of the subgrid model\n\n        \nsubGridModel\n:\n[{\n\n            \nname\n:\n \n[\nOrderID\n,\nRequiredDate\n,\nShipName\n,\nShipCity\n,\nFreight\n],\n\n            \nwidth\n:\n \n[\n60\n,\n180\n,\n150\n,\n100\n,\n70\n],\n\n            \nalign\n:\n \n[\nleft\n,\nleft\n,\nleft\n,\nleft\n,\nright\n],\n\n            \nparams\n:\n \nfalse\n\n        \n}],\n\n        \npager\n:\n \n#jqGridPager\n\n    \n});\n\n\n});\n\n\n/script\n\n\n\n\n\n\nData returned from server when a plus icon is clicked is\n\n\n{\n\n    \nrows\n:\n[\n\n        \n{\nOrderID\n:\n11011\n,\nRequiredDate\n:\n1998-05-07 00:00:00\n,\nShipName\n:\nAlfreds Futterkiste\n,\nShipCity\n:\nBerlin\n,\nFreight\n:\n1.2100\n},\n\n        \n{\nOrderID\n:\n10952\n,\nRequiredDate\n:\n1998-04-27 00:00:00\n,\nShipName\n:\nAlfreds Futterkiste\n,\nShipCity\n:\nBerlin\n,\nFreight\n:\n40.4200\n},\n\n        \n{\nOrderID\n:\n10835\n,\nRequiredDate\n:\n1998-02-12 00:00:00\n,\nShipName\n:\nAlfreds Futterkiste\n,\nShipCity\n:\nBerlin\n,\nFreight\n:\n69.5300\n},\n\n        \n{\nOrderID\n:\n10702\n,\nRequiredDate\n:\n1997-11-24 00:00:00\n,\nShipName\n:\nAlfreds Futterkiste\n,\nShipCity\n:\nBerlin\n,\nFreight\n:\n23.9400\n},\n\n        \n{\nOrderID\n:\n10692\n,\nRequiredDate\n:\n1997-10-31 00:00:00\n,\nShipName\n:\nAlfreds Futterkiste\n,\nShipCity\n:\nBerlin\n,\nFreight\n:\n61.0200\n},\n\n        \n{\nOrderID\n:\n10643\n,\nRequiredDate\n:\n1997-09-22 00:00:00\n,\nShipName\n:\nAlfreds Futterkiste\n,\nShipCity\n:\nBerlin\n,\nFreight\n:\n29.4600\n}\n\n    \n]\n\n\n}\n\n\n\n\n\n\nDisable Subgrid\n\n\nA subGrid can be enabled (or disabled) dynamically (to respond to changes in the data in the main grid, for example).\n\nTo disable subGrid :\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nhideCol\n,\n \nsubgrid\n);\n\n\n\n\n\n\nTo enable subGrid\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\nshowCol\n,\n \nsubgrid\n);\n\n\n\n\n\n\nWhere\n\n\n\n\ngrid_id is to be replaced by the name of your grid, but\n\n\nsubgrid is a keyword, not to be replaced\n\n\n\n\nTo make this work, subGrid must be initially set to true in the jqGrid properties; only then can we enable and disable it using the code above.\n\n\nDev information\n\n\nAll the code related to subGrid is in file grid.subgrid.js\n\n\nWhen the subGrid is defined (\nsubGrid: true\n in grid options)  on additional column with name 'subgrid' is created and is placed at first place in the colModel. This column is not resizable, not sortable, can not be searched, it is fixed and can be hidden and visible using the appropriate methods and columnChooser.\n\n\nThe subGrid can not be used when the following options are set.\n\n\n\n\nwhen a treeGrid is set (treeGrid: true). In this case treeGrid internally disables the subGrid.\n\n\nwhen frozen columns are activated - in this case the frozen column method \nsetFrozenColums\n  does nothing.\n\n\n\n\nWhen the user click on plus icon we create a new row below. This row has a class \nui-subgrid\n. When the row is expanded a class \nui-sg-expanded\n is added and when is collapsed a class \nui-sg-collapsed\n is added, removing the previous expanded class.\n\n\nThe cell which contain plus/minus icon has a class \nsubgrid-cell\n and the cell which contain the subgrid data has a class \nsubgrid-data\n. To the subGrid data cell we add a attribute colspan equal to the number of visible columns.\n\n\nThe row which contain subGrid information has a id = gird id plus \"_\"  plus row id plus \"_\" plus a word expandedContent. Example. If the grid has a id = jqGrid and the row has id = ALFKI, the the subGrid row id is:  \njqGrid_ALFKI_expandedContent\n\n\nsubGrid as Grid\n\n\nThis is not a ready for you method, but rather a solution using some of the available methods and events. In this alternative to a subGrid, we use the subGrid functions of the main grid to create not a subGrid, but another grid, with all of the power and capacity of the main grid but appearing, as before, under the \"parent\" record with the same ability to reveal and hide it.\n\n\n\n\nDefinition\n\n\nWe use two events described in options array: subGridRowExpanded and subGridRowColapsed [note the unconventional spelling].\n\n\nWhen these events are defined the population of the data in the subgrid is not executed. This way we can use the subGridUrl to get our custom data and put it into the expanded row. Having this it is easy to construct another grid which will act as subgrid.\n\n\ntable\n \nid\n=\njqGrid\n/table\n\n\ndiv\n \nid\n=\njqGridPager\n/div\n\n\n\nscript\n \ntype\n=\ntext/javascript\n\n    \n$\n(\ndocument\n).\nready\n(\nfunction\n \n()\n \n{\n\n        \n$\n(\n#jqGrid\n).\njqGrid\n({\n\n            \nurl\n:\n \ndata.json\n,\n\n            \nmtype\n:\n \nGET\n,\n\n            \ndatatype\n:\n \njson\n,\n\n            \ncolModel\n:\n \n[\n\n                \n{\n \nlabel\n:\n \nID\n,\n \nname\n:\n \nCustomerID\n,\n \nkey\n:\n \ntrue\n,\n \nwidth\n:\n \n75\n \n},\n\n                \n{\n \nlabel\n:\n \nCompany Name\n,\n \nname\n:\n \nCompanyName\n,\n \nwidth\n:\n \n150\n \n},\n\n                \n{\n \nlabel\n:\n \nContact Name\n,\n \nname\n:\n \nContactName\n,\n \nwidth\n:\n \n150\n \n},\n\n                \n{\n \nlabel\n:\n \nPhone\n,\n \nname\n:\n \nPhone\n,\n \nwidth\n:\n \n150\n \n},\n\n                \n{\n \nlabel\n:\n \nCity\n,\n \nname\n:\n \nCity\n,\n \nwidth\n:\n \n150\n \n}\n\n            \n],\n\n            \nloadonce\n \n:\n \ntrue\n,\n\n            \nwidth\n:\n \n780\n,\n\n            \nheight\n:\n \n250\n,\n\n            \nrowNum\n:\n \n10\n,\n\n            \n// set the subGrid property to true to show expand buttons for each row\n\n            \nsubGrid\n:\n \ntrue\n,\n\n            \n// javascript function that will take care of showing the child grid\n\n            \nsubGridRowExpanded\n:\n \nshowChildGrid\n,\n\n            \nsubGridOptions\n \n:\n \n{\n\n            \n// expand all rows on load\n\n              \nexpandOnLoad\n:\n \ntrue\n\n            \n},\n\n            \npager\n:\n \n#jqGridPager\n\n        \n});\n\n    \n});\n\n\n    \n// the event handler on expanding parent row receives two parameters\n\n    \n// the ID of the grid tow  and the primary key of the row\n\n    \nfunction\n \nshowChildGrid\n(\nparentRowID\n,\n \nparentRowKey\n)\n \n{\n\n        \n// create unique table and pager\n\n        \nvar\n \nchildGridID\n \n=\n \nparentRowID\n \n+\n \n_table\n;\n\n        \nvar\n \nchildGridPagerID\n \n=\n \nparentRowID\n \n+\n \n_pager\n;\n\n\n        \n// send the parent row primary key to the server so that we know which grid to show\n\n        \nvar\n \nchildGridURL\n \n=\n \nparentRowKey\n+\n.json\n;\n\n        \n// add a table and pager HTML elements to the parent grid row - we will render the child grid here\n\n        \n$\n(\n#\n \n+\n \nparentRowID\n).\nappend\n(\ntable id=\n \n+\n \nchildGridID\n \n+\n \n/table\ndiv id=\n \n+\n \nchildGridPagerID\n \n+\n \n/div\n);\n\n\n        \n$\n(\n#\n \n+\n \nchildGridID\n).\njqGrid\n({\n\n            \nurl\n:\n \nchildGridURL\n,\n\n            \nmtype\n:\n \nGET\n,\n\n            \ndatatype\n:\n \njson\n,\n\n            \npage\n:\n \n1\n,\n\n            \ncolModel\n:\n \n[\n\n                \n{\n \nlabel\n:\n \nOrder ID\n,\n \nname\n:\n \nOrderID\n,\n \nkey\n:\n \ntrue\n,\n \nwidth\n:\n \n75\n \n},\n\n                \n{\n \nlabel\n:\n \nRequired Date\n,\n \nname\n:\n \nRequiredDate\n,\n \nwidth\n:\n \n100\n \n},\n\n                \n{\n \nlabel\n:\n \nShip Name\n,\n \nname\n:\n \nShipName\n,\n \nwidth\n:\n \n100\n \n},\n\n                \n{\n \nlabel\n:\n \nShip City\n,\n \nname\n:\n \nShipCity\n,\n \nwidth\n:\n \n100\n \n},\n\n                \n{\n \nlabel\n:\n \nFreight\n,\n \nname\n:\n \nFreight\n,\n \nwidth\n:\n \n75\n \n}\n\n            \n],\n\n            \nloadonce\n:\n \ntrue\n,\n\n            \nwidth\n:\n \n500\n,\n\n            \nheight\n:\n \n100%\n,\n\n            \npager\n:\n \n#\n \n+\n \nchildGridPagerID\n\n        \n});\n\n    \n}\n\n\n\n/script\n\n\n\n\n\n\nNote that subGridRowColapsed is not defined. This is true because when the row is collapsed the contents is removed.", 
            "title": "SubGrid"
        }, 
        {
            "location": "/user-guide/subgrid/#subgrid", 
            "text": "There are projects where we need to be able to easily display (or edit) records that are the children of a selected record in the parent grid. We would, of course, want to show only those records that are the children of the selected record in the grid, never the children of all records.  Guriddo jqGrid JS offers two ways of handling child records:   subGrid  Grid as a subGrid", 
            "title": "SubGrid"
        }, 
        {
            "location": "/user-guide/subgrid/#subgrid_1", 
            "text": "When created this type of subGrid is a simple flat table. The table can not be sorted, paged or re-sized - it just display the information in table format. The data can not be formatted, edited and selected.  subGrids use properties, events and methods of the parent grid - i.e. they should be set as properties in the grid options.", 
            "title": "subGrid"
        }, 
        {
            "location": "/user-guide/subgrid/#properties", 
            "text": "Property  Type  Description  Default      subGrid  boolean  If set to true this enables using a subGrid. If the subGrid is enabled additional column at left side is added to the basic grid. This column contains a 'plus' icon, which indicate that the user can click on it to expand the row. By default all rows are collapsed.  false    subGridOptions  object  A set of options for the subGrid. Below are all the options with their default values   {   plusicon : classes.icon_plus,  minusicon : classes.icon_minus,  openicon: \"ui-icon-carat-1-sw\",   expandOnLoad:  false,   selectOnExpand : false,   selectOnCollapse:false,   reloadOnExpand : true   }    plusicon  and  minusicon  defies the icons when the grid is collapsed/expanded. The icons are defined in the styleUI object for the particular CSS - see  subGrid property .    openicon  the icon bellow the minusicon when the subGrid row is expanded - see the same property from subGrid property.    expandOnLoad  when set to true make it so that all rows will be expanded automatically when a new set of data is loaded.    selectOnLoad  when set to true the row is selected when a plusicon is clicked with the mouse.    selectOnCollapse  when set to true the row is selected when a minusicon is clicked with the mouse.    reloadOnExpand  If set to false the data in the subGrid is loaded only once and all other subsequent clicks just hide or show the data and no more ajax calls  are made.     subGridModel  array  This property, which describes the model of the subGrid, has an effect only if the subGrid property is set to true. It is an array in which we describe the column model for the subGrid data. The syntax is :   subGridModel : [   {   name: ['name_1', 'name_2', ..., 'name_n'],   width: [width_1, width_2, ..., width_n],   align: ['left', 'center', ..., 'right'], params: [param_1, ..., param_n],   mapping: ['name_1_map', 'name_2_map', ..., 'name_n_map'] }   Where    name : an array containing the labels of the columns of the subGrid.   width : an array containing the width of the columns. This array should have the same length as in name array.    align:  an array containing the alignment of the columns. The values can be left, center or right. If omited  the alignment is left.    params:  an array in which we can add a name from main grid's colModel to pass as additional parameter to the subGridUrl when click on the plus icon.    mapping:  the parameter is used only when repeatitems in subGrid is set to false. When defined in this case we use the names from this array to map it to the subGrid names. If not set and repeatitems is false we use the name option.     subgridtype  mixed  This option allow loading subGrid as a service. If not set, the datatype parameter of the parent grid is used. See the example below  null    subGridWidth  integer  Determines the width of the subGrid column if subGrid is enabled.  20    subGridUrl  mixed  This option has effect only if subGrid option is set to true. This option points to the file from which we get the data for the subGrid. jqGrid adds the id of the row to this url as parameter. If there is a need to pass additional parameters, use the params option in subGridModel. The option can be set as function. The parameter pass to this fumction is the id and the params data as defined in subGridModel.  empty    ajaxSubgridOptions  object  This option allow to set global ajax settings for the subGrid when we request data. Note that with this option is possible to overwrite all current ajax setting in the subGrid request including the complete event.  empty object    serializeSubGridData  function  If set this event can serialize the data passed to the subGrid ajax request. The function should return the serialized data. This event can be used when a custom data should be passed to the server - e.g - JSON string, XML string and etc. The event actually is used in subGrid ajax data parameter  null     In order to configure the subGrid it is needed to configure the subGrid item in xmlReader or jsonReader. The default setting for these are:  xmlReader   :   {  ... \n   subgrid :   { \n      root :   rows , \n      row :   row , \n      repeatitems :   true , \n      cell :   cell \n   }  }   and a jsonReader  jsonReader   :   {  ... \n   subgrid :   { \n      root :   rows , \n      repeatitems :   true , \n      cell :   cell \n   }  }   The mapping rules are the same as those in the basic grid. For more information refer to  Retrieving Data .  In order to use correct subgridtype as service, below is a simple code which shows how this can be achieved:  jQuery ( #grid_id ). jqGrid ({  ... \n   subgridtype :   function (   prm   )   { \n      jQuery . ajax ({ \n         url : url_to_the_service , \n         data : rowidprm , \n         dataType : json , \n         complete :   function ( jsondata , stat ){ \n            if ( stat == success )   { \n               var   thegrid   =   jQuery ( #grid_id )[ 0 ]; \n               thegrid . subGridJson ( $ . jgrid . parse ( jsondata . responseText ),   prm . id ); \n            } \n         } \n      }); \n   }, subgrid  ...  });   Where  prm  is object that contains the id of the row plus other parameters as required to set subGridModel parameters and subGridJson is a method which is described below.   Note  Note the use of the variable  thegrid  in the exmple above.", 
            "title": "Properties"
        }, 
        {
            "location": "/user-guide/subgrid/#events", 
            "text": "The most of the following events use the parameters defined here:   pID is the unique id of the div element where we can put contents when subgrid is enabled,  id is the id of the row  sPostData - the data which is posted when a subgrid request is made   Below is the list of \"option\" and triggered events. The name of every triggered event begin with  jqGrid  and is set below the \"option\" event.   Note  The first parameter of the trigered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)    Note  the triggered event is bind to the grid and is not passed to to any options. See  Triggered events    subGridBeforeExpand( pID, id)  jqGridSubGridBeforeExpand(event pID, id)  The event is raised just before expanding the grid. When set, this event should return true or false. If it returns false the subgrid row is not expanded and the subgrid is not opened.   subGridRowExpanded( pID, id)  jqGridSubGridRowExpanded(event pID, id)  This event is raised when the subgrid is enabled and is executed when the user clicks on the plus icon of the grid. Can be used to put custom data in the subgrid omitting the build-in ajax request.   subGridRowColapsed( pID, id)  jqGridSubGridRowExpanded(event pID, id)  This event is raised when the user clicks on the minus icon. The event should return true or false; when the returned value is false the row can not be collapsed.   serializeSubGridData( sPostData )  no triggered event  If set this event can serialize the data passed to the ajax request. The function should return the serialized data. This event can be used when a custom data should be passed to the server - e.g - JSON string, XML string and etc.   isHasSubGrid( row_id )  no triggered event  To the event is passed the row_id parameter. If defined it is executed on every row before the subgrid is build. If the event return false the subgrid for that row is not build-ed. The plus icon disappear.  In the example below if the first symbol of the first column of the grid begin with \"1\" the subgrid is not build.  jQuery ( #grid_id ). jqGrid ({ \n   url : example.php , \n   colNames : [ Inv No , Date ,   Amount , Tax , Total , Notes ], \n   colModel   : [ \n     { name : invid ,   index : invid ,   width : 55 }, \n     { name : invdate ,   index : invdate ,   width : 90 }, \n     { name : amount ,   index : amount ,   width : 80 ,   align : right }, \n     { name : tax ,   index : tax ,   width : 80 ,   align : right }, \n     { name : total ,   index : total ,   width : 80 ,   align : right }, \n     { name : note ,   index : note ,   width : 150 ,   sortable : false } \n   ], \n   pager :   #pager , \n   rowNum : 10 , \n   rowList : [ 10 , 20 , 30 ], \n   subGrid :   true , \n   isHasSubGrid   :   function   ( rowid )   { \n     // if invid begin with 1, do not use subgrid \n     // the first column is a subgrid \n     var   cell   =   $ ( this ). jqGrid ( getCell ,   rowid ,   1 ); \n     if (   cell     cell . substring ( 0 , 1 )   ===   1 )   { \n         return   false ; \n     } \n     return   true ; \n   }  });", 
            "title": "Events"
        }, 
        {
            "location": "/user-guide/subgrid/#methods", 
            "text": "The following methods are available for manipulating SubGrid data.   expandSubGridRow( row_id )  Dynamically expand the subgrid row with the id = row_id  parameters   string row_id the id of the row to be expended   return \njqGrid object   collapseSubGridRow( row_id )  Dynamically collapse the subgrid row with the id = row_id  parameters   string row_id the id of the row to be collapsed   return \njqGrid object   toggleSubGridRow( row_id )  Dynamically toggle the subgrid row with the id = row_id  parameters   string row_id - the id of the row   return \njqGrid object", 
            "title": "Methods"
        }, 
        {
            "location": "/user-guide/subgrid/#example", 
            "text": "This example demonstrates a simple using of Subgrid. After run it look like this:   Please look at the code which is well documented.  table   id = jqGrid /table  div   id = jqGridPager /div  script   type = text/javascript \n\n     $ ( document ). ready ( function   ()   { \n         $ ( #jqGrid ). jqGrid ({ \n             url :   data.json , \n             mtype :   GET , \n             datatype :   json , \n             colModel :   [ \n                 {   label :   ID ,   name :   CustomerID ,   key :   true ,   width :   75   }, \n                 {   label :   Company Name ,   name :   CompanyName ,   width :   150   }, \n                 {   label :   Contact Name ,   name :   ContactName ,   width :   150   }, \n                 {   label :   Phone ,   name :   Phone ,   width :   150   }, \n                 {   label :   City ,   name :   City ,   width :   150   } \n             ], \n         loadonce :   true , \n         width :   780 , \n         height :   250 , \n         rowNum :   10 , \n         sortname :   CustomerID , \n         jsonReader :   { \n           // instruct subgrid to get the data as name:value pair \n           subgrid   :   {   repeatitems :   false } \n         }, \n         // set the subGrid property to true to show expand buttons for each row \n         subGrid :   true , \n         // set the subgrid type to json \n         subgridtype :   json , \n         // the url can be a function. In this case we build the urls depending on the id \n         subGridUrl :   function (   params   )   {    row \n           return   params . id + .json ; \n         }, \n         // description of the subgrid model \n         subGridModel : [{ \n             name :   [ OrderID , RequiredDate , ShipName , ShipCity , Freight ], \n             width :   [ 60 , 180 , 150 , 100 , 70 ], \n             align :   [ left , left , left , left , right ], \n             params :   false \n         }], \n         pager :   #jqGridPager \n     });  });  /script   Data returned from server when a plus icon is clicked is  { \n     rows : [ \n         { OrderID : 11011 , RequiredDate : 1998-05-07 00:00:00 , ShipName : Alfreds Futterkiste , ShipCity : Berlin , Freight : 1.2100 }, \n         { OrderID : 10952 , RequiredDate : 1998-04-27 00:00:00 , ShipName : Alfreds Futterkiste , ShipCity : Berlin , Freight : 40.4200 }, \n         { OrderID : 10835 , RequiredDate : 1998-02-12 00:00:00 , ShipName : Alfreds Futterkiste , ShipCity : Berlin , Freight : 69.5300 }, \n         { OrderID : 10702 , RequiredDate : 1997-11-24 00:00:00 , ShipName : Alfreds Futterkiste , ShipCity : Berlin , Freight : 23.9400 }, \n         { OrderID : 10692 , RequiredDate : 1997-10-31 00:00:00 , ShipName : Alfreds Futterkiste , ShipCity : Berlin , Freight : 61.0200 }, \n         { OrderID : 10643 , RequiredDate : 1997-09-22 00:00:00 , ShipName : Alfreds Futterkiste , ShipCity : Berlin , Freight : 29.4600 } \n     ]  }", 
            "title": "Example"
        }, 
        {
            "location": "/user-guide/subgrid/#disable-subgrid", 
            "text": "A subGrid can be enabled (or disabled) dynamically (to respond to changes in the data in the main grid, for example). \nTo disable subGrid :  jQuery ( #grid_id ). jqGrid ( hideCol ,   subgrid );   To enable subGrid  jQuery ( #grid_id ). jqGrid ( showCol ,   subgrid );   Where   grid_id is to be replaced by the name of your grid, but  subgrid is a keyword, not to be replaced   To make this work, subGrid must be initially set to true in the jqGrid properties; only then can we enable and disable it using the code above.", 
            "title": "Disable Subgrid"
        }, 
        {
            "location": "/user-guide/subgrid/#dev-information", 
            "text": "All the code related to subGrid is in file grid.subgrid.js  When the subGrid is defined ( subGrid: true  in grid options)  on additional column with name 'subgrid' is created and is placed at first place in the colModel. This column is not resizable, not sortable, can not be searched, it is fixed and can be hidden and visible using the appropriate methods and columnChooser.  The subGrid can not be used when the following options are set.   when a treeGrid is set (treeGrid: true). In this case treeGrid internally disables the subGrid.  when frozen columns are activated - in this case the frozen column method  setFrozenColums   does nothing.   When the user click on plus icon we create a new row below. This row has a class  ui-subgrid . When the row is expanded a class  ui-sg-expanded  is added and when is collapsed a class  ui-sg-collapsed  is added, removing the previous expanded class.  The cell which contain plus/minus icon has a class  subgrid-cell  and the cell which contain the subgrid data has a class  subgrid-data . To the subGrid data cell we add a attribute colspan equal to the number of visible columns.  The row which contain subGrid information has a id = gird id plus \"_\"  plus row id plus \"_\" plus a word expandedContent. Example. If the grid has a id = jqGrid and the row has id = ALFKI, the the subGrid row id is:   jqGrid_ALFKI_expandedContent", 
            "title": "Dev information"
        }, 
        {
            "location": "/user-guide/subgrid/#subgrid-as-grid", 
            "text": "This is not a ready for you method, but rather a solution using some of the available methods and events. In this alternative to a subGrid, we use the subGrid functions of the main grid to create not a subGrid, but another grid, with all of the power and capacity of the main grid but appearing, as before, under the \"parent\" record with the same ability to reveal and hide it.", 
            "title": "subGrid as Grid"
        }, 
        {
            "location": "/user-guide/subgrid/#definition", 
            "text": "We use two events described in options array: subGridRowExpanded and subGridRowColapsed [note the unconventional spelling].  When these events are defined the population of the data in the subgrid is not executed. This way we can use the subGridUrl to get our custom data and put it into the expanded row. Having this it is easy to construct another grid which will act as subgrid.  table   id = jqGrid /table  div   id = jqGridPager /div  script   type = text/javascript \n     $ ( document ). ready ( function   ()   { \n         $ ( #jqGrid ). jqGrid ({ \n             url :   data.json , \n             mtype :   GET , \n             datatype :   json , \n             colModel :   [ \n                 {   label :   ID ,   name :   CustomerID ,   key :   true ,   width :   75   }, \n                 {   label :   Company Name ,   name :   CompanyName ,   width :   150   }, \n                 {   label :   Contact Name ,   name :   ContactName ,   width :   150   }, \n                 {   label :   Phone ,   name :   Phone ,   width :   150   }, \n                 {   label :   City ,   name :   City ,   width :   150   } \n             ], \n             loadonce   :   true , \n             width :   780 , \n             height :   250 , \n             rowNum :   10 , \n             // set the subGrid property to true to show expand buttons for each row \n             subGrid :   true , \n             // javascript function that will take care of showing the child grid \n             subGridRowExpanded :   showChildGrid , \n             subGridOptions   :   { \n             // expand all rows on load \n               expandOnLoad :   true \n             }, \n             pager :   #jqGridPager \n         }); \n     }); \n\n     // the event handler on expanding parent row receives two parameters \n     // the ID of the grid tow  and the primary key of the row \n     function   showChildGrid ( parentRowID ,   parentRowKey )   { \n         // create unique table and pager \n         var   childGridID   =   parentRowID   +   _table ; \n         var   childGridPagerID   =   parentRowID   +   _pager ; \n\n         // send the parent row primary key to the server so that we know which grid to show \n         var   childGridURL   =   parentRowKey + .json ; \n         // add a table and pager HTML elements to the parent grid row - we will render the child grid here \n         $ ( #   +   parentRowID ). append ( table id=   +   childGridID   +   /table div id=   +   childGridPagerID   +   /div ); \n\n         $ ( #   +   childGridID ). jqGrid ({ \n             url :   childGridURL , \n             mtype :   GET , \n             datatype :   json , \n             page :   1 , \n             colModel :   [ \n                 {   label :   Order ID ,   name :   OrderID ,   key :   true ,   width :   75   }, \n                 {   label :   Required Date ,   name :   RequiredDate ,   width :   100   }, \n                 {   label :   Ship Name ,   name :   ShipName ,   width :   100   }, \n                 {   label :   Ship City ,   name :   ShipCity ,   width :   100   }, \n                 {   label :   Freight ,   name :   Freight ,   width :   75   } \n             ], \n             loadonce :   true , \n             width :   500 , \n             height :   100% , \n             pager :   #   +   childGridPagerID \n         }); \n     }  /script   Note that subGridRowColapsed is not defined. This is true because when the row is collapsed the contents is removed.", 
            "title": "Definition"
        }, 
        {
            "location": "/user-guide/treegrid/", 
            "text": "TreeGrid\n\n\n\n\nTreeGrid is a way to represent hierarchical data in grid.\n\nTreeGrid supports both the \nNested Set\n model and the \nAdjacency model\n. Good articles describing the Nested Set model can be found here:\n\n\nStoring Hierarchical Data in a Database\n\n\nManaging Hierarchical Data in MySQL\n\n\n\n\nWarning\n\n\nBefore you begin with the tree grid, it is highly recommended to read the articles listed above or any other related to hierarchical data representation articles.\n\n\n\n\nWhen implemented the Guriddo jqGrid TreeGrid can look like this:\n\n\n\n\nOptions\n\n\nThe following options can be set in the grid options to configure the treeGrid\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nExpandColClick\n\n\nboolean\n\n\nwhen true, the tree is expanded and/or collapsed when we click on the text of the expanded column, not only on the image\n\n\ntrue\n\n\n\n\n\n\nExpandColumn\n\n\nstring\n\n\nindicates which column (name from colModel) should be used to expand the tree grid. If not set the first one is used. Valid only when treeGrid option is set to true.\n\n\nnull\n\n\n\n\n\n\nexpColInd\n\n\ninteger\n\n\nThe index of the column in colModel which correspond to the ExpandColumn. It is set automatically from the script\n\n\n0\n\n\n\n\n\n\ntreedatatype\n\n\nmixed\n\n\nDetermines the initial datatype (see datatype option). Usually this should not be changed. During the reading process this option is equal to the datatype option.\n\n\nnull\n\n\n\n\n\n\ntreeGrid\n\n\nboolean\n\n\nEnables (disables) the tree grid format.\n\n\nfalse\n\n\n\n\n\n\ntreeGrid_bigData\n\n\nboolean\n\n\nEnables ( if set to true) the tree grid pagging with root nodes as described \nhere\n\n\nfalse\n\n\n\n\n\n\ntreeGridModel\n\n\nstring\n\n\nDetermines the method used for the treeGrid. Can be nested or adjacency.\n\n\nnested\n\n\n\n\n\n\ntreeIcons\n\n\nobject\n\n\nThis object set the icons used in the tree. The icons are defined in styleUI object property treegrid. The default values are: \n{ \nplus: treegrid.icon_plus,\n minus: treegrid.icon_minus,\n leaf: treegrid.icon_leaf\n }\n\n\n\n\n\n\n\n\ntreeReader\n\n\nobject\n\n\nextends the colModel defined in the basic grid. The fields described here are added to end of the colModel array and are hidden. This means that the data returned from the server should have values for these fields. For a full description of all valid values see below.\n\n\nempty\n\n\n\n\n\n\ntree_root_level\n\n\nnumeric\n\n\nDetermines the level where the root element begins when treeGrid is enabled\n\n\n0\n\n\n\n\n\n\n\n\nThe treeReader property (which is part from grid options) adds dynamically columns to the colModel property of the basic grid when treeGrid property is set to true. Syntax:\n\n\ntreeReader\n \n:\n \n{\n\n  \nproperty1\n \n:\n \nvalue1\n\n  \n...\n\n  \npropertyN\n \n:\n \nvalueN\n\n\n}\n\n\n\n\n\n\nThe treeReader property adds different columns in the colModel depending on the treeGridModel property - i.e. we have different configurations for the different models - \nNested Set Model\n and \nAdjacency Model\n.\n\n\nMethods\n\n\nIn the methods below, the following parameters are mostly used:\n\n\n\n\nrecord\n\n\nrowid\n\n\n\n\nrecord\n means the record object from data parameter, which can be obtained via the getRowData method like this:\n\n\nvar\n \nrecord\n \n=\n \njQuery\n(\n#grid_id\n).\njqGrid\n(\ngetRowData\n,\n \nrowid\n,\n \ntrue\n);\n\n\n\n\n\n\nNote the second parameter in the method. If the second parameter is omitted or set to false (default) the returned value is the from the current (view-able) data set. If the row can not be found a false is returned.\n\n\nrowid\n is the id of the row.\n\n\n\n\naddChildNode( nodeid, parentid, data, [expandData] )\n\n\nAdd a node in the tree according the value of the parentid parameter. The nodeid is the unique values in the row. If set to empty string the method gets the next max number + 1 from the data. if parendid is null the node is added as root. If the parentid is valid id of existing row the data is added as child of the that row. Data is a data to be inserted.\n\n\nparameters\n\n\n\n\nnodeid -string - a unique value of the row to be set. If not set it is calculated as max+1 length of the data\n\n\nparentid - string - if null the node is added as root. If set and is valid id the row is added as a child.\n\n\ndata - object - data to be added into the grid in name:value pair. Name correspond from colModel\n\n\nexpandData - boolean - if set to true the data row is expanded. Default is false\n\n\n\n\nreturn\n\nnothing\n\n\n\n\ncollapseNode( record )\n\nCollapse the node at specified record - set expanded field to false and and toggle the icon to collapsed. Method usually is used after collapseRow method\n\n\nparametric\n\n\n\n\nrecord\n1\n - object\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\ncollapseRow( record )\n\nCollapses the current row, making the children hidden. Method is usually used before collapseNode method\n\n\nparameters\n\n\n\n\nrecord\n1\n - object\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\ndelChildren( rowid )\n\n\nDeletes the children of the node identified by rowid. The method does not delete the children on server.\n\n\nparameters\n\n\n\n\nrowid - string\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\ndelTreeNode( rowid )\n\n\nDeletes the specified node identified by rowid and all child nodes of that node. Does not delete the node at server\n\n\nparameters\n\n\n\n\nrowid - string\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nexpandNode( record )\n\nExpand the node at specified record - set expanded field to true and and toggle the icon to expanded. Method usually is used after expandRow method\n\n\nparameters\n\n\n\n\nrecord\n1\n - object\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nexpandRow( record )\n\nExpanded the current row, making the children visible. Method is usually used before expandNode method\n\n\nparameters\n\n\n\n\nrecord\n1\n - object\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\ngetFullTreeNode(record, [expand])\n\nReturns array of all nodes of the specified record; returns empty array if none. If the parameter \nexpand\n is true the expand property is set to true.\n\n\nparameters\n\n\n\n\nrecord\n1\n - object\n\n\nexpand - boolean\n\n\n\n\nreturn\n\narray\n\n\n\n\ngetNodeAncestors( record )\n\nReturns array of the ancestors of the specified record\n\n\nparameters\n\n\n\n\nrecord\n1\n - object\n\n\n\n\nreturn\n\narray\n\n\n\n\ngetNodeChildren( record, [currentview] )\n\nReturns array of child nodes of the specified record; returns empty array if none. If the parameter \ncurrentview\n is true the data is returned formatted as displayed into the grid, if false the source (non formatted) data is returned. Default is false.\n\n\nparameters\n\n\n\n\nrecord\n1\n - object\n\n\ncurrentview - boolean\n\n\n\n\nreturn\n\narray\n\n\n\n\ngetNodeDepth( record )\n\nReturn the depth of the specified record\n\n\nparameters\n\n\n\n\nrecord\n1\n - object\n\n\n\n\nreturn\n\ninteger or null\n\n\n\n\ngetNodeParent( record )\n\nReturns the parent node of the specified record\n\n\nparameters\n\n\n\n\nrecord\n1\n - object\n\n\n\n\nreturn\n\nobject\n\n\n\n\ngetRootNodes( [currentview] )\n\nReturn an array of the root nodes. If the parameter \ncurrentview\n is true the data is returned formatted as displayed into the grid, if false the source (non formatted) data is returned. Default is false.\n\n\nparameters\n\n\n\n\ncurrentview - boolean\n\n\n\n\nreturn\n\narray\n\n\n\n\nisNodeLoaded( record )\n\nReturns true if the node is already loaded\n\n\nparameters\n\n\n\n\nrecord\n1\n - object\n\n\n\n\nreturn\n\nboolean\n\n\n\n\nisVisibleNode( record )\n\nReturns true or false if the node is visible or not\n\n\nparameters\n\n\n\n\nrecord\n1\n - object\n\n\n\n\nreturn\n\nboolean\n\n\n\n\nreloadNode(reccord, [reloadcurrent])\n\nReload the only data of the node (and its children) specified with record. If the reloadcurrent parameter is true (default is false) the data of the record is reloaded too, if false only child nodes are reloaded.\n\n\nparameters\n\n\n\n\nrecord\n1\n - object\n\n\nreloadcurrent - boolean\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nsetLeaf( record, state, [collapsed])\n\nVisually set node (record) to a leaf or change it status to be not a leaf. Usually the method is used when all the child nodes are deleted and the status of the parent should be set to leaf or if a child node is added to leaf node. The status is set with the state parameter, if set to false the node is marked as leaf, if true as parent. The collapsed parameter have effect only if the state is true. If this parameter is true a the plus icon is set and the node is marked as collapsed.\n\n\nparameters\n\n\n\n\nrecord\n1\n - object\n\n\nstate - boolean\n\n\ncollapsed - boolean\n\n\n\n\nreturn\n\njqGrid object\n\n\n\n\nsearchTree( recs )\n\nThis method is used when a search is activated on local data. The method does not perform a search on server. Parameter passed to this method are records which contain the search result. The purpose of the method is to return all ancestors from the search results. The method is used in \naddLocalData\n when a search is activated.\n\n\nparameters\n\n\n\n\nrecs - array of records with search result\n\n\n\n\nreturn\n\narray of search result with ancestors included.\n\n\n\n\nsetTreeRow( rowid, data)\n\nUpdates the values in the tree (using the data object) in the row with id = rowid.\n\n\nparameters\n\n\n\n\nrowid - string - the id of the row to be updated\n\n\ndata - object - The syntax of data object is: {name1:value1,name2: value2\u2026} where the name is the name of the column as described in the colModel and the value is the new value.\n\n\n\n\nreturn\n\nboolen true on success, false otherwise.\n\n\n\n\nSortTree( sortname, dir, [sorttype], [datefmt])\n\nSort dynamically the tree grid by given name \nsortname\n and direction \ndir\n. The name should be valid name from colModel and direction can be 'asc' for ascending order and 'desc' for descending order. Optionally the \nsorttype\n parameter (see colModel sorttype) can be set and date format \ndatefmt\n if the field is date. The method work when multi sorting is on.\n\n\nparameters\n\n\n\n\nsortname - string - a name from colModel\n\n\ndir - string can be asc or desc\n\n\nsortype - string the type of the field to be sorted - text, numeric,...\n\n\ndatefmt - string the date format of the field in case a date is sorted\n\n\n\n\nreturn\n\njqGrid object\n\n\nEvents\n\n\nBelow is the list of \"option\" and triggered events. The name of every triggered event begin with \njqGrid\n and is set below the option event.\n\n\n\n\nNote\n\n\nThe first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)\n\n\n\n\n\n\nNote\n\n\nthe triggered event is bind to the grid and is not passed to to any options. See \nTriggered events\n\n\n\n\nThe triggered event is below the option event in the list\n\n\n\n\nbeforeSetTreeNode(index, len)\n\n\njqGridBeforeSetTreeNode(event, index, len)\n\nThe event is called before to set new tree nodes in the grid. Note that the data is already inserted into the grid.\n\n\nparameters\n\n\n\n\nindex - integer - the starting grid row index from where to apply the setting for the tree node\n\n\nlen - integer - how many rows to process\n\n\n\n\nreturns\n\nnothing\n\n\n\n\nafterSetTreeNode(index, len)\n\n\njqGridAfterSetTreeNode(event, index, len)\n\nThe event is called after the new tree nodes are set in the grid.\n\n\nparameters\n\n\n\n\nindex - integer - the starting grid row index from where to apply the setting for the tree node\n\n\nlen - integer - how many rows to process\n\n\n\n\nreturns\n\nnothing\n\n\n\n\nbeforeExpandTreeGridRow(rowid, record, children)\n\n\njqGridBeforeExpandTreeGridRow(rowid, record, children)\n\nThe event is called before to expand the tree grid row when the user click on the plus icon. Actually the event is executed in  \nexpandRow\n method. If defined the event should return true or false. If the event return false the expanding is not performed.\n\n\nparameters\n\n\n\n\nrowid - string id of the row to be expanded\n\n\nrecord - object - the row data for the expanded row\n\n\nchildren - array - child nodes (if any) for the expanded row\n\n\n\n\nreturn\n\nboolean\n\n\n\n\nafterExpandTreeGridRow(rowid, record, children)\n\n\njqGridAfterExpandTreeGridRow(event, rowid, record, children)\n\n\nThe event is called after the tree grid row is expanded, when the user click on the plus icon. Actually the event is executed in  \nexpandRow\n method.\n\n\nparameters\n\n\n\n\nrowid - string id of the row to be expanded\n\n\nrecord - object - the row data for the expanded row\n\n\nchildren - array - child nodes (if any) for the expanded row\n\n\n\n\nreturn\n\nnothing\n\n\n\n\nbeforeCollapseTreeGridRow(rowid, record, children)\n\n\njqGridBeforeCollapseTreeGridRow(event, rowid, record, children)\n\nThe event is called before to collapse the tree grid row when the user click on the minus(collapse) icon. Actually the event is executed in  \ncollapseRow\n method. If defined the event should return true or false. If the event return false the collapse is not performed.\n\n\nparameters\n\n\n\n\nrowid - string id of the row to be collapsed\n\n\nrecord - object - the row data for the expanded row\n\n\nchildren - array - child nodes (if any) for the expanded row\n\n\n\n\nreturn\n\nboolean\n\n\n\n\nafterCollapseTreeGridRow(rowid, record, children)\n\n\njqGridAfterCollapseTreeGridRow(event, rowid, record, children)\n\n\nThe event is called after the tree grid row is collapsed, when the user click on the minus (collapse) icon. Actually the event is executed in  \ncollapseRow\n method.\n\n\nparameters\n\n\n\n\nrowid - string id of the row to be expanded\n\n\nrecord - object - the row data for the expanded row\n\n\nchildren - array - child nodes (if any) for the expanded row\n\n\n\n\nreturn\n\nnothing\n\n\n\n\nbeforeExpandTreeGridNode( rowid, record )\n\n\njqGridBeforeExpandTreeGridNode(event, rowid, record)\n\nThe event is called before to expand the tree grid node when the user click on the plus icon. Actually the event is executed in  \nexpandNode\n method. If defined the event should return true or false. If the event return false the expanding is not performed.\n\n\nparameters\n\n\n\n\nrowid - string id of the row to be expanded\n\n\nrecord - object - the row data for the expanded row\n\n\n\n\nreturn\n\nboolean\n\n\n\n\nafterExpandTreeGridNode(rowid, record)\n\n\njqGridAfterExpandTreeGridNode(event, rowid, record)\n\n\nThe event is called after the tree grid node is expanded, when the user click on the plus icon. Actually the event is executed in  \nexpandNode\n method.\n\n\nparameters\n\n\n\n\nrowid - string id of the row to be expanded\n\n\nrecord - object - the row data for the expanded row\n\n\n\n\nreturn\n\nnothing\n\n\n\n\nbeforeCollapseTreeGridNode(rowid, record)\n\n\njqGridBeforeCollapseTreeGridNode(event, rowid, record)\n\n\nThe event is called before collapsing the tree grid node when the user click on the minus(collapse) icon. Actually the event is executed in  \ncollapseNode\n method. If defined the event should return true or false. If the event return false the collapse is not performed.\n\n\nparameters\n\n\n\n\nrowid - string id of the row to be collapsed\n\n\nrecord - object - the row data for the expanded row\n\n\n\n\nreturn\n\nboolean\n\n\n\n\nafterCollapseTreeGridNode(rowid, record )\n\n\njqGridAfterCollapseTreeGridNode(event, rowid, record)\n\n\nThe event is called after the tree grid node is collapsed, when the user click on the minus (collapse) icon. Actually the event is executed in  \ncollapseNode\n method.\n\n\nparameters\n\n\n\n\nrowid - string id of the row to be expanded\n\n\nrecord - object - the row data for the expanded row\n\n\n\n\nreturn\n\nnothing\n\n\n\n\nNested Set Model\n\n\nOne of the important part to use when nested set model is used is the treeReader property. Configuring this properly and understanding the basic concept of the nested set model will make your life easy.\n\n\nNested set config\n\n\nTo use the nested set model we need first to set the \ntreeGridModel\n options to 'nested', which is default:\n\n\n$\n(\n#grid_id\n).\njqGrid\n({\n\n  \n...\n\n  \ntreeGridModel\n \n:\n \nnested\n,\n\n  \n...\n\n\n});\n\n\n\n\n\n\nSecond step is to configure the treeReader object. The default values are:\n\n\ntreeReader\n \n:\n \n{\n\n  \nlevel_field\n:\n \nlevel\n,\n\n  \nleft_field\n:\nlft\n,\n\n  \nright_field\n:\n \nrgt\n,\n\n  \nleaf_field\n:\n \nisLeaf\n,\n\n  \nexpanded_field\n:\n \nexpanded\n,\n\n  \nloaded\n:\n \nloaded\n,\n\n  \nicon_field\n:\n \nicon\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlevel_field\n\n\nnumber\n\n\nThis field determines the level in the hierarchy of the element. Usually the root element will be at level 0.The first child of the root is at level 1 and so on. This information is needed for the grid to set the ident of every element.\n\n\n\n\n\n\nleft_field\n\n\nnumber\n\n\nThe rowid of the field to the left\n\n\n\n\n\n\nright_field\n\n\nnumber\n\n\nThe rowid of the field to the right\n\n\n\n\n\n\nleaf_field\n\n\nboolean\n\n\nThis field should tell the grid that the element is leaf. Possible values can be true and false. To the leaf element is attached different image and this element can not be expanded or collapsed.\n\n\n\n\n\n\nexpanded_field\n\n\nboolean\n\n\nTells the grid whether this element should be expanded during the loading (true or false). If the element has no value, false is set. Note that the data can be empty for this element, but this element can not be removed from data set.\n\n\n\n\n\n\nloaded\n\n\nboolean\n\n\nThis field is optional and indicates if the node and its children are loaded\n\n\n\n\n\n\nicon_field\n\n\nstring\n\n\nThis field is optional and if set replaces icon for the leaf field. The content should be a valid icon name from the used css framework\n\n\n\n\n\n\n\n\nThe third step is optional and is the configuration of \ntree_root_level\n grid option. By default its value is 0. This option tell which level has the root element.\n\n\nAfter configuration of the reader it is needed to know what is posted to the server in order to load the child nodes properly. In case of auto-loading tree nodes and click on the plus icon, we post the following parameters: (the postData array is extended whith these fields)\n\n\npostData\n \n:\n \n{\n\n   \n...\n\n   \nnodeid\n:\n \nrecord\n.\nid\n,\n\n   \nn_left\n:\n \nrecord\n.\nlft\n,\n\n   \nn_right\n:\n \nrecord\n.\nrgt\n,\n\n   \nn_level\n:\n \nrecord\n.\nlevel\n,\n\n   \n...\n\n\n}\n\n\n\n\n\n\nWhere\n\n\n\n\nnodeid contain the id of the currently expanded record\n\n\nn_left contain the left value of the currently expanded row\n\n\nn_right contain the right value of the currently expanded row\n\n\nn_level contain the level value of the currently expanded row\n\n\n\n\nNested set example\n\n\nIn order to understand the the process of configuring and using the tree grid here we provide full example: using the PHP as server and MySQL as database.\n\n\n\n\nNote\n\n\nThis example is for demonstration purposes and should not be used in public sites, since it is not\n\nprotected from SQL Injection attacks.\n\n\n\n\nData Preparation\n\n\nLet us suppose that we have an general account where some accounts are children of the main accounts and some accounts have no child account. In most cases account has name, number, debt, credit and optional balance fields.\n\n\nIn order to represent the account in nested set mode we need to add additionally three fields account_id, left and right fields. In MySQl the words left and right are reserved words, so our table look like this:\n\n\naccount_id, name, account_number, Debit, Credit, Balance, lft, rgt\n\n\n\n\n\nwhere\n\n\n\n\naccount_id is the unique id of the account (in our grid this should be the rowid)\n\n\nlft indicates the left_field, and\n\n\nrgt indicates the right_field\n\n\n\n\nLets create this table in MySQL\n\n\nCREATE\n \nTABLE\n \naccounts\n \n(\n\n  \naccount_id\n \nint\n(\n11\n)\n \nNOT\n \nNULL\n \nAUTO_INCREMENT\n,\n\n  \nname\n \nvarchar\n(\n30\n)\n \nNOT\n \nNULL\n,\n\n  \nacc_num\n \nvarchar\n(\n10\n)\n \nNULL\n,\n\n  \ndebit\n \ndecimal\n(\n10\n,\n2\n)\n \nDEFAULT\n \n0.00\n,\n\n  \ncredit\n \ndecimal\n(\n10\n,\n2\n)\n \nDEFAULT\n \n0.00\n,\n\n  \nbalance\n \ndecimal\n(\n10\n,\n2\n)\n \nDEFAULT\n \n0.00\n,\n\n  \nlft\n \nint\n(\n11\n)\n \nNOT\n \nNULL\n,\n\n  \nrgt\n \nint\n(\n11\n)\n \nNOT\n \nNULL\n,\n\n  \nPRIMARY\n \nKEY\n  \n(\n`\naccount_id\n`\n)\n\n\n);\n\n\n\n\n\n\nand add some data:\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n1\n,\n \nCash\n,\n \n100\n,\n \n400\n.\n00\n,\n \n250\n.\n00\n,\n \n150\n.\n00\n,\n \n1\n,\n \n8\n);\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n2\n,\n \nCash 1\n,\n \n1\n,\n \n300\n.\n00\n,\n \n200\n.\n00\n,\n \n100\n.\n00\n,\n \n2\n,\n \n5\n);\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n3\n,\n \nSub Cash 1\n,\n \n1\n,\n \n300\n.\n00\n,\n \n200\n.\n00\n,\n \n100\n.\n00\n,\n \n3\n,\n \n4\n);\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n4\n,\n \nCash 2\n,\n \n2\n,\n \n100\n.\n00\n,\n \n50\n.\n00\n,\n \n50\n.\n00\n,\n \n6\n,\n \n7\n);\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n5\n,\n \nBank\ns\n,\n \n200\n,\n \n1500\n.\n00\n,\n \n1000\n.\n00\n,\n \n500\n.\n00\n,\n \n9\n,\n \n14\n);\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n6\n,\n \nBank 1\n,\n \n1\n,\n \n500\n.\n00\n,\n \n0\n.\n00\n,\n \n500\n.\n00\n,\n \n10\n,\n \n11\n);\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n7\n,\n \nBank 2\n,\n \n2\n,\n \n1000\n.\n00\n,\n \n1000\n.\n00\n,\n \n0\n.\n00\n,\n \n12\n,\n \n13\n);\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n8\n,\n \nFixed asset\n,\n \n300\n,\n \n0\n.\n00\n,\n \n1000\n.\n00\n,\n \n-\n1000\n.\n00\n,\n \n15\n,\n \n16\n);\n\n\n\n\n\n\nWith this information we can now construct the treeGrid.\n\n\nTreeGrid Preparation\n\n\nSince we know the table names our grid setup is:\n\n\nThe html definition\n\n\n...\n  \ntable\n \nid \n=\n \ntreegrid\n/\ntable\n\n  \ndiv\n \nid \n=\n \nptreegrid\n/\ndiv\n\n...\n\n\n\n\n\nTha JavaScript definition\n\n\n...\n\n\njQuery\n(\n#treegrid\n).\njqGrid\n({\n\n  \ntreeGrid\n:\n \ntrue\n,\n\n  \ntreeGridModel\n:\n \nnested\n,\n\n  \nExpandColumn\n \n:\n \nname\n,\n\n  \nurl\n:\n \nserver.php?q=tree\n,\n\n  \ndatatype\n:\n \njson\n,\n\n  \njsonReader\n \n:\n \n{\n\n    \nrepeatitems\n \n:\n \nfalse\n\n  \n},\n\n  \nmtype\n:\n \nPOST\n,\n\n  \ncolNames\n:\n[\nid\n,\nAccount\n,\nAcc Num\n,\n \nDebit\n,\n \nCredit\n,\nBalance\n],\n\n  \ncolModel\n:\n[\n\n    \n{\nname\n:\naccount_id\n,\nindex\n:\naccount_id\n,\n \nwidth\n:\n1\n,\nhidden\n:\ntrue\n,\nkey\n:\ntrue\n},\n\n    \n{\nname\n:\nname\n,\nindex\n:\nname\n,\n \nwidth\n:\n180\n},\n\n    \n{\nname\n:\nacc_num\n,\nindex\n:\nacc_num\n,\n \nwidth\n:\n80\n,\n \nalign\n:\ncenter\n},\n\n    \n{\nname\n:\ndebit\n,\nindex\n:\ndebit\n,\n \nwidth\n:\n80\n,\n \nalign\n:\nright\n},\n      \n    \n{\nname\n:\ncredit\n,\nindex\n:\ncredit\n,\n \nwidth\n:\n80\n,\nalign\n:\nright\n},\n      \n    \n{\nname\n:\nbalance\n,\nindex\n:\nbalance\n,\n \nwidth\n:\n80\n,\nalign\n:\nright\n}\n      \n  \n],\n\n  \nheight\n:\nauto\n,\n\n  \npager\n \n:\n \n#ptreegrid\n,\n\n  \ncaption\n:\n \nTreegrid example\n\n\n});\n\n\n...\n\n\n\n\n\n\nSince jqGrid currently does not support paging, when we have a treegrid the pager elements are disabled automatically.\n\n\nServer Code: Loading at once\n\n\nLoading all the nodes at once is an approach used when we have relatively few elements in the data table. To do this, our single SQL is:\n\n\nSELECT\n\n    \nnode\n.\naccount_id\n,\n\n    \nnode\n.\nname\n,\n\n    \nnode\n.\nacc_num\n,\n\n    \nnode\n.\ndebit\n,\n\n    \nnode\n.\ncredit\n,\n\n    \nnode\n.\nbalance\n,\n\n    \n(\nCOUNT\n(\nparent\n.\nname\n)\n \n-\n \n1\n)\n \nAS\n \nlevel\n,\n\n    \nnode\n.\nlft\n,\n\n    \nnode\n.\nrgt\n\n\nFROM\n \naccounts\n \nAS\n \nnode\n,\n\n\naccounts\n \nAS\n \nparent\n\n\nWHERE\n \nnode\n.\nlft\n \nBETWEEN\n \nparent\n.\nlft\n \nAND\n \nparent\n.\nrgt\n\n\nGROUP\n \nBY\n \nnode\n.\nname\n\n\nORDER\n \nBY\n \nnode\n.\nlft\n;\n\n\n\n\n\n\nIn Nested Set model, determining if the node is a leaf is easy: this is just comparison of rgt = lft+1.\n\nNote how we calculate the \nlevel\n element\n\n\nNow we are ready to prepare our server side code. Below are examples in PHP and MySQL using PDO mysql driver with json data.\n\n\nThe \nserver.php\n file is like this:\n\n\n?php\n\n\n// connection to the server\n\n\n$conn\n \n=\n \nnew\n \nPDO\n(\nDB_DSN\n,\nDB_USER\n,\nDB_PASSWORD\n);\n\n\n//use utf-8\n\n\n$conn\n-\nquery\n(\nSET NAMES utf8\n);\n\n\n\n// number of records in the response\n\n\n$sth\n \n=\n \n$conn\n-\nprepare\n(\nSELECT COUNT(*) as count FROM accounts2\n);\n\n\n$sth\n-\nexecute\n();\n\n\n// calculate the number of rows returned\n\n\n$result\n \n=\n \n$sth\n-\nfetch\n(\nPDO\n::\nFETCH_NUM\n);\n\n\n$count\n \n=\n \n$result\n[\n0\n];\n\n\n\n$sth\n-\ncloseCursor\n();\n\n\n\n$SQL\n \n=\n \nSELECT \n\n\n.\nnode.account_id, \n\n\n.\nnode.name, \n\n\n.\nnode.acc_num, \n\n\n.\nnode.debit, \n\n\n.\nnode.credit, \n\n\n.\nnode.balance, \n\n\n.\n(COUNT(parent.name) - 1) AS level, \n\n\n.\nnode.lft, \n\n\n.\nnode.rgt \n\n\n.\nFROM accounts2 AS node, \n\n\n.\naccounts2 AS parent \n\n\n.\nWHERE node.lft BETWEEN parent.lft AND parent.rgt \n\n\n.\nGROUP BY node.name \n\n\n.\nORDER BY node.lft\n;\n\n\n\n// execute the SQL\n\n\n$sth2\n \n=\n \n$conn\n-\nprepare\n(\n \n$SQL\n \n);\n\n\n$sth2\n-\nexecute\n();\n\n\n\n\n// build the response\n\n\n$response\n \n=\n \nnew\n \nstdClass\n();\n\n\n$response\n-\npage\n \n=\n1\n;\n\n\n$response\n-\ntotal\n \n=\n1\n;\n\n\n$response\n-\nrecords\n \n=\n \n$count\n;\n\n\n\nwhile\n(\n$row\n \n=\n \n$sth2\n-\nfetch\n(\nPDO\n::\nFETCH_OBJ\n)\n \n)\n \n{\n\n    \n$row\n-\nleaf\n \n=\n \nfalse\n;\n\n    \nif\n(\n$row\n-\nrgt\n \n===\n \n$row\n-\nlft\n \n+\n \n1\n \n)\n \n{\n\n        \n$row\n-\nleaf\n \n=\n \ntrue\n;\n\n    \n}\n\n  \n$row\n-\nloaded\n \n=\n \ntrue\n;\n\n    \n$row\n-\nexpanded\n \n=\n \nfalse\n;\n\n    \n$response\n-\nrows\n[]\n \n=\n \n$row\n;\n\n\n}\n\n\n\nheader\n(\nContent-type: text/x-json;charset=utf-8\n);\n\n\n// output the data to json\n\n\necho\n \njson_encode\n(\n$response\n);\n\n\n\n\n\n\nIn case there is a requirement to expand nodes when the data is loaded set the last value (expanded) to true\n\n\nServer Code: Auto loading tree\n\n\nIf there is a relative large data set with a deep structure, it is better to load the data when we need it, i.e. when a parent is clicked we retrieve the child records. So first we display only the root elements; when a root element is clicked on, the grid automatically detects that there is no data and tries to load the needed information by passing the needed parameters to the server. This is where the level_field and isLeaf field are so important.\n\n\nIn this case we can use our previous query producing only the elements at the requested level. (This query can be optimized, but this is out of scope for this explanation).\n\n\n?php\n\n\n// Connection to the server\n\n\n$conn\n \n=\n \nnew\n \nPDO\n(\nDB_DSN\n,\nDB_USER\n,\nDB_PASSWORD\n);\n\n\n// Tell the db that we use utf-8\n\n\n$conn\n-\nquery\n(\nSET NAMES utf8\n);\n\n\n//$node =  (integer)$_REQUEST[\nnodeid\n];\n\n\n$node\n \n=\n \nfilter_input\n(\nINPUT_POST\n,\n \nnodeid\n,\n \nFILTER_SANITIZE_NUMBER_INT\n);\n\n\n// detect if here we post the data from allready loaded tree\n\n\n// we can make here other checks\n\n\n\n// var_dump($node);\n\n\n$ADDWHERE\n \n=\n \n;\n\n\nif\n(\n \n(\nint\n)\n$node\n \n \n0\n)\n \n{\n\n    \n$n_lft\n \n=\n \nfilter_input\n(\nINPUT_POST\n,\n \nn_left\n,\n \nFILTER_SANITIZE_NUMBER_INT\n);\n\n    \n$n_rgt\n \n=\n \nfilter_input\n(\nINPUT_POST\n,\n \nn_right\n,\n \nFILTER_SANITIZE_NUMBER_INT\n);\n\n    \n(\nint\n)\n$n_lvl\n \n=\n \nfilter_input\n(\nINPUT_POST\n,\n \nn_level\n,\n \nFILTER_SANITIZE_NUMBER_INT\n);\n\n    \n$ADDWHERE\n \n=\n \n AND parent.lft \n \n.\n$n_lft\n.\n AND parent.rgt \n \n.\n$n_rgt\n;\n\n    \n$lwh\n \n=\n \n$n_lvl\n+\n1\n;\n\n\n}\n \nelse\n \n{\n\n    \n// initial grid\n\n    \n$n_lvl\n \n=\n \n0\n;\n\n    \n$lwh\n=\n0\n;\n\n\n}\n\n\n\n$SQL\n \n=\n \nSELECT \n\n\n.\nnode.account_id, \n\n\n.\nnode.name, \n\n\n.\nnode.acc_num, \n\n\n.\nnode.debit, \n\n\n.\nnode.credit, \n\n\n.\nnode.balance, \n\n\n.\n(COUNT(parent.name) - 1 + \n.\n$n_lvl\n.\n) AS level, \n\n\n.\nnode.lft, \n\n\n.\nnode.rgt \n\n\n.\nFROM accounts AS node, \n\n\n.\naccounts AS parent \n\n\n.\nWHERE node.lft BETWEEN parent.lft AND parent.rgt \n \n.\n$ADDWHERE\n\n\n.\n GROUP BY node.name\n\n\n.\n ORDER BY node.lft\n;\n\n\n\n//var_dump($SQL);\n\n\n// execute the SQL\n\n\n$sth\n \n=\n \n$conn\n-\nprepare\n(\n \n$SQL\n \n);\n\n\n$sth\n-\nexecute\n();\n\n\n\n// build the response\n\n\n$response\n \n=\n \nnew\n \nstdClass\n();\n\n\n$response\n-\npage\n \n=\n1\n;\n\n\n$response\n-\ntotal\n \n=\n1\n;\n\n\n$response\n-\nrecords\n \n=\n \n1\n;\n\n\n\nwhile\n(\n$row\n \n=\n \n$sth\n-\nfetch\n(\nPDO\n::\nFETCH_OBJ\n)\n \n)\n \n{\n\n    \n$row\n-\nleaf\n \n=\n \nfalse\n;\n\n    \nif\n(\n$row\n-\nrgt\n \n===\n \n$row\n-\nlft\n \n+\n \n1\n \n)\n \n{\n\n        \n$row\n-\nleaf\n \n=\n \ntrue\n;\n\n    \n}\n\n    \n//$row-\nexpanded = false;\n\n    \n//$row-\nloaded = false;\n\n    \nif\n(\n \n(\nint\n)\n$n_lvl\n \n==\n  \n(\nint\n)\n$row\n-\nlevel\n)\n \n{\n\n        \n$row\n-\nlevel\n \n=\n \n$lwh\n;\n\n        \n$response\n-\nrows\n[]\n \n=\n \n$row\n;\n\n    \n}\n\n\n}\n\n\n\nheader\n(\nContent-type: text/x-json;charset=utf-8\n);\n\n\n// output the data to json\n\n\necho\n \njson_encode\n(\n$response\n);\n\n\n\n\n\n\nAdjacency Model\n\n\nOne of the important part is the treeReader property. Configuring this properly and understanding the basic concept of the adjacency model will make your life easy.\n\n\nAdjacency model config\n\n\nThe default treeReader Configuration when we use tree grid with adjacency model is:\n\n\ntreeReader\n \n=\n \n{\n\n  \nlevel_field\n:\n \nlevel\n,\n\n  \nparent_id_field\n:\n \nparent\n,\n\n  \nleaf_field\n:\n \nisLeaf\n,\n\n  \nexpanded_field\n:\n \nexpanded\n\n  \nloaded\n:\n \nloaded\n,\n\n  \nicon_field\n:\n \nicon\n\n\n}\n\n\n\n\n\n\nThe treeReader automatically extends the colModel with these fields, added and hidden at end of the colModel. Data returned from the server or local array now needs to include information for these fields for constructing the tree grid. The treeReader can be extended so that the fields match your requirements.\n\n\nThe only difference from nested set model is that the left_field and right_field are replaced with parent_id_field. This element indicates that the record has a parent with an id of parent_id_field. If the parent id is NULL the element is a root element.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlevel_field\n\n\nnumber\n\n\nThis field determines the level in the hierarchy of the element. Usually the root element will be at level 0.The first child of the root is at level 1 and so on. This information is needed for the grid to set the ident of every element.\n\n\n\n\n\n\nparent_id_field\n\n\nmixed\n\n\nindicates if the record has a parent with an id of parent_id_field. If the parent id is NULL the element is a root element\n\n\n\n\n\n\nleaf_field\n\n\nboolean\n\n\nThis field should tell the grid that the element is leaf. Possible values can be true and false. To the leaf element is attached different image and this element can not be expanded or collapsed.\n\n\n\n\n\n\nexpanded_field\n\n\nboolean\n\n\nTells the grid whether this element should be expanded during the loading (true or false). If the element has no value, false is set. Note that the data can be empty for this element, but this element can not be removed from data set.\n\n\n\n\n\n\nloaded\n\n\nboolean\n\n\nThis field is optional and indicates if the node and its children are loaded\n\n\n\n\n\n\nicon_field\n\n\nstring\n\n\nThis field is optional and if set replaces icon for the leaf field. The content should be a valid icon name from the used css framework\n\n\n\n\n\n\n\n\nAfter the configuration of the reader it is need to know what is post-ed to the server in order to load the child nodes properly? In case of auto lading tree nodes post-ed are the following parameters: (the postData array is extended)\n\n\npostData\n \n:\n \n{\n\n   \n...\n\n   \nnodeid\n:\nrc\n.\nid\n,\n\n   \nparentid\n:\nrc\n.\nparent_id\n,\n\n   \nn_level\n:\nrc\n.\nlevel\n   \n   \n...\n\n\n}\n\n\n\n\n\n\n\n\nnodeid contain the id of the currently expanded record\n\n\nparentid is the parent_id value of the currently expanded row\n\n\nn_level contain the level value of the currently expanded row\n\n\n\n\nAdjacency model example\n\n\nIn order to understand the the process of configuring the tree grid here we provide full example:\n\n\nData Preparation\n\nLet us suppose that we have an general account where some accounts are children of the main accounts and some accounts have no child account. In most cases account has name, number, debt, credit and optional balance fields.\n\n\nIn order to represent the table in the Adjacency model we need to add two additional fields account_id and parent_id . The table in this case is:\n\n\naccount_id, name, account_number, Debit, Credit, Balance, parent_id\n\n\nwhere:\n\n- account_id is the unique id of the account (in our grid this should be the rowid)\n\n- parent_id indicates the parent_id_field in the grid\n\n\nIn MySQL terms this table can be represented as\n\n\nCREATE\n \nTABLE\n \naccounts\n \n(\n\n  \naccount_id\n \nint\n(\n11\n)\n \nNOT\n \nNULL\n \nAUTO_INCREMENT\n,\n\n  \nname\n \nvarchar\n(\n30\n)\n \nNOT\n \nNULL\n,\n\n  \nacc_num\n \nvarchar\n(\n10\n)\n \nNULL\n,\n\n  \ndebit\n \ndecimal\n(\n10\n,\n2\n)\n \nDEFAULT\n \n0.00\n,\n\n  \ncredit\n \ndecimal\n(\n10\n,\n2\n)\n \nDEFAULT\n \n0.00\n,\n\n  \nbalance\n \ndecimal\n(\n10\n,\n2\n)\n \nDEFAULT\n \n0.00\n,\n\n  \nparent_id\n \nint\n(\n11\n)\n \nDEFAULT\n \nNULL\n,\n\n  \nPRIMARY\n \nKEY\n  \n(\n`\naccount_id\n`\n)\n\n\n);\n\n\n\n\n\n\nAnd let's add some data\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n1\n,\n \nCash\n,\n \n100\n,\n \n400\n.\n00\n,\n \n250\n.\n00\n,\n \n150\n.\n00\n,\n \nNULL\n);\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n2\n,\n \nCash 1\n,\n \n1\n,\n \n300\n.\n00\n,\n \n200\n.\n00\n,\n \n100\n.\n00\n,\n \n1\n);\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n3\n,\n \nSub Cash 1\n,\n \n1\n,\n \n300\n.\n00\n,\n \n200\n.\n00\n,\n \n100\n.\n00\n,\n \n2\n);\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n4\n,\n \nCash 2\n,\n \n2\n,\n \n100\n.\n00\n,\n \n50\n.\n00\n,\n \n50\n.\n00\n,\n \n1\n);\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n5\n,\n \nBank\ns\n,\n \n200\n,\n \n1500\n.\n00\n,\n \n1000\n.\n00\n,\n \n500\n.\n00\n,\nNULL\n);\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n6\n,\n \nBank 1\n,\n \n1\n,\n \n500\n.\n00\n,\n \n0\n.\n00\n,\n \n500\n.\n00\n,\n \n5\n);\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n7\n,\n \nBank 2\n,\n \n2\n,\n \n1000\n.\n00\n,\n \n1000\n.\n00\n,\n \n0\n.\n00\n,\n \n5\n);\n\n\nINSERT\n \nINTO\n \naccounts\n \nVALUES\n \n(\n8\n,\n \nFixed asset\n,\n \n300\n,\n \n0\n.\n00\n,\n \n1000\n.\n00\n,\n \n-\n1000\n.\n00\n,\n \nNULL\n);\n\n\n\n\n\n\nWith this information we can now construct the jqGrid TreeGrid.\n\n\nThe html definition\n\n\n...\n  \ntable\n \nid \n=\n \ntreegrid\n/\ntable\n\n  \ndiv\n \nid \n=\n \nptreegrid\n/\ndiv\n\n...\n\n\n\n\n\nTha JavaScript definition\n\n\n...\n\n\njQuery\n(\n#treegrid\n).\njqGrid\n({\n\n  \ntreeGrid\n:\n \ntrue\n,\n\n  \ntreeGridModel\n:\n \nadjacency\n,\n\n  \nExpandColumn\n \n:\n \nname\n,\n\n  \nurl\n:\n \nserver_2.php?q=tree\n,\n\n  \ndatatype\n:\n \njson\n,\n\n  \njsonReader\n \n:\n \n{\n\n    \nrepeatitems\n \n:\n \nfalse\n\n  \n},\n\n  \n// parent fields need to be configured\n\n  \ntreeReader\n \n:\n \n{\n\n   \nparent_id_field\n:\n \nparent_id\n\n  \n},\n\n  \nmtype\n:\n \nPOST\n,\n\n  \ncolNames\n:\n[\nid\n,\nAccount\n,\nAcc Num\n,\n \nDebit\n,\n \nCredit\n,\nBalance\n],\n\n  \ncolModel\n:\n[\n\n    \n{\nname\n:\naccount_id\n,\nindex\n:\naccount_id\n,\n \nwidth\n:\n1\n,\nhidden\n:\ntrue\n,\nkey\n:\ntrue\n},\n\n    \n{\nname\n:\nname\n,\nindex\n:\nname\n,\n \nwidth\n:\n180\n},\n\n    \n{\nname\n:\nacc_num\n,\nindex\n:\nacc_num\n,\n \nwidth\n:\n80\n,\n \nalign\n:\ncenter\n},\n\n    \n{\nname\n:\ndebit\n,\nindex\n:\ndebit\n,\n \nwidth\n:\n80\n,\n \nalign\n:\nright\n},\n      \n    \n{\nname\n:\ncredit\n,\nindex\n:\ncredit\n,\n \nwidth\n:\n80\n,\nalign\n:\nright\n},\n      \n    \n{\nname\n:\nbalance\n,\nindex\n:\nbalance\n,\n \nwidth\n:\n80\n,\nalign\n:\nright\n}\n      \n  \n],\n\n  \nheight\n:\nauto\n,\n\n  \npager\n \n:\n \n#ptreegrid\n,\n\n  \ncaption\n:\n \nTreegrid example\n\n\n});\n\n\n...\n\n\n\n\n\n\nServer Code: Loading all the nodes at once\n\n\nLoading all the nodes at once works well when we have relatively few elements and the tree has only a few levels.\n\nLoading data in the Adjacency model is little difficult, since it requires recursion and, where the depth of the tree is great, this will take a lot of time. There are some techniques that overcome this problem, but in our case we will use the standard approach. Autoloading tree nodes (described in the next section below) is much simpler and does not require recursion.\n\n\nPHP code for loading nodes at once (tested)\n\n\n?php\n\n\n// Connection to the server\n\n\n$conn\n \n=\n \nnew\n \nPDO\n(\nDB_DSN\n,\nDB_USER\n,\nDB_PASSWORD\n);\n\n\n// Tell the db that we use utf-8\n\n\n$conn\n-\nquery\n(\nSET NAMES utf8\n);\n\n\n\n// First we need to determine the leaf nodes\n\n\n$SQLL\n \n=\n \nSELECT t1.account_id FROM accounts AS t1 LEFT JOIN accounts as t2 \n\n\n.\n ON t1.account_id = t2.parent_id WHERE t2.account_id IS NULL\n;\n\n\n\n$sth\n \n=\n \n$conn\n-\nprepare\n(\n$SQLL\n);\n\n\n$sth\n-\nexecute\n();\n\n\n// calculate the number of rows returned\n\n\n\n$leafnodes\n \n=\n \narray\n();\n\n\n\nwhile\n(\n$rw\n \n=\n \n$sth\n-\nfetch\n(\nPDO\n::\nFETCH_ASSOC\n))\n \n{\n\n   \n$leafnodes\n[\n$rw\n[\naccount_id\n]]\n \n=\n \n$rw\n[\naccount_id\n];\n\n\n}\n\n\n\n// build the response\n\n\n$response\n \n=\n \nnew\n \nstdClass\n();\n\n\n$response\n-\npage\n \n=\n1\n;\n\n\n$response\n-\ntotal\n \n=\n1\n;\n\n\n$response\n-\nrecords\n \n=\n \n1\n;\n\n\n$response\n-\nrows\n \n=\n \narray\n();\n\n\n\n// Recursive function that do the job\n\n\nfunction\n \ndisplay_node\n(\n$parent\n,\n \n$level\n)\n \n{\n\n    \nglobal\n \n$leafnodes\n,\n \n$response\n,\n \n$conn\n;\n\n    \nif\n(\n$parent\n \n0\n)\n \n{\n\n        \n$wh\n \n=\n \nparent_id=\n.\n$parent\n;\n\n    \n}\n \nelse\n \n{\n\n        \n$wh\n \n=\n \nISNULL(parent_id)\n;\n\n    \n}\n\n    \n$SQL\n \n=\n \nSELECT account_id, name, acc_num, debit, credit, balance, parent_id FROM accounts WHERE \n.\n$wh\n;\n\n    \n$stm\n \n=\n \n$conn\n-\nprepare\n(\n$SQL\n);\n\n    \n$stm\n-\nexecute\n();\n\n\n    \nwhile\n(\n$row\n \n=\n \n$stm\n-\nfetch\n(\nPDO\n::\nFETCH_OBJ\n))\n \n{\n\n        \n$row\n-\nlevel\n \n=\n \n$level\n;\n\n        \n$row\n-\nparent_id\n \n=\n \n!\n$row\n-\nparent_id\n \n?\n \nNULL\n \n:\n \n$row\n-\nparent_id\n;\n\n        \n$row\n-\nisLeaf\n \n=\n \nfalse\n;\n\n        \nif\n(\n \nisset\n(\n$leafnodes\n[\n$row\n-\naccount_id\n])\n \n \n$row\n-\naccount_id\n \n==\n \n$leafnodes\n[\n$row\n-\naccount_id\n]\n \n)\n \n{\n\n            \n$row\n-\nisLeaf\n \n=\n \ntrue\n;\n\n        \n}\n\n        \n$row\n-\nexpanded\n \n=\n \nfalse\n;\n\n        \n$row\n-\nloaded\n \n=\n \ntrue\n;\n\n        \n$response\n-\nrows\n[]\n \n=\n \n$row\n;\n\n        \ndisplay_node\n((\ninteger\n)\n$row\n-\naccount_id\n,\n$level\n+\n1\n);\n\n    \n}\n\n    \n$stm\n-\ncloseCursor\n();\n\n\n\n\n}\n\n\n\ndisplay_node\n(\n,\n0\n);\n\n\n\nheader\n(\nContent-type: text/x-json;charset=utf-8\n);\n\n\n// output the data to json\n\n\necho\n \njson_encode\n(\n$response\n);\n\n\n\n\n\n\nServer Code: Auto loading tree\n\n\nAuto loading the tree is the recommended approach when using adjacency model in jqGrid. Here, we can make simple query without any need to provide for recursion.\n\n\nBelow is the PHP code (tested)\n\n\n?php\n\n\n// First we need to determine the leaf nodes\n\n\n$SQLL\n \n=\n \nSELECT t1.account_id FROM accounts AS t1 LEFT JOIN accounts as t2 \n\n\n.\n ON t1.account_id = t2.parent_id WHERE t2.account_id IS NULL\n;\n\n\n\n$sth\n \n=\n \n$conn\n-\nprepare\n(\n$SQLL\n);\n\n\n$sth\n-\nexecute\n();\n\n\n// calculate the number of rows returned\n\n\n\n$leafnodes\n \n=\n \narray\n();\n\n\n\nwhile\n(\n$rw\n \n=\n \n$sth\n-\nfetch\n(\nPDO\n::\nFETCH_ASSOC\n))\n \n{\n\n   \n$leafnodes\n[\n$rw\n[\naccount_id\n]]\n \n=\n \n$rw\n[\naccount_id\n];\n\n\n}\n\n\n\n// build the response\n\n\n$response\n \n=\n \nnew\n \nstdClass\n();\n\n\n$response\n-\npage\n \n=\n1\n;\n\n\n$response\n-\ntotal\n \n=\n1\n;\n\n\n$response\n-\nrecords\n \n=\n \n1\n;\n\n\n$response\n-\nrows\n \n=\n \narray\n();\n\n\n\n// Get parameters from the grid\n\n\n$node\n \n=\n \nfilter_input\n(\nINPUT_POST\n,\n \nnodeid\n,\n \nFILTER_SANITIZE_NUMBER_INT\n);\n\n\n$n_lvl\n \n=\n \nfilter_input\n(\nINPUT_POST\n,\n \nn_level\n,\n \nFILTER_SANITIZE_NUMBER_INT\n);\n\n\n\nif\n(\n$node\n \n==\n \nnull\n \n)\n \n$node\n \n=\n \n0\n;\n\n\nif\n(\n$n_lvl\n \n==\n \nnull\n \n)\n \n$n_lvl\n \n=\n \n0\n;\n\n\n\nif\n((\nint\n)\n$node\n \n \n0\n)\n \n{\n \n//check to see which node to load\n\n   \n$wh\n \n=\n \nparent_id=\n.\n$node\n;\n \n// parents\n\n   \n$n_lvl\n \n=\n \n$n_lvl\n+\n1\n;\n \n// we should ouput next level\n\n\n}\n \nelse\n \n{\n\n   \n$wh\n \n=\n \nISNULL(parent_id)\n;\n \n// roots\n\n\n}\n\n\n\n$SQL\n \n=\n \nSELECT account_id, name, acc_num, debit, credit, balance, parent_id FROM accounts WHERE \n.\n$wh\n;\n\n\n$stm\n \n=\n \n$conn\n-\nprepare\n(\n$SQL\n);\n\n\n$stm\n-\nexecute\n();\n\n\n\nwhile\n(\n$row\n \n=\n \n$stm\n-\nfetch\n(\nPDO\n::\nFETCH_OBJ\n))\n \n{\n\n    \n$row\n-\nlevel\n \n=\n \n$n_lvl\n;\n\n    \n$row\n-\nparent_id\n \n=\n \n!\n$row\n-\nparent_id\n \n?\n \nNULL\n \n:\n \n$row\n-\nparent_id\n;\n\n    \n$row\n-\nisLeaf\n \n=\n \nfalse\n;\n\n    \nif\n(\n \nisset\n(\n$leafnodes\n[\n$row\n-\naccount_id\n])\n \n \n$row\n-\naccount_id\n \n==\n \n$leafnodes\n[\n$row\n-\naccount_id\n]\n \n)\n \n{\n\n        \n$row\n-\nisLeaf\n \n=\n \ntrue\n;\n\n    \n}\n\n    \n$row\n-\nexpanded\n \n=\n \nfalse\n;\n\n    \n$row\n-\nloaded\n \n=\n \nfalse\n;\n\n    \n$response\n-\nrows\n[]\n \n=\n \n$row\n;\n\n\n\n}\n\n\n$stm\n-\ncloseCursor\n();\n\n\nheader\n(\nContent-type: text/x-json;charset=utf-8\n);\n\n\n// output the data to json\n\n\necho\n \njson_encode\n(\n$response\n);\n\n\n\n\n\n\nPaging\n\n\nAs of version 5.3 we support pagination in the Tree Grid. To enable this it is needed to set the grid option \ntreeGrid_bigData : true\n. It important to note that \n\nthe data returned from server should contain only root nodes, while the rest of child node should be loaded\n\non request of  data when we click on the root node. This can be show in the example above \nServer Code: Auto loading tree\n\n\nExample of paging:\n\n\nThe html definition\n\n\n...\n  \ntable\n \nid \n=\n \ntreegrid\n/\ntable\n\n  \ndiv\n \nid \n=\n \nptreegrid\n/\ndiv\n\n...\n\n\n\n\n\nTha JavaScript definition\n\n\n...\n\n\njQuery\n(\n#treegrid\n).\njqGrid\n({\n\n  \ntreeGrid\n:\n \ntrue\n,\n\n  \ntreeGrid_bigData\n \n:\n \ntrue\n,\n\n  \ntreeGridModel\n:\n \nadjacency\n,\n\n  \nExpandColumn\n \n:\n \nname\n,\n\n  \nurl\n:\n \nserver_2.php?q=tree\n,\n\n  \ndatatype\n:\n \njson\n,\n\n  \njsonReader\n \n:\n \n{\n\n    \nrepeatitems\n \n:\n \nfalse\n\n  \n},\n\n  \n// parent fields need to be configured\n\n  \ntreeReader\n \n:\n \n{\n\n   \nparent_id_field\n:\n \nparent_id\n\n  \n},\n\n  \nmtype\n:\n \nPOST\n,\n\n  \ncolNames\n:\n[\nid\n,\nAccount\n,\nAcc Num\n,\n \nDebit\n,\n \nCredit\n,\nBalance\n],\n\n  \ncolModel\n:\n[\n\n    \n{\nname\n:\naccount_id\n,\nindex\n:\naccount_id\n,\n \nwidth\n:\n1\n,\nhidden\n:\ntrue\n,\nkey\n:\ntrue\n},\n\n    \n{\nname\n:\nname\n,\nindex\n:\nname\n,\n \nwidth\n:\n180\n},\n\n    \n{\nname\n:\nacc_num\n,\nindex\n:\nacc_num\n,\n \nwidth\n:\n80\n,\n \nalign\n:\ncenter\n},\n\n    \n{\nname\n:\ndebit\n,\nindex\n:\ndebit\n,\n \nwidth\n:\n80\n,\n \nalign\n:\nright\n},\n      \n    \n{\nname\n:\ncredit\n,\nindex\n:\ncredit\n,\n \nwidth\n:\n80\n,\nalign\n:\nright\n},\n      \n    \n{\nname\n:\nbalance\n,\nindex\n:\nbalance\n,\n \nwidth\n:\n80\n,\nalign\n:\nright\n}\n      \n  \n],\n\n  \nheight\n:\nauto\n,\n\n  \npager\n \n:\n \n#ptreegrid\n,\n\n  \ncaption\n:\n \nTreegrid example\n,\n\n  \nrowNum\n \n:\n \n3\n,\n\n  \nrowList\n \n:\n \n[\n3\n,\n6\n,\n9\n]\n\n\n});\n\n\n...\n\n\n\n\n\n\nPHP code (tested)\n\n\n?php\n\n\n// First we need to determine the leaf nodes\n\n\n$SQLL\n \n=\n \nSELECT t1.account_id FROM accounts AS t1 LEFT JOIN accounts as t2 \n\n\n.\n ON t1.account_id = t2.parent_id WHERE t2.account_id IS NULL\n;\n\n\n\n$sth\n \n=\n \n$conn\n-\nprepare\n(\n$SQLL\n);\n\n\n$sth\n-\nexecute\n();\n\n\n// calculate the number of rows returned\n\n\n\n$leafnodes\n \n=\n \narray\n();\n\n\n\nwhile\n(\n$rw\n \n=\n \n$sth\n-\nfetch\n(\nPDO\n::\nFETCH_ASSOC\n))\n \n{\n\n   \n$leafnodes\n[\n$rw\n[\naccount_id\n]]\n \n=\n \n$rw\n[\naccount_id\n];\n\n\n}\n\n\n\n// build the response\n\n\n$response\n \n=\n \nnew\n \nstdClass\n();\n\n\n$response\n-\npage\n \n=\n1\n;\n\n\n$response\n-\ntotal\n \n=\n1\n;\n\n\n$response\n-\nrecords\n \n=\n \n1\n;\n\n\n$response\n-\nrows\n \n=\n \narray\n();\n\n\n\n// Get parameters from the grid\n\n\n$node\n \n=\n \nfilter_input\n(\nINPUT_POST\n,\n \nnodeid\n,\n \nFILTER_SANITIZE_NUMBER_INT\n);\n\n\n$n_lvl\n \n=\n \nfilter_input\n(\nINPUT_POST\n,\n \nn_level\n,\n \nFILTER_SANITIZE_NUMBER_INT\n);\n\n\n\nif\n(\n$node\n \n==\n \nnull\n \n)\n \n$node\n \n=\n \n0\n;\n\n\nif\n(\n$n_lvl\n \n==\n \nnull\n \n)\n \n$n_lvl\n \n=\n \n0\n;\n\n\n\nif\n((\nint\n)\n$node\n \n \n0\n)\n \n{\n \n//check to see which node to load\n\n   \n$wh\n \n=\n \nparent_id=\n.\n$node\n;\n \n// parents\n\n   \n$n_lvl\n \n=\n \n$n_lvl\n+\n1\n;\n \n// we should ouput next level\n\n\n}\n \nelse\n \n{\n\n   \n$wh\n \n=\n \nISNULL(parent_id)\n;\n \n// roots\n\n\n}\n\n\n\n$SQL\n \n=\n \nSELECT account_id, name, acc_num, debit, credit, balance, parent_id FROM accounts WHERE \n.\n$wh\n;\n\n\n$stm\n \n=\n \n$conn\n-\nprepare\n(\n$SQL\n);\n\n\n$stm\n-\nexecute\n();\n\n\n\nwhile\n(\n$row\n \n=\n \n$stm\n-\nfetch\n(\nPDO\n::\nFETCH_OBJ\n))\n \n{\n\n    \n$row\n-\nlevel\n \n=\n \n$n_lvl\n;\n\n    \n$row\n-\nparent_id\n \n=\n \n!\n$row\n-\nparent_id\n \n?\n \nNULL\n \n:\n \n$row\n-\nparent_id\n;\n\n    \n$row\n-\nisLeaf\n \n=\n \nfalse\n;\n\n    \nif\n(\n \nisset\n(\n$leafnodes\n[\n$row\n-\naccount_id\n])\n \n \n$row\n-\naccount_id\n \n==\n \n$leafnodes\n[\n$row\n-\naccount_id\n]\n \n)\n \n{\n\n        \n$row\n-\nisLeaf\n \n=\n \ntrue\n;\n\n    \n}\n\n    \n$row\n-\nexpanded\n \n=\n \nfalse\n;\n\n    \n$row\n-\nloaded\n \n=\n \nfalse\n;\n\n    \n$response\n-\nrows\n[]\n \n=\n \n$row\n;\n\n\n\n}\n\n\n$stm\n-\ncloseCursor\n();\n\n\nheader\n(\nContent-type: text/x-json;charset=utf-8\n);\n\n\n// output the data to json\n\n\necho\n \njson_encode\n(\n$response\n);\n\n\n\n\n\n\nLimitations\n\n\n\n\nPager\n can be used, but its functionality currently are disabled for treeGrid\n\n\nWhen we initialize the grid and the data is read, the datatype is automatically set to local. This is required because treegrid supports autoloading tree nodes. This means that, for speed or efficiency, you can load the data only for the root level first and load the data for a particular child node only when the operator clicks to expand that node. The grid will determine that there is no data and try to load the node from the server, but in this case the data that is sent to the server has to have additional parameters. Setting datatype to local permits intervening before the request is made to build the request correctly. See the \nNested Set Model\n and \nAdjacency Model\n on what is posted to the server\n\n\n\n\n\n\n\n\n\n\n\n\nrecord\n means the record object from data parameter, which can be obtained via the getRowData method like this:\nvar record = jQuery(\"#grid_id\").jqGrid('getRowData', rowid, true);\n\nNote the second parameter in the method. If the second parameter is omitted or set to false (default) the returned value is the from the current (view-able) data set. If the row can not be found a false is returned.", 
            "title": "TreeGrid"
        }, 
        {
            "location": "/user-guide/treegrid/#treegrid", 
            "text": "TreeGrid is a way to represent hierarchical data in grid. \nTreeGrid supports both the  Nested Set  model and the  Adjacency model . Good articles describing the Nested Set model can be found here:  Storing Hierarchical Data in a Database  Managing Hierarchical Data in MySQL   Warning  Before you begin with the tree grid, it is highly recommended to read the articles listed above or any other related to hierarchical data representation articles.   When implemented the Guriddo jqGrid TreeGrid can look like this:", 
            "title": "TreeGrid"
        }, 
        {
            "location": "/user-guide/treegrid/#options", 
            "text": "The following options can be set in the grid options to configure the treeGrid     Property  Type  Description  Default      ExpandColClick  boolean  when true, the tree is expanded and/or collapsed when we click on the text of the expanded column, not only on the image  true    ExpandColumn  string  indicates which column (name from colModel) should be used to expand the tree grid. If not set the first one is used. Valid only when treeGrid option is set to true.  null    expColInd  integer  The index of the column in colModel which correspond to the ExpandColumn. It is set automatically from the script  0    treedatatype  mixed  Determines the initial datatype (see datatype option). Usually this should not be changed. During the reading process this option is equal to the datatype option.  null    treeGrid  boolean  Enables (disables) the tree grid format.  false    treeGrid_bigData  boolean  Enables ( if set to true) the tree grid pagging with root nodes as described  here  false    treeGridModel  string  Determines the method used for the treeGrid. Can be nested or adjacency.  nested    treeIcons  object  This object set the icons used in the tree. The icons are defined in styleUI object property treegrid. The default values are:  {  plus: treegrid.icon_plus,  minus: treegrid.icon_minus,  leaf: treegrid.icon_leaf  }     treeReader  object  extends the colModel defined in the basic grid. The fields described here are added to end of the colModel array and are hidden. This means that the data returned from the server should have values for these fields. For a full description of all valid values see below.  empty    tree_root_level  numeric  Determines the level where the root element begins when treeGrid is enabled  0     The treeReader property (which is part from grid options) adds dynamically columns to the colModel property of the basic grid when treeGrid property is set to true. Syntax:  treeReader   :   { \n   property1   :   value1 \n   ... \n   propertyN   :   valueN  }   The treeReader property adds different columns in the colModel depending on the treeGridModel property - i.e. we have different configurations for the different models -  Nested Set Model  and  Adjacency Model .", 
            "title": "Options"
        }, 
        {
            "location": "/user-guide/treegrid/#methods", 
            "text": "In the methods below, the following parameters are mostly used:   record  rowid   record  means the record object from data parameter, which can be obtained via the getRowData method like this:  var   record   =   jQuery ( #grid_id ). jqGrid ( getRowData ,   rowid ,   true );   Note the second parameter in the method. If the second parameter is omitted or set to false (default) the returned value is the from the current (view-able) data set. If the row can not be found a false is returned.  rowid  is the id of the row.   addChildNode( nodeid, parentid, data, [expandData] )  Add a node in the tree according the value of the parentid parameter. The nodeid is the unique values in the row. If set to empty string the method gets the next max number + 1 from the data. if parendid is null the node is added as root. If the parentid is valid id of existing row the data is added as child of the that row. Data is a data to be inserted.  parameters   nodeid -string - a unique value of the row to be set. If not set it is calculated as max+1 length of the data  parentid - string - if null the node is added as root. If set and is valid id the row is added as a child.  data - object - data to be added into the grid in name:value pair. Name correspond from colModel  expandData - boolean - if set to true the data row is expanded. Default is false   return \nnothing   collapseNode( record ) \nCollapse the node at specified record - set expanded field to false and and toggle the icon to collapsed. Method usually is used after collapseRow method  parametric   record 1  - object   return \njqGrid object   collapseRow( record ) \nCollapses the current row, making the children hidden. Method is usually used before collapseNode method  parameters   record 1  - object   return \njqGrid object   delChildren( rowid )  Deletes the children of the node identified by rowid. The method does not delete the children on server.  parameters   rowid - string   return \njqGrid object   delTreeNode( rowid )  Deletes the specified node identified by rowid and all child nodes of that node. Does not delete the node at server  parameters   rowid - string   return \njqGrid object   expandNode( record ) \nExpand the node at specified record - set expanded field to true and and toggle the icon to expanded. Method usually is used after expandRow method  parameters   record 1  - object   return \njqGrid object   expandRow( record ) \nExpanded the current row, making the children visible. Method is usually used before expandNode method  parameters   record 1  - object   return \njqGrid object   getFullTreeNode(record, [expand]) \nReturns array of all nodes of the specified record; returns empty array if none. If the parameter  expand  is true the expand property is set to true.  parameters   record 1  - object  expand - boolean   return \narray   getNodeAncestors( record ) \nReturns array of the ancestors of the specified record  parameters   record 1  - object   return \narray   getNodeChildren( record, [currentview] ) \nReturns array of child nodes of the specified record; returns empty array if none. If the parameter  currentview  is true the data is returned formatted as displayed into the grid, if false the source (non formatted) data is returned. Default is false.  parameters   record 1  - object  currentview - boolean   return \narray   getNodeDepth( record ) \nReturn the depth of the specified record  parameters   record 1  - object   return \ninteger or null   getNodeParent( record ) \nReturns the parent node of the specified record  parameters   record 1  - object   return \nobject   getRootNodes( [currentview] ) \nReturn an array of the root nodes. If the parameter  currentview  is true the data is returned formatted as displayed into the grid, if false the source (non formatted) data is returned. Default is false.  parameters   currentview - boolean   return \narray   isNodeLoaded( record ) \nReturns true if the node is already loaded  parameters   record 1  - object   return \nboolean   isVisibleNode( record ) \nReturns true or false if the node is visible or not  parameters   record 1  - object   return \nboolean   reloadNode(reccord, [reloadcurrent]) \nReload the only data of the node (and its children) specified with record. If the reloadcurrent parameter is true (default is false) the data of the record is reloaded too, if false only child nodes are reloaded.  parameters   record 1  - object  reloadcurrent - boolean   return \njqGrid object   setLeaf( record, state, [collapsed]) \nVisually set node (record) to a leaf or change it status to be not a leaf. Usually the method is used when all the child nodes are deleted and the status of the parent should be set to leaf or if a child node is added to leaf node. The status is set with the state parameter, if set to false the node is marked as leaf, if true as parent. The collapsed parameter have effect only if the state is true. If this parameter is true a the plus icon is set and the node is marked as collapsed.  parameters   record 1  - object  state - boolean  collapsed - boolean   return \njqGrid object   searchTree( recs ) \nThis method is used when a search is activated on local data. The method does not perform a search on server. Parameter passed to this method are records which contain the search result. The purpose of the method is to return all ancestors from the search results. The method is used in  addLocalData  when a search is activated.  parameters   recs - array of records with search result   return \narray of search result with ancestors included.   setTreeRow( rowid, data) \nUpdates the values in the tree (using the data object) in the row with id = rowid.  parameters   rowid - string - the id of the row to be updated  data - object - The syntax of data object is: {name1:value1,name2: value2\u2026} where the name is the name of the column as described in the colModel and the value is the new value.   return \nboolen true on success, false otherwise.   SortTree( sortname, dir, [sorttype], [datefmt]) \nSort dynamically the tree grid by given name  sortname  and direction  dir . The name should be valid name from colModel and direction can be 'asc' for ascending order and 'desc' for descending order. Optionally the  sorttype  parameter (see colModel sorttype) can be set and date format  datefmt  if the field is date. The method work when multi sorting is on.  parameters   sortname - string - a name from colModel  dir - string can be asc or desc  sortype - string the type of the field to be sorted - text, numeric,...  datefmt - string the date format of the field in case a date is sorted   return \njqGrid object", 
            "title": "Methods"
        }, 
        {
            "location": "/user-guide/treegrid/#events", 
            "text": "Below is the list of \"option\" and triggered events. The name of every triggered event begin with  jqGrid  and is set below the option event.   Note  The first parameter of the triggered event is always event. It should be used before any other parameter. By example if the described parameters in options event are a,b,c - i.e event(a,b,c), in triggered event we need to use triggered_event(e, a, b, c)    Note  the triggered event is bind to the grid and is not passed to to any options. See  Triggered events   The triggered event is below the option event in the list   beforeSetTreeNode(index, len)  jqGridBeforeSetTreeNode(event, index, len) \nThe event is called before to set new tree nodes in the grid. Note that the data is already inserted into the grid.  parameters   index - integer - the starting grid row index from where to apply the setting for the tree node  len - integer - how many rows to process   returns \nnothing   afterSetTreeNode(index, len)  jqGridAfterSetTreeNode(event, index, len) \nThe event is called after the new tree nodes are set in the grid.  parameters   index - integer - the starting grid row index from where to apply the setting for the tree node  len - integer - how many rows to process   returns \nnothing   beforeExpandTreeGridRow(rowid, record, children)  jqGridBeforeExpandTreeGridRow(rowid, record, children) \nThe event is called before to expand the tree grid row when the user click on the plus icon. Actually the event is executed in   expandRow  method. If defined the event should return true or false. If the event return false the expanding is not performed.  parameters   rowid - string id of the row to be expanded  record - object - the row data for the expanded row  children - array - child nodes (if any) for the expanded row   return \nboolean   afterExpandTreeGridRow(rowid, record, children)  jqGridAfterExpandTreeGridRow(event, rowid, record, children)  The event is called after the tree grid row is expanded, when the user click on the plus icon. Actually the event is executed in   expandRow  method.  parameters   rowid - string id of the row to be expanded  record - object - the row data for the expanded row  children - array - child nodes (if any) for the expanded row   return \nnothing   beforeCollapseTreeGridRow(rowid, record, children)  jqGridBeforeCollapseTreeGridRow(event, rowid, record, children) \nThe event is called before to collapse the tree grid row when the user click on the minus(collapse) icon. Actually the event is executed in   collapseRow  method. If defined the event should return true or false. If the event return false the collapse is not performed.  parameters   rowid - string id of the row to be collapsed  record - object - the row data for the expanded row  children - array - child nodes (if any) for the expanded row   return \nboolean   afterCollapseTreeGridRow(rowid, record, children)  jqGridAfterCollapseTreeGridRow(event, rowid, record, children)  The event is called after the tree grid row is collapsed, when the user click on the minus (collapse) icon. Actually the event is executed in   collapseRow  method.  parameters   rowid - string id of the row to be expanded  record - object - the row data for the expanded row  children - array - child nodes (if any) for the expanded row   return \nnothing   beforeExpandTreeGridNode( rowid, record )  jqGridBeforeExpandTreeGridNode(event, rowid, record) \nThe event is called before to expand the tree grid node when the user click on the plus icon. Actually the event is executed in   expandNode  method. If defined the event should return true or false. If the event return false the expanding is not performed.  parameters   rowid - string id of the row to be expanded  record - object - the row data for the expanded row   return \nboolean   afterExpandTreeGridNode(rowid, record)  jqGridAfterExpandTreeGridNode(event, rowid, record)  The event is called after the tree grid node is expanded, when the user click on the plus icon. Actually the event is executed in   expandNode  method.  parameters   rowid - string id of the row to be expanded  record - object - the row data for the expanded row   return \nnothing   beforeCollapseTreeGridNode(rowid, record)  jqGridBeforeCollapseTreeGridNode(event, rowid, record)  The event is called before collapsing the tree grid node when the user click on the minus(collapse) icon. Actually the event is executed in   collapseNode  method. If defined the event should return true or false. If the event return false the collapse is not performed.  parameters   rowid - string id of the row to be collapsed  record - object - the row data for the expanded row   return \nboolean   afterCollapseTreeGridNode(rowid, record )  jqGridAfterCollapseTreeGridNode(event, rowid, record)  The event is called after the tree grid node is collapsed, when the user click on the minus (collapse) icon. Actually the event is executed in   collapseNode  method.  parameters   rowid - string id of the row to be expanded  record - object - the row data for the expanded row   return \nnothing", 
            "title": "Events"
        }, 
        {
            "location": "/user-guide/treegrid/#nested-set-model", 
            "text": "One of the important part to use when nested set model is used is the treeReader property. Configuring this properly and understanding the basic concept of the nested set model will make your life easy.", 
            "title": "Nested Set Model"
        }, 
        {
            "location": "/user-guide/treegrid/#nested-set-config", 
            "text": "To use the nested set model we need first to set the  treeGridModel  options to 'nested', which is default:  $ ( #grid_id ). jqGrid ({ \n   ... \n   treeGridModel   :   nested , \n   ...  });   Second step is to configure the treeReader object. The default values are:  treeReader   :   { \n   level_field :   level , \n   left_field : lft , \n   right_field :   rgt , \n   leaf_field :   isLeaf , \n   expanded_field :   expanded , \n   loaded :   loaded , \n   icon_field :   icon  }      Property  Type  Description      level_field  number  This field determines the level in the hierarchy of the element. Usually the root element will be at level 0.The first child of the root is at level 1 and so on. This information is needed for the grid to set the ident of every element.    left_field  number  The rowid of the field to the left    right_field  number  The rowid of the field to the right    leaf_field  boolean  This field should tell the grid that the element is leaf. Possible values can be true and false. To the leaf element is attached different image and this element can not be expanded or collapsed.    expanded_field  boolean  Tells the grid whether this element should be expanded during the loading (true or false). If the element has no value, false is set. Note that the data can be empty for this element, but this element can not be removed from data set.    loaded  boolean  This field is optional and indicates if the node and its children are loaded    icon_field  string  This field is optional and if set replaces icon for the leaf field. The content should be a valid icon name from the used css framework     The third step is optional and is the configuration of  tree_root_level  grid option. By default its value is 0. This option tell which level has the root element.  After configuration of the reader it is needed to know what is posted to the server in order to load the child nodes properly. In case of auto-loading tree nodes and click on the plus icon, we post the following parameters: (the postData array is extended whith these fields)  postData   :   { \n    ... \n    nodeid :   record . id , \n    n_left :   record . lft , \n    n_right :   record . rgt , \n    n_level :   record . level , \n    ...  }   Where   nodeid contain the id of the currently expanded record  n_left contain the left value of the currently expanded row  n_right contain the right value of the currently expanded row  n_level contain the level value of the currently expanded row", 
            "title": "Nested set config"
        }, 
        {
            "location": "/user-guide/treegrid/#nested-set-example", 
            "text": "In order to understand the the process of configuring and using the tree grid here we provide full example: using the PHP as server and MySQL as database.   Note  This example is for demonstration purposes and should not be used in public sites, since it is not \nprotected from SQL Injection attacks.   Data Preparation  Let us suppose that we have an general account where some accounts are children of the main accounts and some accounts have no child account. In most cases account has name, number, debt, credit and optional balance fields.  In order to represent the account in nested set mode we need to add additionally three fields account_id, left and right fields. In MySQl the words left and right are reserved words, so our table look like this:  account_id, name, account_number, Debit, Credit, Balance, lft, rgt  where   account_id is the unique id of the account (in our grid this should be the rowid)  lft indicates the left_field, and  rgt indicates the right_field   Lets create this table in MySQL  CREATE   TABLE   accounts   ( \n   account_id   int ( 11 )   NOT   NULL   AUTO_INCREMENT , \n   name   varchar ( 30 )   NOT   NULL , \n   acc_num   varchar ( 10 )   NULL , \n   debit   decimal ( 10 , 2 )   DEFAULT   0.00 , \n   credit   decimal ( 10 , 2 )   DEFAULT   0.00 , \n   balance   decimal ( 10 , 2 )   DEFAULT   0.00 , \n   lft   int ( 11 )   NOT   NULL , \n   rgt   int ( 11 )   NOT   NULL , \n   PRIMARY   KEY    ( ` account_id ` )  );   and add some data:  INSERT   INTO   accounts   VALUES   ( 1 ,   Cash ,   100 ,   400 . 00 ,   250 . 00 ,   150 . 00 ,   1 ,   8 );  INSERT   INTO   accounts   VALUES   ( 2 ,   Cash 1 ,   1 ,   300 . 00 ,   200 . 00 ,   100 . 00 ,   2 ,   5 );  INSERT   INTO   accounts   VALUES   ( 3 ,   Sub Cash 1 ,   1 ,   300 . 00 ,   200 . 00 ,   100 . 00 ,   3 ,   4 );  INSERT   INTO   accounts   VALUES   ( 4 ,   Cash 2 ,   2 ,   100 . 00 ,   50 . 00 ,   50 . 00 ,   6 ,   7 );  INSERT   INTO   accounts   VALUES   ( 5 ,   Bank s ,   200 ,   1500 . 00 ,   1000 . 00 ,   500 . 00 ,   9 ,   14 );  INSERT   INTO   accounts   VALUES   ( 6 ,   Bank 1 ,   1 ,   500 . 00 ,   0 . 00 ,   500 . 00 ,   10 ,   11 );  INSERT   INTO   accounts   VALUES   ( 7 ,   Bank 2 ,   2 ,   1000 . 00 ,   1000 . 00 ,   0 . 00 ,   12 ,   13 );  INSERT   INTO   accounts   VALUES   ( 8 ,   Fixed asset ,   300 ,   0 . 00 ,   1000 . 00 ,   - 1000 . 00 ,   15 ,   16 );   With this information we can now construct the treeGrid.  TreeGrid Preparation  Since we know the table names our grid setup is:  The html definition  ...\n   table   id  =   treegrid / table \n   div   id  =   ptreegrid / div \n...  Tha JavaScript definition  ...  jQuery ( #treegrid ). jqGrid ({ \n   treeGrid :   true , \n   treeGridModel :   nested , \n   ExpandColumn   :   name , \n   url :   server.php?q=tree , \n   datatype :   json , \n   jsonReader   :   { \n     repeatitems   :   false \n   }, \n   mtype :   POST , \n   colNames : [ id , Account , Acc Num ,   Debit ,   Credit , Balance ], \n   colModel : [ \n     { name : account_id , index : account_id ,   width : 1 , hidden : true , key : true }, \n     { name : name , index : name ,   width : 180 }, \n     { name : acc_num , index : acc_num ,   width : 80 ,   align : center }, \n     { name : debit , index : debit ,   width : 80 ,   align : right },       \n     { name : credit , index : credit ,   width : 80 , align : right },       \n     { name : balance , index : balance ,   width : 80 , align : right }       \n   ], \n   height : auto , \n   pager   :   #ptreegrid , \n   caption :   Treegrid example  });  ...   Since jqGrid currently does not support paging, when we have a treegrid the pager elements are disabled automatically.  Server Code: Loading at once  Loading all the nodes at once is an approach used when we have relatively few elements in the data table. To do this, our single SQL is:  SELECT \n     node . account_id , \n     node . name , \n     node . acc_num , \n     node . debit , \n     node . credit , \n     node . balance , \n     ( COUNT ( parent . name )   -   1 )   AS   level , \n     node . lft , \n     node . rgt  FROM   accounts   AS   node ,  accounts   AS   parent  WHERE   node . lft   BETWEEN   parent . lft   AND   parent . rgt  GROUP   BY   node . name  ORDER   BY   node . lft ;   In Nested Set model, determining if the node is a leaf is easy: this is just comparison of rgt = lft+1. \nNote how we calculate the  level  element  Now we are ready to prepare our server side code. Below are examples in PHP and MySQL using PDO mysql driver with json data.  The  server.php  file is like this:  ?php  // connection to the server  $conn   =   new   PDO ( DB_DSN , DB_USER , DB_PASSWORD );  //use utf-8  $conn - query ( SET NAMES utf8 );  // number of records in the response  $sth   =   $conn - prepare ( SELECT COUNT(*) as count FROM accounts2 );  $sth - execute ();  // calculate the number of rows returned  $result   =   $sth - fetch ( PDO :: FETCH_NUM );  $count   =   $result [ 0 ];  $sth - closeCursor ();  $SQL   =   SELECT   . node.account_id,   . node.name,   . node.acc_num,   . node.debit,   . node.credit,   . node.balance,   . (COUNT(parent.name) - 1) AS level,   . node.lft,   . node.rgt   . FROM accounts2 AS node,   . accounts2 AS parent   . WHERE node.lft BETWEEN parent.lft AND parent.rgt   . GROUP BY node.name   . ORDER BY node.lft ;  // execute the SQL  $sth2   =   $conn - prepare (   $SQL   );  $sth2 - execute ();  // build the response  $response   =   new   stdClass ();  $response - page   = 1 ;  $response - total   = 1 ;  $response - records   =   $count ;  while ( $row   =   $sth2 - fetch ( PDO :: FETCH_OBJ )   )   { \n     $row - leaf   =   false ; \n     if ( $row - rgt   ===   $row - lft   +   1   )   { \n         $row - leaf   =   true ; \n     } \n   $row - loaded   =   true ; \n     $row - expanded   =   false ; \n     $response - rows []   =   $row ;  }  header ( Content-type: text/x-json;charset=utf-8 );  // output the data to json  echo   json_encode ( $response );   In case there is a requirement to expand nodes when the data is loaded set the last value (expanded) to true  Server Code: Auto loading tree  If there is a relative large data set with a deep structure, it is better to load the data when we need it, i.e. when a parent is clicked we retrieve the child records. So first we display only the root elements; when a root element is clicked on, the grid automatically detects that there is no data and tries to load the needed information by passing the needed parameters to the server. This is where the level_field and isLeaf field are so important.  In this case we can use our previous query producing only the elements at the requested level. (This query can be optimized, but this is out of scope for this explanation).  ?php  // Connection to the server  $conn   =   new   PDO ( DB_DSN , DB_USER , DB_PASSWORD );  // Tell the db that we use utf-8  $conn - query ( SET NAMES utf8 );  //$node =  (integer)$_REQUEST[ nodeid ];  $node   =   filter_input ( INPUT_POST ,   nodeid ,   FILTER_SANITIZE_NUMBER_INT );  // detect if here we post the data from allready loaded tree  // we can make here other checks  // var_dump($node);  $ADDWHERE   =   ;  if (   ( int ) $node     0 )   { \n     $n_lft   =   filter_input ( INPUT_POST ,   n_left ,   FILTER_SANITIZE_NUMBER_INT ); \n     $n_rgt   =   filter_input ( INPUT_POST ,   n_right ,   FILTER_SANITIZE_NUMBER_INT ); \n     ( int ) $n_lvl   =   filter_input ( INPUT_POST ,   n_level ,   FILTER_SANITIZE_NUMBER_INT ); \n     $ADDWHERE   =    AND parent.lft    . $n_lft .  AND parent.rgt    . $n_rgt ; \n     $lwh   =   $n_lvl + 1 ;  }   else   { \n     // initial grid \n     $n_lvl   =   0 ; \n     $lwh = 0 ;  }  $SQL   =   SELECT   . node.account_id,   . node.name,   . node.acc_num,   . node.debit,   . node.credit,   . node.balance,   . (COUNT(parent.name) - 1 +  . $n_lvl . ) AS level,   . node.lft,   . node.rgt   . FROM accounts AS node,   . accounts AS parent   . WHERE node.lft BETWEEN parent.lft AND parent.rgt    . $ADDWHERE  .  GROUP BY node.name  .  ORDER BY node.lft ;  //var_dump($SQL);  // execute the SQL  $sth   =   $conn - prepare (   $SQL   );  $sth - execute ();  // build the response  $response   =   new   stdClass ();  $response - page   = 1 ;  $response - total   = 1 ;  $response - records   =   1 ;  while ( $row   =   $sth - fetch ( PDO :: FETCH_OBJ )   )   { \n     $row - leaf   =   false ; \n     if ( $row - rgt   ===   $row - lft   +   1   )   { \n         $row - leaf   =   true ; \n     } \n     //$row- expanded = false; \n     //$row- loaded = false; \n     if (   ( int ) $n_lvl   ==    ( int ) $row - level )   { \n         $row - level   =   $lwh ; \n         $response - rows []   =   $row ; \n     }  }  header ( Content-type: text/x-json;charset=utf-8 );  // output the data to json  echo   json_encode ( $response );", 
            "title": "Nested set example"
        }, 
        {
            "location": "/user-guide/treegrid/#adjacency-model", 
            "text": "One of the important part is the treeReader property. Configuring this properly and understanding the basic concept of the adjacency model will make your life easy.", 
            "title": "Adjacency Model"
        }, 
        {
            "location": "/user-guide/treegrid/#adjacency-model-config", 
            "text": "The default treeReader Configuration when we use tree grid with adjacency model is:  treeReader   =   { \n   level_field :   level , \n   parent_id_field :   parent , \n   leaf_field :   isLeaf , \n   expanded_field :   expanded \n   loaded :   loaded , \n   icon_field :   icon  }   The treeReader automatically extends the colModel with these fields, added and hidden at end of the colModel. Data returned from the server or local array now needs to include information for these fields for constructing the tree grid. The treeReader can be extended so that the fields match your requirements.  The only difference from nested set model is that the left_field and right_field are replaced with parent_id_field. This element indicates that the record has a parent with an id of parent_id_field. If the parent id is NULL the element is a root element.     Property  Type  Description      level_field  number  This field determines the level in the hierarchy of the element. Usually the root element will be at level 0.The first child of the root is at level 1 and so on. This information is needed for the grid to set the ident of every element.    parent_id_field  mixed  indicates if the record has a parent with an id of parent_id_field. If the parent id is NULL the element is a root element    leaf_field  boolean  This field should tell the grid that the element is leaf. Possible values can be true and false. To the leaf element is attached different image and this element can not be expanded or collapsed.    expanded_field  boolean  Tells the grid whether this element should be expanded during the loading (true or false). If the element has no value, false is set. Note that the data can be empty for this element, but this element can not be removed from data set.    loaded  boolean  This field is optional and indicates if the node and its children are loaded    icon_field  string  This field is optional and if set replaces icon for the leaf field. The content should be a valid icon name from the used css framework     After the configuration of the reader it is need to know what is post-ed to the server in order to load the child nodes properly? In case of auto lading tree nodes post-ed are the following parameters: (the postData array is extended)  postData   :   { \n    ... \n    nodeid : rc . id , \n    parentid : rc . parent_id , \n    n_level : rc . level    \n    ...  }    nodeid contain the id of the currently expanded record  parentid is the parent_id value of the currently expanded row  n_level contain the level value of the currently expanded row", 
            "title": "Adjacency model config"
        }, 
        {
            "location": "/user-guide/treegrid/#adjacency-model-example", 
            "text": "In order to understand the the process of configuring the tree grid here we provide full example:  Data Preparation \nLet us suppose that we have an general account where some accounts are children of the main accounts and some accounts have no child account. In most cases account has name, number, debt, credit and optional balance fields.  In order to represent the table in the Adjacency model we need to add two additional fields account_id and parent_id . The table in this case is:  account_id, name, account_number, Debit, Credit, Balance, parent_id  where: \n- account_id is the unique id of the account (in our grid this should be the rowid) \n- parent_id indicates the parent_id_field in the grid  In MySQL terms this table can be represented as  CREATE   TABLE   accounts   ( \n   account_id   int ( 11 )   NOT   NULL   AUTO_INCREMENT , \n   name   varchar ( 30 )   NOT   NULL , \n   acc_num   varchar ( 10 )   NULL , \n   debit   decimal ( 10 , 2 )   DEFAULT   0.00 , \n   credit   decimal ( 10 , 2 )   DEFAULT   0.00 , \n   balance   decimal ( 10 , 2 )   DEFAULT   0.00 , \n   parent_id   int ( 11 )   DEFAULT   NULL , \n   PRIMARY   KEY    ( ` account_id ` )  );   And let's add some data  INSERT   INTO   accounts   VALUES   ( 1 ,   Cash ,   100 ,   400 . 00 ,   250 . 00 ,   150 . 00 ,   NULL );  INSERT   INTO   accounts   VALUES   ( 2 ,   Cash 1 ,   1 ,   300 . 00 ,   200 . 00 ,   100 . 00 ,   1 );  INSERT   INTO   accounts   VALUES   ( 3 ,   Sub Cash 1 ,   1 ,   300 . 00 ,   200 . 00 ,   100 . 00 ,   2 );  INSERT   INTO   accounts   VALUES   ( 4 ,   Cash 2 ,   2 ,   100 . 00 ,   50 . 00 ,   50 . 00 ,   1 );  INSERT   INTO   accounts   VALUES   ( 5 ,   Bank s ,   200 ,   1500 . 00 ,   1000 . 00 ,   500 . 00 , NULL );  INSERT   INTO   accounts   VALUES   ( 6 ,   Bank 1 ,   1 ,   500 . 00 ,   0 . 00 ,   500 . 00 ,   5 );  INSERT   INTO   accounts   VALUES   ( 7 ,   Bank 2 ,   2 ,   1000 . 00 ,   1000 . 00 ,   0 . 00 ,   5 );  INSERT   INTO   accounts   VALUES   ( 8 ,   Fixed asset ,   300 ,   0 . 00 ,   1000 . 00 ,   - 1000 . 00 ,   NULL );   With this information we can now construct the jqGrid TreeGrid.  The html definition  ...\n   table   id  =   treegrid / table \n   div   id  =   ptreegrid / div \n...  Tha JavaScript definition  ...  jQuery ( #treegrid ). jqGrid ({ \n   treeGrid :   true , \n   treeGridModel :   adjacency , \n   ExpandColumn   :   name , \n   url :   server_2.php?q=tree , \n   datatype :   json , \n   jsonReader   :   { \n     repeatitems   :   false \n   }, \n   // parent fields need to be configured \n   treeReader   :   { \n    parent_id_field :   parent_id \n   }, \n   mtype :   POST , \n   colNames : [ id , Account , Acc Num ,   Debit ,   Credit , Balance ], \n   colModel : [ \n     { name : account_id , index : account_id ,   width : 1 , hidden : true , key : true }, \n     { name : name , index : name ,   width : 180 }, \n     { name : acc_num , index : acc_num ,   width : 80 ,   align : center }, \n     { name : debit , index : debit ,   width : 80 ,   align : right },       \n     { name : credit , index : credit ,   width : 80 , align : right },       \n     { name : balance , index : balance ,   width : 80 , align : right }       \n   ], \n   height : auto , \n   pager   :   #ptreegrid , \n   caption :   Treegrid example  });  ...   Server Code: Loading all the nodes at once  Loading all the nodes at once works well when we have relatively few elements and the tree has only a few levels. \nLoading data in the Adjacency model is little difficult, since it requires recursion and, where the depth of the tree is great, this will take a lot of time. There are some techniques that overcome this problem, but in our case we will use the standard approach. Autoloading tree nodes (described in the next section below) is much simpler and does not require recursion.  PHP code for loading nodes at once (tested)  ?php  // Connection to the server  $conn   =   new   PDO ( DB_DSN , DB_USER , DB_PASSWORD );  // Tell the db that we use utf-8  $conn - query ( SET NAMES utf8 );  // First we need to determine the leaf nodes  $SQLL   =   SELECT t1.account_id FROM accounts AS t1 LEFT JOIN accounts as t2   .  ON t1.account_id = t2.parent_id WHERE t2.account_id IS NULL ;  $sth   =   $conn - prepare ( $SQLL );  $sth - execute ();  // calculate the number of rows returned  $leafnodes   =   array ();  while ( $rw   =   $sth - fetch ( PDO :: FETCH_ASSOC ))   { \n    $leafnodes [ $rw [ account_id ]]   =   $rw [ account_id ];  }  // build the response  $response   =   new   stdClass ();  $response - page   = 1 ;  $response - total   = 1 ;  $response - records   =   1 ;  $response - rows   =   array ();  // Recursive function that do the job  function   display_node ( $parent ,   $level )   { \n     global   $leafnodes ,   $response ,   $conn ; \n     if ( $parent   0 )   { \n         $wh   =   parent_id= . $parent ; \n     }   else   { \n         $wh   =   ISNULL(parent_id) ; \n     } \n     $SQL   =   SELECT account_id, name, acc_num, debit, credit, balance, parent_id FROM accounts WHERE  . $wh ; \n     $stm   =   $conn - prepare ( $SQL ); \n     $stm - execute (); \n\n     while ( $row   =   $stm - fetch ( PDO :: FETCH_OBJ ))   { \n         $row - level   =   $level ; \n         $row - parent_id   =   ! $row - parent_id   ?   NULL   :   $row - parent_id ; \n         $row - isLeaf   =   false ; \n         if (   isset ( $leafnodes [ $row - account_id ])     $row - account_id   ==   $leafnodes [ $row - account_id ]   )   { \n             $row - isLeaf   =   true ; \n         } \n         $row - expanded   =   false ; \n         $row - loaded   =   true ; \n         $response - rows []   =   $row ; \n         display_node (( integer ) $row - account_id , $level + 1 ); \n     } \n     $stm - closeCursor ();  }  display_node ( , 0 );  header ( Content-type: text/x-json;charset=utf-8 );  // output the data to json  echo   json_encode ( $response );   Server Code: Auto loading tree  Auto loading the tree is the recommended approach when using adjacency model in jqGrid. Here, we can make simple query without any need to provide for recursion.  Below is the PHP code (tested)  ?php  // First we need to determine the leaf nodes  $SQLL   =   SELECT t1.account_id FROM accounts AS t1 LEFT JOIN accounts as t2   .  ON t1.account_id = t2.parent_id WHERE t2.account_id IS NULL ;  $sth   =   $conn - prepare ( $SQLL );  $sth - execute ();  // calculate the number of rows returned  $leafnodes   =   array ();  while ( $rw   =   $sth - fetch ( PDO :: FETCH_ASSOC ))   { \n    $leafnodes [ $rw [ account_id ]]   =   $rw [ account_id ];  }  // build the response  $response   =   new   stdClass ();  $response - page   = 1 ;  $response - total   = 1 ;  $response - records   =   1 ;  $response - rows   =   array ();  // Get parameters from the grid  $node   =   filter_input ( INPUT_POST ,   nodeid ,   FILTER_SANITIZE_NUMBER_INT );  $n_lvl   =   filter_input ( INPUT_POST ,   n_level ,   FILTER_SANITIZE_NUMBER_INT );  if ( $node   ==   null   )   $node   =   0 ;  if ( $n_lvl   ==   null   )   $n_lvl   =   0 ;  if (( int ) $node     0 )   {   //check to see which node to load \n    $wh   =   parent_id= . $node ;   // parents \n    $n_lvl   =   $n_lvl + 1 ;   // we should ouput next level  }   else   { \n    $wh   =   ISNULL(parent_id) ;   // roots  }  $SQL   =   SELECT account_id, name, acc_num, debit, credit, balance, parent_id FROM accounts WHERE  . $wh ;  $stm   =   $conn - prepare ( $SQL );  $stm - execute ();  while ( $row   =   $stm - fetch ( PDO :: FETCH_OBJ ))   { \n     $row - level   =   $n_lvl ; \n     $row - parent_id   =   ! $row - parent_id   ?   NULL   :   $row - parent_id ; \n     $row - isLeaf   =   false ; \n     if (   isset ( $leafnodes [ $row - account_id ])     $row - account_id   ==   $leafnodes [ $row - account_id ]   )   { \n         $row - isLeaf   =   true ; \n     } \n     $row - expanded   =   false ; \n     $row - loaded   =   false ; \n     $response - rows []   =   $row ;  }  $stm - closeCursor ();  header ( Content-type: text/x-json;charset=utf-8 );  // output the data to json  echo   json_encode ( $response );", 
            "title": "Adjacency model example"
        }, 
        {
            "location": "/user-guide/treegrid/#paging", 
            "text": "As of version 5.3 we support pagination in the Tree Grid. To enable this it is needed to set the grid option  treeGrid_bigData : true . It important to note that  \nthe data returned from server should contain only root nodes, while the rest of child node should be loaded \non request of  data when we click on the root node. This can be show in the example above  Server Code: Auto loading tree", 
            "title": "Paging"
        }, 
        {
            "location": "/user-guide/treegrid/#example-of-paging", 
            "text": "The html definition  ...\n   table   id  =   treegrid / table \n   div   id  =   ptreegrid / div \n...  Tha JavaScript definition  ...  jQuery ( #treegrid ). jqGrid ({ \n   treeGrid :   true , \n   treeGrid_bigData   :   true , \n   treeGridModel :   adjacency , \n   ExpandColumn   :   name , \n   url :   server_2.php?q=tree , \n   datatype :   json , \n   jsonReader   :   { \n     repeatitems   :   false \n   }, \n   // parent fields need to be configured \n   treeReader   :   { \n    parent_id_field :   parent_id \n   }, \n   mtype :   POST , \n   colNames : [ id , Account , Acc Num ,   Debit ,   Credit , Balance ], \n   colModel : [ \n     { name : account_id , index : account_id ,   width : 1 , hidden : true , key : true }, \n     { name : name , index : name ,   width : 180 }, \n     { name : acc_num , index : acc_num ,   width : 80 ,   align : center }, \n     { name : debit , index : debit ,   width : 80 ,   align : right },       \n     { name : credit , index : credit ,   width : 80 , align : right },       \n     { name : balance , index : balance ,   width : 80 , align : right }       \n   ], \n   height : auto , \n   pager   :   #ptreegrid , \n   caption :   Treegrid example , \n   rowNum   :   3 , \n   rowList   :   [ 3 , 6 , 9 ]  });  ...   PHP code (tested)  ?php  // First we need to determine the leaf nodes  $SQLL   =   SELECT t1.account_id FROM accounts AS t1 LEFT JOIN accounts as t2   .  ON t1.account_id = t2.parent_id WHERE t2.account_id IS NULL ;  $sth   =   $conn - prepare ( $SQLL );  $sth - execute ();  // calculate the number of rows returned  $leafnodes   =   array ();  while ( $rw   =   $sth - fetch ( PDO :: FETCH_ASSOC ))   { \n    $leafnodes [ $rw [ account_id ]]   =   $rw [ account_id ];  }  // build the response  $response   =   new   stdClass ();  $response - page   = 1 ;  $response - total   = 1 ;  $response - records   =   1 ;  $response - rows   =   array ();  // Get parameters from the grid  $node   =   filter_input ( INPUT_POST ,   nodeid ,   FILTER_SANITIZE_NUMBER_INT );  $n_lvl   =   filter_input ( INPUT_POST ,   n_level ,   FILTER_SANITIZE_NUMBER_INT );  if ( $node   ==   null   )   $node   =   0 ;  if ( $n_lvl   ==   null   )   $n_lvl   =   0 ;  if (( int ) $node     0 )   {   //check to see which node to load \n    $wh   =   parent_id= . $node ;   // parents \n    $n_lvl   =   $n_lvl + 1 ;   // we should ouput next level  }   else   { \n    $wh   =   ISNULL(parent_id) ;   // roots  }  $SQL   =   SELECT account_id, name, acc_num, debit, credit, balance, parent_id FROM accounts WHERE  . $wh ;  $stm   =   $conn - prepare ( $SQL );  $stm - execute ();  while ( $row   =   $stm - fetch ( PDO :: FETCH_OBJ ))   { \n     $row - level   =   $n_lvl ; \n     $row - parent_id   =   ! $row - parent_id   ?   NULL   :   $row - parent_id ; \n     $row - isLeaf   =   false ; \n     if (   isset ( $leafnodes [ $row - account_id ])     $row - account_id   ==   $leafnodes [ $row - account_id ]   )   { \n         $row - isLeaf   =   true ; \n     } \n     $row - expanded   =   false ; \n     $row - loaded   =   false ; \n     $response - rows []   =   $row ;  }  $stm - closeCursor ();  header ( Content-type: text/x-json;charset=utf-8 );  // output the data to json  echo   json_encode ( $response );", 
            "title": "Example of paging:"
        }, 
        {
            "location": "/user-guide/treegrid/#limitations", 
            "text": "Pager  can be used, but its functionality currently are disabled for treeGrid  When we initialize the grid and the data is read, the datatype is automatically set to local. This is required because treegrid supports autoloading tree nodes. This means that, for speed or efficiency, you can load the data only for the root level first and load the data for a particular child node only when the operator clicks to expand that node. The grid will determine that there is no data and try to load the node from the server, but in this case the data that is sent to the server has to have additional parameters. Setting datatype to local permits intervening before the request is made to build the request correctly. See the  Nested Set Model  and  Adjacency Model  on what is posted to the server       record  means the record object from data parameter, which can be obtained via the getRowData method like this: var record = jQuery(\"#grid_id\").jqGrid('getRowData', rowid, true); \nNote the second parameter in the method. If the second parameter is omitted or set to false (default) the returned value is the from the current (view-able) data set. If the row can not be found a false is returned.", 
            "title": "Limitations"
        }, 
        {
            "location": "/user-guide/pivotgrid/", 
            "text": "PivotGrid\n\n\n\n\nSimple we can say that pivot table is a program tool that allows you to reorganize and summarize\n\nselected columns and rows of data in a spreadsheet or database table to obtain a desired report.\n\nA pivot table doesn't actually change the spreadsheet or database itself. In database lingo, to\n\npivot is to turn the data to view it from different perspectives.\n\n\nMore deeper information can be found in \nWikipedia\n\n\nWhat is jqPivotGrid\n\n\njqPivotGrid is a component that you can use with jqGrid to create a pivot grid. Let\u2019s say that we have the following table with some sales data and following fields:\n\n\nproduct name, category name, country, price and quantity\n\n\nIf you want to edit, search delete this data, you could easily use jqGrid features.\n\n\n\n\nWhat would you do if you had to answer the following questions?\n\n\n\n\nWhat are the order amounts of each category?\n\n\nWhat are the order amounts of each in a specific country?\n\n\nWhat are the order amounts and quantity of each category and product in specific country and their totals?\n\n\n\n\nUsing jqPivotGrid these requirements can be easy solved and this is how they would be done:\n\n\n\n\n\n\n\n\nUsing jqPivotGrid\n\n\njqPivotGrid inherits the jqGrid, so you can use most of the features you are already familiar with: column re-sizing, formatter, cell renders, row/cell events etc. The jqPivotGrid can be used when you want to get summation and pivot features that aren\u2019t provided in the jqGrid.\n\n\nTo break down the data-set into categories and country, you have to configure the x and y Dimensions:\n\n\nxDimension\n \n:\n \n[{\n\n    \ndataName\n:\n \nCategoryName\n\n\n}],\n\n\nyDimension\n \n:\n \n[\n \n{\n\n    \ndataName\n:\n \nCountry\n\n\n}]\n\n\n\n\n\n\nMultiple levels are supported, so you can specify them in the y and x Dimensions. Grouping the rows and/or columns is done automatically when two or more levels are set in xDimension and/or yDimension.\n\n\nNow that you broke down the data-set on the y and x Dimension, it\u2019s time to aggregate the cell values. Several kinds of aggregations are available including: sum, min, max, count etc. Future release will provide your own aggregation function.\n\n\naggregates\n \n:\n \n[{\n\n    \nmember\n \n:\n \nPrice\n,\n\n    \naggregator\n \n:\n \nsum\n,\n\n    \nwidth\n:\n50\n,\n\n    \nlabel\n:\nSum\n\n\n},{\n\n    \nmember\n \n:\n \nQuantity\n,\n\n    \naggregator\n \n:\n \ncount\n,\n\n    \nwidth\n:\n50\n,\n\n    \nlabel\n:\n \nCount\n\n\n}]\n\n\n\n\n\n\nAs you have probably noticed in the above example, you could aggregate multiple data fields, say \"Price\" and \"Quantity\". You can easily achieve this by configuring all required aggregations.\n\n\n\n\nShowing the grand totals for rows and/or columns is pretty easy to configure (\"rowTotals: true\" or \"colTotals: true\"). The group totals are also available via rowTotals or colTotals configs.\n\n\nCurrently the pivot grid uses JSON data only as data source.\n\n\nConfiguration\n\n\njqPivotGrid has the following calling convention\n\n\njQuery\n(\n#grid\n).\njqGrid\n(\njqPivot\n,\n \ndata\n,\n \npivotoptions\n,\n \ngridoptions\n,\n \najaxoptions\n);\n\n\n\n\n\n\nWhere\n\n\n\n\n#grid is the id of the table element as used in the jqGrid.\n\n\n\n\nIt is not needed to call first jqGrid to build the table. It is needed to call jqPivot method. This method internally reconstruct the data depending on xDimension, yDimension and aggregates and create automatically jqGrid with predefined colModel and grouping options.\n\n\nWhen created the jqPivot method automatically set the datatype to local and all future calculations are done at client side.\n\n\nThis method can be combined with \nExporting\n.\n\n\nBellow is description of all pivot parameters\n\n\ndata\n\n\nCommonly the pivot grid uses currently only JSON data as data source. The data parameter can be:\n\n\n\n\narray  \n\n\nstring\n\n\n\n\n\n\nWhen the data is array jqPivot expect the data in a name:value pair like in the following example structure :\n\n\n[\n\n\n{\nCategoryName\n:\nBeverages\n,\n \nProductName\n:\nSteeleye Stout\n,\n \nCountry\n:\nUK\n,\n \nPrice\n:\n1008.0000\n,\n \nQuantity\n:\n65\n},\n\n\n{\nCategoryName\n:\nBeverages\n,\n \nProductName\n:\nLaughing Lumberjack Lager\n,\n \nCountry\n:\nUSA\n,\n \nPrice\n:\n140.0000\n,\n \nQuantity\n:\n10\n},\n\n\n{\nCategoryName\n:\nBeverages\n,\n \nProductName\n:\nLakkalik\n,\n \nCountry\n:\nUSA\n,\n \nPrice\n:\n2160.0000\n,\n \nQuantity\n:\n120\n},\n\n\n...\n\n\n]\n\n\n\n\n\n\n\n\nIn case the parameter is a string a ajax request is made. The data that is returned from the server should have a name value pair like this:\n\n\n{\nrows\n:\n[\n\n\n{\nCategoryName\n:\nBeverages\n,\n \nProductName\n:\nSteeleye Stout\n,\n \nCountry\n:\nUK\n,\n \nPrice\n:\n1008.0000\n,\n \nQuantity\n:\n65\n},\n\n\n{\nCategoryName\n:\nBeverages\n,\n \nProductName\n:\nLaughing Lumberjack Lager\n,\n \nCountry\n:\nUSA\n,\n \nPrice\n:\n140.0000\n,\n \nQuantity\n:\n10\n},\n\n\n{\nCategoryName\n:\nBeverages\n,\n \nProductName\n:\nLakkalik\n,\n \nCountry\n:\nUSA\n,\n \nPrice\n:\n2160.0000\n,\n \nQuantity\n:\n120\n},\n\n\n...\n\n\n]}\n\n\n\n\n\n\nThe \nrows\n property name can be configured from the \najaxoptions\n - see below.\n\n\nThe method expect all the needed data to be passed to the pivot. This means that no other special handling on server should be done. All other next transformations are done at client side and the jqPivotGrid build its new data to be displayed.\n\n\npivotoptions\n\n\nThis is a object with following properties and default values.\n\n\n\n\nNote\n\n\nThe pivot can be build only if the xDimension and aggregates are not empty arrays.\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\naggregates\n\n\narray\n\n\nDefines the aggregates records and builds the pivot. The array should have at minimum one set of object and should always be defined. If no aggregates is set, the pivot will not be build. All properties of \ncolModel\n can be set. For all available properties \nsee below\n\n\nempty\n\n\n\n\n\n\ncolTotals\n\n\nboolean\n\n\nIf set to true additional footer row is build. All pivot fields are summarized. Note that only summary function is aplied.\n\n\nfalse\n\n\n\n\n\n\nfrozenStaticCols\n\n\nboolean\n\n\nIf set to true all fields defined in xDimension (see below) are set as frozen so that when scroll horizontally theses fields are always visible.\n\n\nfalse\n\n\n\n\n\n\ngroupSummary\n\n\nboolean\n\n\nWith this option we summarizes the groups and subgroups if they are available. If set to false no summations are available.\n\n\ntrue\n\n\n\n\n\n\ngroupSummaryPos\n\n\nstring\n\n\nDefines where the summary row should appear - at top of the group or at bottom. Available options are 'header' (top row) or 'footer' (bottom row)\n\n\nheader\n\n\n\n\n\n\nrowTotals\n\n\nboolean\n\n\nIf set to true additional column is build ed which summarizes all column values of the row.\n\n\nfalse\n\n\n\n\n\n\nrowTotalsText\n\n\nstring\n\n\nSet the column label of the column if rowTotals is set to true\n\n\nTotal\n\n\n\n\n\n\nxDimension\n\n\narray\n\n\nDefines the xDimension used by the grid. These values are the cells from source data that appear as rows in the grid. When more that one object element is set a grouping appear automatically. The hierarchy begin from the first object element. The last element is the last element in grouping. All properties of \ncolModel\n can be set. \nSee below\n for the remaining options.\n\n\nempty\n\n\n\n\n\n\nyDimension\n\n\narray\n\n\nDefines the yDimension used by the grid. The values are build ed dynamically depend on the data. Every element in array is a object. When more than one object element is set a header grouping appear automatically. The hierarchy begin from the first object element. The last element is the last element in header grouping. \nSee below\n for the remaining options.\n\n\nempty\n\n\n\n\n\n\nignoreCase\n\n\nboolean\n\n\nBy defalt grouping of data is case-sensitive. If you want the grouping to be non case-sensitive (i.e jqGrid and jqgrid will be grouping in one group when pivot is build-ed) set this option to true\n\n\nfalse\n\n\n\n\n\n\n\n\naggregates\n\n\nThis array contain object elements. The element(s) build aggregates records and is a collection of items that are gathered together to form a total quantity.Typical it can look like this:\n\n\naggregates\n \n:\n \n[\n\n    \n{\n \nmember\n \n:\n \nPrTotal\n,\n\n      \naggregator\n \n:\n \nsum\n,\n\n      \nlabel\n:\nSum\n,\n\n      \nwidth\n:\n50\n,\n\n      \nformatter\n:\n \nnumber\n,\n\n      \nsummaryType\n \n:\n \nsum\n,\n\n      \nalign\n:\nright\n\n    \n},{\n\n      \nmember\n \n:\n \nPrTotal\n,\n\n      \naggregator\n \n:\n \ncount\n,\n\n      \nwidth\n:\n50\n,\n\n      \nlabel\n:\n \nCount\n,\n\n      \nsummaryType\n \n:\n \nsum\n,\n\n      \nformatter\n:\ninteger\n,\n\n      \nalign\n:\nright\n\n    \n}\n\n\n]\n\n\n\n\n\n\nA dimension \nmember\n is a discrete name or identifier used to identify a data item's position and description within a dimension. The value (name property from name:value pair - see above) should be present in source data.\n\n\nThe \naggregator\n defines the action which should be applied. Currently we have\n\n\n\n\nsum - make summarization\n\n\ncount - count the number of items in the group\n\n\nmin - find the minimal value\n\n\nmax - find the maximal value\n\n\navg - make average\n\n\nfunction - custom function to define a custom calculations. To this function we pass the following parameters. The function should return value.\n\n\nvalue - the current value. Initially it is undefined\n\n\nfieldName - the name of the field used for calculations\n\n\nrecord - the current record as defined in the source data\n\n\n\n\n\n\n\n\nThe \nlabel\n property appear only if the length of the aggregates is greater than one. In this case we create additional group header which summarizes the aggregates. The label is taken from the data.\n\n\nAll properties of \ncolModel\n can be set here.\n\n\nThe below code will use custom function to simulate a summarization.\n\n\n// function to perform calculation\n\n\nfunction\n \nmySum\n(\n \nvalue\n,\n \nfieldName\n,\n \nrecord\n)\n \n{\n\n  \nreturn\n \nparseFloat\n(\nvalue\n \n||\n \n0\n)\n \n+\n \nparseFloat\n((\nrecord\n[\nfieldName\n]\n \n||\n \n0\n));\n\n\n}\n\n\n...\n\n\n// aggregates array\n\n\nmyAggregates\n \n:\n \n[\n\n    \n{\n \nmember\n \n:\n \nPrTotal\n,\n\n      \naggregator\n \n:\n \nmySum\n,\n\n      \nlabel\n:\nSum\n,\n\n      \nwidth\n:\n50\n,\n\n      \nformatter\n:\n \nnumber\n,\n\n      \nsummaryType\n \n:\n \nsum\n,\n\n      \nalign\n:\nright\n\n    \n},{\n\n      \nmember\n \n:\n \nPrTotal\n,\n\n      \naggregator\n \n:\n \ncount\n,\n\n      \nwidth\n:\n50\n,\n\n      \nlabel\n:\n \nCount\n,\n\n      \nsummaryType\n \n:\n \nsum\n,\n\n      \nformatter\n:\ninteger\n,\n\n      \nalign\n:\nright\n\n    \n}\n\n\n];\n\n\n...\n\n\n// calling th epivot\n\n\njQuery\n(\n#grid\n).\njqGrid\n(\njqPivot\n,\n\n  \nmydataurl.php\n,\n\n  \n{\n\n      \naggregates\n \n:\n \nmyAggregates\n,\n\n      \n...\n\n  \n},...);\n\n\n\n\n\n\nxDimension\n\n\nAs described \nhere\n \nThe dimension is a data set composed of individual, non-overlapping data elements. The primary functions of dimensions are threefold: to provide filtering, grouping and labeling.\n\n\nExample:\n\n\nxDimension\n \n:\n \n[\n\n \n{\n\n   \ndataName\n:\n \nCategoryName\n,\n\n   \nisGroupField\n \n:\n \ntrue\n\n   \nlabel\n:\n \nCategory\n,\n\n   \nwidth\n:\n \n70\n\n \n}\n \n,\n \n{\n\n   \ndataName\n:\n \nProductName\n,\n\n   \nisGroupField\n \n:\n \nfalse\n\n   \nlabel\n:\n \nProduct\n,\n\n   \nfrozen\n:\n \nfalse\n\n \n}\n\n\n]\n\n\n\n\n\n\ndataName\n is a cell from data that appear as cell in the row. The value of this should correspond to a name in the data source.\n\n\nisGroupField\n  - by default this option is true and determine if the field should be grouped when set. If this property is used to display certain or important information without to perform any grouping or calculation  set it to false.\n\n\nAll properties of \ncolModel\n can be set here.\n\n\nIf the pivot options \nfrozenStaticCols\n is set to true the frozen property is set automatically. You can overwrite this by set a \nfrozen:false\n in the object, but be a carefully with the order.\n\n\nyDimension\n\n\nThe element object values build dynamically columns depend on the data source.\n\n\nExample:\n\n\nyDimension\n \n:\n \n[\n\n    \n{\n\n        \ndataName\n:\n \nCountry\n,\n\n        \nconverter\n:\n \nfunction\n(\nValue\n,\n \nxValues\n)\n \n{\n\n            \nreturn\n \nTotal Countryies\n;\n\n        \n}\n\n    \n},{\n\n        \ndataName\n:\n \nCountry\n\n    \n}\n\n\n]\n\n\n\n\n\n\nPossible options are:\n\n\ndataName\n is a cell from data which build the column. The value of this should correspond to a name in the data source\n\n\nconverter\n is function which can convert the source cell data  corresponded to a dataName and return new value. The parameters passed to this functions are:\n\n- Value - the value from data\n\n- xValues - array - the \"static\" data from the row defined in xDimention. Actually this is array of the dataName in xDimension\n\n\ngridoptions\n\n\nThese options are \noptions of the grid\n. You can set any of them.\n\n\najaxoptions\n\n\nWhen the data is obtained via ajax we can set additional ajax options. Note that currently we support only JSON data, so some ajax options like dataType is not recommended to be changed. Again with this we have a \nreader\n option which defines the root data. By example if the data that is returned from the server has the following structure:\n\n\n{\nroot\n:\n[\n\n\n{\nCategoryName\n:\nBeverages\n,\n \nProductName\n:\nSteeleye Stout\n,\n \nCountry\n:\nUK\n,\n \nPrice\n:\n1008.0000\n,\n \nQuantity\n:\n65\n},\n\n\n{\nCategoryName\n:\nBeverages\n,\n \nProductName\n:\nLaughing Lumberjack Lager\n,\n \nCountry\n:\nUSA\n,\n \nPrice\n:\n140.0000\n,\n \nQuantity\n:\n10\n},\n\n\n{\nCategoryName\n:\nBeverages\n,\n \nProductName\n:\nLakkalik\n,\n \nCountry\n:\nUSA\n,\n \nPrice\n:\n2160.0000\n,\n \nQuantity\n:\n120\n},\n\n\n...\n\n\n]}\n\n\n\n\n\n\nIn order to read correct this data in pivot we need to define the reader property like this:\n\n\njQuery\n(\n#grid\n).\njqGrid\n(\njqPivot\n,\n\n   \njsondataurl.json\n,\n\n   \n{\npivotoptions\n},\n\n   \n{\ngridoptions\n},\n\n   \n{\n\n     \nreader\n:\nroot\n\n   \n}\n\n\n);\n\n\n\n\n\n\nExample\n\n\nWith this example we will try to explain and build pivot grid from source data to final pivot. Now - lets go first with the data.\n\n\nSource data\n\n\nLet\u2019s say that we have a table with sales data with the following fields:\n\n\n\n\ncategory name\n\n\nproduct name\n\n\ncountry\n\n\ntotalprice\n\n\nquantity\n\n\n\n\nThis can be seen on the picture below:\n\n\n\n\nThis grid view is achieved with jqGrid with the following code:\n\n\njQuery\n(\ndocument\n).\nready\n(\nfunction\n(){\n\n\n...\n\n \njQuery\n(\n#grid\n).\njqGrid\n(\n\n \n{\n\n   \nurl\n \n:\n \ndata.json\n,\n\n   \nloadonce\n:\n \ntrue\n,\n\n   \ncolModel\n \n:\n \n[\n\n     \n{\n \nname\n:\n \nCategoryName\n},\n\n     \n{\n \nname\n:\n \nProductName\n \n},\n\n     \n{\n \nname\n:\n \nCountry\n},\n\n     \n{\n \nname\n:\n \nPrice\n,\n \nformatter\n:\n \nnumber\n,\n \nalign\n:\n \nright\n},\n\n     \n{\n \nname\n:\n \nQuantity\n,\n \nformatter\n:\ninteger\n,\n \nalign\n:\nright\n}\n\n   \n],\n\n   \ndatatype\n:\njson\n,\n\n   \nwidth\n:\n \n700\n,\n\n   \nrowNum\n \n:\n \n10\n,\n\n   \npager\n:\n \n#pager\n,\n\n   \ncaption\n:\n \nGrid\n\n \n});\n\n \n...\n\n\n});\n\n\n\n\n\n\nThe data is obtained from Northwind database with the following SQL:\n\n\nSELECT\n\n   \nc\n.\nCategoryName\n,\n\n   \nb\n.\nProductName\n,\n\n   \ne\n.\nCountry\n,\n\n   \nSUM\n(\n \na\n.\nQuantity\n \n*\n \na\n.\nUnitPrice\n \n)\n \nAS\n \nPrice\n,\n\n   \nSUM\n(\na\n.\nQuantity\n)\n \nAS\n \nQuantity\n\n\nFROM\n\n   \norder_details\n \na\n,\n\n   \nproducts\n \nb\n,\n\n   \ncategories\n \nc\n,\n\n   \norders\n \nd\n,\n\n   \ncustomers\n \ne\n\n\nWHERE\n\n   \na\n.\nProductID\n \n=\n \nb\n.\nProductID\n\n   \nAND\n \nb\n.\nCategoryID\n \n=\n \nc\n.\nCategoryID\n\n   \nAND\n \na\n.\nOrderID\n \n=\n \nd\n.\nOrderID\n\n   \nAND\n \nd\n.\nCustomerID\n \n=\n \ne\n.\nCustomerID\n\n   \nAND\n \n(\ne\n.\nCountry\n \n=\n \nUK\n \nOR\n \ne\n.\nCountry\n \n=\n \nUSA\n)\n\n\nGROUP\n \nBY\n\n   \na\n.\nProductID\n,\n\n   \ne\n.\nCountry\n\n\n\n\n\n\nThe JSON response from the server obtained via ajax ( the option url:\"data.json\") has the following structuure:\n\n\n{\nrows\n:\n[\n\n\n{\nCategoryName\n:\nBeverages\n,\n \nProductName\n:\nSteeleye Stout\n,\n \nCountry\n:\nUK\n,\n \nPrice\n:\n1008.0000\n,\n \nQuantity\n:\n65\n},\n\n\n{\nCategoryName\n:\nBeverages\n,\n \nProductName\n:\nLaughing Lumberjack Lager\n,\n \nCountry\n:\nUSA\n,\n \nPrice\n:\n140.0000\n,\n \nQuantity\n:\n10\n},\n\n\n{\nCategoryName\n:\nBeverages\n,\n \nProductName\n:\nLakkalik\n,\n \nCountry\n:\nUSA\n,\n \nPrice\n:\n2160.0000\n,\n \nQuantity\n:\n120\n},\n\n\n...\n\n\n]}\n\n\n\n\n\n\nLet say that your boss want to know the sales for the categories and products for the given countries. Of course this can be achieved with another SQL query, but your provider does not allow you to add new query or to change the existing one. What to do?\n\n\nYou can use the jqPivotGrid to solve this requirement, without to make changes to the server side responses. Let see how to do this, setting the pivot options\n\n\nOptions settings\n\n\nLooking into the task we can see that the categories and products are fields which will be used in our grid. This data is \"static\" and we should describe this in jqPivot Grid. This is achieved with xDimension option:\n\n\n...\n\n\nxDimension\n \n:\n \n[\n\n  \n{\n\n      \ndataName\n:\n \nCategoryName\n,\n\n      \nlabel\n \n:\n \nCategory\n,\n\n      \nwidth\n \n:\n \n90\n\n  \n},\n \n{\n\n      \ndataName\n:\n \nProductName\n,\n\n      \nlabel\n:\n \nProduct\n,\n\n      \nwidth\n:\n \n90\n\n  \n}\n\n\n]\n\n\n\n\n\n\nWith this setting we instruct jqPivot Grid that the data will be grouped first by Category and then by Product. These fields should be taken from the JSON response which names are CategoryName and ProductName (see the JSON response above).\n\n\nNext we should determine which field is the country field. With this setting we will generate dynamic columns (yDimension). Seen into the source data this is the Country field. Now the settings is:\n\n\n...\n\n\nyDimension\n \n:\n \n[\n\n  \n{\n\n     \ndataName\n:\n \nCountry\n\n  \n}\n\n\n]\n\n\n\n\n\n\nThe missed part is: which fields we should actually summarize? This is achieved with the aggregates option using the fields Price and Quantity.\n\n\naggregates\n \n:\n \n[\n\n\n{\n\n  \nmember\n \n:\n \nPrice\n,\n\n  \naggregator\n \n:\n \nsum\n,\n\n  \nwidth\n:\n50\n,\n\n  \nlabel\n:\nSum\n\n\n},\n \n{\n\n  \nmember\n \n:\n \nQuantity\n,\n\n  \naggregator\n \n:\n \nsum\n,\n\n  \nwidth\n:\n50\n,\n\n  \nlabel\n:\nQty\n\n\n}]\n\n\n\n\n\n\nTo summarize the columns and rows we need to set  - rowTotal : true and colTotal: true in pivot options.\n\n\nThe final code with jqGrid setting is:\n\n\nhead\n\n\n...\n\n\nscript\n \ntype\n=\ntext/javascript\n\n\njQuery\n(\ndocument\n).\nready\n(\nfunction\n(){\n\n\n \njQuery\n(\n#grid\n).\njqGrid\n(\njqPivot\n,\n\n \ndata1.json\n,\n\n \n// pivot options\n\n \n{\n\n   \nxDimension\n \n:\n \n[\n\n                  \n{\ndataName\n:\n \nCategoryName\n,\n \nlabel\n \n:\n \nCategory\n,\n \nwidth\n:\n \n90\n},\n\n                  \n{\ndataName\n:\n \nProductName\n,\n \nlabel\n \n:\n \nProduct\n,\n \nwidth\n:\n90\n}\n\n               \n],\n\n   \nyDimension\n \n:\n \n[\n\n                  \n{\ndataName\n:\n \nCountry\n}\n\n               \n],\n\n   \naggregates\n \n:\n \n[\n\n     \n{\nmember\n \n:\n \nPrice\n,\n \naggregator\n \n:\n \nsum\n,\n \nwidth\n:\n50\n,\n \nlabel\n:\nSum\n},\n\n     \n{\nmember\n \n:\n \nQuantity\n,\n \naggregator\n \n:\n \nsum\n,\n \nwidth\n:\n50\n,\n \nlabel\n:\nQty\n}\n\n   \n],\n\n   \nrowTotals\n:\n \ntrue\n\n   \ncolTotals\n \n:\n \ntrue\n\n\n \n},\n\n \n// grid options\n\n \n{\n\n   \nwidth\n:\n \n700\n,\n\n   \nrowNum\n \n:\n \n10\n,\n\n   \npager\n:\n \n#pager\n,\n\n   \ncaption\n:\n \nAmounts and quantity by category and product\n\n \n});\n\n\n});\n\n\n/script\n\n \n/head\n\n \nbody\n\n\n...\n\n    \ntable\n \nid\n=\ngrid\n/table\n\n    \ndiv\n \nid\n=\npager\n/div\n\n\n...\n\n  \n/body\n\n\n/html\n\n\n\n\n\n\nThe final result look like this:", 
            "title": "PivotGrid"
        }, 
        {
            "location": "/user-guide/pivotgrid/#pivotgrid", 
            "text": "Simple we can say that pivot table is a program tool that allows you to reorganize and summarize \nselected columns and rows of data in a spreadsheet or database table to obtain a desired report. \nA pivot table doesn't actually change the spreadsheet or database itself. In database lingo, to \npivot is to turn the data to view it from different perspectives.  More deeper information can be found in  Wikipedia", 
            "title": "PivotGrid"
        }, 
        {
            "location": "/user-guide/pivotgrid/#what-is-jqpivotgrid", 
            "text": "jqPivotGrid is a component that you can use with jqGrid to create a pivot grid. Let\u2019s say that we have the following table with some sales data and following fields:  product name, category name, country, price and quantity  If you want to edit, search delete this data, you could easily use jqGrid features.   What would you do if you had to answer the following questions?   What are the order amounts of each category?  What are the order amounts of each in a specific country?  What are the order amounts and quantity of each category and product in specific country and their totals?   Using jqPivotGrid these requirements can be easy solved and this is how they would be done:", 
            "title": "What is jqPivotGrid"
        }, 
        {
            "location": "/user-guide/pivotgrid/#using-jqpivotgrid", 
            "text": "jqPivotGrid inherits the jqGrid, so you can use most of the features you are already familiar with: column re-sizing, formatter, cell renders, row/cell events etc. The jqPivotGrid can be used when you want to get summation and pivot features that aren\u2019t provided in the jqGrid.  To break down the data-set into categories and country, you have to configure the x and y Dimensions:  xDimension   :   [{ \n     dataName :   CategoryName  }],  yDimension   :   [   { \n     dataName :   Country  }]   Multiple levels are supported, so you can specify them in the y and x Dimensions. Grouping the rows and/or columns is done automatically when two or more levels are set in xDimension and/or yDimension.  Now that you broke down the data-set on the y and x Dimension, it\u2019s time to aggregate the cell values. Several kinds of aggregations are available including: sum, min, max, count etc. Future release will provide your own aggregation function.  aggregates   :   [{ \n     member   :   Price , \n     aggregator   :   sum , \n     width : 50 , \n     label : Sum  },{ \n     member   :   Quantity , \n     aggregator   :   count , \n     width : 50 , \n     label :   Count  }]   As you have probably noticed in the above example, you could aggregate multiple data fields, say \"Price\" and \"Quantity\". You can easily achieve this by configuring all required aggregations.   Showing the grand totals for rows and/or columns is pretty easy to configure (\"rowTotals: true\" or \"colTotals: true\"). The group totals are also available via rowTotals or colTotals configs.  Currently the pivot grid uses JSON data only as data source.", 
            "title": "Using jqPivotGrid"
        }, 
        {
            "location": "/user-guide/pivotgrid/#configuration", 
            "text": "jqPivotGrid has the following calling convention  jQuery ( #grid ). jqGrid ( jqPivot ,   data ,   pivotoptions ,   gridoptions ,   ajaxoptions );   Where   #grid is the id of the table element as used in the jqGrid.   It is not needed to call first jqGrid to build the table. It is needed to call jqPivot method. This method internally reconstruct the data depending on xDimension, yDimension and aggregates and create automatically jqGrid with predefined colModel and grouping options.  When created the jqPivot method automatically set the datatype to local and all future calculations are done at client side.  This method can be combined with  Exporting .  Bellow is description of all pivot parameters", 
            "title": "Configuration"
        }, 
        {
            "location": "/user-guide/pivotgrid/#data", 
            "text": "Commonly the pivot grid uses currently only JSON data as data source. The data parameter can be:   array    string    When the data is array jqPivot expect the data in a name:value pair like in the following example structure :  [  { CategoryName : Beverages ,   ProductName : Steeleye Stout ,   Country : UK ,   Price : 1008.0000 ,   Quantity : 65 },  { CategoryName : Beverages ,   ProductName : Laughing Lumberjack Lager ,   Country : USA ,   Price : 140.0000 ,   Quantity : 10 },  { CategoryName : Beverages ,   ProductName : Lakkalik ,   Country : USA ,   Price : 2160.0000 ,   Quantity : 120 },  ...  ]    In case the parameter is a string a ajax request is made. The data that is returned from the server should have a name value pair like this:  { rows : [  { CategoryName : Beverages ,   ProductName : Steeleye Stout ,   Country : UK ,   Price : 1008.0000 ,   Quantity : 65 },  { CategoryName : Beverages ,   ProductName : Laughing Lumberjack Lager ,   Country : USA ,   Price : 140.0000 ,   Quantity : 10 },  { CategoryName : Beverages ,   ProductName : Lakkalik ,   Country : USA ,   Price : 2160.0000 ,   Quantity : 120 },  ...  ]}   The  rows  property name can be configured from the  ajaxoptions  - see below.  The method expect all the needed data to be passed to the pivot. This means that no other special handling on server should be done. All other next transformations are done at client side and the jqPivotGrid build its new data to be displayed.", 
            "title": "data"
        }, 
        {
            "location": "/user-guide/pivotgrid/#pivotoptions", 
            "text": "This is a object with following properties and default values.   Note  The pivot can be build only if the xDimension and aggregates are not empty arrays.      Property  Type  Description  Default      aggregates  array  Defines the aggregates records and builds the pivot. The array should have at minimum one set of object and should always be defined. If no aggregates is set, the pivot will not be build. All properties of  colModel  can be set. For all available properties  see below  empty    colTotals  boolean  If set to true additional footer row is build. All pivot fields are summarized. Note that only summary function is aplied.  false    frozenStaticCols  boolean  If set to true all fields defined in xDimension (see below) are set as frozen so that when scroll horizontally theses fields are always visible.  false    groupSummary  boolean  With this option we summarizes the groups and subgroups if they are available. If set to false no summations are available.  true    groupSummaryPos  string  Defines where the summary row should appear - at top of the group or at bottom. Available options are 'header' (top row) or 'footer' (bottom row)  header    rowTotals  boolean  If set to true additional column is build ed which summarizes all column values of the row.  false    rowTotalsText  string  Set the column label of the column if rowTotals is set to true  Total    xDimension  array  Defines the xDimension used by the grid. These values are the cells from source data that appear as rows in the grid. When more that one object element is set a grouping appear automatically. The hierarchy begin from the first object element. The last element is the last element in grouping. All properties of  colModel  can be set.  See below  for the remaining options.  empty    yDimension  array  Defines the yDimension used by the grid. The values are build ed dynamically depend on the data. Every element in array is a object. When more than one object element is set a header grouping appear automatically. The hierarchy begin from the first object element. The last element is the last element in header grouping.  See below  for the remaining options.  empty    ignoreCase  boolean  By defalt grouping of data is case-sensitive. If you want the grouping to be non case-sensitive (i.e jqGrid and jqgrid will be grouping in one group when pivot is build-ed) set this option to true  false", 
            "title": "pivotoptions"
        }, 
        {
            "location": "/user-guide/pivotgrid/#aggregates", 
            "text": "This array contain object elements. The element(s) build aggregates records and is a collection of items that are gathered together to form a total quantity.Typical it can look like this:  aggregates   :   [ \n     {   member   :   PrTotal , \n       aggregator   :   sum , \n       label : Sum , \n       width : 50 , \n       formatter :   number , \n       summaryType   :   sum , \n       align : right \n     },{ \n       member   :   PrTotal , \n       aggregator   :   count , \n       width : 50 , \n       label :   Count , \n       summaryType   :   sum , \n       formatter : integer , \n       align : right \n     }  ]   A dimension  member  is a discrete name or identifier used to identify a data item's position and description within a dimension. The value (name property from name:value pair - see above) should be present in source data.  The  aggregator  defines the action which should be applied. Currently we have   sum - make summarization  count - count the number of items in the group  min - find the minimal value  max - find the maximal value  avg - make average  function - custom function to define a custom calculations. To this function we pass the following parameters. The function should return value.  value - the current value. Initially it is undefined  fieldName - the name of the field used for calculations  record - the current record as defined in the source data     The  label  property appear only if the length of the aggregates is greater than one. In this case we create additional group header which summarizes the aggregates. The label is taken from the data.  All properties of  colModel  can be set here.  The below code will use custom function to simulate a summarization.  // function to perform calculation  function   mySum (   value ,   fieldName ,   record )   { \n   return   parseFloat ( value   ||   0 )   +   parseFloat (( record [ fieldName ]   ||   0 ));  }  ...  // aggregates array  myAggregates   :   [ \n     {   member   :   PrTotal , \n       aggregator   :   mySum , \n       label : Sum , \n       width : 50 , \n       formatter :   number , \n       summaryType   :   sum , \n       align : right \n     },{ \n       member   :   PrTotal , \n       aggregator   :   count , \n       width : 50 , \n       label :   Count , \n       summaryType   :   sum , \n       formatter : integer , \n       align : right \n     }  ];  ...  // calling th epivot  jQuery ( #grid ). jqGrid ( jqPivot , \n   mydataurl.php , \n   { \n       aggregates   :   myAggregates , \n       ... \n   },...);", 
            "title": "aggregates"
        }, 
        {
            "location": "/user-guide/pivotgrid/#xdimension", 
            "text": "As described  here   The dimension is a data set composed of individual, non-overlapping data elements. The primary functions of dimensions are threefold: to provide filtering, grouping and labeling.  Example:  xDimension   :   [ \n  { \n    dataName :   CategoryName , \n    isGroupField   :   true \n    label :   Category , \n    width :   70 \n  }   ,   { \n    dataName :   ProductName , \n    isGroupField   :   false \n    label :   Product , \n    frozen :   false \n  }  ]   dataName  is a cell from data that appear as cell in the row. The value of this should correspond to a name in the data source.  isGroupField   - by default this option is true and determine if the field should be grouped when set. If this property is used to display certain or important information without to perform any grouping or calculation  set it to false.  All properties of  colModel  can be set here.  If the pivot options  frozenStaticCols  is set to true the frozen property is set automatically. You can overwrite this by set a  frozen:false  in the object, but be a carefully with the order.", 
            "title": "xDimension"
        }, 
        {
            "location": "/user-guide/pivotgrid/#ydimension", 
            "text": "The element object values build dynamically columns depend on the data source.  Example:  yDimension   :   [ \n     { \n         dataName :   Country , \n         converter :   function ( Value ,   xValues )   { \n             return   Total Countryies ; \n         } \n     },{ \n         dataName :   Country \n     }  ]   Possible options are:  dataName  is a cell from data which build the column. The value of this should correspond to a name in the data source  converter  is function which can convert the source cell data  corresponded to a dataName and return new value. The parameters passed to this functions are: \n- Value - the value from data \n- xValues - array - the \"static\" data from the row defined in xDimention. Actually this is array of the dataName in xDimension", 
            "title": "yDimension"
        }, 
        {
            "location": "/user-guide/pivotgrid/#gridoptions", 
            "text": "These options are  options of the grid . You can set any of them.", 
            "title": "gridoptions"
        }, 
        {
            "location": "/user-guide/pivotgrid/#ajaxoptions", 
            "text": "When the data is obtained via ajax we can set additional ajax options. Note that currently we support only JSON data, so some ajax options like dataType is not recommended to be changed. Again with this we have a  reader  option which defines the root data. By example if the data that is returned from the server has the following structure:  { root : [  { CategoryName : Beverages ,   ProductName : Steeleye Stout ,   Country : UK ,   Price : 1008.0000 ,   Quantity : 65 },  { CategoryName : Beverages ,   ProductName : Laughing Lumberjack Lager ,   Country : USA ,   Price : 140.0000 ,   Quantity : 10 },  { CategoryName : Beverages ,   ProductName : Lakkalik ,   Country : USA ,   Price : 2160.0000 ,   Quantity : 120 },  ...  ]}   In order to read correct this data in pivot we need to define the reader property like this:  jQuery ( #grid ). jqGrid ( jqPivot , \n    jsondataurl.json , \n    { pivotoptions }, \n    { gridoptions }, \n    { \n      reader : root \n    }  );", 
            "title": "ajaxoptions"
        }, 
        {
            "location": "/user-guide/pivotgrid/#example", 
            "text": "With this example we will try to explain and build pivot grid from source data to final pivot. Now - lets go first with the data.", 
            "title": "Example"
        }, 
        {
            "location": "/user-guide/pivotgrid/#source-data", 
            "text": "Let\u2019s say that we have a table with sales data with the following fields:   category name  product name  country  totalprice  quantity   This can be seen on the picture below:   This grid view is achieved with jqGrid with the following code:  jQuery ( document ). ready ( function (){  ... \n  jQuery ( #grid ). jqGrid ( \n  { \n    url   :   data.json , \n    loadonce :   true , \n    colModel   :   [ \n      {   name :   CategoryName }, \n      {   name :   ProductName   }, \n      {   name :   Country }, \n      {   name :   Price ,   formatter :   number ,   align :   right }, \n      {   name :   Quantity ,   formatter : integer ,   align : right } \n    ], \n    datatype : json , \n    width :   700 , \n    rowNum   :   10 , \n    pager :   #pager , \n    caption :   Grid \n  }); \n  ...  });   The data is obtained from Northwind database with the following SQL:  SELECT \n    c . CategoryName , \n    b . ProductName , \n    e . Country , \n    SUM (   a . Quantity   *   a . UnitPrice   )   AS   Price , \n    SUM ( a . Quantity )   AS   Quantity  FROM \n    order_details   a , \n    products   b , \n    categories   c , \n    orders   d , \n    customers   e  WHERE \n    a . ProductID   =   b . ProductID \n    AND   b . CategoryID   =   c . CategoryID \n    AND   a . OrderID   =   d . OrderID \n    AND   d . CustomerID   =   e . CustomerID \n    AND   ( e . Country   =   UK   OR   e . Country   =   USA )  GROUP   BY \n    a . ProductID , \n    e . Country   The JSON response from the server obtained via ajax ( the option url:\"data.json\") has the following structuure:  { rows : [  { CategoryName : Beverages ,   ProductName : Steeleye Stout ,   Country : UK ,   Price : 1008.0000 ,   Quantity : 65 },  { CategoryName : Beverages ,   ProductName : Laughing Lumberjack Lager ,   Country : USA ,   Price : 140.0000 ,   Quantity : 10 },  { CategoryName : Beverages ,   ProductName : Lakkalik ,   Country : USA ,   Price : 2160.0000 ,   Quantity : 120 },  ...  ]}   Let say that your boss want to know the sales for the categories and products for the given countries. Of course this can be achieved with another SQL query, but your provider does not allow you to add new query or to change the existing one. What to do?  You can use the jqPivotGrid to solve this requirement, without to make changes to the server side responses. Let see how to do this, setting the pivot options", 
            "title": "Source data"
        }, 
        {
            "location": "/user-guide/pivotgrid/#options-settings", 
            "text": "Looking into the task we can see that the categories and products are fields which will be used in our grid. This data is \"static\" and we should describe this in jqPivot Grid. This is achieved with xDimension option:  ...  xDimension   :   [ \n   { \n       dataName :   CategoryName , \n       label   :   Category , \n       width   :   90 \n   },   { \n       dataName :   ProductName , \n       label :   Product , \n       width :   90 \n   }  ]   With this setting we instruct jqPivot Grid that the data will be grouped first by Category and then by Product. These fields should be taken from the JSON response which names are CategoryName and ProductName (see the JSON response above).  Next we should determine which field is the country field. With this setting we will generate dynamic columns (yDimension). Seen into the source data this is the Country field. Now the settings is:  ...  yDimension   :   [ \n   { \n      dataName :   Country \n   }  ]   The missed part is: which fields we should actually summarize? This is achieved with the aggregates option using the fields Price and Quantity.  aggregates   :   [  { \n   member   :   Price , \n   aggregator   :   sum , \n   width : 50 , \n   label : Sum  },   { \n   member   :   Quantity , \n   aggregator   :   sum , \n   width : 50 , \n   label : Qty  }]   To summarize the columns and rows we need to set  - rowTotal : true and colTotal: true in pivot options.  The final code with jqGrid setting is:  head  ...  script   type = text/javascript  jQuery ( document ). ready ( function (){ \n\n  jQuery ( #grid ). jqGrid ( jqPivot , \n  data1.json , \n  // pivot options \n  { \n    xDimension   :   [ \n                   { dataName :   CategoryName ,   label   :   Category ,   width :   90 }, \n                   { dataName :   ProductName ,   label   :   Product ,   width : 90 } \n                ], \n    yDimension   :   [ \n                   { dataName :   Country } \n                ], \n    aggregates   :   [ \n      { member   :   Price ,   aggregator   :   sum ,   width : 50 ,   label : Sum }, \n      { member   :   Quantity ,   aggregator   :   sum ,   width : 50 ,   label : Qty } \n    ], \n    rowTotals :   true \n    colTotals   :   true \n\n  }, \n  // grid options \n  { \n    width :   700 , \n    rowNum   :   10 , \n    pager :   #pager , \n    caption :   Amounts and quantity by category and product \n  });  });  /script \n  /head \n  body  ... \n     table   id = grid /table \n     div   id = pager /div  ... \n   /body  /html   The final result look like this:", 
            "title": "Options settings"
        }, 
        {
            "location": "/user-guide/multiselect/", 
            "text": "Selection/ Multiselection \n\n\n\n\nSelection in jqGrid is enabled by default, and the user can select some row by a single click. When the row is selected a previously selected row is deselected and the new one is selected. When the selection is done we can query the selected row by row id and by index.\n\n\nWhen the row is selected it is colored with another color depending on the settings on styleUI css object definition. The name of this property is \nhighlight\n and is in common property. For Bootstrap the default class definition is:\n\n\nstyleUI\n \n:\n \n{\n\n  \n...\n\n  \nBootstrap\n \n:\n \n{\n\n    \ncommon\n \n:\n \n{\n\n      \n...\n\n      \nhighlight\n \n:\n \nsuccess\n,\n\n      \n...\n\n    \n...\n\n    \n}\n\n    \n...\n\n  \n}\n\n\n}\n\n\n\n\n\n\nMuti selection is way to select a multiple rows at once and do some actions with the selected rows.\n\n\nBelow are considered all the options and events related to selection and multiselection.\n\n\nDefinitions\n\n\nBy default jqGrid is configured to select a single row. To get the id of the selected row use the following code:\n\n\nvar\n \nselectedRow\n \n=\n  \n$\n(\n#grid_id\n).\njqGrid\n(\ngetGridParam\n,\n \nselrow\n);\n\n\n\n\n\n\nThe code above will return the id of the selected row. If there is no selected row a null is returned.\n\n\nTo get the index of the selected row use the following code.\n\n\nvar\n \nselectedRow\n \n=\n  \n$\n(\n#grid_id\n).\njqGrid\n(\ngetGridParam\n,\n \nselrow\n);\n\n\nvar\n \nselectedIndex\n \n$\n(\n#grid_id\n).\njqGrid\n(\ngetInd\n,\n \nselectedRow\n);\n\n\n\n\n\n\nTo enable multiselection use the following code:\n\n\n$\n(\n#grid_id\n).\njqGrid\n({\n\n  \n...\n\n  \nmultiselect\n \n:\n \ntrue\n,\n\n  \n...\n\n\n});\n\n\n\n\n\n\nWhen this option is set a new column automatically is added to the colModel. The name of this internally defined column is \ncb\n  It is displayed at first column at left when the \ndirection\n is set to \nltr\n and at right if it is set to \nrtl\n. The cell associated with this column is a checkbox and determine the sate of the row - if it is checked, the row is selected and if not the row is not selected. Additionally to this a new check box is build at grid header row. When click on this check box all the current visible rows in the grid are selected/deselected at once\n\n\nThis column by default is: not sortable, resizable and searchable. It is fixed, frozen and can be show/hide with the appropriate methods and with columnChooser one.\n\n\nThe default width of this column is 30 pixels. To change it use the option \nmultiselectWidth\n\n\n$\n(\n#grid_id\n).\njqGrid\n({\n\n  \n...\n\n  \nmultiselect\n \n:\n \ntrue\n,\n\n  \nmultiselectWidth\n \n:\n \n50\n,\n\n  \n...\n\n\n});\n\n\n\n\n\n\nTo get the selected rows when a multiselect is enabled do:\n\n\nvar\n \nselectedRows\n \n=\n  \n$\n(\n#grid_id\n).\njqGrid\n(\ngetGridParam\n,\n \nselarrrow\n);\n\n\n\n\n\n\nThe \nselectedRows\n variable is array which every element is a selected row id. If notihing is selected the array is empty - i.e selectedRows.length = 0;\n\n\nOptions and events\n\n\nAgain with the \nmultiselect\n and \nmultiselectWidth\n we have other related options.\n\n\nmultiboxonly\n if this optiopn is set to true and the multiselect is true the multiselection is possible only when the checkbox for the appropriate row is clicked. Clicking on any row outside this checkbox will deselect all rows and select the current clicked only.\n\n\nmultikey\n This string parameter makes sense only when the multiselect option is set to true. Defines the key which should be pressed when we make multiselection. The possible values are: shiftKey - the user should press Shift Key, altKey - the user should press Alt Key, and ctrlKey - the user should press Ctrl Key. When this parameter is set multibox parameter does not have effect.\n\n\nmultimail\n if this options is set to true and the multiselect is on, the selection is like Yahoo and Google mail. Multiselection is done so that the multiboxonly parameter is set to true with additional properties. Select one row. After this click on Shift key and checkbox only cell to select a row below or above of the selected row with two or more positions. All the rows in this interval will be selected. If the user click on another row using the check box this row is selected too. If the click  is not on the checkbox all the rows are deselected and the current is selected. It is possible to select multiple groups using the approach described above. To deselect a rows press the shiftKey and click on the one of the previously selected row -  the group will be deselected.\n\nWhen \nmultimail\n is on it is possible to set \nmultiboxonly\n parameter to true. In this case when click outside the checkbox and there are selected rows - nothing is happen - the multiselection is done only when a checkbox is click and when shiftKey is pressed and checkbox is clicked.\n\n\n\n\nCaution\n\n\nWhen multimail is set to true the onSelectRow event is executed only when multiboxonly is true and we click on row outside the checkbox. In all other cases the onSelectRow is not executed.\n\n\n\n\ndeselectAfterSort\n By default this option is true and determine how to process the selected rows (in multiselect mode) when sorting is performed. If it is false the selection is preserved after sorting a column, if it is true the selected rows are reset and sorting is done. This option is valid only if the datatype is local or loadonce parameter is set to true.\n\n\nonSelectAll( selected, status)\n\n\njqGridSelectAll(event, selected, status)\n\nThis event fires when multiselect option is true and you click on the header checkbox to select/deselect current grid rows. The parameters are as follow:\n\n\n\n\narray selected - array of the selected rows (rowid's). This parameter contain the id of the selected rows in case there is selection and is empty array when nothing is selected.\n\n\nboolean status - variable determining the status of the header check box - true if checked, false if not unchecked.\n\n\n\n\neditselected\n this parameter is available in editRow method or in navGrid method in editing options. When this option is set to true and multiselect is on too the form editing is possible only on the selected rows. Note that when using navigator buttons in form editing to navigate through the rows only the selected one are selected skipping the not selected one.\n\n\nNotes and Limitations\n\n\nThe following rules are valid when multiselct is on\n\n\n\n\nit is possible to use  subGrid\n\n\nit is possible to use grouping\n\n\nit is disabled when treeGrid is enabled.\n\n\nit is disabled when scroll option is set to 1 or true", 
            "title": "Multiselection"
        }, 
        {
            "location": "/user-guide/multiselect/#selection-multiselection", 
            "text": "Selection in jqGrid is enabled by default, and the user can select some row by a single click. When the row is selected a previously selected row is deselected and the new one is selected. When the selection is done we can query the selected row by row id and by index.  When the row is selected it is colored with another color depending on the settings on styleUI css object definition. The name of this property is  highlight  and is in common property. For Bootstrap the default class definition is:  styleUI   :   { \n   ... \n   Bootstrap   :   { \n     common   :   { \n       ... \n       highlight   :   success , \n       ... \n     ... \n     } \n     ... \n   }  }   Muti selection is way to select a multiple rows at once and do some actions with the selected rows.  Below are considered all the options and events related to selection and multiselection.", 
            "title": "Selection/ Multiselection "
        }, 
        {
            "location": "/user-guide/multiselect/#definitions", 
            "text": "By default jqGrid is configured to select a single row. To get the id of the selected row use the following code:  var   selectedRow   =    $ ( #grid_id ). jqGrid ( getGridParam ,   selrow );   The code above will return the id of the selected row. If there is no selected row a null is returned.  To get the index of the selected row use the following code.  var   selectedRow   =    $ ( #grid_id ). jqGrid ( getGridParam ,   selrow );  var   selectedIndex   $ ( #grid_id ). jqGrid ( getInd ,   selectedRow );   To enable multiselection use the following code:  $ ( #grid_id ). jqGrid ({ \n   ... \n   multiselect   :   true , \n   ...  });   When this option is set a new column automatically is added to the colModel. The name of this internally defined column is  cb   It is displayed at first column at left when the  direction  is set to  ltr  and at right if it is set to  rtl . The cell associated with this column is a checkbox and determine the sate of the row - if it is checked, the row is selected and if not the row is not selected. Additionally to this a new check box is build at grid header row. When click on this check box all the current visible rows in the grid are selected/deselected at once  This column by default is: not sortable, resizable and searchable. It is fixed, frozen and can be show/hide with the appropriate methods and with columnChooser one.  The default width of this column is 30 pixels. To change it use the option  multiselectWidth  $ ( #grid_id ). jqGrid ({ \n   ... \n   multiselect   :   true , \n   multiselectWidth   :   50 , \n   ...  });   To get the selected rows when a multiselect is enabled do:  var   selectedRows   =    $ ( #grid_id ). jqGrid ( getGridParam ,   selarrrow );   The  selectedRows  variable is array which every element is a selected row id. If notihing is selected the array is empty - i.e selectedRows.length = 0;", 
            "title": "Definitions"
        }, 
        {
            "location": "/user-guide/multiselect/#options-and-events", 
            "text": "Again with the  multiselect  and  multiselectWidth  we have other related options.  multiboxonly  if this optiopn is set to true and the multiselect is true the multiselection is possible only when the checkbox for the appropriate row is clicked. Clicking on any row outside this checkbox will deselect all rows and select the current clicked only.  multikey  This string parameter makes sense only when the multiselect option is set to true. Defines the key which should be pressed when we make multiselection. The possible values are: shiftKey - the user should press Shift Key, altKey - the user should press Alt Key, and ctrlKey - the user should press Ctrl Key. When this parameter is set multibox parameter does not have effect.  multimail  if this options is set to true and the multiselect is on, the selection is like Yahoo and Google mail. Multiselection is done so that the multiboxonly parameter is set to true with additional properties. Select one row. After this click on Shift key and checkbox only cell to select a row below or above of the selected row with two or more positions. All the rows in this interval will be selected. If the user click on another row using the check box this row is selected too. If the click  is not on the checkbox all the rows are deselected and the current is selected. It is possible to select multiple groups using the approach described above. To deselect a rows press the shiftKey and click on the one of the previously selected row -  the group will be deselected. \nWhen  multimail  is on it is possible to set  multiboxonly  parameter to true. In this case when click outside the checkbox and there are selected rows - nothing is happen - the multiselection is done only when a checkbox is click and when shiftKey is pressed and checkbox is clicked.   Caution  When multimail is set to true the onSelectRow event is executed only when multiboxonly is true and we click on row outside the checkbox. In all other cases the onSelectRow is not executed.   deselectAfterSort  By default this option is true and determine how to process the selected rows (in multiselect mode) when sorting is performed. If it is false the selection is preserved after sorting a column, if it is true the selected rows are reset and sorting is done. This option is valid only if the datatype is local or loadonce parameter is set to true.  onSelectAll( selected, status)  jqGridSelectAll(event, selected, status) \nThis event fires when multiselect option is true and you click on the header checkbox to select/deselect current grid rows. The parameters are as follow:   array selected - array of the selected rows (rowid's). This parameter contain the id of the selected rows in case there is selection and is empty array when nothing is selected.  boolean status - variable determining the status of the header check box - true if checked, false if not unchecked.   editselected  this parameter is available in editRow method or in navGrid method in editing options. When this option is set to true and multiselect is on too the form editing is possible only on the selected rows. Note that when using navigator buttons in form editing to navigate through the rows only the selected one are selected skipping the not selected one.", 
            "title": "Options and events"
        }, 
        {
            "location": "/user-guide/multiselect/#notes-and-limitations", 
            "text": "The following rules are valid when multiselct is on   it is possible to use  subGrid  it is possible to use grouping  it is disabled when treeGrid is enabled.  it is disabled when scroll option is set to 1 or true", 
            "title": "Notes and Limitations"
        }, 
        {
            "location": "/user-guide/integrations/", 
            "text": "Integrations \n\n\n\n\nThis chapter considered a integration of external modules with Guriddo jqGrid. In this case it is needed to load additional modules in order these features to work with Guriddo jqGrid.\n\n\njQuery UI integrations\n\n\njQuery UI is a curated set of user interface interactions, effects, widgets, and themes built on top of the jQuery JavaScript Library. Whether you're building highly interactive web applications or you just need to add a date picker to a form control, jQuery UI is the perfect choice.\n\n\nMore information on jQuery UI can be \nfound here\n\n\nAs already described Guriddo jqGrid can use the jQurery CSS framework. Note that the jQuery CSS definitions can be used separately from the javascript code. In this chapter we will explain how we can implement some jQuery UI JavaScript features in Guriddo jqGrid.\n\n\nInstallation\n\n\nTo use the features that are made in jqGrid it is necessary to include the jQuery UI library in the head section of the document or any other working way. For more information how to download the jQuery UI library visit their \nweb site\n\n\nAfter downloading the jQuery UI your configuration can look like this:\n\n\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n\nmeta\n \ncontent\n=\ntext/html; charset=utf-8\n \n/\n\n\ntitle\nMy First Grid\n/\ntitle\n\n\nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\ncss/jquery-ui.css\n \n/\n\n\nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\ncss/trirand/ui.jqgrid.css\n \n/\n\n\n\nscript\n \nsrc\n=\njs/jquery.min.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/jquery-ui.min.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\n\nscript\n \nsrc\n=\njs/trirand/i18n/grid.locale-en.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/trirand/jquery.jqGrid.min.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\n/\nhead\n\n\nbody\n\n...\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\nWhere jquery-ui.min.js is the jQuery UI library. In order to overcome some confusions we recommend to download the full version of the UI library.\n\n\nThe code which integrate jQuery UI library is in module \ngrid.jqueryui.js\n\n\nModules\n\n\nSortable Columns\n\n\nThis feature is integrated in jqGrid, and hence it is not necessary to do something special. The feature uses jQuery UI \nsortable\n widget. The method allow to reorder the grid columns using the mouse. The only necessary setting in this case is to set the \nsortable\n option in jqGrid to true. Using our example from \nQuick Start\n the code is:\n\n\nscript\n\n   \nvar\n \ndataArray\n \n=\n \n[\n\n     \n{\nname\n:\n \nBob\n,\n \nphone\n:\n \n232-532-6268\n},\n\n     \n{\nname\n:\n \nJeff\n,\n \nphone\n:\n \n365-267-8325\n}\n\n   \n];\n\n\n   \n$\n(\n#grid\n).\njqGrid\n({\n\n     \ndatatype\n:\n \nlocal\n,\n\n     \ndata\n:\n \ndataArray\n,\n\n     \nsortable\n \n:\n \ntrue\n,\n\n     \ncolModel\n:\n \n[\n\n        \n{\nname\n:\n \nname\n,\n \nlabel\n \n:\n \nName\n},\n\n        \n{\nname\n:\n \nphone\n,\n \nlabel\n \n:\n \nPhone Number\n}\n\n      \n],\n\n      \ncaption\n \n:\n \nUsers Grid\n,\n\n      \nheight\n:\n \nauto\n\n  \n});\n\n\n/script\n\n\n\n\n\n\nThis option works when Bootstrap CSS is used. In this case the jQuery UI sortable widget should be loaded.\n\n\nThe \nsortable\n option can be a object in which we can add (or overwrite) parameters that are available in the jQuery UI \nsortable\n widged. To do this a \noptions\n property should be set. By example to change the jQuery UI sortable parameter \nforcePlaceholderSize\n do:\n\n\n$\n(\n#grid\n).\njqGrid\n({\n\n  \n...,\n\n  \nsortable\n:\n \n{\n \noptions\n:\n \n{\n\n    \nforcePlaceholderSize\n \n:\n \ntrue\n\n    \n}\n\n  \n},\n\n  \n...\n\n\n});\n\n\n\n\n\n\nThis option can be a function. In case it is a function the update sortable event is replaced with it.\n\n\nTo get the reordered columns use the grid parameter remapColumns:\n\n\nvar\n \ncolumns\n \n=\n \n$\n(\n#grid_id\n).\njqGrid\n(\ngerGridParam\n,\n \nremapColumns\n);\n\n\n\n\n\n\nInitially the first position correspond to the first column and etc. - by example [0,1,2,3] in case we have 4 columns defined in colModel. After reordering of columns the array can look like this: [1,0,3,2]. This mean the the first column(0) is moved to the second position(1) and the third column(2) is moved to four position(3). \n\n\nAny parameter can be added including \noptions, methods and events\n\n\nColumn Chooser\n\n\nWith this method we can reorder columns and set visible and hidden columns in the grid. This method uses  \nsortable\n and \ndialog\n widgets. Additionally to these widgets the multiselect widget is used. This widget is available in the jqGrid distribution and needs to be loaded again with its CSS.\n\n\nThe javascript file is named ui.multiselect.js and is provided in js subdirectory and css file is named  ui.multiselect.css and is available in css directory. The code for loading is:\n\n\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n\nmeta\n \ncontent\n=\ntext/html; charset=utf-8\n \n/\n\n\ntitle\nMy First Grid\n/\ntitle\n\n\nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\ncss/jquery-ui.css\n \n/\n\n\nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\ncss/trirand/ui.jqgrid.css\n \n/\n\n\nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nmedia\n=\nscreen\n \nhref\n=\ncss/ui.multiselect.css\n \n/\n\n\n\n\nscript\n \nsrc\n=\njs/jquery.min.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/jquery-ui.min.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/ui.multiselect.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\n\nscript\n \nsrc\n=\njs/trirand/i18n/grid.locale-en.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\nscript\n \nsrc\n=\njs/trirand/jquery.jqGrid.min.js\n \ntype\n=\ntext/javascript\n/\nscript\n\n\n/\nhead\n\n\nbody\n\n...\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\nCalling conventions:\n\n\nTo use the method do\n\n\n...\n\n\njQuery\n(\n#grid_id\n).\njqGrid\n(\ncolumnChooser\n,\n \noptions\n);\n\n\n\n\n\n\nwhere options is a object with properties listed below.\n\n\nAfter calling this method a modal dialog appear where the user can reorder columns and set which of them can be visible and which of them can be hidden.\n\n\n\n\nThis method uses the following options from the language file - by example the English file is:\n\n\n$\n.\njgrid\n.\nregional\n[\nen\n]\n \n=\n \n{\n\n  \n...\n\n    \ncol\n \n:\n \n{\n\n        \ncaption\n:\n \nSelect columns\n,\n\n        \nbSubmit\n:\n \nOk\n,\n\n        \nbCancel\n:\n \nCancel\n\n    \n},\n\n  \n...\n\n\n}\n\n\n\n\n\n\nwhere caption is the title of the dialog, bSubmit - button text to confirm the changes, bCancel is the text for the cancel(close) dialog action.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncaption\n\n\nstring\n\n\nTitle of the modal dialog\n\n\nsee lang file\n\n\n\n\n\n\nwidth\n\n\nnumber\n\n\nSet the width of the dialog in pixels\n\n\n400\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nSet the height of the dialog in pixels\n\n\n240\n\n\n\n\n\n\nclassname\n\n\nstring\n\n\nClass which will be added to the selector where the selects are build\n\n\nnull\n\n\n\n\n\n\ndone\n\n\nfunction\n\n\nFunction which will be called when the user press Ok button. In the current implementation we call remapColumns method in order to reorder the columns - see below\n\n\n\n\n\n\n\n\nmsel\n\n\nmixed\n\n\nmsel is either the name of a ui widget class that extends a multiselect, or a function that supports creating a multiselect object (with no argument, or when passed an object), and destroying it (when passed the string \"destroy\")\n\n\nmultiselect\n\n\n\n\n\n\ndlog\n\n\nmixed\n\n\ndlog is either the name of a ui widget class that behaves in a dialog-like way, or a function, that supports creating a dialog (when passed dlog_opts) or destroying a dialog (when passed the string \"destroy\")\n\n\ndialog\n\n\n\n\n\n\ndlog_opts\n\n\nmixed\n\n\ndlog_opts is either an option object to be passed to \"dlog\", or (more likely) a function that creates the options object. The default produces a suitable options object for ui.dialog\n\n\n\n\n\n\n\n\ncleanup\n\n\nfunction\n\n\nFunction to cleanup the dialog, and select. Also calls the done function with no permutation (to indicate that the columnChooser was aborted\n\n\n\n\n\n\n\n\n\n\nFunction done defined above has the following definition in the original jqGrid code:\n\n\n \nopts\n \n=\n \n$\n.\nextend\n({\n\n \n...\n\n \ndone\n \n:\n \nfunction\n(\nperm\n)\n \n{\n\n   \nif\n \n(\nperm\n)\n \n{\n\n     \nself\n.\njqGrid\n(\nremapColumns\n,\n \nperm\n,\n \ntrue\n)\n\n   \n},\n\n \n}\n\n \n...\n\n \n});\n\n\n\n\n\n\nIn order to do other things after reordering you can redefine this option (function). For example let say that we want to recalculate the width of some elements on the page after the user show or hide some columns. The code can look like this:\n\n\njQuery\n(\n#list\n).\njqGrid\n(\ncolumnChooser\n,\n \n{\n\n  \ndone\n \n:\n \nfunction\n \n(\nperm\n)\n \n{\n\n    \nif\n \n(\nperm\n)\n \n{\n\n      \n// \nOK\n button are clicked\n\n      \nthis\n.\njqGrid\n(\nremapColumns\n,\n \nperm\n,\n \ntrue\n);\n\n      \n// the grid width is probably changed co we can get new width\n\n      \n// and adjust the width of other elements on the page\n\n      \nvar\n \ngwdth\n \n=\n \nthis\n.\njqGrid\n(\ngetGridParam\n,\nwidth\n);\n\n      \nthis\n.\njqGrid\n(\nsetGridWidth\n,\ngwdth\n);\n\n    \n}\n \nelse\n \n{\n\n      \n// we can do some action in case of \nCancel\n button clicked\n\n    \n}\n\n  \n}\n\n\n});\n\n\n\n\n\n\nSortable Rows\n\n\nThis method allows reordering (sorting) grid rows in a visual manner using a mouse.\n\nCalling convetions:\n\n\njQuery\n(\n#list\n).\njqGrid\n(\nsortableRows\n,\n \noptions\n);\n\n\n\n\n\n\nwhere options is a object with properties get from \nsortable\n widget.\n\n\nThe method uses only the  jQuery UI \nsortable\n widget. This means that we can set any \noption and event\n available in this widget.\n\n\n\n\nWarning\n\n\nCurrently the method does not work when the TreeGrid is enabled (treeGrid:true)- i.e. you can not use the method to move reorder tree rows.\n\n\n\n\nResizable Grid\n\n\nThis method allow to re size the grid width and/or height in visual manner using a mouse.\n\n\nCalling conventions:\n\n\njQuery\n(\n#gridid\n).\njqGrid\n(\ngridResize\n,\n \noptions\n);\n\n\n\n\n\n\nwhere options is a object with properties as described from jQuery UI \nresizable\n widget.\n\n\nThe method uses only jQuery UI \nresizable\n widget. This means that we can set any \noption and event\n available in this widget.\n\n\nAfter the method is called a marker appear in the bottom right corner of the grid indicating that it can be re-sized.\n\n\nDrag \n Drop rows\n\n\nThis method allow drag and drop rows between two or more grids using a mouse.\n\n\nCalling conventions:\n\n\njQuery\n(\n#gridid\n).\njqGrid\n(\ngridDnD\n,\n \noptions\n);\n\n\n\n\n\n\nwhere:\n\n\n\n\ngridid  is the id of the source grid.\n\n\noptions is a object with properties from  \ndraggable\n and \ndroppable\n widgets.\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nconnectWith\n\n\nstring\n\n\nDetermines the target grid(s) to which the row should be dropped. The option is a string. In case of more than one grid the ids should be delimited with comma - i.e \"#grid1, #grid2\"\n\n\nempty string\n\n\n\n\n\n\nonstart\n\n\nfunction\n\n\nThis event raises when we start drag a row from the source grid (i.e. to which this method is applied). Parameters passed to this event are the event handler and a prepared ui object. For more information refer to \njQuery UI draggable events\n\n\nnull\n\n\n\n\n\n\nonstop\n\n\nfunction\n\n\nThis event is triggered when dragging stops. Parameters passed to this even are the event handler and a prepared ui object. For more information refer to \n jQuery UI draggable events\n\n\nnull\n\n\n\n\n\n\nbeforedrop\n\n\nfunction\n\n\nThis event raises before dropping the row to the grid specified in connectWith option. Parameters passed to this event are the event handler, prepared ui object, data which will be inserted into the grid in name value pair, source grid object and target(this) grid object.If the event return object in value name pair this object will be inserted into the target grid.\n\n\nnull\n\n\n\n\n\n\nondrop\n\n\nfunction\n\n\nThis event raises after the dropping the row to the grid specified in connectWith option. Parameters passed to this event are the event handler, prepared ui object, data which is inserted into the grid in name value pair. For more information refer to \njQuery UI droppable events\n\n\nnull\n\n\n\n\n\n\ndrop_opts\n\n\nobject\n\n\nPredefined options which can be applied to the droppable grid (specified with connectWith option above). Also you can set any option and event (except drop event which is replaced with ondrop event listed above). For more information refer to \njQuery UI droppable\n. Default is:  \n { \n activeClass : \"ui-state-active\", \n hoverClass : \"ui-state-hover\" \n }\n\n\n\n\n\n\n\n\ndrag_opts\n\n\nobject\n\n\nPredefined options which can be applied to the draggable grid (i.e. to which this method is applied). Also you can set any option and event (except start and stop events which are replaced with onstart  and onstop events listed above). For more information refer to \njQuery UI draggable\n. Default is: \n { \nrevert: \"invalid\", \nhelper: \"clone\", \n cursor: \"move\", \n appendTo : \"#jqgrid_dnd\", \n zIndex: 5000 \n }\n\n\n\n\n\n\n\n\ndropbyname\n\n\nboolean\n\n\nIf set to true this means that only fields that have equal names will be added to the target grid. Note that we use addRowData to insert new row, which means that if some field with name \"a\" on source grid is hidden they can appear on the target grid. The default value of false mean that the grid data will be added to the target counted from the first column from source.\n\n\nfalse\n\n\n\n\n\n\ndroppos\n\n\nstring\n\n\nDetermines where to add the new row. Can be first which mean as first row of the grid and last - as last row in the target grid.\n\n\nfirst\n\n\n\n\n\n\nautoid\n\n\nboolean\n\n\nThis option determines how the new row id should be generated. If this option is true we generate a id which begin with string stetted with the option autoidprefix (see below) and a random number. If this option is false the id can be either the the next record count or value determined by key property in colModel. \n If the parameter is defined as function this function should return value which will act as id to the target grid. Parameters passed in this case is the data array which will be inserted into the target grid row\n\n\ntrue\n\n\n\n\n\n\nautoidprefix\n\n\nstring\n\n\nThis option have sense only if the option autoid is set to true and determines the prefix of the new genearted id.\n\n\ndnd_\n\n\n\n\n\n\ndragcopy\n\n\nboolean\n\n\nCopies the source row to the target rather than moving it. (GridDnD only).\n\n\nfalse\n\n\n\n\n\n\n\n\nExample\n\n\nIn the example below we will create three grids with id grid1, grid2 and grid3. We will make so that rows from grid1 can be dragged to grid2 and grid3 and rows from grid2 can be dragged only to grid1.\n\n\n// Data for grid1\n\n\nvar\n \nmydata1\n \n=\n \n[\n\n    \n{\nid1\n:\n1\n,\nname1\n:\ntest1\n,\nvalues1\n:\nOne\n},\n\n    \n{\nid1\n:\n2\n,\nname1\n:\ntest2\n,\nvalues1\n:\nTwo\n},\n\n    \n{\nid1\n:\n3\n,\nname1\n:\ntest3\n,\nvalues1\n:\nThree\n}\n\n\n];\n\n\n// Data for grid2\n\n\nvar\n \nmydata2\n \n=\n \n[\n\n    \n{\nid2\n:\n11\n,\nname2\n:\ntest11\n,\nvalues2\n:\nOne1\n},\n\n    \n{\nid2\n:\n21\n,\nname2\n:\ntest21\n,\nvalues2\n:\nTwo1\n},\n\n    \n{\nid2\n:\n31\n,\nname2\n:\ntest31\n,\nvalues2\n:\nThree1\n}\n\n\n];\n\n\n// Data for grid3\n\n\nvar\n \nmydata3\n \n=\n \n[\n\n    \n{\nid3\n:\n12\n,\nname3\n:\ntest12\n,\nvalues3\n:\nOne2\n},\n\n    \n{\nid3\n:\n22\n,\nname3\n:\ntest22\n,\nvalues3\n:\nTwo2\n},\n\n    \n{\nid3\n:\n32\n,\nname3\n:\ntest32\n,\nvalues3\n:\nThree2\n}\n\n\n];\n\n\n// Creating grid1\n\n\njQuery\n(\n#grid1\n).\njqGrid\n({\n\n    \ndatatype\n:\n \nlocal\n,\n\n    \ndata\n \n:\n \nmydata1\n,\n\n    \nheight\n:\n \n100\n,\n\n    \ncolNames\n:\n \n[\nId1\n,\n \nName1\n,\n \nValues1\n],\n\n    \ncolModel\n:\n \n[\n\n       \n{\nname\n:\n \nid1\n,\n \nindex\n:\n \nid\n,\nwidth\n:\n \n100\n},\n\n       \n{\nname\n:\n \nname1\n,\nindex\n:\n \nname\n,\nwidth\n:\n \n100\n},\n\n       \n{\nname\n:\n \nvalues1\n,\nindex\n:\n \nvalues\n,\nwidth\n:\n \n200\n}\n\n    \n],\n\n    \ncaption\n:\n \nGrid 1\n,\n\n    \npager\n:\n \n#pgrid1\n\n\n});\n\n\n\n//Creating grid2\n\n\njQuery\n(\n#grid2\n).\njqGrid\n({\n\n    \ndatatype\n:\n \nlocal\n,\n\n    \ndata\n \n:\n \nmydata2\n,\n\n    \nheight\n:\n \n100\n,\n\n    \ncolNames\n:\n \n[\nId2\n,\n \nName2\n,\n \nValues2\n],\n\n    \ncolModel\n:\n \n[\n\n       \n{\nname\n:\n \nid2\n,\nindex\n:\n \nid\n,\nwidth\n:\n \n100\n},\n\n       \n{\nname\n:\n \nname2\n,\nindex\n:\n \nname\n,\nwidth\n:\n \n100\n},\n\n       \n{\nname\n:\n \nvalues2\n,\nindex\n:\n \nvalues\n,\nwidth\n:\n \n200\n}\n\n    \n}],\n\n    \ncaption\n:\n \nGrid 2\n,\n\n    \npager\n:\n \n#pgrid2\n\n\n});\n\n\n// Creating grid3\n\n\njQuery\n(\n#grid3\n).\njqGrid\n({\n\n    \ndatatype\n:\n \nlocal\n,\n\n    \ndata\n \n:\n \nmydata3\n,\n\n    \nheight\n:\n \nauto\n,\n\n    \ncolNames\n:\n \n[\nId3\n,\n \nName3\n,\n \nValues3\n],\n\n    \ncolModel\n:\n \n[\n\n       \n{\nname\n:\n \nid3\n,\nindex\n:\n \nid\n,\nwidth\n:\n \n100\n},\n\n       \n{\nname\n:\n \nname3\n,\nindex\n:\n \nname\n,\n \nwidth\n:\n \n100\n},\n\n       \n{\nname\n:\n \nvalues3\n,\nindex\n:\n \nvalues\n,\nwidth\n:\n \n200\n}\n\n    \n}],\n\n    \ncaption\n:\n \nGrid 3\n,\n\n    \npager\n:\n \n#pgrid3\n\n\n});\n\n\n\n// connect grid1 with grid2 and grid3\n\n\njQuery\n(\n#grid1\n).\njqGrid\n(\ngridDnD\n,{\nconnectWith\n:\n#grid2,#grid3\n});\n\n\n// connect grid2 with grid1\n\n\njQuery\n(\n#grid2\n).\njqGrid\n(\ngridDnD\n,{\nconnectWith\n:\n#grid1\n});", 
            "title": "Integrations"
        }, 
        {
            "location": "/user-guide/integrations/#integrations", 
            "text": "This chapter considered a integration of external modules with Guriddo jqGrid. In this case it is needed to load additional modules in order these features to work with Guriddo jqGrid.", 
            "title": "Integrations "
        }, 
        {
            "location": "/user-guide/integrations/#jquery-ui-integrations", 
            "text": "jQuery UI is a curated set of user interface interactions, effects, widgets, and themes built on top of the jQuery JavaScript Library. Whether you're building highly interactive web applications or you just need to add a date picker to a form control, jQuery UI is the perfect choice.  More information on jQuery UI can be  found here  As already described Guriddo jqGrid can use the jQurery CSS framework. Note that the jQuery CSS definitions can be used separately from the javascript code. In this chapter we will explain how we can implement some jQuery UI JavaScript features in Guriddo jqGrid.", 
            "title": "jQuery UI integrations"
        }, 
        {
            "location": "/user-guide/integrations/#installation", 
            "text": "To use the features that are made in jqGrid it is necessary to include the jQuery UI library in the head section of the document or any other working way. For more information how to download the jQuery UI library visit their  web site  After downloading the jQuery UI your configuration can look like this:  !DOCTYPE html  html  head  meta   content = text/html; charset=utf-8   /  title My First Grid / title  link   rel = stylesheet   type = text/css   media = screen   href = css/jquery-ui.css   /  link   rel = stylesheet   type = text/css   media = screen   href = css/trirand/ui.jqgrid.css   /  script   src = js/jquery.min.js   type = text/javascript / script  script   src = js/jquery-ui.min.js   type = text/javascript / script  script   src = js/trirand/i18n/grid.locale-en.js   type = text/javascript / script  script   src = js/trirand/jquery.jqGrid.min.js   type = text/javascript / script  / head  body \n... / body  / html   Where jquery-ui.min.js is the jQuery UI library. In order to overcome some confusions we recommend to download the full version of the UI library.  The code which integrate jQuery UI library is in module  grid.jqueryui.js", 
            "title": "Installation"
        }, 
        {
            "location": "/user-guide/integrations/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/user-guide/integrations/#sortable-columns", 
            "text": "This feature is integrated in jqGrid, and hence it is not necessary to do something special. The feature uses jQuery UI  sortable  widget. The method allow to reorder the grid columns using the mouse. The only necessary setting in this case is to set the  sortable  option in jqGrid to true. Using our example from  Quick Start  the code is:  script \n    var   dataArray   =   [ \n      { name :   Bob ,   phone :   232-532-6268 }, \n      { name :   Jeff ,   phone :   365-267-8325 } \n    ]; \n\n    $ ( #grid ). jqGrid ({ \n      datatype :   local , \n      data :   dataArray , \n      sortable   :   true , \n      colModel :   [ \n         { name :   name ,   label   :   Name }, \n         { name :   phone ,   label   :   Phone Number } \n       ], \n       caption   :   Users Grid , \n       height :   auto \n   });  /script   This option works when Bootstrap CSS is used. In this case the jQuery UI sortable widget should be loaded.  The  sortable  option can be a object in which we can add (or overwrite) parameters that are available in the jQuery UI  sortable  widged. To do this a  options  property should be set. By example to change the jQuery UI sortable parameter  forcePlaceholderSize  do:  $ ( #grid ). jqGrid ({ \n   ..., \n   sortable :   {   options :   { \n     forcePlaceholderSize   :   true \n     } \n   }, \n   ...  });   This option can be a function. In case it is a function the update sortable event is replaced with it.  To get the reordered columns use the grid parameter remapColumns:  var   columns   =   $ ( #grid_id ). jqGrid ( gerGridParam ,   remapColumns );   Initially the first position correspond to the first column and etc. - by example [0,1,2,3] in case we have 4 columns defined in colModel. After reordering of columns the array can look like this: [1,0,3,2]. This mean the the first column(0) is moved to the second position(1) and the third column(2) is moved to four position(3).   Any parameter can be added including  options, methods and events", 
            "title": "Sortable Columns"
        }, 
        {
            "location": "/user-guide/integrations/#column-chooser", 
            "text": "With this method we can reorder columns and set visible and hidden columns in the grid. This method uses   sortable  and  dialog  widgets. Additionally to these widgets the multiselect widget is used. This widget is available in the jqGrid distribution and needs to be loaded again with its CSS.  The javascript file is named ui.multiselect.js and is provided in js subdirectory and css file is named  ui.multiselect.css and is available in css directory. The code for loading is:  !DOCTYPE html  html  head  meta   content = text/html; charset=utf-8   /  title My First Grid / title  link   rel = stylesheet   type = text/css   media = screen   href = css/jquery-ui.css   /  link   rel = stylesheet   type = text/css   media = screen   href = css/trirand/ui.jqgrid.css   /  link   rel = stylesheet   type = text/css   media = screen   href = css/ui.multiselect.css   /  script   src = js/jquery.min.js   type = text/javascript / script  script   src = js/jquery-ui.min.js   type = text/javascript / script  script   src = js/ui.multiselect.js   type = text/javascript / script  script   src = js/trirand/i18n/grid.locale-en.js   type = text/javascript / script  script   src = js/trirand/jquery.jqGrid.min.js   type = text/javascript / script  / head  body \n... / body  / html   Calling conventions:  To use the method do  ...  jQuery ( #grid_id ). jqGrid ( columnChooser ,   options );   where options is a object with properties listed below.  After calling this method a modal dialog appear where the user can reorder columns and set which of them can be visible and which of them can be hidden.   This method uses the following options from the language file - by example the English file is:  $ . jgrid . regional [ en ]   =   { \n   ... \n     col   :   { \n         caption :   Select columns , \n         bSubmit :   Ok , \n         bCancel :   Cancel \n     }, \n   ...  }   where caption is the title of the dialog, bSubmit - button text to confirm the changes, bCancel is the text for the cancel(close) dialog action.     Property  Type  Description  Default      caption  string  Title of the modal dialog  see lang file    width  number  Set the width of the dialog in pixels  400    height  number  Set the height of the dialog in pixels  240    classname  string  Class which will be added to the selector where the selects are build  null    done  function  Function which will be called when the user press Ok button. In the current implementation we call remapColumns method in order to reorder the columns - see below     msel  mixed  msel is either the name of a ui widget class that extends a multiselect, or a function that supports creating a multiselect object (with no argument, or when passed an object), and destroying it (when passed the string \"destroy\")  multiselect    dlog  mixed  dlog is either the name of a ui widget class that behaves in a dialog-like way, or a function, that supports creating a dialog (when passed dlog_opts) or destroying a dialog (when passed the string \"destroy\")  dialog    dlog_opts  mixed  dlog_opts is either an option object to be passed to \"dlog\", or (more likely) a function that creates the options object. The default produces a suitable options object for ui.dialog     cleanup  function  Function to cleanup the dialog, and select. Also calls the done function with no permutation (to indicate that the columnChooser was aborted      Function done defined above has the following definition in the original jqGrid code:    opts   =   $ . extend ({ \n  ... \n  done   :   function ( perm )   { \n    if   ( perm )   { \n      self . jqGrid ( remapColumns ,   perm ,   true ) \n    }, \n  } \n  ... \n  });   In order to do other things after reordering you can redefine this option (function). For example let say that we want to recalculate the width of some elements on the page after the user show or hide some columns. The code can look like this:  jQuery ( #list ). jqGrid ( columnChooser ,   { \n   done   :   function   ( perm )   { \n     if   ( perm )   { \n       //  OK  button are clicked \n       this . jqGrid ( remapColumns ,   perm ,   true ); \n       // the grid width is probably changed co we can get new width \n       // and adjust the width of other elements on the page \n       var   gwdth   =   this . jqGrid ( getGridParam , width ); \n       this . jqGrid ( setGridWidth , gwdth ); \n     }   else   { \n       // we can do some action in case of  Cancel  button clicked \n     } \n   }  });", 
            "title": "Column Chooser"
        }, 
        {
            "location": "/user-guide/integrations/#sortable-rows", 
            "text": "This method allows reordering (sorting) grid rows in a visual manner using a mouse. \nCalling convetions:  jQuery ( #list ). jqGrid ( sortableRows ,   options );   where options is a object with properties get from  sortable  widget.  The method uses only the  jQuery UI  sortable  widget. This means that we can set any  option and event  available in this widget.   Warning  Currently the method does not work when the TreeGrid is enabled (treeGrid:true)- i.e. you can not use the method to move reorder tree rows.", 
            "title": "Sortable Rows"
        }, 
        {
            "location": "/user-guide/integrations/#resizable-grid", 
            "text": "This method allow to re size the grid width and/or height in visual manner using a mouse.  Calling conventions:  jQuery ( #gridid ). jqGrid ( gridResize ,   options );   where options is a object with properties as described from jQuery UI  resizable  widget.  The method uses only jQuery UI  resizable  widget. This means that we can set any  option and event  available in this widget.  After the method is called a marker appear in the bottom right corner of the grid indicating that it can be re-sized.", 
            "title": "Resizable Grid"
        }, 
        {
            "location": "/user-guide/integrations/#drag-drop-rows", 
            "text": "This method allow drag and drop rows between two or more grids using a mouse.  Calling conventions:  jQuery ( #gridid ). jqGrid ( gridDnD ,   options );   where:   gridid  is the id of the source grid.  options is a object with properties from   draggable  and  droppable  widgets.      Property  Type  Description  Default      connectWith  string  Determines the target grid(s) to which the row should be dropped. The option is a string. In case of more than one grid the ids should be delimited with comma - i.e \"#grid1, #grid2\"  empty string    onstart  function  This event raises when we start drag a row from the source grid (i.e. to which this method is applied). Parameters passed to this event are the event handler and a prepared ui object. For more information refer to  jQuery UI draggable events  null    onstop  function  This event is triggered when dragging stops. Parameters passed to this even are the event handler and a prepared ui object. For more information refer to   jQuery UI draggable events  null    beforedrop  function  This event raises before dropping the row to the grid specified in connectWith option. Parameters passed to this event are the event handler, prepared ui object, data which will be inserted into the grid in name value pair, source grid object and target(this) grid object.If the event return object in value name pair this object will be inserted into the target grid.  null    ondrop  function  This event raises after the dropping the row to the grid specified in connectWith option. Parameters passed to this event are the event handler, prepared ui object, data which is inserted into the grid in name value pair. For more information refer to  jQuery UI droppable events  null    drop_opts  object  Predefined options which can be applied to the droppable grid (specified with connectWith option above). Also you can set any option and event (except drop event which is replaced with ondrop event listed above). For more information refer to  jQuery UI droppable . Default is:    {   activeClass : \"ui-state-active\",   hoverClass : \"ui-state-hover\"   }     drag_opts  object  Predefined options which can be applied to the draggable grid (i.e. to which this method is applied). Also you can set any option and event (except start and stop events which are replaced with onstart  and onstop events listed above). For more information refer to  jQuery UI draggable . Default is:   {  revert: \"invalid\",  helper: \"clone\",   cursor: \"move\",   appendTo : \"#jqgrid_dnd\",   zIndex: 5000   }     dropbyname  boolean  If set to true this means that only fields that have equal names will be added to the target grid. Note that we use addRowData to insert new row, which means that if some field with name \"a\" on source grid is hidden they can appear on the target grid. The default value of false mean that the grid data will be added to the target counted from the first column from source.  false    droppos  string  Determines where to add the new row. Can be first which mean as first row of the grid and last - as last row in the target grid.  first    autoid  boolean  This option determines how the new row id should be generated. If this option is true we generate a id which begin with string stetted with the option autoidprefix (see below) and a random number. If this option is false the id can be either the the next record count or value determined by key property in colModel.   If the parameter is defined as function this function should return value which will act as id to the target grid. Parameters passed in this case is the data array which will be inserted into the target grid row  true    autoidprefix  string  This option have sense only if the option autoid is set to true and determines the prefix of the new genearted id.  dnd_    dragcopy  boolean  Copies the source row to the target rather than moving it. (GridDnD only).  false     Example  In the example below we will create three grids with id grid1, grid2 and grid3. We will make so that rows from grid1 can be dragged to grid2 and grid3 and rows from grid2 can be dragged only to grid1.  // Data for grid1  var   mydata1   =   [ \n     { id1 : 1 , name1 : test1 , values1 : One }, \n     { id1 : 2 , name1 : test2 , values1 : Two }, \n     { id1 : 3 , name1 : test3 , values1 : Three }  ];  // Data for grid2  var   mydata2   =   [ \n     { id2 : 11 , name2 : test11 , values2 : One1 }, \n     { id2 : 21 , name2 : test21 , values2 : Two1 }, \n     { id2 : 31 , name2 : test31 , values2 : Three1 }  ];  // Data for grid3  var   mydata3   =   [ \n     { id3 : 12 , name3 : test12 , values3 : One2 }, \n     { id3 : 22 , name3 : test22 , values3 : Two2 }, \n     { id3 : 32 , name3 : test32 , values3 : Three2 }  ];  // Creating grid1  jQuery ( #grid1 ). jqGrid ({ \n     datatype :   local , \n     data   :   mydata1 , \n     height :   100 , \n     colNames :   [ Id1 ,   Name1 ,   Values1 ], \n     colModel :   [ \n        { name :   id1 ,   index :   id , width :   100 }, \n        { name :   name1 , index :   name , width :   100 }, \n        { name :   values1 , index :   values , width :   200 } \n     ], \n     caption :   Grid 1 , \n     pager :   #pgrid1  });  //Creating grid2  jQuery ( #grid2 ). jqGrid ({ \n     datatype :   local , \n     data   :   mydata2 , \n     height :   100 , \n     colNames :   [ Id2 ,   Name2 ,   Values2 ], \n     colModel :   [ \n        { name :   id2 , index :   id , width :   100 }, \n        { name :   name2 , index :   name , width :   100 }, \n        { name :   values2 , index :   values , width :   200 } \n     }], \n     caption :   Grid 2 , \n     pager :   #pgrid2  });  // Creating grid3  jQuery ( #grid3 ). jqGrid ({ \n     datatype :   local , \n     data   :   mydata3 , \n     height :   auto , \n     colNames :   [ Id3 ,   Name3 ,   Values3 ], \n     colModel :   [ \n        { name :   id3 , index :   id , width :   100 }, \n        { name :   name3 , index :   name ,   width :   100 }, \n        { name :   values3 , index :   values , width :   200 } \n     }], \n     caption :   Grid 3 , \n     pager :   #pgrid3  });  // connect grid1 with grid2 and grid3  jQuery ( #grid1 ). jqGrid ( gridDnD ,{ connectWith : #grid2,#grid3 });  // connect grid2 with grid1  jQuery ( #grid2 ). jqGrid ( gridDnD ,{ connectWith : #grid1 });", 
            "title": "Drag &amp; Drop rows"
        }, 
        {
            "location": "/about/release-notes/", 
            "text": "Release Notes\n\n\nVersion 5.3.1 (2018-03-12)\n\n\nAdditions and Updates\n\n\n\n\nBootstrap 4 improvements\n\n\nSupport for Font Awesome when Bootstrap 4\n\n\nAdd new option useNameForSearch to search by name on local data and not on index when set.\n\n\n\n\nBug Fixes\n\n\n\n\nDo not include subgrid and other internal columns in addlocaldata for manipulating\n\n\nRemoving badly added grouping == true when set frozen columns.\n\n\nFix in addXmlData to add empty string in case CDATA (when set) does not contain data.\n\n\nFix grouping when grouSummaryPos = header and there are hidden fields at beginning of colModel. Small optimization in buildSummaryTd.\n\n\nFix excluding subgrid column in exportToHtml\n\n\nFix exportToHtml to get the labels of header from colNames\n\n\nFix apperaing print preview dialog in Chrome (method exportToHtml)\n\n\nFix Drag and drop rows (gridDnD method) when drop by name is false.\n\n\nFix loadState method when a subgrid has open subgrids as grids\n\n\nFix all exporting methods when grouping is enabled\n\n\nFix vertical scroolbar for bootstrap 4\n\n\nFix setAttributes function in CreateEl to be called as last one when a editable element is created, so that the developer can overwrite the defaults.\n\n\nFix subgrid with parent as altRows set for Bootstrap 4\n\n\n\n\nVersion 5.3.0 (2018-01-04)\n\n\nAdditions and Updates\n\n\n\n\nAdd Support for Bootstrap 4. \nDemo\n\n\nSupport validation in filterToolbar via searchrules\n\n\nAdding parameter errorcheck to enable/disable the validation of the search inputs in  the toolbar searching\n\n\nUpdate Stronger check for number in case of strict mode prevent entering a octal values\n\n\nAdding jqGridInitGrid triggered event, which can replace initGrid event\n\n\nAdd exportToHtml method with ability to print. \nDemo\n\n\nExtend excel export to recognize more numeric types. Support for ISO date only at the moment\n\n\nAdd 3 parameter \nreturnobject\n in  getCell method which set to true return the cell as jQuery object\n\n\nAdd menubar on caption layer. Added new option \nmenubar\n which place a icon on left (or right) and the user can add actions. Added two new methods for this purpose \nmenubarAdd\n and \nmenubarDelete\n to add and delete items. \nDemo\n\n\nAdded new options in colModel - \nminResizeWidth\n, which defines minimal re-sizing width per column. When set this option have higher priority of minColWidth\n\n\nAdd possibility to define user defined buttons in editGridRow, delGridRow and viewGridRow forms. \nDemo\n\n\nAdd $.jgrid.buildButtons function in common module to return a string with a buttons defined in buttons array in the different modules.\n\n\nAdd support for html5 in form edit \nDemo\n\n\nAdd a treeGrid paging based on the code of Vyacheslav N. Boyko \nSee here\n. For more information \ndocumentation\n information. \nDemo\n\n\nAdd \nbuttons\n array in order allow to add custom buttons in the searchGrid form. The button item object contain the following properties -  side, position, text, icon, click, id. To the click function is passed the search form, search parameters and click event. \nSee here\n. \nDemo\n\n\nRemove z-index from jqgrid-overlay class and add jqgrid-overlay-modal class to serve separate modals.\n\n\nAdd possibility to create the search dialog as first child of body setting the layer option to true.\n\n\nAdd event colMenuColumnDone as grid options which executes on reordering of the columns when colMenu columns options is on - the event is similar to in columnChooser.\n\n\nAdding onEnter and onEscape events in editRow in order to get possibility for custom save cancel code - by example  pop-up to ask for saving and etc. \nDemo\n\n\nEnlarge mousedown area in jqModal in case some other components like datepicker are outside the modal dialog. Added two new parameters heightOffset and widthOffset.\n\n\nIn inline saveRow method the deletion of the saved row is moved after aftersavefunc so that this row can be available for comparing\n\n\nIn method gridDnD droppable now applied to table's closest ui-jqgrid-bdiv for greater drop area Added \"tolerance\" setting to default drop_opts\n\n\nAdd parameter previous selected rowid in bindkeys onUpKey and onDownKey events\n\n\nAdd onUpKey and onDownKey check events in bindKeys method. Also to all events is added second parameter the event\n\n\nAdd custom column menu. This is done via the two new methods \ncolMenuAdd\n to add a new column menu and \ncolMenuDelete\n to delete it. More can be found in the \nmethods list\n \nDemo\n\n\nAdd two additional parameters to \nsummaryTpl\n in colModel for grouping - the name of the summary field and the value of the summary field - respectively the can be added as {2} and {3} in the template \nDemo\n\n\nAdded \nisExported\n and \nexporttype\n in the formatter options in \ncolModel\n when export to pdf, csv or excel occur. This allow to conditionally format the value depending if it is exported. \nDemo\n\n\nUpdate Spain translation\n\n\nReturn empty pivot grid when no data, rather than to expose a exception\n\n\nUpdate Portuguese translation\n\n\n\n\nBug Fixes\n\n\n\n\nFix for saveState not to save the data when saveData is on and datatype is local.\n\n\nFix creating the ids of the grid with the build in generator \nrandId\n in case local data and scroll is on (virtual scrolling)\n\n\nFix building the id row when a add operation in method editGridRow. The comparing of the empty row missed the idPreffix\n\n\nFix column menu in case the searchbox and cols menu are outside the view port\n\n\nFix setCell to get right row unformatted data. If the datatype is local no unformat function is needed\n\n\nFix setCell to find the right cell in case the cell contain another table data.\n\n\nFix correct dropping row in gridDnD when both grids have equal colModel's and dropbyname parameter is false\n\n\nFix exportcol property in exportToCsv, exportToExcel, exportToPdf methods when hidden is false, but exportcol is true\n\n\nFix exportToCsv, exportToExcel, exportToPdf methods to export all the data when datatype is local\n\n\nFix for csv export summary data to skip not exported column. Fix export to excel to skip the same column\n\n\nFix typo \"inine-block\" in ui.jqgrid.css\n\n\nFix exportTo excel to interpret virtual values not as part of the data array\n\n\nFix remove not needed comma from jqGridFilter parameters\n\n\nFix grid width in bootstrap in different situations when shrinkToFit changes. Calculation of width methods is now synchronized. Fixed small issues when autowidth is on and responsive is on too\n\n\nFix add missed parameter in editCell - the event, which is used in onCellSelect\n\n\nFix previous navigator button in viewGridRow method to work correct. \nSee\n\n\nFix for minColWidth\n\n\nFix Albanian translation to get the right two code \nSee\n\n\nFix checkOnUpdate in Chrome [See] (https://github.com/tonytomov/jqGrid/issues/881)\n\n\nFix when subgrid and grouping are on again with loadonce true thanks to preethi koochana\n\n\nFix jqFilter getParameter method.\n\n\nFix loadui grid parameter when set to \nblock\n\n\nCreate separate modal overlay in viewMoodal and hide it in hideModal. Fix viewModal to get the overlay class depending on style.\n\n\nFix for viewModal parameters when called in searchGrid method. The id of entire grid box was wrong set\n\n\nFix height of the frozen div.\n\n\nFix inconsistent state if saveAfterSelect is true but method saveRow fails\n\n\nFix when styleUI is Bootstrap and altRows is on\n\n\nFix typo when calling onCellSelect grid event\n\n\nFix removing not needed href='#/' when build column menu\n\n\nFix \nbindKeys\n method to work when grid drag and drop method \ngridDnD\n method is activated\n\n\nFix exportToExcel when the number length is \n 15 (know problem in Microsoft Excel)\n\n\nFix resting grouping values when clearGroupData is called\n\n\nFix determine the vertical scroll-bar dynamically and fix the issue when Bootstrap in Windows\n\n\nFix for showSummaryOnHide when grouping is enabled\n\n\nFix in JSON.parse in utility module to parse correct all cases when function is available.\n\n\nFix multisorting issues.\n\n\nFix bug with big select element  in modal dialog\n\n\nFix celledit to support subgrid and any additional rows content added during editing\n\n\nFix width of column when exportToExcel and the data is number.\n\n\n\n\nVersion 5.2.1 (2017-05-01)\n\n\nAdditions and Updates\n\n\n\n\nAdd a showSaveCancelButtons() method in inline editiong to enable save and cancel buttons\n\n\nAdd saveData parameter in saveState method, which enables/disables saving the data. Default true.\n\n\nAdd restoreData option in loadState method which enables/disables restoring the saved data state. Default true.\n\n\nRemoved a grid option altclass. Added definition for striped table in the styleUI object. The striped table is now build (option altRows : true) only when add a class to the main table. This add a speed improvements when loading the data. Removed the not needed code in delRowData and addRowdata\n\n\nAdd onBeforeExport event in exportToExcel method\n\n\nAdd parameter forceresize to resizeColumn methods\n\n\nAdded triggred event jqGridBeforeProcessing which is equivalent of beforeProcessing\n\n\nAdd triggered events jqGridLoadError = loadError and jqGridLoadBeforeSend = loadBeforeSend\n\n\nAdd triggered event jqGridPaging = onPaging\n\n\nRemove global object jqGridUtils and add all the functions in $.jgrid object removing a need to have two global jqGrid objects.\n\n\nExclude more attributes not needed to be add in input element in createEl function\n\n\nAdd triggered event jqGridErrorCell = errorCell in cell editing\n\n\nAdd new property in colModel \nexportcol\n which enables disables the export in the methods exportToPdf and ExportToExcel exportToCsv.\n\n\nAdd saveui and savetext parameters to the editRow method\n\n\nAdded missed triggered events in viewGridRow method see documentation\n\n\nAdding missed triggred evenents in delGridRow see documentation\n\n\nAdded replaceStr event in exportToExcel parameters in order to control the formatting of the exported text.\n\n\nAdd onSubmitCell event in cell edit\n\n\nRemoving not used option delayOnLoad in subgrid\n\n\nAdding the missing triggered events in treeGrid\n\n\nAdding option multimail\n\n\nAdding count parameter to summaryTpl -\n {1}\n\n\nAdd option scrollMaxBuffer to prevent memory problems when using virtual scrolling in local mode using the mouse wheel\n\n\n\n\nBug Fixes\n\n\n\n\nFix: small fixes according to eslint\n\n\nFix: comparing with equal data types in getNodeParent\n\n\nSelector fixes the addJSONData and addXMLData\n\n\nFix: Support autoencode grid option to prevent XSS in jqFilter\n\n\nFix restoreRow to restore all the data saved into the savedRow array and not only the editable. This fixes calling of depended formatter custom function. See \nhere\n\n\nFix: Unreadable content in MS Excel when open the generated excel file generated with exportToExcel method`\n\n\nFix: saveAs function in exportToExcel to work correct in IE11 (Access denied error fix)\n\n\nFix: set search option to false when we reset the seasrch in column menu\n\n\nFix: fixes in normalizeData function to read correct the unique name.\n\n\nFix setFrozenColumns when box-sizing=border-box is used.\n\n\nFix: add beforeProcessing event to every datatype.\n\n\nSmall fix in beforeRequest event. The triggered event and option event should be one after other.\n\n\nFix according to the documentation if datatype is function beforeRequest does not fire\n\n\nFix: More strict check in setColProp for the type object\n\n\nFix jqgroup class to have same height as jqgrow class.\n\n\nFix calling custom_element in search modules with the right html element.\n\n\nFix delGridRow view modal dialogue in case first time beforeInitData return false.\n\n\nFix: remove the parameter searchurl in filterToolbar it is never used\n\n\nFix: get correct label from colNames instead of colModel.label in buildColMenu\n\n\nFix: When exporting we should use the colNames and not colModel.label\n\n\nFix remove bad set counter for service fields: row numbers and multiselect.\n\n\nFix frozen columns when zooming.\n\n\nFix calling triggered event jqGridAddEditAfterComplete in editGridRow.\n\n\nFix add missed parameter postdata in jqGridAddEditBeforeCheckValues\n\n\nFix setGroupHeader method in case it is called 2 or more times with colspan : true\n\n\nFix export to excel allowing quotes in the values.\n\n\nFix Bootstrap css dispearing icons\n\n\nFix: colmenu search options operands replaced with groupOps common to all search modules\n\n\nFix columnChooser - setting height causes selection list not to overflow correct.\n\n\nFix sortable columns to perform sort when the column is sorted to its original position\n\n\nFix reading data in case key colModel option is set and repeatitems in jsonReader is true.\n\n\nFix passing parameters in editRow\n\n\nFix stop function in sortablColumns method to be executed within delay\n\n\nFix deselectAfterSort to not highlight the remaining rows\n\n\nFix exportToExcel method to order properly the columns. The bug originally come for the reason that object properties are ordered and do not follow natural insert order\n\n\nFix exportToPdf to order correctly the columns in case some of them have a number as name\n\n\nFix exportToCsv to order correct column names in header when they are numbers.\n\n\nFix timeoffset in parseDate function.\n\n\nFix it is possible to search when select has a multiple property in dialogue search\n\n\nFix toggleToolbar method when frozenColumns are set\n\n\nFix filterInput to use ! correct\n\n\n\n\nVersion 5.2.0 (2016-11-21)\n\n\nAdditions and Updates\n\n\n\n\nSupport to jQuery 3.x\n\n\nAdded a export to CSV, Excel (open excel format) and pdf. For excel we need additionally jsZip and for pdf pdfMake libs.\n\n\nAdd saveAs function in util module, which do a browser save dialog for saving diffrent data type.\n\n\nUpdate Portugase translation file grid.locale-pt.js\n\n\nAdd a new event \u2013 validationCell which may occur (if defined) when a validation error. Parameters \u2013 element, error message, iRow and iCol. When restoreCellonFail is set to false now we focus the cell when info dialog is closed\n\n\nAdded method setSortIcon. the method changes the position of the sort icon at left or right. The first parameter is the column name or the position of the column in colModel starting from zero. The second parameter is left or right(or empty or nothing).\n\n\nUpdate of lang files for the serch dilogs\n\n\nUpdate for the language spanish file.\n\n\nUpdate of Bulgarian, German and Russian language files according to the new search text\n\n\nAdding validationCell event custom message in inline edit. Parameters passed to this are the element, error message, row index and column index.\n\n\nUpdate Chinese Translate for v5.1.1\n\n\nAdding custom aggregate function in pivot grid. In the aggregates array the aggregator now can be a function.\n\n\nParameters passed to this function are: value, field name, data record\n\n\nMaking possible to run addLocalData as grid method. Added a parameter(boolean) which set if we need all the data (and not paged one)\n\n\n\n\nBug Fixes\n\n\n\n\nFixes in import module.\n\n\nFix cc variable in cell edit to be a jQuery object causing error. See https://github.com/tonytomov/jqGrid/issues/812\n\n\nFix pivot in case yDimension is not set\n\n\nFix getRowData when the second paraneter is not set\n\n\nMore tolerante checking of isEmpty function in formedit validations\n\n\nFix for beforedrop event in the gridDnD method.\n\n\nFix for avg function in pivot\n\n\nFix: Data in pivot should be array.\n\n\nFix cacheUrl to accept empty values in case in case they are defined in option value.\n\n\nFix getting the cell data in cell edit mode\n\n\nFix: Added missed translation text in serach dialogs for the button rules.\n\n\nFix get cell to return the right content of the ExpandColumn field when treeGrid is on\n\n\nFix for Bootstrap horizontall scroll bar when height auto/100%\n\n\nFixed misspelling of \u201cinline-block\u201d\n\n\nFix info dilog when error from the server \u2013 position the dialog ner to the cell and focus a field if restoronCellFail is false\n\n\nTry to focus the field in inline edit when a validation error occur\n\n\nFix finding the position of the objec. We need the cuurent position of the screen.\n\n\nFix pivot initial sorting when set in grid options as sortname\n\n\nFix pager info for loaded records when adding new one and virtual scroll is enabled.\n\n\nFormatting changes\n\n\nFix adding non empty id in editGridRow (fix is for treegrid)\n\n\nFix German locale toolbar search options\n\n\n\n\nVersion 5.1.1 (2016-06-08)\n\n\nAdditions and Updates\n\n\n\n\nSetLabel method accept now column name or index of the coulmn.\n\n\nRemove the local _savedData parameter from editRow and replace it with the global savedData (like savedRow) which now part of Grid parameter for easy access\n\n\nAdd support in loadState for Subgrid\n\n\nAdd support in loadState for Tree Grid\n\n\ngetFormData have the same ruled obtaining the values as in createData and syncSavedData\n\n\nUpdate French localization\n\n\nAdded beforeSetTreeNode and afterSetTreeNode events (grid parameters) in setTreeNode method\n\n\nAdded method setLeaf, which visually change the icons and data (isLeaf) parameter\n\n\nreloadNode method now support updating the current node Leaf status depending if there is a data or not\n\n\nAdded debug option in saveState method to generate dump grid file with options and data (very useful for test and support).\n\n\nAdded option editselected (default false) in form edit module which allow to edit only the selected rows in multi select mode\n\n\nSet $.jgrid.useJSON by default true\n\n\nIn custom sort function we add the full sort objects as 4 and 5 parameter in order to overcome some Chrome unexpected sort behavior\n\n\nAdd parameter saveAfterSelect (default false) in inline navigator (inlineNav) to save the row if another is selected\n\n\nRTL support for column menu. The column menu is positioned near to column icon\n\n\n\n\nBug Fixes\n\n\n\n\nFix for search operators and search oper menu\n\n\nFix checking compareData function to work properly when checkOnUpdate and/or checkOnSubmit is on\n\n\nFix saveSatate to export correct the data\n\n\nFix savedData array in form editing to have fields only if they are found in template\n\n\nFix the position of column menu with actions\n\n\nFix column menu sort to work with multisort\n\n\nFix for inline saveRow method to show the validation UI dialog.\n\n\nFix for info_dialog syling\n\n\nFix using checkOnUpdate with dataUrl in edit options.\n\n\nFix binding click events in treeGrid after loadState is called. The _index should be refreshed in order to get right positions\n\n\nRemoving not needed code in grouping\n\n\nFixes in getRowData\n\n\nFix jqGridExport not to delete the additional tree Columns\n\n\nFix toppager css\n\n\nFix for frozen Columns in IE11\n\n\nFix check in our json parse function\n\n\nFix for right border when bootstrap is used with alternate row collor\n\n\nFix for loadState to check selected checkboxes of selected rows when multiselect is set\n\n\nFix for cbox class to not be added two times\n\n\nFix for bootstrap border problems in different grid elements\n\n\nFix prevent click for the disabled check boxes in multiselect mode in IE browsers\n\n\nFix jumping to the top of page when a colmenu is clicked\n\n\nFix multiselect when a checkbox is checked\n\n\nFix setFrozenColumns heigh inconsitencies when the height is not default and/or a rowspan is used\n\n\nFix detecting MS IE \n=11. Note that MS Edge is not IE browser\n\n\nFix uniqueSearchFields in filter string\n\n\nFix for RTL scrollbar\n\n\nBootstrap CSS fix for RTL\n\n\nFix semicolon in base module.\n\n\nFix inlineNav when beforeAddRow and beforeEditRow return false not to show the save cancel buttons in inline navigator\n\n\n\n\nVersion 5.1.0 (2016-03-03)\n\n\nAdditions and Updates\n\n\n\n\nAdd new event parameter in filterToolbar method \u2013 onClearSearchValue and corresponding jqGridToolbarClearVal. To this event are passed the following parameters: html element, column index, searchoptions, default value\n\n\nAdded a options between. The option is valid only in filterToolbar method. To use this feature the values in search field should be separated with \u201c\u2026\u201d. Example \u2013 to parse values between 1 and 10 the following should be entered: 1\u202610 in the search field. Click for demo here\n\n\nAdded a possibility to use multi select in toolbar searching. Any multiselect plugin can be used.For this purpose a new parameter is added in filterToolbar method \u2013 groupOpSelect to determine the group operand when multi select is on Can be AND or OR. Default is AND. Click for demo here\n\n\nUpdate Japanese translation\n\n\nAdded new method refreshFilterToolbar This method only refresh the toolbar filter and does not use reload to reload data. It loads the values from filters parameter in postData\n\n\nUpdated Italian translation\n\n\nAdded option uniqueSearchFields (boolean \u2013 default false) in jqFilter respectively in searchGrid methods form searching which allow the searched field to appear only once in the search list. Click for demo here\n\n\nAdded search option searchOperMenu in colModel searchoptions property (valid only in filterToolbar method) which enable/disable the search operators menu for particular field in colModel. The option work with global searchOperator option\n\n\nAdded event isHasSubGrid in grid parameters. To the event is passed the row id. If defined it is executed on every row before the subgrid is build. If the event return false the subgrid for that row is not builded. The plus icon disappear. Click for demo here\n\n\nsearchTree method now return only the result founds with its parents. Click for demo here.\n\n\nAdded sortable plugin not depended on jQuery UI lib.\n\n\nAdded grid option colMenu which if set to true will enable column menus on every grid colum header with different actions. Added visual representation of colMenu for Bootstrap and jQuery UI. Added option colmenu in colModel to enable/disable the menu for particular column. The following actions are present in the menu \u2013 sorting, filtering, grouping, freeze, show/hide reorder columns. Click for demo here\n\n\nAdd event parameter beforeExport in excelExport method to modify/add parameters in the export url.\n\n\nAdded options exporthidden and exportgrouping in excelExport (default false) for exporting colModel hidden property and grouping options. Useful in server side exporting like PHP ASP and etc\n\n\nAdd parameter reverse in getNodeAncestor method which if set to true will return the nodes in natural order \u2013 i.e first root , then first child and etc\n\n\nAdd parameter expanded in getNodeAncestor method which if set to true will return the nodes with expanded property set to true\n\n\nAdded simple filterInput method which allow with single value to filter on all fields in the grid. Works only when datatype is local. Click for demo here\n\n\nAdded new parameter in getNodeChildren method \u2013 currentview to get (walk) nodes from current view or whole local data\n\n\n\n\nBug Fixes\n\n\n\n\nFix padding in toolbar search inputs\n\n\nMore precise calculation of totaltime \u2013 time to put the data in grid\n\n\nFix sort and search in treegrid.\n\n\n\n\nVersion 5.0.2 (2016-01-18)\n\n\nAdditions and Changes\n\n\n\n\nSupport for jQuery versions 1.12.0 and 2.2.0\n\n\nAdd support for nullifempty in celledit.\n\n\nAdding name parameter (cell which is changed) to the serializeCellData in editCell method.\n\n\nAdded license property in bower.json\n\n\nAdd support for radio buttons in GetFormData. This allow custom radio button elements to be parsed correct.\n\n\nAdded syncSavedDataFunction in form editing module.The purpose for this function is to synchronize the custom added elements with class .customelement, so that checkOnUpdate will work corrcet. Usefull for custom templates in the form.\n\n\nAdd possibility to define custom formatDisplayField in grouping in case hideFirstGroupColl is set to true.\n\n\nAdded Albanian translation\n\n\n\n\nBug Fixes\n\n\n\n\nFix selecting row when cellEdit parameter is set to true\n\n\nFix in CSS input width elements in filterToolbar\n\n\nFix filterToolbar to allow using of dataEvents. Thanks to Manuel - See: https://github.com/tonytomov/jqGrid/issues/727\n\n\nFixes for pivot grid\n\n\nFix in CSS wrapping texts in IE 11\n\n\nFix in CSS subgrid row data border\n\n\nFix Equality set of width in dragEnd and setGroudHeaders. Thanks to iguana3\n\n\nFix for checkonUpdate checkOnSubmit\n\n\n\n\nVersion 5.0.1 (2015-10-19)\n\n\nAdditions and Changes\n\n\n\n\nUpdates in Bulgarian, German Russian and Italian language files\n\n\nAdditions in setRegional method in order to load big data.\n\n\nAdd restoreFromFilters parameter in toolbarSearch method to restore the state after searching and when save/load state is used\n\n\nAdding keyevent parameter in editRow method (inline edit) to define a desired key event. Default \u2018keydown\u2019. When used with boostrap typeahead use \u2018keyup\u2019 value of place of keydown.\n\n\nAdded sortname and sortorder in xDimension, so that grouping can be controlled.\n\n\nAded ignoreCase in pivot options in case this is needed in some special situations\n\n\nAdding afterSetGrid event parameter in loadGridState to do some thing after the grid is loaded in searching and save/load state is used.\n\n\nAdded a common function $.jgrid.isGridInStorage\n\n\nAdded restoreCellonFail which determine if the cell should be set or restored on fail. Default true\n\n\nUpdate Spanish Translation\n\n\nPivot avg fact added\n\n\nExperimental: Position the validation error dialog next to the cell input element in cell edit\n\n\n\n\nBug Fixes\n\n\n\n\nFix bootstrap theme to use table condesed in pager\n\n\nRemoving bad added comments in grid CSS\n\n\nFix rowTotals in PivotGrid\n\n\nFix restore the state of the grid when a custom buttons are added with navButtonAdd, navSeparatorAdd\n\n\nFix loadState method to restore the search strings in filterToolbar\n\n\nFix for jqDrag which jumps the window to a default position after draging. Now we use a tinyDragable plugin by Simon Steinberger\n\n\nFix Including frozenColumns in the restoring the grid state\n\n\nFix local sorting and multisorting to work correct with the indexes when datatype is local\n\n\nFix bug in navgrid wheh responsive parameter is not set and width does not match.\n\n\nFixes for navigator drop down menu \u2013 stopPropagation and click the right menu button in case of more than one grid in page\n\n\nGrid should be unloaded in loadState method only when all conditions are meet\n\n\nFix language text (in language files) to be set correct in navButton menu\n\n\nPrevent navgrid to be loaded when storeNavOptions is true, but navigator is not initially run\n\n\ndelRowData should reset the select row only if it is equal to the rowid parameter\n\n\nFix for columnChooser when show/hide selected columns. We need to use .is(\u201d:selected\u201d)\n\n\nFix reference to table body in addXMLData.\n\n\nReplace indexOf with $.inArray (IE8 fix)\n\n\n\n\nVersion 5.0.0 (2015-08-03)\n\n\nCommon features\n\n\nNative Boostrap Support\n\n\nAs of version 5.0 Guriddo jqGrid can be adapted easy with any CSS framework. We have develoed a Bootstrap port. To use the feature you will need only to include the appropriate CSS\n\n\n...\n\nlink rel=\nstylesheet\n type=\ntext/css\n media=\nscreen\n href=\npath_to_css_files/ui.jqgrid-bootstrap.css\n /\n\n...\n\n\n\n\n\nfile and tell jqGrid to use Bootstrap \u2013 with the option:\n\n\n$\n(\n#grid\n).\njqGrid\n(\n \n{\n\n   \n...\n\n   \nstyleUI\n \n:\n \nBootstrap\n,\n\n   \n...\n\n\n});\n\n\n\n\n\n\nExcept Column Chooser and re sizing the grid with a mouse we support all the jqGrid existing features.\n\n\nYou can enjoy the Guriddo jqGrid \nBootstrap Demo\n\n\nIndependent CSS Styling\n\n\nWe have changed our code so that jqGrid can be developed with any CSS framework. This can be achieved with a setting of the styleUI object to use the appropriate classes. The full description will be added into the documentation.\n\n\nResponsive Grid\n\nWe have added a responsive options which make the grid a really responsive.\n\nWith this options the grid is re sized automatically when the device is rotated and the windows width is changed. Another useful feature is auto calculating the the space of the navGrid buttons \u2013 if the space does not fith the grid width we create a drop dawn menu button where all actions are inserted.\n\n\nTreeGrid\n\n\nWe added new events and a method called reloadNode. With this method is possible to reload only certain node data and put it into the treeGrid instead of reloading the entrie treeGrid which in some situations consume a lot of time.\n\n\nThe code below reloaded only the added or edited node (Form editing module)\n\n\n...\n\n\nvar\n \nreloadnode\n \n=\n \nfunction\n \n(\nrowid\n,\n \nrowdata\n,\n \nrowobject\n)\n\n\n{\n\n   \nvar\n \nid\n \n=\n \n$\n(\n#tree\n).\njqGrid\n(\ngetGridParam\n,\nselrow\n);\n\n   \nif\n(\nid\n)\n \n{\n \n// if add a root do not reload\n\n        \nvar\n \nrecord\n \n=\n \n$\n(\n#tree\n).\njqGrid\n(\ngetLocalRow\n,\nid\n);\n\n        \n$\n(\n#tree\n).\njqGrid\n(\nreloadNode\n,\n \nrecord\n);\n\n   \n}\n\n\n}\n\n\n\n$\n(\n#grid\n).\njqGrid\n(\nnavGrid\n,\n\n   \n{...},\n\n   \n{\n \nafterComplete\n \n:\n \nreloadnode\n,\n  \nreloadAfterSubmit\n \n:\n \nfalse\n,\n \ncloseAfterSubmit\n \n:\ntrue\n},\n \n//add\n\n   \n{\n \nafterComplete\n \n:\n \nreloadnode\n,\n  \nreloadAfterSubmit\n \n:\n \nfalse\n,\n \ncloseAfterSubmit\n \n:\ntrue\n},\n \n//edit\n\n\n...\n\n\n);\n\n\n\n\n\n\nPivotGrid\n\nFixed a lot of Bugs related to showing the labels and groupig.\n\n\nBelow is a full list of changes\n\n\nAdditions and changes\n\n\n\n\nAdd native bootstrap support.\n\n\nAdded styleUI object class definition this way it is possible to impelemet jqGrid in any CSS framework\n\n\nAdded option responsive where the grid automatically make some calculations\n\n\nChange keydown with keyup in inline edit when analyzing the enter key (This is a fix for Boostrap typeahead plugin)\n\n\nAdding the Reload node method in treeGrid - \u2026jqGrid(\u201creloadNode\u201d, record);\n\n\nIt is possible now to define all input types according to the html5\n\n\nAdd focusField in form editing\n\n\nChanges in the css to fix and add new settings\n\n\nmultisort option now support order of clicking.\n\n\nSupport of mousewheel on frozen columns\n\n\nAdd resizeColumn method + small fix in dragMove\n\n\nAdding events when expanding/collapsing rows/nodes in treeGrid. the events are as follow:\n\n\nbeforeExpandTreeGridRow(rowid, record, childern);\n\n\nafterExpandTreeGridRow(rowid, record, childern);\n\n\nbeforeCollapseTreeGridRow(rowid, record, childern);\n\n\nafterCollapseTreeGridRow(rowid, record, childern);\n\n\nbeforeExpandTreeGridNode( id, record )\n\n\nafterExpandTreeGridNode( id, record )\n\n\nAdd event data population in dropdown - the name is jqGridAddEditAfterSelectUrlComplete\n\n\nUpgrade to the latest multiselect jQuery UI plugin\n\n\nSmall speed optimization in addXMLData and addJSONData in case gridview is false.\n\n\nAdded onUnSelectRow which is called only in resetSelection\n\n\nAdded this in the onPaging in order to get the new value of the element before processing\n\n\nMake sure loading message is always visible - thanks to: marek-saji - see: https://github.com/tonytomov/jqGrid/pull/514\n\n\nAdded new parameter className in groupingHeader to make a custom individual style of every group\n\n\nAutomatically detect language if the loaded language file is only one\n\n\n\n\nFixes\n\n\n\n\nts.firstElementChild.innerHTML causes more problems that advantages. So drop support of this instead of the speed.\n\n\nFix a case when a multiselect with multikey is set and checkbox is clicked only. It shouild be not changed in case the multikey is not pressed\n\n\nFix realoding a grid to certain page when a virtual scrolling is enabled.\n\n\nFix ruleMenu in filter toolbar if the parent grid element has zindex\n\n\nFix submit old input value after select field change in dialog filtering\n\n\nFix in addRowdata when altRows and position == last\n\n\nFix griResize in case of frozen columns\n\n\nFix calculating the width in pager\n\n\nFix for gridResize when caption is a vilable and button hide grid is clicked\n\n\nFix the columnChosser - we must pass the width instead of tblwidth.\n\n\nFix toppager count pager thanks to: windofny\n\n\nFix multiselect addAll\n\n\nFix rownumbers and check box columns to be set to frozen\n\n\nFixing dependecy in bower.json\n\n\nFix for frozen columns and multisort\n\n\nSmall fix in multi sort when data type is local\n\n\nRemove moot version property from bower.json\n\n\nFixes for focusField.\n\n\nFix Ukraine language code file to be set as ISO 639-1\n\n\nSmall fix in class definition\n\n\nFix multiple select in case of add record in form edit.\n\n\nFix position of the select template in search dialog\n\n\nFix saving the group headers when we call it mopre than once\n\n\nFix Display correct the labels in pivot\n\n\n\n\nVersion 4.8.0 (2015-03-20)\n\n\nAdditions and Changes\n\n\n\n\nAdding support for AMD. View demo\n\n\nAdding support for AMD in language files.\n\n\nIntroducing templating in Form edit module. View Demo\n\n\nAdding scrollPopUp to appear a popup with page information when virtual scrolling is on. Also added top offset to controll the appearing. View demo\n\n\nAdd a methods saveState which save the grid state when the option storeNavOptions is set to true in grid option. method uses localStorage. View demo\n\n\nAdd method loadState to restore the previous saved state with saveState.\n\n\nAdded searchTree grid when we have a local data. View Demo\n\n\nAdded a option cacheUrlData in colModel editoptions,which caches the data from dataUrl. This very usefull in search fileter and inline edit in order to prevent too much server calls. View demo\n\n\nAdded a new grid parameter \u2013 regional \u2013 two letter code which correspond to the code in grid.locale-xx.js. To load a language file different from English (default) in the grid this parameter should be set.\n\n\nAdded method setRegional to change the language on the fly. The method uses sessionStorage. View demo\n\n\nAdded ui.jqgrid-bootstrap.css as a separate css in order to have good grid in boostrap. View demo\n\n\ntabletogrid() function is no more supported.The module is moved into the plugins directory\n\n\nAdded WCAG AA related ids and headers\n\n\nCode optimization in editGridRow\n\n\nIE versions \n= 8 are no more supported.\n\n\nAdded parameter storeNavOptions to store the nav options in the grid options. The parameter is used in navGrid and if true the options are saved as grid parameters.\n\n\nAdding UI classes to jQuery UI search dialog. Removing some css rules and adding new for the search filter dialog\n\n\nChanges in GridUnload and GridDestroy. In previous case we never can destroy the grid object. The function are called different way \u2013 i.e they are a jgrid namespaced\n\n\nInternal module changes and function move.\n\n\ninlineNav can be called without to call first navGrid.\n\n\nAdded second parameter in getGridParam \u2013 module to query the certain module parameters.\n\n\nNow it is possible to get the parameter of the navigator using jQuery data \u2013 \u2026jqGrid(\u2018getGridParam\u2019,name,\u2019navGrid\u2019);\n\n\nAdd ignoreCasde default to true.\n\n\nAdded a option in getFullTreeNode to expand the returned result\n\n\nAddeed a option in getRootNodes to return the root nodes of the current grid data.\n\n\nAdded second param in getRowData \u2013 usedata. If set to true the current view is returned from data array (if any) and not from the html table\n\n\nTreeGrid now support local data\n\n\nCode optimizations in inlineNav when restoreAfterselect is true\n\n\nRemoving the non utf language files\n\n\nLanguage file structure changes to support more lang at the same time and change it easy\n\n\nAdding missed saving messages in language files\n\n\nDrop the LGPL JsonXml.js from jqGrid and replace the code with our own. Created grid.utils.js\n\n\nMoving jqGridImport to $.jgrid namespace\n\n\nAdd/remove classes ui-sg-collapsed/ui-sg-expanded in subgrid row to check if it is expanded or collapsed\n\n\nAdd class widget-content to pager select box\n\n\nAdd scrollLeftOffset to controll dynamically the appearance of the scroll dialog information\n\n\nChanges in CSS to make the grid to look modern\n\n\n\n\nFixes\n\n\n\n\nFix for possible duplicated IDs in the search input boxes\n\n\nRemoved faulty role=\u201drow\u201d on pager\n\n\nRemoving duplicate code. Moving template in base grid deleting the format function and replace it with template\n\n\nSmall fixes and support for bootstrap via jQuery UI Bootstrap\n\n\nFix saving the data row in inline edit in case not a reloading is lunched.\n\n\nFix subGridBeforeExpand event should be executed independed of the reloadOnExpand option\n\n\nFixes for pager and toppager\n\n\nFix bug in searching when data is local and the field is defined as formatter data with srcformat and newformat.\n\n\nFixes in clearBeforeUnload.\n\n\nFix sortTreeGrid in case a local serch is performed.\n\n\nFixed collapsing of expandable row if this row is dragging in sortable table\n\n\nFix for beforeselectrow in inline navigator.\n\n\nFixes in addJSONData, addXmlData in IE when used firstChild\n\n\nFix in showFilter calling parameters\n\n\nFix \u201cmultiple:true\u201d might work unexpectedly\n\n\nFix in case grouping and subgrid to not expand subgrid rows when they are not expanded\n\n\nFix loading the default lang according to the new lang changes\n\n\n\n\nUpgrade\n\n\n\n\nThe ui.jqgrid.css file should be replaced with the last one.\n\n\nLanguage files (grid.locale-xx.js) should be replaced with the last one. If this is not performed a error will appear and grid will not be build.\n\n\nThe method GridUnload \u2013 i.e $(\u201c#grid\u201d).jqGrid(\u2018GridUnload\u2019) does not have effect.\n\n\nReplace the old with the new one $.jgrid.gridUnload(\u2018#jqGridId\u2019); where jqGridId is the id of the grid\n\n\nThe method GridDestroy \u2013 i.e $(\u201c#grid\u201d).jqGrid(\u2018GridDestroy\u2019) does not have effect.\n\n\nReplace the old with the new one $.jgrid.gridDestroy(\u2018#jqGridId\u2019); where jqGridId is the id of the grid\n\n\nThe method jqGridImport \u2013 i.e $(\u201c#grid\u201d).jqGrid(\u2018jqGridImport\u2019,options) does not have effect.\n\n\nReplace the old with the new one $.jgrid.jqGridImport(\u2018#jqGridId\u2019, options); where jqGridId is the id of the grid\n\n\nThe $.jgrid.defaults property is unchanged and it is possible to use $.extend($.jgrid.defaults, {\u2026});\n\n\n\n\nAll other parameter from the language file should be changed this way:\n\nSuppose the current language file is English, then extending the edit parameters should be replaced from\n\n\n    \n$\n.\nextend\n(\n$\n.\njgrid\n.\nedit\n,\n \n{\n\u2026\n});\n\n\n    \nto\n\n\n    \n$\n.\nextend\n(\n$\n.\njgrid\n.\nregional\n[\n\u2018\nen\n\u2019\n].\nedit\n,\n \n{\n\u2026\n});\n\n\n\n\n\n\nThe same apply for all other parameters in language file.\n\nTo load your own language file you will need to setup the regional parameter in the grid.\n\nLet suppose that default language file should be grid.locale-cn.js, then in grid it is needed to do this:\n\n\n    \n$\n(\n#jqGrid\n).\njqGrid\n({\n\n    \n...\n\n    \nregional\n \n:\n \ncn\n,\n\n    \n...\n\n    \n});", 
            "title": "Release Notes"
        }, 
        {
            "location": "/about/release-notes/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/about/release-notes/#version-531-2018-03-12", 
            "text": "", 
            "title": "Version 5.3.1 (2018-03-12)"
        }, 
        {
            "location": "/about/release-notes/#additions-and-updates", 
            "text": "Bootstrap 4 improvements  Support for Font Awesome when Bootstrap 4  Add new option useNameForSearch to search by name on local data and not on index when set.", 
            "title": "Additions and Updates"
        }, 
        {
            "location": "/about/release-notes/#bug-fixes", 
            "text": "Do not include subgrid and other internal columns in addlocaldata for manipulating  Removing badly added grouping == true when set frozen columns.  Fix in addXmlData to add empty string in case CDATA (when set) does not contain data.  Fix grouping when grouSummaryPos = header and there are hidden fields at beginning of colModel. Small optimization in buildSummaryTd.  Fix excluding subgrid column in exportToHtml  Fix exportToHtml to get the labels of header from colNames  Fix apperaing print preview dialog in Chrome (method exportToHtml)  Fix Drag and drop rows (gridDnD method) when drop by name is false.  Fix loadState method when a subgrid has open subgrids as grids  Fix all exporting methods when grouping is enabled  Fix vertical scroolbar for bootstrap 4  Fix setAttributes function in CreateEl to be called as last one when a editable element is created, so that the developer can overwrite the defaults.  Fix subgrid with parent as altRows set for Bootstrap 4", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/about/release-notes/#version-530-2018-01-04", 
            "text": "", 
            "title": "Version 5.3.0 (2018-01-04)"
        }, 
        {
            "location": "/about/release-notes/#additions-and-updates_1", 
            "text": "Add Support for Bootstrap 4.  Demo  Support validation in filterToolbar via searchrules  Adding parameter errorcheck to enable/disable the validation of the search inputs in  the toolbar searching  Update Stronger check for number in case of strict mode prevent entering a octal values  Adding jqGridInitGrid triggered event, which can replace initGrid event  Add exportToHtml method with ability to print.  Demo  Extend excel export to recognize more numeric types. Support for ISO date only at the moment  Add 3 parameter  returnobject  in  getCell method which set to true return the cell as jQuery object  Add menubar on caption layer. Added new option  menubar  which place a icon on left (or right) and the user can add actions. Added two new methods for this purpose  menubarAdd  and  menubarDelete  to add and delete items.  Demo  Added new options in colModel -  minResizeWidth , which defines minimal re-sizing width per column. When set this option have higher priority of minColWidth  Add possibility to define user defined buttons in editGridRow, delGridRow and viewGridRow forms.  Demo  Add $.jgrid.buildButtons function in common module to return a string with a buttons defined in buttons array in the different modules.  Add support for html5 in form edit  Demo  Add a treeGrid paging based on the code of Vyacheslav N. Boyko  See here . For more information  documentation  information.  Demo  Add  buttons  array in order allow to add custom buttons in the searchGrid form. The button item object contain the following properties -  side, position, text, icon, click, id. To the click function is passed the search form, search parameters and click event.  See here .  Demo  Remove z-index from jqgrid-overlay class and add jqgrid-overlay-modal class to serve separate modals.  Add possibility to create the search dialog as first child of body setting the layer option to true.  Add event colMenuColumnDone as grid options which executes on reordering of the columns when colMenu columns options is on - the event is similar to in columnChooser.  Adding onEnter and onEscape events in editRow in order to get possibility for custom save cancel code - by example  pop-up to ask for saving and etc.  Demo  Enlarge mousedown area in jqModal in case some other components like datepicker are outside the modal dialog. Added two new parameters heightOffset and widthOffset.  In inline saveRow method the deletion of the saved row is moved after aftersavefunc so that this row can be available for comparing  In method gridDnD droppable now applied to table's closest ui-jqgrid-bdiv for greater drop area Added \"tolerance\" setting to default drop_opts  Add parameter previous selected rowid in bindkeys onUpKey and onDownKey events  Add onUpKey and onDownKey check events in bindKeys method. Also to all events is added second parameter the event  Add custom column menu. This is done via the two new methods  colMenuAdd  to add a new column menu and  colMenuDelete  to delete it. More can be found in the  methods list   Demo  Add two additional parameters to  summaryTpl  in colModel for grouping - the name of the summary field and the value of the summary field - respectively the can be added as {2} and {3} in the template  Demo  Added  isExported  and  exporttype  in the formatter options in  colModel  when export to pdf, csv or excel occur. This allow to conditionally format the value depending if it is exported.  Demo  Update Spain translation  Return empty pivot grid when no data, rather than to expose a exception  Update Portuguese translation", 
            "title": "Additions and Updates"
        }, 
        {
            "location": "/about/release-notes/#bug-fixes_1", 
            "text": "Fix for saveState not to save the data when saveData is on and datatype is local.  Fix creating the ids of the grid with the build in generator  randId  in case local data and scroll is on (virtual scrolling)  Fix building the id row when a add operation in method editGridRow. The comparing of the empty row missed the idPreffix  Fix column menu in case the searchbox and cols menu are outside the view port  Fix setCell to get right row unformatted data. If the datatype is local no unformat function is needed  Fix setCell to find the right cell in case the cell contain another table data.  Fix correct dropping row in gridDnD when both grids have equal colModel's and dropbyname parameter is false  Fix exportcol property in exportToCsv, exportToExcel, exportToPdf methods when hidden is false, but exportcol is true  Fix exportToCsv, exportToExcel, exportToPdf methods to export all the data when datatype is local  Fix for csv export summary data to skip not exported column. Fix export to excel to skip the same column  Fix typo \"inine-block\" in ui.jqgrid.css  Fix exportTo excel to interpret virtual values not as part of the data array  Fix remove not needed comma from jqGridFilter parameters  Fix grid width in bootstrap in different situations when shrinkToFit changes. Calculation of width methods is now synchronized. Fixed small issues when autowidth is on and responsive is on too  Fix add missed parameter in editCell - the event, which is used in onCellSelect  Fix previous navigator button in viewGridRow method to work correct.  See  Fix for minColWidth  Fix Albanian translation to get the right two code  See  Fix checkOnUpdate in Chrome [See] (https://github.com/tonytomov/jqGrid/issues/881)  Fix when subgrid and grouping are on again with loadonce true thanks to preethi koochana  Fix jqFilter getParameter method.  Fix loadui grid parameter when set to  block  Create separate modal overlay in viewMoodal and hide it in hideModal. Fix viewModal to get the overlay class depending on style.  Fix for viewModal parameters when called in searchGrid method. The id of entire grid box was wrong set  Fix height of the frozen div.  Fix inconsistent state if saveAfterSelect is true but method saveRow fails  Fix when styleUI is Bootstrap and altRows is on  Fix typo when calling onCellSelect grid event  Fix removing not needed href='#/' when build column menu  Fix  bindKeys  method to work when grid drag and drop method  gridDnD  method is activated  Fix exportToExcel when the number length is   15 (know problem in Microsoft Excel)  Fix resting grouping values when clearGroupData is called  Fix determine the vertical scroll-bar dynamically and fix the issue when Bootstrap in Windows  Fix for showSummaryOnHide when grouping is enabled  Fix in JSON.parse in utility module to parse correct all cases when function is available.  Fix multisorting issues.  Fix bug with big select element  in modal dialog  Fix celledit to support subgrid and any additional rows content added during editing  Fix width of column when exportToExcel and the data is number.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/about/release-notes/#version-521-2017-05-01", 
            "text": "", 
            "title": "Version 5.2.1 (2017-05-01)"
        }, 
        {
            "location": "/about/release-notes/#additions-and-updates_2", 
            "text": "Add a showSaveCancelButtons() method in inline editiong to enable save and cancel buttons  Add saveData parameter in saveState method, which enables/disables saving the data. Default true.  Add restoreData option in loadState method which enables/disables restoring the saved data state. Default true.  Removed a grid option altclass. Added definition for striped table in the styleUI object. The striped table is now build (option altRows : true) only when add a class to the main table. This add a speed improvements when loading the data. Removed the not needed code in delRowData and addRowdata  Add onBeforeExport event in exportToExcel method  Add parameter forceresize to resizeColumn methods  Added triggred event jqGridBeforeProcessing which is equivalent of beforeProcessing  Add triggered events jqGridLoadError = loadError and jqGridLoadBeforeSend = loadBeforeSend  Add triggered event jqGridPaging = onPaging  Remove global object jqGridUtils and add all the functions in $.jgrid object removing a need to have two global jqGrid objects.  Exclude more attributes not needed to be add in input element in createEl function  Add triggered event jqGridErrorCell = errorCell in cell editing  Add new property in colModel  exportcol  which enables disables the export in the methods exportToPdf and ExportToExcel exportToCsv.  Add saveui and savetext parameters to the editRow method  Added missed triggered events in viewGridRow method see documentation  Adding missed triggred evenents in delGridRow see documentation  Added replaceStr event in exportToExcel parameters in order to control the formatting of the exported text.  Add onSubmitCell event in cell edit  Removing not used option delayOnLoad in subgrid  Adding the missing triggered events in treeGrid  Adding option multimail  Adding count parameter to summaryTpl -  {1}  Add option scrollMaxBuffer to prevent memory problems when using virtual scrolling in local mode using the mouse wheel", 
            "title": "Additions and Updates"
        }, 
        {
            "location": "/about/release-notes/#bug-fixes_2", 
            "text": "Fix: small fixes according to eslint  Fix: comparing with equal data types in getNodeParent  Selector fixes the addJSONData and addXMLData  Fix: Support autoencode grid option to prevent XSS in jqFilter  Fix restoreRow to restore all the data saved into the savedRow array and not only the editable. This fixes calling of depended formatter custom function. See  here  Fix: Unreadable content in MS Excel when open the generated excel file generated with exportToExcel method`  Fix: saveAs function in exportToExcel to work correct in IE11 (Access denied error fix)  Fix: set search option to false when we reset the seasrch in column menu  Fix: fixes in normalizeData function to read correct the unique name.  Fix setFrozenColumns when box-sizing=border-box is used.  Fix: add beforeProcessing event to every datatype.  Small fix in beforeRequest event. The triggered event and option event should be one after other.  Fix according to the documentation if datatype is function beforeRequest does not fire  Fix: More strict check in setColProp for the type object  Fix jqgroup class to have same height as jqgrow class.  Fix calling custom_element in search modules with the right html element.  Fix delGridRow view modal dialogue in case first time beforeInitData return false.  Fix: remove the parameter searchurl in filterToolbar it is never used  Fix: get correct label from colNames instead of colModel.label in buildColMenu  Fix: When exporting we should use the colNames and not colModel.label  Fix remove bad set counter for service fields: row numbers and multiselect.  Fix frozen columns when zooming.  Fix calling triggered event jqGridAddEditAfterComplete in editGridRow.  Fix add missed parameter postdata in jqGridAddEditBeforeCheckValues  Fix setGroupHeader method in case it is called 2 or more times with colspan : true  Fix export to excel allowing quotes in the values.  Fix Bootstrap css dispearing icons  Fix: colmenu search options operands replaced with groupOps common to all search modules  Fix columnChooser - setting height causes selection list not to overflow correct.  Fix sortable columns to perform sort when the column is sorted to its original position  Fix reading data in case key colModel option is set and repeatitems in jsonReader is true.  Fix passing parameters in editRow  Fix stop function in sortablColumns method to be executed within delay  Fix deselectAfterSort to not highlight the remaining rows  Fix exportToExcel method to order properly the columns. The bug originally come for the reason that object properties are ordered and do not follow natural insert order  Fix exportToPdf to order correctly the columns in case some of them have a number as name  Fix exportToCsv to order correct column names in header when they are numbers.  Fix timeoffset in parseDate function.  Fix it is possible to search when select has a multiple property in dialogue search  Fix toggleToolbar method when frozenColumns are set  Fix filterInput to use ! correct", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/about/release-notes/#version-520-2016-11-21", 
            "text": "", 
            "title": "Version 5.2.0 (2016-11-21)"
        }, 
        {
            "location": "/about/release-notes/#additions-and-updates_3", 
            "text": "Support to jQuery 3.x  Added a export to CSV, Excel (open excel format) and pdf. For excel we need additionally jsZip and for pdf pdfMake libs.  Add saveAs function in util module, which do a browser save dialog for saving diffrent data type.  Update Portugase translation file grid.locale-pt.js  Add a new event \u2013 validationCell which may occur (if defined) when a validation error. Parameters \u2013 element, error message, iRow and iCol. When restoreCellonFail is set to false now we focus the cell when info dialog is closed  Added method setSortIcon. the method changes the position of the sort icon at left or right. The first parameter is the column name or the position of the column in colModel starting from zero. The second parameter is left or right(or empty or nothing).  Update of lang files for the serch dilogs  Update for the language spanish file.  Update of Bulgarian, German and Russian language files according to the new search text  Adding validationCell event custom message in inline edit. Parameters passed to this are the element, error message, row index and column index.  Update Chinese Translate for v5.1.1  Adding custom aggregate function in pivot grid. In the aggregates array the aggregator now can be a function.  Parameters passed to this function are: value, field name, data record  Making possible to run addLocalData as grid method. Added a parameter(boolean) which set if we need all the data (and not paged one)", 
            "title": "Additions and Updates"
        }, 
        {
            "location": "/about/release-notes/#bug-fixes_3", 
            "text": "Fixes in import module.  Fix cc variable in cell edit to be a jQuery object causing error. See https://github.com/tonytomov/jqGrid/issues/812  Fix pivot in case yDimension is not set  Fix getRowData when the second paraneter is not set  More tolerante checking of isEmpty function in formedit validations  Fix for beforedrop event in the gridDnD method.  Fix for avg function in pivot  Fix: Data in pivot should be array.  Fix cacheUrl to accept empty values in case in case they are defined in option value.  Fix getting the cell data in cell edit mode  Fix: Added missed translation text in serach dialogs for the button rules.  Fix get cell to return the right content of the ExpandColumn field when treeGrid is on  Fix for Bootstrap horizontall scroll bar when height auto/100%  Fixed misspelling of \u201cinline-block\u201d  Fix info dilog when error from the server \u2013 position the dialog ner to the cell and focus a field if restoronCellFail is false  Try to focus the field in inline edit when a validation error occur  Fix finding the position of the objec. We need the cuurent position of the screen.  Fix pivot initial sorting when set in grid options as sortname  Fix pager info for loaded records when adding new one and virtual scroll is enabled.  Formatting changes  Fix adding non empty id in editGridRow (fix is for treegrid)  Fix German locale toolbar search options", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/about/release-notes/#version-511-2016-06-08", 
            "text": "", 
            "title": "Version 5.1.1 (2016-06-08)"
        }, 
        {
            "location": "/about/release-notes/#additions-and-updates_4", 
            "text": "SetLabel method accept now column name or index of the coulmn.  Remove the local _savedData parameter from editRow and replace it with the global savedData (like savedRow) which now part of Grid parameter for easy access  Add support in loadState for Subgrid  Add support in loadState for Tree Grid  getFormData have the same ruled obtaining the values as in createData and syncSavedData  Update French localization  Added beforeSetTreeNode and afterSetTreeNode events (grid parameters) in setTreeNode method  Added method setLeaf, which visually change the icons and data (isLeaf) parameter  reloadNode method now support updating the current node Leaf status depending if there is a data or not  Added debug option in saveState method to generate dump grid file with options and data (very useful for test and support).  Added option editselected (default false) in form edit module which allow to edit only the selected rows in multi select mode  Set $.jgrid.useJSON by default true  In custom sort function we add the full sort objects as 4 and 5 parameter in order to overcome some Chrome unexpected sort behavior  Add parameter saveAfterSelect (default false) in inline navigator (inlineNav) to save the row if another is selected  RTL support for column menu. The column menu is positioned near to column icon", 
            "title": "Additions and Updates"
        }, 
        {
            "location": "/about/release-notes/#bug-fixes_4", 
            "text": "Fix for search operators and search oper menu  Fix checking compareData function to work properly when checkOnUpdate and/or checkOnSubmit is on  Fix saveSatate to export correct the data  Fix savedData array in form editing to have fields only if they are found in template  Fix the position of column menu with actions  Fix column menu sort to work with multisort  Fix for inline saveRow method to show the validation UI dialog.  Fix for info_dialog syling  Fix using checkOnUpdate with dataUrl in edit options.  Fix binding click events in treeGrid after loadState is called. The _index should be refreshed in order to get right positions  Removing not needed code in grouping  Fixes in getRowData  Fix jqGridExport not to delete the additional tree Columns  Fix toppager css  Fix for frozen Columns in IE11  Fix check in our json parse function  Fix for right border when bootstrap is used with alternate row collor  Fix for loadState to check selected checkboxes of selected rows when multiselect is set  Fix for cbox class to not be added two times  Fix for bootstrap border problems in different grid elements  Fix prevent click for the disabled check boxes in multiselect mode in IE browsers  Fix jumping to the top of page when a colmenu is clicked  Fix multiselect when a checkbox is checked  Fix setFrozenColumns heigh inconsitencies when the height is not default and/or a rowspan is used  Fix detecting MS IE  =11. Note that MS Edge is not IE browser  Fix uniqueSearchFields in filter string  Fix for RTL scrollbar  Bootstrap CSS fix for RTL  Fix semicolon in base module.  Fix inlineNav when beforeAddRow and beforeEditRow return false not to show the save cancel buttons in inline navigator", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/about/release-notes/#version-510-2016-03-03", 
            "text": "", 
            "title": "Version 5.1.0 (2016-03-03)"
        }, 
        {
            "location": "/about/release-notes/#additions-and-updates_5", 
            "text": "Add new event parameter in filterToolbar method \u2013 onClearSearchValue and corresponding jqGridToolbarClearVal. To this event are passed the following parameters: html element, column index, searchoptions, default value  Added a options between. The option is valid only in filterToolbar method. To use this feature the values in search field should be separated with \u201c\u2026\u201d. Example \u2013 to parse values between 1 and 10 the following should be entered: 1\u202610 in the search field. Click for demo here  Added a possibility to use multi select in toolbar searching. Any multiselect plugin can be used.For this purpose a new parameter is added in filterToolbar method \u2013 groupOpSelect to determine the group operand when multi select is on Can be AND or OR. Default is AND. Click for demo here  Update Japanese translation  Added new method refreshFilterToolbar This method only refresh the toolbar filter and does not use reload to reload data. It loads the values from filters parameter in postData  Updated Italian translation  Added option uniqueSearchFields (boolean \u2013 default false) in jqFilter respectively in searchGrid methods form searching which allow the searched field to appear only once in the search list. Click for demo here  Added search option searchOperMenu in colModel searchoptions property (valid only in filterToolbar method) which enable/disable the search operators menu for particular field in colModel. The option work with global searchOperator option  Added event isHasSubGrid in grid parameters. To the event is passed the row id. If defined it is executed on every row before the subgrid is build. If the event return false the subgrid for that row is not builded. The plus icon disappear. Click for demo here  searchTree method now return only the result founds with its parents. Click for demo here.  Added sortable plugin not depended on jQuery UI lib.  Added grid option colMenu which if set to true will enable column menus on every grid colum header with different actions. Added visual representation of colMenu for Bootstrap and jQuery UI. Added option colmenu in colModel to enable/disable the menu for particular column. The following actions are present in the menu \u2013 sorting, filtering, grouping, freeze, show/hide reorder columns. Click for demo here  Add event parameter beforeExport in excelExport method to modify/add parameters in the export url.  Added options exporthidden and exportgrouping in excelExport (default false) for exporting colModel hidden property and grouping options. Useful in server side exporting like PHP ASP and etc  Add parameter reverse in getNodeAncestor method which if set to true will return the nodes in natural order \u2013 i.e first root , then first child and etc  Add parameter expanded in getNodeAncestor method which if set to true will return the nodes with expanded property set to true  Added simple filterInput method which allow with single value to filter on all fields in the grid. Works only when datatype is local. Click for demo here  Added new parameter in getNodeChildren method \u2013 currentview to get (walk) nodes from current view or whole local data", 
            "title": "Additions and Updates"
        }, 
        {
            "location": "/about/release-notes/#bug-fixes_5", 
            "text": "Fix padding in toolbar search inputs  More precise calculation of totaltime \u2013 time to put the data in grid  Fix sort and search in treegrid.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/about/release-notes/#version-502-2016-01-18", 
            "text": "", 
            "title": "Version 5.0.2 (2016-01-18)"
        }, 
        {
            "location": "/about/release-notes/#additions-and-changes", 
            "text": "Support for jQuery versions 1.12.0 and 2.2.0  Add support for nullifempty in celledit.  Adding name parameter (cell which is changed) to the serializeCellData in editCell method.  Added license property in bower.json  Add support for radio buttons in GetFormData. This allow custom radio button elements to be parsed correct.  Added syncSavedDataFunction in form editing module.The purpose for this function is to synchronize the custom added elements with class .customelement, so that checkOnUpdate will work corrcet. Usefull for custom templates in the form.  Add possibility to define custom formatDisplayField in grouping in case hideFirstGroupColl is set to true.  Added Albanian translation", 
            "title": "Additions and Changes"
        }, 
        {
            "location": "/about/release-notes/#bug-fixes_6", 
            "text": "Fix selecting row when cellEdit parameter is set to true  Fix in CSS input width elements in filterToolbar  Fix filterToolbar to allow using of dataEvents. Thanks to Manuel - See: https://github.com/tonytomov/jqGrid/issues/727  Fixes for pivot grid  Fix in CSS wrapping texts in IE 11  Fix in CSS subgrid row data border  Fix Equality set of width in dragEnd and setGroudHeaders. Thanks to iguana3  Fix for checkonUpdate checkOnSubmit", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/about/release-notes/#version-501-2015-10-19", 
            "text": "", 
            "title": "Version 5.0.1 (2015-10-19)"
        }, 
        {
            "location": "/about/release-notes/#additions-and-changes_1", 
            "text": "Updates in Bulgarian, German Russian and Italian language files  Additions in setRegional method in order to load big data.  Add restoreFromFilters parameter in toolbarSearch method to restore the state after searching and when save/load state is used  Adding keyevent parameter in editRow method (inline edit) to define a desired key event. Default \u2018keydown\u2019. When used with boostrap typeahead use \u2018keyup\u2019 value of place of keydown.  Added sortname and sortorder in xDimension, so that grouping can be controlled.  Aded ignoreCase in pivot options in case this is needed in some special situations  Adding afterSetGrid event parameter in loadGridState to do some thing after the grid is loaded in searching and save/load state is used.  Added a common function $.jgrid.isGridInStorage  Added restoreCellonFail which determine if the cell should be set or restored on fail. Default true  Update Spanish Translation  Pivot avg fact added  Experimental: Position the validation error dialog next to the cell input element in cell edit", 
            "title": "Additions and Changes"
        }, 
        {
            "location": "/about/release-notes/#bug-fixes_7", 
            "text": "Fix bootstrap theme to use table condesed in pager  Removing bad added comments in grid CSS  Fix rowTotals in PivotGrid  Fix restore the state of the grid when a custom buttons are added with navButtonAdd, navSeparatorAdd  Fix loadState method to restore the search strings in filterToolbar  Fix for jqDrag which jumps the window to a default position after draging. Now we use a tinyDragable plugin by Simon Steinberger  Fix Including frozenColumns in the restoring the grid state  Fix local sorting and multisorting to work correct with the indexes when datatype is local  Fix bug in navgrid wheh responsive parameter is not set and width does not match.  Fixes for navigator drop down menu \u2013 stopPropagation and click the right menu button in case of more than one grid in page  Grid should be unloaded in loadState method only when all conditions are meet  Fix language text (in language files) to be set correct in navButton menu  Prevent navgrid to be loaded when storeNavOptions is true, but navigator is not initially run  delRowData should reset the select row only if it is equal to the rowid parameter  Fix for columnChooser when show/hide selected columns. We need to use .is(\u201d:selected\u201d)  Fix reference to table body in addXMLData.  Replace indexOf with $.inArray (IE8 fix)", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/about/release-notes/#version-500-2015-08-03", 
            "text": "", 
            "title": "Version 5.0.0 (2015-08-03)"
        }, 
        {
            "location": "/about/release-notes/#common-features", 
            "text": "Native Boostrap Support  As of version 5.0 Guriddo jqGrid can be adapted easy with any CSS framework. We have develoed a Bootstrap port. To use the feature you will need only to include the appropriate CSS  ... link rel= stylesheet  type= text/css  media= screen  href= path_to_css_files/ui.jqgrid-bootstrap.css  / \n...  file and tell jqGrid to use Bootstrap \u2013 with the option:  $ ( #grid ). jqGrid (   { \n    ... \n    styleUI   :   Bootstrap , \n    ...  });   Except Column Chooser and re sizing the grid with a mouse we support all the jqGrid existing features.  You can enjoy the Guriddo jqGrid  Bootstrap Demo  Independent CSS Styling  We have changed our code so that jqGrid can be developed with any CSS framework. This can be achieved with a setting of the styleUI object to use the appropriate classes. The full description will be added into the documentation.  Responsive Grid \nWe have added a responsive options which make the grid a really responsive. \nWith this options the grid is re sized automatically when the device is rotated and the windows width is changed. Another useful feature is auto calculating the the space of the navGrid buttons \u2013 if the space does not fith the grid width we create a drop dawn menu button where all actions are inserted.  TreeGrid  We added new events and a method called reloadNode. With this method is possible to reload only certain node data and put it into the treeGrid instead of reloading the entrie treeGrid which in some situations consume a lot of time.  The code below reloaded only the added or edited node (Form editing module)  ...  var   reloadnode   =   function   ( rowid ,   rowdata ,   rowobject )  { \n    var   id   =   $ ( #tree ). jqGrid ( getGridParam , selrow ); \n    if ( id )   {   // if add a root do not reload \n         var   record   =   $ ( #tree ). jqGrid ( getLocalRow , id ); \n         $ ( #tree ). jqGrid ( reloadNode ,   record ); \n    }  }  $ ( #grid ). jqGrid ( navGrid , \n    {...}, \n    {   afterComplete   :   reloadnode ,    reloadAfterSubmit   :   false ,   closeAfterSubmit   : true },   //add \n    {   afterComplete   :   reloadnode ,    reloadAfterSubmit   :   false ,   closeAfterSubmit   : true },   //edit  ...  );   PivotGrid \nFixed a lot of Bugs related to showing the labels and groupig.  Below is a full list of changes", 
            "title": "Common features"
        }, 
        {
            "location": "/about/release-notes/#additions-and-changes_2", 
            "text": "Add native bootstrap support.  Added styleUI object class definition this way it is possible to impelemet jqGrid in any CSS framework  Added option responsive where the grid automatically make some calculations  Change keydown with keyup in inline edit when analyzing the enter key (This is a fix for Boostrap typeahead plugin)  Adding the Reload node method in treeGrid - \u2026jqGrid(\u201creloadNode\u201d, record);  It is possible now to define all input types according to the html5  Add focusField in form editing  Changes in the css to fix and add new settings  multisort option now support order of clicking.  Support of mousewheel on frozen columns  Add resizeColumn method + small fix in dragMove  Adding events when expanding/collapsing rows/nodes in treeGrid. the events are as follow:  beforeExpandTreeGridRow(rowid, record, childern);  afterExpandTreeGridRow(rowid, record, childern);  beforeCollapseTreeGridRow(rowid, record, childern);  afterCollapseTreeGridRow(rowid, record, childern);  beforeExpandTreeGridNode( id, record )  afterExpandTreeGridNode( id, record )  Add event data population in dropdown - the name is jqGridAddEditAfterSelectUrlComplete  Upgrade to the latest multiselect jQuery UI plugin  Small speed optimization in addXMLData and addJSONData in case gridview is false.  Added onUnSelectRow which is called only in resetSelection  Added this in the onPaging in order to get the new value of the element before processing  Make sure loading message is always visible - thanks to: marek-saji - see: https://github.com/tonytomov/jqGrid/pull/514  Added new parameter className in groupingHeader to make a custom individual style of every group  Automatically detect language if the loaded language file is only one", 
            "title": "Additions and changes"
        }, 
        {
            "location": "/about/release-notes/#fixes", 
            "text": "ts.firstElementChild.innerHTML causes more problems that advantages. So drop support of this instead of the speed.  Fix a case when a multiselect with multikey is set and checkbox is clicked only. It shouild be not changed in case the multikey is not pressed  Fix realoding a grid to certain page when a virtual scrolling is enabled.  Fix ruleMenu in filter toolbar if the parent grid element has zindex  Fix submit old input value after select field change in dialog filtering  Fix in addRowdata when altRows and position == last  Fix griResize in case of frozen columns  Fix calculating the width in pager  Fix for gridResize when caption is a vilable and button hide grid is clicked  Fix the columnChosser - we must pass the width instead of tblwidth.  Fix toppager count pager thanks to: windofny  Fix multiselect addAll  Fix rownumbers and check box columns to be set to frozen  Fixing dependecy in bower.json  Fix for frozen columns and multisort  Small fix in multi sort when data type is local  Remove moot version property from bower.json  Fixes for focusField.  Fix Ukraine language code file to be set as ISO 639-1  Small fix in class definition  Fix multiple select in case of add record in form edit.  Fix position of the select template in search dialog  Fix saving the group headers when we call it mopre than once  Fix Display correct the labels in pivot", 
            "title": "Fixes"
        }, 
        {
            "location": "/about/release-notes/#version-480-2015-03-20", 
            "text": "", 
            "title": "Version 4.8.0 (2015-03-20)"
        }, 
        {
            "location": "/about/release-notes/#additions-and-changes_3", 
            "text": "Adding support for AMD. View demo  Adding support for AMD in language files.  Introducing templating in Form edit module. View Demo  Adding scrollPopUp to appear a popup with page information when virtual scrolling is on. Also added top offset to controll the appearing. View demo  Add a methods saveState which save the grid state when the option storeNavOptions is set to true in grid option. method uses localStorage. View demo  Add method loadState to restore the previous saved state with saveState.  Added searchTree grid when we have a local data. View Demo  Added a option cacheUrlData in colModel editoptions,which caches the data from dataUrl. This very usefull in search fileter and inline edit in order to prevent too much server calls. View demo  Added a new grid parameter \u2013 regional \u2013 two letter code which correspond to the code in grid.locale-xx.js. To load a language file different from English (default) in the grid this parameter should be set.  Added method setRegional to change the language on the fly. The method uses sessionStorage. View demo  Added ui.jqgrid-bootstrap.css as a separate css in order to have good grid in boostrap. View demo  tabletogrid() function is no more supported.The module is moved into the plugins directory  Added WCAG AA related ids and headers  Code optimization in editGridRow  IE versions  = 8 are no more supported.  Added parameter storeNavOptions to store the nav options in the grid options. The parameter is used in navGrid and if true the options are saved as grid parameters.  Adding UI classes to jQuery UI search dialog. Removing some css rules and adding new for the search filter dialog  Changes in GridUnload and GridDestroy. In previous case we never can destroy the grid object. The function are called different way \u2013 i.e they are a jgrid namespaced  Internal module changes and function move.  inlineNav can be called without to call first navGrid.  Added second parameter in getGridParam \u2013 module to query the certain module parameters.  Now it is possible to get the parameter of the navigator using jQuery data \u2013 \u2026jqGrid(\u2018getGridParam\u2019,name,\u2019navGrid\u2019);  Add ignoreCasde default to true.  Added a option in getFullTreeNode to expand the returned result  Addeed a option in getRootNodes to return the root nodes of the current grid data.  Added second param in getRowData \u2013 usedata. If set to true the current view is returned from data array (if any) and not from the html table  TreeGrid now support local data  Code optimizations in inlineNav when restoreAfterselect is true  Removing the non utf language files  Language file structure changes to support more lang at the same time and change it easy  Adding missed saving messages in language files  Drop the LGPL JsonXml.js from jqGrid and replace the code with our own. Created grid.utils.js  Moving jqGridImport to $.jgrid namespace  Add/remove classes ui-sg-collapsed/ui-sg-expanded in subgrid row to check if it is expanded or collapsed  Add class widget-content to pager select box  Add scrollLeftOffset to controll dynamically the appearance of the scroll dialog information  Changes in CSS to make the grid to look modern", 
            "title": "Additions and Changes"
        }, 
        {
            "location": "/about/release-notes/#fixes_1", 
            "text": "Fix for possible duplicated IDs in the search input boxes  Removed faulty role=\u201drow\u201d on pager  Removing duplicate code. Moving template in base grid deleting the format function and replace it with template  Small fixes and support for bootstrap via jQuery UI Bootstrap  Fix saving the data row in inline edit in case not a reloading is lunched.  Fix subGridBeforeExpand event should be executed independed of the reloadOnExpand option  Fixes for pager and toppager  Fix bug in searching when data is local and the field is defined as formatter data with srcformat and newformat.  Fixes in clearBeforeUnload.  Fix sortTreeGrid in case a local serch is performed.  Fixed collapsing of expandable row if this row is dragging in sortable table  Fix for beforeselectrow in inline navigator.  Fixes in addJSONData, addXmlData in IE when used firstChild  Fix in showFilter calling parameters  Fix \u201cmultiple:true\u201d might work unexpectedly  Fix in case grouping and subgrid to not expand subgrid rows when they are not expanded  Fix loading the default lang according to the new lang changes", 
            "title": "Fixes"
        }, 
        {
            "location": "/about/release-notes/#upgrade", 
            "text": "The ui.jqgrid.css file should be replaced with the last one.  Language files (grid.locale-xx.js) should be replaced with the last one. If this is not performed a error will appear and grid will not be build.  The method GridUnload \u2013 i.e $(\u201c#grid\u201d).jqGrid(\u2018GridUnload\u2019) does not have effect.  Replace the old with the new one $.jgrid.gridUnload(\u2018#jqGridId\u2019); where jqGridId is the id of the grid  The method GridDestroy \u2013 i.e $(\u201c#grid\u201d).jqGrid(\u2018GridDestroy\u2019) does not have effect.  Replace the old with the new one $.jgrid.gridDestroy(\u2018#jqGridId\u2019); where jqGridId is the id of the grid  The method jqGridImport \u2013 i.e $(\u201c#grid\u201d).jqGrid(\u2018jqGridImport\u2019,options) does not have effect.  Replace the old with the new one $.jgrid.jqGridImport(\u2018#jqGridId\u2019, options); where jqGridId is the id of the grid  The $.jgrid.defaults property is unchanged and it is possible to use $.extend($.jgrid.defaults, {\u2026});   All other parameter from the language file should be changed this way: \nSuppose the current language file is English, then extending the edit parameters should be replaced from       $ . extend ( $ . jgrid . edit ,   { \u2026 }); \n\n     to \n\n     $ . extend ( $ . jgrid . regional [ \u2018 en \u2019 ]. edit ,   { \u2026 });   The same apply for all other parameters in language file. \nTo load your own language file you will need to setup the regional parameter in the grid. \nLet suppose that default language file should be grid.locale-cn.js, then in grid it is needed to do this:       $ ( #jqGrid ). jqGrid ({ \n     ... \n     regional   :   cn , \n     ... \n     });", 
            "title": "Upgrade"
        }, 
        {
            "location": "/about/license/", 
            "text": "license", 
            "title": "License"
        }
    ]
}